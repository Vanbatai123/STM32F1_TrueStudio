
I2C_HAL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002130  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  080022b8  080022b8  000122b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080022f4  080022f4  000122f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080022fc  080022fc  000122fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002300  08002300  00012300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000000c  20000000  08002304  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  8 .bss          000000ec  2000000c  2000000c  0002000c  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  200000f8  200000f8  0002000c  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000e158  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001cbc  00000000  00000000  0002e194  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    000041dc  00000000  00000000  0002fe50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000598  00000000  00000000  00034030  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000900  00000000  00000000  000345c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00003e6f  00000000  00000000  00034ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000028e0  00000000  00000000  00038d37  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  0003b617  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000fac  00000000  00000000  0003b694  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080022a0 	.word	0x080022a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080022a0 	.word	0x080022a0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b97a 	b.w	80004d4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	468c      	mov	ip, r1
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	9e08      	ldr	r6, [sp, #32]
 8000204:	2b00      	cmp	r3, #0
 8000206:	d151      	bne.n	80002ac <__udivmoddi4+0xb4>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d96d      	bls.n	80002ea <__udivmoddi4+0xf2>
 800020e:	fab2 fe82 	clz	lr, r2
 8000212:	f1be 0f00 	cmp.w	lr, #0
 8000216:	d00b      	beq.n	8000230 <__udivmoddi4+0x38>
 8000218:	f1ce 0c20 	rsb	ip, lr, #32
 800021c:	fa01 f50e 	lsl.w	r5, r1, lr
 8000220:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000224:	fa02 f70e 	lsl.w	r7, r2, lr
 8000228:	ea4c 0c05 	orr.w	ip, ip, r5
 800022c:	fa00 f40e 	lsl.w	r4, r0, lr
 8000230:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000234:	0c25      	lsrs	r5, r4, #16
 8000236:	fbbc f8fa 	udiv	r8, ip, sl
 800023a:	fa1f f987 	uxth.w	r9, r7
 800023e:	fb0a cc18 	mls	ip, sl, r8, ip
 8000242:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000246:	fb08 f309 	mul.w	r3, r8, r9
 800024a:	42ab      	cmp	r3, r5
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x6c>
 800024e:	19ed      	adds	r5, r5, r7
 8000250:	f108 32ff 	add.w	r2, r8, #4294967295
 8000254:	f080 8123 	bcs.w	800049e <__udivmoddi4+0x2a6>
 8000258:	42ab      	cmp	r3, r5
 800025a:	f240 8120 	bls.w	800049e <__udivmoddi4+0x2a6>
 800025e:	f1a8 0802 	sub.w	r8, r8, #2
 8000262:	443d      	add	r5, r7
 8000264:	1aed      	subs	r5, r5, r3
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb5 f0fa 	udiv	r0, r5, sl
 800026c:	fb0a 5510 	mls	r5, sl, r0, r5
 8000270:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000274:	fb00 f909 	mul.w	r9, r0, r9
 8000278:	45a1      	cmp	r9, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x98>
 800027c:	19e4      	adds	r4, r4, r7
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 810a 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000286:	45a1      	cmp	r9, r4
 8000288:	f240 8107 	bls.w	800049a <__udivmoddi4+0x2a2>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	eba4 0409 	sub.w	r4, r4, r9
 8000294:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000298:	2100      	movs	r1, #0
 800029a:	2e00      	cmp	r6, #0
 800029c:	d061      	beq.n	8000362 <__udivmoddi4+0x16a>
 800029e:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a2:	2300      	movs	r3, #0
 80002a4:	6034      	str	r4, [r6, #0]
 80002a6:	6073      	str	r3, [r6, #4]
 80002a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0xc8>
 80002b0:	2e00      	cmp	r6, #0
 80002b2:	d054      	beq.n	800035e <__udivmoddi4+0x166>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e886 0021 	stmia.w	r6, {r0, r5}
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	f040 808e 	bne.w	80003e6 <__udivmoddi4+0x1ee>
 80002ca:	42ab      	cmp	r3, r5
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xdc>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2d0>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb65 0503 	sbc.w	r5, r5, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	46ac      	mov	ip, r5
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d03f      	beq.n	8000362 <__udivmoddi4+0x16a>
 80002e2:	e886 1010 	stmia.w	r6, {r4, ip}
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b912      	cbnz	r2, 80002f2 <__udivmoddi4+0xfa>
 80002ec:	2701      	movs	r7, #1
 80002ee:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f2:	fab7 fe87 	clz	lr, r7
 80002f6:	f1be 0f00 	cmp.w	lr, #0
 80002fa:	d134      	bne.n	8000366 <__udivmoddi4+0x16e>
 80002fc:	1beb      	subs	r3, r5, r7
 80002fe:	0c3a      	lsrs	r2, r7, #16
 8000300:	fa1f fc87 	uxth.w	ip, r7
 8000304:	2101      	movs	r1, #1
 8000306:	fbb3 f8f2 	udiv	r8, r3, r2
 800030a:	0c25      	lsrs	r5, r4, #16
 800030c:	fb02 3318 	mls	r3, r2, r8, r3
 8000310:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000314:	fb0c f308 	mul.w	r3, ip, r8
 8000318:	42ab      	cmp	r3, r5
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x134>
 800031c:	19ed      	adds	r5, r5, r7
 800031e:	f108 30ff 	add.w	r0, r8, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x132>
 8000324:	42ab      	cmp	r3, r5
 8000326:	f200 80d1 	bhi.w	80004cc <__udivmoddi4+0x2d4>
 800032a:	4680      	mov	r8, r0
 800032c:	1aed      	subs	r5, r5, r3
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb5 f0f2 	udiv	r0, r5, r2
 8000334:	fb02 5510 	mls	r5, r2, r0, r5
 8000338:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 800033c:	fb0c fc00 	mul.w	ip, ip, r0
 8000340:	45a4      	cmp	ip, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x15c>
 8000344:	19e4      	adds	r4, r4, r7
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x15a>
 800034c:	45a4      	cmp	ip, r4
 800034e:	f200 80b8 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 040c 	sub.w	r4, r4, ip
 8000358:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800035c:	e79d      	b.n	800029a <__udivmoddi4+0xa2>
 800035e:	4631      	mov	r1, r6
 8000360:	4630      	mov	r0, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	f1ce 0420 	rsb	r4, lr, #32
 800036a:	fa05 f30e 	lsl.w	r3, r5, lr
 800036e:	fa07 f70e 	lsl.w	r7, r7, lr
 8000372:	fa20 f804 	lsr.w	r8, r0, r4
 8000376:	0c3a      	lsrs	r2, r7, #16
 8000378:	fa25 f404 	lsr.w	r4, r5, r4
 800037c:	ea48 0803 	orr.w	r8, r8, r3
 8000380:	fbb4 f1f2 	udiv	r1, r4, r2
 8000384:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000388:	fb02 4411 	mls	r4, r2, r1, r4
 800038c:	fa1f fc87 	uxth.w	ip, r7
 8000390:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000394:	fb01 f30c 	mul.w	r3, r1, ip
 8000398:	42ab      	cmp	r3, r5
 800039a:	fa00 f40e 	lsl.w	r4, r0, lr
 800039e:	d909      	bls.n	80003b4 <__udivmoddi4+0x1bc>
 80003a0:	19ed      	adds	r5, r5, r7
 80003a2:	f101 30ff 	add.w	r0, r1, #4294967295
 80003a6:	f080 808a 	bcs.w	80004be <__udivmoddi4+0x2c6>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	f240 8087 	bls.w	80004be <__udivmoddi4+0x2c6>
 80003b0:	3902      	subs	r1, #2
 80003b2:	443d      	add	r5, r7
 80003b4:	1aeb      	subs	r3, r5, r3
 80003b6:	fa1f f588 	uxth.w	r5, r8
 80003ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80003be:	fb02 3310 	mls	r3, r2, r0, r3
 80003c2:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003c6:	fb00 f30c 	mul.w	r3, r0, ip
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x1e6>
 80003ce:	19ed      	adds	r5, r5, r7
 80003d0:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d4:	d26f      	bcs.n	80004b6 <__udivmoddi4+0x2be>
 80003d6:	42ab      	cmp	r3, r5
 80003d8:	d96d      	bls.n	80004b6 <__udivmoddi4+0x2be>
 80003da:	3802      	subs	r0, #2
 80003dc:	443d      	add	r5, r7
 80003de:	1aeb      	subs	r3, r5, r3
 80003e0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e4:	e78f      	b.n	8000306 <__udivmoddi4+0x10e>
 80003e6:	f1c1 0720 	rsb	r7, r1, #32
 80003ea:	fa22 f807 	lsr.w	r8, r2, r7
 80003ee:	408b      	lsls	r3, r1
 80003f0:	fa05 f401 	lsl.w	r4, r5, r1
 80003f4:	ea48 0303 	orr.w	r3, r8, r3
 80003f8:	fa20 fe07 	lsr.w	lr, r0, r7
 80003fc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000400:	40fd      	lsrs	r5, r7
 8000402:	ea4e 0e04 	orr.w	lr, lr, r4
 8000406:	fbb5 f9fc 	udiv	r9, r5, ip
 800040a:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800040e:	fb0c 5519 	mls	r5, ip, r9, r5
 8000412:	fa1f f883 	uxth.w	r8, r3
 8000416:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041a:	fb09 f408 	mul.w	r4, r9, r8
 800041e:	42ac      	cmp	r4, r5
 8000420:	fa02 f201 	lsl.w	r2, r2, r1
 8000424:	fa00 fa01 	lsl.w	sl, r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x244>
 800042a:	18ed      	adds	r5, r5, r3
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d243      	bcs.n	80004ba <__udivmoddi4+0x2c2>
 8000432:	42ac      	cmp	r4, r5
 8000434:	d941      	bls.n	80004ba <__udivmoddi4+0x2c2>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	441d      	add	r5, r3
 800043c:	1b2d      	subs	r5, r5, r4
 800043e:	fa1f fe8e 	uxth.w	lr, lr
 8000442:	fbb5 f0fc 	udiv	r0, r5, ip
 8000446:	fb0c 5510 	mls	r5, ip, r0, r5
 800044a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45a0      	cmp	r8, r4
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x26e>
 8000456:	18e4      	adds	r4, r4, r3
 8000458:	f100 35ff 	add.w	r5, r0, #4294967295
 800045c:	d229      	bcs.n	80004b2 <__udivmoddi4+0x2ba>
 800045e:	45a0      	cmp	r8, r4
 8000460:	d927      	bls.n	80004b2 <__udivmoddi4+0x2ba>
 8000462:	3802      	subs	r0, #2
 8000464:	441c      	add	r4, r3
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba4 0408 	sub.w	r4, r4, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454c      	cmp	r4, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	464d      	mov	r5, r9
 8000478:	d315      	bcc.n	80004a6 <__udivmoddi4+0x2ae>
 800047a:	d012      	beq.n	80004a2 <__udivmoddi4+0x2aa>
 800047c:	b156      	cbz	r6, 8000494 <__udivmoddi4+0x29c>
 800047e:	ebba 030e 	subs.w	r3, sl, lr
 8000482:	eb64 0405 	sbc.w	r4, r4, r5
 8000486:	fa04 f707 	lsl.w	r7, r4, r7
 800048a:	40cb      	lsrs	r3, r1
 800048c:	431f      	orrs	r7, r3
 800048e:	40cc      	lsrs	r4, r1
 8000490:	6037      	str	r7, [r6, #0]
 8000492:	6074      	str	r4, [r6, #4]
 8000494:	2100      	movs	r1, #0
 8000496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049a:	4618      	mov	r0, r3
 800049c:	e6f8      	b.n	8000290 <__udivmoddi4+0x98>
 800049e:	4690      	mov	r8, r2
 80004a0:	e6e0      	b.n	8000264 <__udivmoddi4+0x6c>
 80004a2:	45c2      	cmp	sl, r8
 80004a4:	d2ea      	bcs.n	800047c <__udivmoddi4+0x284>
 80004a6:	ebb8 0e02 	subs.w	lr, r8, r2
 80004aa:	eb69 0503 	sbc.w	r5, r9, r3
 80004ae:	3801      	subs	r0, #1
 80004b0:	e7e4      	b.n	800047c <__udivmoddi4+0x284>
 80004b2:	4628      	mov	r0, r5
 80004b4:	e7d7      	b.n	8000466 <__udivmoddi4+0x26e>
 80004b6:	4640      	mov	r0, r8
 80004b8:	e791      	b.n	80003de <__udivmoddi4+0x1e6>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e7be      	b.n	800043c <__udivmoddi4+0x244>
 80004be:	4601      	mov	r1, r0
 80004c0:	e778      	b.n	80003b4 <__udivmoddi4+0x1bc>
 80004c2:	3802      	subs	r0, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	e745      	b.n	8000354 <__udivmoddi4+0x15c>
 80004c8:	4608      	mov	r0, r1
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xe6>
 80004cc:	f1a8 0802 	sub.w	r8, r8, #2
 80004d0:	443d      	add	r5, r7
 80004d2:	e72b      	b.n	800032c <__udivmoddi4+0x134>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <HAL_InitTick+0x3c>)
 80004dc:	4b0e      	ldr	r3, [pc, #56]	; (8000518 <HAL_InitTick+0x40>)
{
 80004de:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004e0:	7818      	ldrb	r0, [r3, #0]
 80004e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e6:	fbb3 f3f0 	udiv	r3, r3, r0
 80004ea:	6810      	ldr	r0, [r2, #0]
 80004ec:	fbb0 f0f3 	udiv	r0, r0, r3
 80004f0:	f000 f8a8 	bl	8000644 <HAL_SYSTICK_Config>
 80004f4:	4604      	mov	r4, r0
 80004f6:	b958      	cbnz	r0, 8000510 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004f8:	2d0f      	cmp	r5, #15
 80004fa:	d809      	bhi.n	8000510 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004fc:	4602      	mov	r2, r0
 80004fe:	4629      	mov	r1, r5
 8000500:	f04f 30ff 	mov.w	r0, #4294967295
 8000504:	f000 f85e 	bl	80005c4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000508:	4b04      	ldr	r3, [pc, #16]	; (800051c <HAL_InitTick+0x44>)
 800050a:	4620      	mov	r0, r4
 800050c:	601d      	str	r5, [r3, #0]
 800050e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000510:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000512:	bd38      	pop	{r3, r4, r5, pc}
 8000514:	20000008 	.word	0x20000008
 8000518:	20000000 	.word	0x20000000
 800051c:	20000004 	.word	0x20000004

08000520 <HAL_Init>:
{
 8000520:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000522:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_Init+0x30>)
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800052a:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000532:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000534:	681a      	ldr	r2, [r3, #0]
 8000536:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800053a:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 f82f 	bl	80005a0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ffc8 	bl	80004d8 <HAL_InitTick>
  HAL_MspInit();
 8000548:	f001 fd7e 	bl	8002048 <HAL_MspInit>
}
 800054c:	2000      	movs	r0, #0
 800054e:	bd08      	pop	{r3, pc}
 8000550:	40023c00 	.word	0x40023c00

08000554 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000554:	4a03      	ldr	r2, [pc, #12]	; (8000564 <HAL_IncTick+0x10>)
 8000556:	4b04      	ldr	r3, [pc, #16]	; (8000568 <HAL_IncTick+0x14>)
 8000558:	6811      	ldr	r1, [r2, #0]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	440b      	add	r3, r1
 800055e:	6013      	str	r3, [r2, #0]
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	20000028 	.word	0x20000028
 8000568:	20000000 	.word	0x20000000

0800056c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800056c:	4b01      	ldr	r3, [pc, #4]	; (8000574 <HAL_GetTick+0x8>)
 800056e:	6818      	ldr	r0, [r3, #0]
}
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	20000028 	.word	0x20000028

08000578 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000578:	b538      	push	{r3, r4, r5, lr}
 800057a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800057c:	f7ff fff6 	bl	800056c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000580:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000582:	bf1c      	itt	ne
 8000584:	4b05      	ldrne	r3, [pc, #20]	; (800059c <HAL_Delay+0x24>)
 8000586:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000588:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800058a:	bf18      	it	ne
 800058c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800058e:	f7ff ffed 	bl	800056c <HAL_GetTick>
 8000592:	1b40      	subs	r0, r0, r5
 8000594:	4284      	cmp	r4, r0
 8000596:	d8fa      	bhi.n	800058e <HAL_Delay+0x16>
  {
  }
}
 8000598:	bd38      	pop	{r3, r4, r5, pc}
 800059a:	bf00      	nop
 800059c:	20000000 	.word	0x20000000

080005a0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005a0:	4a07      	ldr	r2, [pc, #28]	; (80005c0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80005a2:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005a4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80005a8:	041b      	lsls	r3, r3, #16
 80005aa:	0c1b      	lsrs	r3, r3, #16
 80005ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80005b0:	0200      	lsls	r0, r0, #8
 80005b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005b6:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 80005ba:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80005bc:	60d3      	str	r3, [r2, #12]
 80005be:	4770      	bx	lr
 80005c0:	e000ed00 	.word	0xe000ed00

080005c4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80005c4:	4b17      	ldr	r3, [pc, #92]	; (8000624 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005c6:	b530      	push	{r4, r5, lr}
 80005c8:	68dc      	ldr	r4, [r3, #12]
 80005ca:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ce:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005d2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	bf28      	it	cs
 80005d8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005da:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005dc:	f04f 0501 	mov.w	r5, #1
 80005e0:	fa05 f303 	lsl.w	r3, r5, r3
 80005e4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e8:	bf8c      	ite	hi
 80005ea:	3c03      	subhi	r4, #3
 80005ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005ee:	4019      	ands	r1, r3
 80005f0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005f2:	fa05 f404 	lsl.w	r4, r5, r4
 80005f6:	3c01      	subs	r4, #1
 80005f8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80005fa:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005fc:	ea42 0201 	orr.w	r2, r2, r1
 8000600:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000604:	bfaf      	iteee	ge
 8000606:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800060a:	f000 000f 	andlt.w	r0, r0, #15
 800060e:	4b06      	ldrlt	r3, [pc, #24]	; (8000628 <HAL_NVIC_SetPriority+0x64>)
 8000610:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000612:	bfa5      	ittet	ge
 8000614:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000618:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800061c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000620:	bd30      	pop	{r4, r5, pc}
 8000622:	bf00      	nop
 8000624:	e000ed00 	.word	0xe000ed00
 8000628:	e000ed14 	.word	0xe000ed14

0800062c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800062c:	0942      	lsrs	r2, r0, #5
 800062e:	2301      	movs	r3, #1
 8000630:	f000 001f 	and.w	r0, r0, #31
 8000634:	fa03 f000 	lsl.w	r0, r3, r0
 8000638:	4b01      	ldr	r3, [pc, #4]	; (8000640 <HAL_NVIC_EnableIRQ+0x14>)
 800063a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800063e:	4770      	bx	lr
 8000640:	e000e100 	.word	0xe000e100

08000644 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000644:	3801      	subs	r0, #1
 8000646:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800064a:	d20a      	bcs.n	8000662 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800064e:	4a07      	ldr	r2, [pc, #28]	; (800066c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000650:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000652:	21f0      	movs	r1, #240	; 0xf0
 8000654:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000658:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800065c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000662:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	e000e010 	.word	0xe000e010
 800066c:	e000ed00 	.word	0xe000ed00

08000670 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000670:	4b04      	ldr	r3, [pc, #16]	; (8000684 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000672:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8000674:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8000676:	bf0c      	ite	eq
 8000678:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 800067c:	f022 0204 	bicne.w	r2, r2, #4
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	4770      	bx	lr
 8000684:	e000e010 	.word	0xe000e010

08000688 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000688:	4770      	bx	lr

0800068a <HAL_SYSTICK_IRQHandler>:
{
 800068a:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800068c:	f7ff fffc 	bl	8000688 <HAL_SYSTICK_Callback>
 8000690:	bd08      	pop	{r3, pc}
	...

08000694 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8000694:	6803      	ldr	r3, [r0, #0]
 8000696:	b2da      	uxtb	r2, r3
 8000698:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800069c:	f023 0303 	bic.w	r3, r3, #3
 80006a0:	2118      	movs	r1, #24
 80006a2:	3a10      	subs	r2, #16
 80006a4:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80006a8:	4904      	ldr	r1, [pc, #16]	; (80006bc <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 80006aa:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80006ac:	bf88      	it	hi
 80006ae:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80006b0:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80006b2:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80006b4:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 80006b6:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80006b8:	4770      	bx	lr
 80006ba:	bf00      	nop
 80006bc:	080022b8 	.word	0x080022b8

080006c0 <HAL_DMA_Init>:
{
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80006c4:	f7ff ff52 	bl	800056c <HAL_GetTick>
 80006c8:	4605      	mov	r5, r0
  if(hdma == NULL)
 80006ca:	2c00      	cmp	r4, #0
 80006cc:	d071      	beq.n	80007b2 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 80006ce:	2300      	movs	r3, #0
 80006d0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80006d4:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 80006d6:	2302      	movs	r3, #2
 80006d8:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 80006dc:	6813      	ldr	r3, [r2, #0]
 80006de:	f023 0301 	bic.w	r3, r3, #1
 80006e2:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80006e4:	6821      	ldr	r1, [r4, #0]
 80006e6:	680b      	ldr	r3, [r1, #0]
 80006e8:	07d8      	lsls	r0, r3, #31
 80006ea:	d43c      	bmi.n	8000766 <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 80006ec:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80006ee:	4d32      	ldr	r5, [pc, #200]	; (80007b8 <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80006f0:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80006f2:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80006f4:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80006f6:	68a3      	ldr	r3, [r4, #8]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	68e2      	ldr	r2, [r4, #12]
 80006fc:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80006fe:	6922      	ldr	r2, [r4, #16]
 8000700:	4313      	orrs	r3, r2
 8000702:	6962      	ldr	r2, [r4, #20]
 8000704:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000706:	69e2      	ldr	r2, [r4, #28]
 8000708:	4303      	orrs	r3, r0
 800070a:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 800070c:	6a22      	ldr	r2, [r4, #32]
 800070e:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000710:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000712:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000714:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000718:	bf01      	itttt	eq
 800071a:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 800071c:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 800071e:	4335      	orreq	r5, r6
 8000720:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8000722:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8000724:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000726:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000728:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 800072c:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000730:	d10b      	bne.n	800074a <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8000732:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000734:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8000736:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000738:	b13d      	cbz	r5, 800074a <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800073a:	b9f8      	cbnz	r0, 800077c <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 800073c:	2a01      	cmp	r2, #1
 800073e:	d02d      	beq.n	800079c <HAL_DMA_Init+0xdc>
 8000740:	d301      	bcc.n	8000746 <HAL_DMA_Init+0x86>
 8000742:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8000744:	d101      	bne.n	800074a <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8000746:	01ea      	lsls	r2, r5, #7
 8000748:	d42b      	bmi.n	80007a2 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 800074a:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800074c:	4620      	mov	r0, r4
 800074e:	f7ff ffa1 	bl	8000694 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000752:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8000754:	233f      	movs	r3, #63	; 0x3f
 8000756:	4093      	lsls	r3, r2
 8000758:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800075a:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 800075c:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800075e:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8000760:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8000764:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000766:	f7ff ff01 	bl	800056c <HAL_GetTick>
 800076a:	1b40      	subs	r0, r0, r5
 800076c:	2805      	cmp	r0, #5
 800076e:	d9b9      	bls.n	80006e4 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000770:	2320      	movs	r3, #32
 8000772:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000774:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8000776:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 800077a:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800077c:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8000780:	d113      	bne.n	80007aa <HAL_DMA_Init+0xea>
    switch (tmp)
 8000782:	2a03      	cmp	r2, #3
 8000784:	d8e1      	bhi.n	800074a <HAL_DMA_Init+0x8a>
 8000786:	a001      	add	r0, pc, #4	; (adr r0, 800078c <HAL_DMA_Init+0xcc>)
 8000788:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 800078c:	080007a3 	.word	0x080007a3
 8000790:	08000747 	.word	0x08000747
 8000794:	080007a3 	.word	0x080007a3
 8000798:	0800079d 	.word	0x0800079d
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800079c:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80007a0:	d1d3      	bne.n	800074a <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80007a2:	2340      	movs	r3, #64	; 0x40
 80007a4:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 80007a6:	2001      	movs	r0, #1
 80007a8:	e7e5      	b.n	8000776 <HAL_DMA_Init+0xb6>
    switch (tmp)
 80007aa:	2a02      	cmp	r2, #2
 80007ac:	d9f9      	bls.n	80007a2 <HAL_DMA_Init+0xe2>
 80007ae:	2a03      	cmp	r2, #3
 80007b0:	e7c8      	b.n	8000744 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 80007b2:	2001      	movs	r0, #1
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	bf00      	nop
 80007b8:	f010803f 	.word	0xf010803f

080007bc <HAL_DMA_Start_IT>:
{
 80007bc:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hdma);
 80007be:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 80007c2:	2c01      	cmp	r4, #1
 80007c4:	d036      	beq.n	8000834 <HAL_DMA_Start_IT+0x78>
 80007c6:	2401      	movs	r4, #1
 80007c8:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 80007cc:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80007d0:	6d86      	ldr	r6, [r0, #88]	; 0x58
  if(HAL_DMA_STATE_READY == hdma->State)
 80007d2:	2c01      	cmp	r4, #1
 80007d4:	f04f 0500 	mov.w	r5, #0
 80007d8:	f04f 0402 	mov.w	r4, #2
 80007dc:	d128      	bne.n	8000830 <HAL_DMA_Start_IT+0x74>
    hdma->State = HAL_DMA_STATE_BUSY;
 80007de:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80007e2:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80007e4:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80007e6:	6825      	ldr	r5, [r4, #0]
 80007e8:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
 80007ec:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 80007ee:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80007f0:	6883      	ldr	r3, [r0, #8]
 80007f2:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 80007f4:	bf0e      	itee	eq
 80007f6:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 80007f8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 80007fa:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80007fc:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 80007fe:	bf08      	it	eq
 8000800:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000802:	233f      	movs	r3, #63	; 0x3f
 8000804:	4093      	lsls	r3, r2
 8000806:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8000808:	6823      	ldr	r3, [r4, #0]
 800080a:	f043 0316 	orr.w	r3, r3, #22
 800080e:	6023      	str	r3, [r4, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8000810:	6963      	ldr	r3, [r4, #20]
 8000812:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000816:	6163      	str	r3, [r4, #20]
    if(hdma->XferHalfCpltCallback != NULL)
 8000818:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800081a:	b11b      	cbz	r3, 8000824 <HAL_DMA_Start_IT+0x68>
      hdma->Instance->CR  |= DMA_IT_HT;
 800081c:	6823      	ldr	r3, [r4, #0]
 800081e:	f043 0308 	orr.w	r3, r3, #8
 8000822:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000824:	6823      	ldr	r3, [r4, #0]
 8000826:	f043 0301 	orr.w	r3, r3, #1
 800082a:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800082c:	2000      	movs	r0, #0
 800082e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hdma);	  
 8000830:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  __HAL_LOCK(hdma);
 8000834:	2002      	movs	r0, #2
}
 8000836:	bd70      	pop	{r4, r5, r6, pc}

08000838 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000838:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 800083c:	2b02      	cmp	r3, #2
 800083e:	d003      	beq.n	8000848 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000840:	2380      	movs	r3, #128	; 0x80
 8000842:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8000844:	2001      	movs	r0, #1
 8000846:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8000848:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 800084a:	2305      	movs	r3, #5
 800084c:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8000850:	6813      	ldr	r3, [r2, #0]
 8000852:	f023 0301 	bic.w	r3, r3, #1
 8000856:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8000858:	2000      	movs	r0, #0
}
 800085a:	4770      	bx	lr

0800085c <HAL_DMA_IRQHandler>:
{
 800085c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __IO uint32_t count = 0U;
 800085e:	2300      	movs	r3, #0
 8000860:	9301      	str	r3, [sp, #4]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000862:	4b5a      	ldr	r3, [pc, #360]	; (80009cc <HAL_DMA_IRQHandler+0x170>)
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000864:	6d85      	ldr	r5, [r0, #88]	; 0x58
  uint32_t timeout = SystemCoreClock / 9600U;
 8000866:	681f      	ldr	r7, [r3, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000868:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 800086a:	682e      	ldr	r6, [r5, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800086c:	2208      	movs	r2, #8
 800086e:	409a      	lsls	r2, r3
 8000870:	4216      	tst	r6, r2
{
 8000872:	4604      	mov	r4, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8000874:	d00c      	beq.n	8000890 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8000876:	6801      	ldr	r1, [r0, #0]
 8000878:	6808      	ldr	r0, [r1, #0]
 800087a:	0740      	lsls	r0, r0, #29
 800087c:	d508      	bpl.n	8000890 <HAL_DMA_IRQHandler+0x34>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800087e:	6808      	ldr	r0, [r1, #0]
 8000880:	f020 0004 	bic.w	r0, r0, #4
 8000884:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8000886:	60aa      	str	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8000888:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800088a:	f042 0201 	orr.w	r2, r2, #1
 800088e:	6562      	str	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8000890:	2201      	movs	r2, #1
 8000892:	409a      	lsls	r2, r3
 8000894:	4216      	tst	r6, r2
 8000896:	d008      	beq.n	80008aa <HAL_DMA_IRQHandler+0x4e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8000898:	6821      	ldr	r1, [r4, #0]
 800089a:	6949      	ldr	r1, [r1, #20]
 800089c:	0609      	lsls	r1, r1, #24
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800089e:	bf41      	itttt	mi
 80008a0:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80008a2:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80008a4:	f042 0202 	orrmi.w	r2, r2, #2
 80008a8:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80008aa:	2204      	movs	r2, #4
 80008ac:	409a      	lsls	r2, r3
 80008ae:	4216      	tst	r6, r2
 80008b0:	d008      	beq.n	80008c4 <HAL_DMA_IRQHandler+0x68>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80008b2:	6821      	ldr	r1, [r4, #0]
 80008b4:	6809      	ldr	r1, [r1, #0]
 80008b6:	0788      	lsls	r0, r1, #30
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80008b8:	bf41      	itttt	mi
 80008ba:	60aa      	strmi	r2, [r5, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80008bc:	6d62      	ldrmi	r2, [r4, #84]	; 0x54
 80008be:	f042 0204 	orrmi.w	r2, r2, #4
 80008c2:	6562      	strmi	r2, [r4, #84]	; 0x54
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80008c4:	2210      	movs	r2, #16
 80008c6:	409a      	lsls	r2, r3
 80008c8:	4216      	tst	r6, r2
 80008ca:	d010      	beq.n	80008ee <HAL_DMA_IRQHandler+0x92>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80008cc:	6823      	ldr	r3, [r4, #0]
 80008ce:	6819      	ldr	r1, [r3, #0]
 80008d0:	0709      	lsls	r1, r1, #28
 80008d2:	d50c      	bpl.n	80008ee <HAL_DMA_IRQHandler+0x92>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80008d4:	60aa      	str	r2, [r5, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	0350      	lsls	r0, r2, #13
 80008da:	d535      	bpl.n	8000948 <HAL_DMA_IRQHandler+0xec>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	0319      	lsls	r1, r3, #12
 80008e0:	d401      	bmi.n	80008e6 <HAL_DMA_IRQHandler+0x8a>
        if(hdma->XferHalfCpltCallback != NULL)
 80008e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80008e4:	e000      	b.n	80008e8 <HAL_DMA_IRQHandler+0x8c>
          if(hdma->XferM1HalfCpltCallback != NULL)
 80008e6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
        if(hdma->XferHalfCpltCallback != NULL)
 80008e8:	b10b      	cbz	r3, 80008ee <HAL_DMA_IRQHandler+0x92>
          hdma->XferHalfCpltCallback(hdma);
 80008ea:	4620      	mov	r0, r4
 80008ec:	4798      	blx	r3
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80008ee:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80008f0:	2220      	movs	r2, #32
 80008f2:	408a      	lsls	r2, r1
 80008f4:	4216      	tst	r6, r2
 80008f6:	d038      	beq.n	800096a <HAL_DMA_IRQHandler+0x10e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80008f8:	6823      	ldr	r3, [r4, #0]
 80008fa:	6818      	ldr	r0, [r3, #0]
 80008fc:	06c6      	lsls	r6, r0, #27
 80008fe:	d534      	bpl.n	800096a <HAL_DMA_IRQHandler+0x10e>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8000900:	60aa      	str	r2, [r5, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8000902:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8000906:	2a05      	cmp	r2, #5
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000908:	681a      	ldr	r2, [r3, #0]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800090a:	d125      	bne.n	8000958 <HAL_DMA_IRQHandler+0xfc>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800090c:	f022 0216 	bic.w	r2, r2, #22
 8000910:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000912:	695a      	ldr	r2, [r3, #20]
 8000914:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000918:	615a      	str	r2, [r3, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800091a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800091c:	b90a      	cbnz	r2, 8000922 <HAL_DMA_IRQHandler+0xc6>
 800091e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000920:	b11a      	cbz	r2, 800092a <HAL_DMA_IRQHandler+0xce>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000922:	681a      	ldr	r2, [r3, #0]
 8000924:	f022 0208 	bic.w	r2, r2, #8
 8000928:	601a      	str	r2, [r3, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800092a:	233f      	movs	r3, #63	; 0x3f
 800092c:	408b      	lsls	r3, r1
 800092e:	60ab      	str	r3, [r5, #8]
        __HAL_UNLOCK(hdma);
 8000930:	2300      	movs	r3, #0
 8000932:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8000936:	2301      	movs	r3, #1
 8000938:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 800093c:	6d23      	ldr	r3, [r4, #80]	; 0x50
    if(hdma->XferErrorCallback != NULL)
 800093e:	b10b      	cbz	r3, 8000944 <HAL_DMA_IRQHandler+0xe8>
      hdma->XferErrorCallback(hdma);
 8000940:	4620      	mov	r0, r4
 8000942:	4798      	blx	r3
}
 8000944:	b003      	add	sp, #12
 8000946:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	05d2      	lsls	r2, r2, #23
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800094c:	bf5e      	ittt	pl
 800094e:	681a      	ldrpl	r2, [r3, #0]
 8000950:	f022 0208 	bicpl.w	r2, r2, #8
 8000954:	601a      	strpl	r2, [r3, #0]
 8000956:	e7c4      	b.n	80008e2 <HAL_DMA_IRQHandler+0x86>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8000958:	0350      	lsls	r0, r2, #13
 800095a:	d528      	bpl.n	80009ae <HAL_DMA_IRQHandler+0x152>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	0319      	lsls	r1, r3, #12
 8000960:	d432      	bmi.n	80009c8 <HAL_DMA_IRQHandler+0x16c>
          if(hdma->XferM1CpltCallback != NULL)
 8000962:	6c63      	ldr	r3, [r4, #68]	; 0x44
        if(hdma->XferCpltCallback != NULL)
 8000964:	b10b      	cbz	r3, 800096a <HAL_DMA_IRQHandler+0x10e>
          hdma->XferCpltCallback(hdma);
 8000966:	4620      	mov	r0, r4
 8000968:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800096a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800096c:	2b00      	cmp	r3, #0
 800096e:	d0e9      	beq.n	8000944 <HAL_DMA_IRQHandler+0xe8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8000970:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000972:	07da      	lsls	r2, r3, #31
 8000974:	d519      	bpl.n	80009aa <HAL_DMA_IRQHandler+0x14e>
      hdma->State = HAL_DMA_STATE_ABORT;
 8000976:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8000978:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 800097a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 800097e:	6813      	ldr	r3, [r2, #0]
 8000980:	f023 0301 	bic.w	r3, r3, #1
 8000984:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8000986:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800098a:	fbb7 f7f3 	udiv	r7, r7, r3
        if (++count > timeout)
 800098e:	9b01      	ldr	r3, [sp, #4]
 8000990:	3301      	adds	r3, #1
 8000992:	429f      	cmp	r7, r3
 8000994:	9301      	str	r3, [sp, #4]
 8000996:	d302      	bcc.n	800099e <HAL_DMA_IRQHandler+0x142>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8000998:	6813      	ldr	r3, [r2, #0]
 800099a:	07db      	lsls	r3, r3, #31
 800099c:	d4f7      	bmi.n	800098e <HAL_DMA_IRQHandler+0x132>
      __HAL_UNLOCK(hdma);
 800099e:	2300      	movs	r3, #0
 80009a0:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 80009a4:	2301      	movs	r3, #1
 80009a6:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 80009aa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80009ac:	e7c7      	b.n	800093e <HAL_DMA_IRQHandler+0xe2>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	f412 7280 	ands.w	r2, r2, #256	; 0x100
 80009b4:	d108      	bne.n	80009c8 <HAL_DMA_IRQHandler+0x16c>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80009b6:	6819      	ldr	r1, [r3, #0]
 80009b8:	f021 0110 	bic.w	r1, r1, #16
 80009bc:	6019      	str	r1, [r3, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80009be:	2301      	movs	r3, #1
          __HAL_UNLOCK(hdma);
 80009c0:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 80009c4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        if(hdma->XferCpltCallback != NULL)
 80009c8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80009ca:	e7cb      	b.n	8000964 <HAL_DMA_IRQHandler+0x108>
 80009cc:	20000008 	.word	0x20000008

080009d0 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 80009d0:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 80009d2:	4770      	bx	lr

080009d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009d8:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009da:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009dc:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8000b8c <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009e0:	4a68      	ldr	r2, [pc, #416]	; (8000b84 <HAL_GPIO_Init+0x1b0>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009e2:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8000b90 <HAL_GPIO_Init+0x1bc>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009e6:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80009e8:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 80009ea:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009ee:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 80009f0:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80009f4:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 80009f8:	45b6      	cmp	lr, r6
 80009fa:	f040 80ae 	bne.w	8000b5a <HAL_GPIO_Init+0x186>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80009fe:	684c      	ldr	r4, [r1, #4]
 8000a00:	f024 0710 	bic.w	r7, r4, #16
 8000a04:	2f02      	cmp	r7, #2
 8000a06:	d116      	bne.n	8000a36 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8000a08:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8000a0c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a10:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8000a14:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000a18:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8000a1c:	f04f 0c0f 	mov.w	ip, #15
 8000a20:	fa0c fc0b 	lsl.w	ip, ip, fp
 8000a24:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000a28:	690d      	ldr	r5, [r1, #16]
 8000a2a:	fa05 f50b 	lsl.w	r5, r5, fp
 8000a2e:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 8000a32:	f8ca 5020 	str.w	r5, [sl, #32]
 8000a36:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a3a:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 8000a3c:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a40:	fa05 f50a 	lsl.w	r5, r5, sl
 8000a44:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a46:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000a4a:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a4e:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a52:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000a54:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a58:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000a5a:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a5e:	d811      	bhi.n	8000a84 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 8000a60:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000a62:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000a66:	68cf      	ldr	r7, [r1, #12]
 8000a68:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000a6c:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 8000a70:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8000a72:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000a74:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000a78:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000a7c:	409f      	lsls	r7, r3
 8000a7e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8000a82:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8000a84:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000a86:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000a88:	688f      	ldr	r7, [r1, #8]
 8000a8a:	fa07 f70a 	lsl.w	r7, r7, sl
 8000a8e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8000a90:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a92:	00e5      	lsls	r5, r4, #3
 8000a94:	d561      	bpl.n	8000b5a <HAL_GPIO_Init+0x186>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	f04f 0b00 	mov.w	fp, #0
 8000a9a:	f8cd b00c 	str.w	fp, [sp, #12]
 8000a9e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000aa2:	4d39      	ldr	r5, [pc, #228]	; (8000b88 <HAL_GPIO_Init+0x1b4>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa4:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8000aa8:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 8000aac:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8000ab0:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8000ab4:	9703      	str	r7, [sp, #12]
 8000ab6:	9f03      	ldr	r7, [sp, #12]
 8000ab8:	f023 0703 	bic.w	r7, r3, #3
 8000abc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000ac0:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ac4:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8000ac8:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000acc:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8000ad0:	f04f 0e0f 	mov.w	lr, #15
 8000ad4:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ad8:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000ada:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ade:	d043      	beq.n	8000b68 <HAL_GPIO_Init+0x194>
 8000ae0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ae4:	42a8      	cmp	r0, r5
 8000ae6:	d041      	beq.n	8000b6c <HAL_GPIO_Init+0x198>
 8000ae8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000aec:	42a8      	cmp	r0, r5
 8000aee:	d03f      	beq.n	8000b70 <HAL_GPIO_Init+0x19c>
 8000af0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000af4:	42a8      	cmp	r0, r5
 8000af6:	d03d      	beq.n	8000b74 <HAL_GPIO_Init+0x1a0>
 8000af8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000afc:	42a8      	cmp	r0, r5
 8000afe:	d03b      	beq.n	8000b78 <HAL_GPIO_Init+0x1a4>
 8000b00:	4548      	cmp	r0, r9
 8000b02:	d03b      	beq.n	8000b7c <HAL_GPIO_Init+0x1a8>
 8000b04:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8000b08:	42a8      	cmp	r0, r5
 8000b0a:	d039      	beq.n	8000b80 <HAL_GPIO_Init+0x1ac>
 8000b0c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000b10:	42a8      	cmp	r0, r5
 8000b12:	bf14      	ite	ne
 8000b14:	2508      	movne	r5, #8
 8000b16:	2507      	moveq	r5, #7
 8000b18:	fa05 f50c 	lsl.w	r5, r5, ip
 8000b1c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000b20:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 8000b22:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000b24:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b26:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000b2a:	bf0c      	ite	eq
 8000b2c:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b2e:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8000b30:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 8000b32:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b34:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000b38:	bf0c      	ite	eq
 8000b3a:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b3c:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8000b3e:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b40:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b42:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000b46:	bf0c      	ite	eq
 8000b48:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8000b4a:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 8000b4c:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 8000b4e:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b50:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000b52:	bf54      	ite	pl
 8000b54:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 8000b56:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 8000b58:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	2b10      	cmp	r3, #16
 8000b5e:	f47f af44 	bne.w	80009ea <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 8000b62:	b005      	add	sp, #20
 8000b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000b68:	465d      	mov	r5, fp
 8000b6a:	e7d5      	b.n	8000b18 <HAL_GPIO_Init+0x144>
 8000b6c:	2501      	movs	r5, #1
 8000b6e:	e7d3      	b.n	8000b18 <HAL_GPIO_Init+0x144>
 8000b70:	2502      	movs	r5, #2
 8000b72:	e7d1      	b.n	8000b18 <HAL_GPIO_Init+0x144>
 8000b74:	2503      	movs	r5, #3
 8000b76:	e7cf      	b.n	8000b18 <HAL_GPIO_Init+0x144>
 8000b78:	2504      	movs	r5, #4
 8000b7a:	e7cd      	b.n	8000b18 <HAL_GPIO_Init+0x144>
 8000b7c:	2505      	movs	r5, #5
 8000b7e:	e7cb      	b.n	8000b18 <HAL_GPIO_Init+0x144>
 8000b80:	2506      	movs	r5, #6
 8000b82:	e7c9      	b.n	8000b18 <HAL_GPIO_Init+0x144>
 8000b84:	40013c00 	.word	0x40013c00
 8000b88:	40020000 	.word	0x40020000
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40021400 	.word	0x40021400

08000b94 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b94:	b10a      	cbz	r2, 8000b9a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b96:	6181      	str	r1, [r0, #24]
 8000b98:	4770      	bx	lr
 8000b9a:	0409      	lsls	r1, r1, #16
 8000b9c:	e7fb      	b.n	8000b96 <HAL_GPIO_WritePin+0x2>

08000b9e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000b9e:	6802      	ldr	r2, [r0, #0]
 8000ba0:	6953      	ldr	r3, [r2, #20]
 8000ba2:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8000ba6:	d00d      	beq.n	8000bc4 <I2C_IsAcknowledgeFailed+0x26>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000ba8:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000bac:	6153      	str	r3, [r2, #20]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000bae:	2304      	movs	r3, #4
 8000bb0:	6403      	str	r3, [r0, #64]	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
    hi2c->State= HAL_I2C_STATE_READY;
 8000bb2:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	6303      	str	r3, [r0, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000bb8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    hi2c->State= HAL_I2C_STATE_READY;
 8000bbc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_ERROR;
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	4770      	bx	lr
  }
  return HAL_OK;
 8000bc4:	4618      	mov	r0, r3
}
 8000bc6:	4770      	bx	lr

08000bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8000bc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bcc:	4604      	mov	r4, r0
 8000bce:	4617      	mov	r7, r2
 8000bd0:	4699      	mov	r9, r3
  while(__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000bd2:	f3c1 4807 	ubfx	r8, r1, #16, #8
 8000bd6:	b28e      	uxth	r6, r1
 8000bd8:	6825      	ldr	r5, [r4, #0]
 8000bda:	f1b8 0f01 	cmp.w	r8, #1
 8000bde:	bf0c      	ite	eq
 8000be0:	696b      	ldreq	r3, [r5, #20]
 8000be2:	69ab      	ldrne	r3, [r5, #24]
 8000be4:	ea36 0303 	bics.w	r3, r6, r3
 8000be8:	bf14      	ite	ne
 8000bea:	2001      	movne	r0, #1
 8000bec:	2000      	moveq	r0, #0
 8000bee:	b908      	cbnz	r0, 8000bf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 8000bf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000bf4:	696b      	ldr	r3, [r5, #20]
 8000bf6:	055a      	lsls	r2, r3, #21
 8000bf8:	d512      	bpl.n	8000c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x58>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000bfa:	682b      	ldr	r3, [r5, #0]
 8000bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c00:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000c02:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000c06:	616b      	str	r3, [r5, #20]
      hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000c08:	2304      	movs	r3, #4
 8000c0a:	6423      	str	r3, [r4, #64]	; 0x40
      hi2c->State= HAL_I2C_STATE_READY;
 8000c0c:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	6323      	str	r3, [r4, #48]	; 0x30
      __HAL_UNLOCK(hi2c);
 8000c12:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->State= HAL_I2C_STATE_READY;
 8000c16:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      return HAL_ERROR;
 8000c1a:	2001      	movs	r0, #1
 8000c1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000c20:	1c7b      	adds	r3, r7, #1
 8000c22:	d0d9      	beq.n	8000bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000c24:	b94f      	cbnz	r7, 8000c3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x72>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000c26:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000c28:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000c2a:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000c2c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000c30:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        return HAL_TIMEOUT;
 8000c34:	2003      	movs	r0, #3
 8000c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000c3a:	f7ff fc97 	bl	800056c <HAL_GetTick>
 8000c3e:	eba0 0009 	sub.w	r0, r0, r9
 8000c42:	4287      	cmp	r7, r0
 8000c44:	d2c8      	bcs.n	8000bd8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8000c46:	e7ee      	b.n	8000c26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x5e>

08000c48 <I2C_WaitOnFlagUntilTimeout>:
{
 8000c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c4c:	9e08      	ldr	r6, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	4690      	mov	r8, r2
 8000c52:	461f      	mov	r7, r3
  while((__HAL_I2C_GET_FLAG(hi2c, Flag) ? SET : RESET) == Status) 
 8000c54:	f3c1 4907 	ubfx	r9, r1, #16, #8
 8000c58:	b28d      	uxth	r5, r1
 8000c5a:	6823      	ldr	r3, [r4, #0]
 8000c5c:	f1b9 0f01 	cmp.w	r9, #1
 8000c60:	bf0c      	ite	eq
 8000c62:	695b      	ldreq	r3, [r3, #20]
 8000c64:	699b      	ldrne	r3, [r3, #24]
 8000c66:	ea35 0303 	bics.w	r3, r5, r3
 8000c6a:	bf0c      	ite	eq
 8000c6c:	2301      	moveq	r3, #1
 8000c6e:	2300      	movne	r3, #0
 8000c70:	4543      	cmp	r3, r8
 8000c72:	d002      	beq.n	8000c7a <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 8000c74:	2000      	movs	r0, #0
}
 8000c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000c7a:	1c7b      	adds	r3, r7, #1
 8000c7c:	d0ed      	beq.n	8000c5a <I2C_WaitOnFlagUntilTimeout+0x12>
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000c7e:	b95f      	cbnz	r7, 8000c98 <I2C_WaitOnFlagUntilTimeout+0x50>
        hi2c->PreviousState = I2C_STATE_NONE;
 8000c80:	2300      	movs	r3, #0
        hi2c->State= HAL_I2C_STATE_READY;
 8000c82:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000c84:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000c86:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000c8a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000c8e:	2003      	movs	r0, #3
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c90:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8000c94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if((Timeout == 0U)||((HAL_GetTick() - Tickstart ) > Timeout))
 8000c98:	f7ff fc68 	bl	800056c <HAL_GetTick>
 8000c9c:	1b80      	subs	r0, r0, r6
 8000c9e:	4287      	cmp	r7, r0
 8000ca0:	d2db      	bcs.n	8000c5a <I2C_WaitOnFlagUntilTimeout+0x12>
 8000ca2:	e7ed      	b.n	8000c80 <I2C_WaitOnFlagUntilTimeout+0x38>

08000ca4 <I2C_WaitOnTXEFlagUntilTimeout>:
{    
 8000ca4:	b570      	push	{r4, r5, r6, lr}
 8000ca6:	4604      	mov	r4, r0
 8000ca8:	460d      	mov	r5, r1
 8000caa:	4616      	mov	r6, r2
  while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000cac:	6823      	ldr	r3, [r4, #0]
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	061b      	lsls	r3, r3, #24
 8000cb2:	d501      	bpl.n	8000cb8 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;      
 8000cb4:	2000      	movs	r0, #0
 8000cb6:	bd70      	pop	{r4, r5, r6, pc}
    if(I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8000cb8:	4620      	mov	r0, r4
 8000cba:	f7ff ff70 	bl	8000b9e <I2C_IsAcknowledgeFailed>
 8000cbe:	b9a8      	cbnz	r0, 8000cec <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if(Timeout != HAL_MAX_DELAY)
 8000cc0:	1c6a      	adds	r2, r5, #1
 8000cc2:	d0f3      	beq.n	8000cac <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000cc4:	b965      	cbnz	r5, 8000ce0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000cc6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000cc8:	f043 0320 	orr.w	r3, r3, #32
 8000ccc:	6423      	str	r3, [r4, #64]	; 0x40
        hi2c->State= HAL_I2C_STATE_READY;
 8000cce:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	6323      	str	r3, [r4, #48]	; 0x30
        __HAL_UNLOCK(hi2c);
 8000cd4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->State= HAL_I2C_STATE_READY;
 8000cd8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        __HAL_UNLOCK(hi2c);
 8000cdc:	2003      	movs	r0, #3
 8000cde:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000ce0:	f7ff fc44 	bl	800056c <HAL_GetTick>
 8000ce4:	1b80      	subs	r0, r0, r6
 8000ce6:	4285      	cmp	r5, r0
 8000ce8:	d2e0      	bcs.n	8000cac <I2C_WaitOnTXEFlagUntilTimeout+0x8>
 8000cea:	e7ec      	b.n	8000cc6 <I2C_WaitOnTXEFlagUntilTimeout+0x22>
      return HAL_ERROR;
 8000cec:	2001      	movs	r0, #1
}
 8000cee:	bd70      	pop	{r4, r5, r6, pc}

08000cf0 <I2C_RequestMemoryRead>:
{
 8000cf0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8000cf4:	4698      	mov	r8, r3
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000cf6:	6803      	ldr	r3, [r0, #0]
{
 8000cf8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8000cfa:	4616      	mov	r6, r2
  hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000d02:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d0a:	601a      	str	r2, [r3, #0]
{
 8000d0c:	460f      	mov	r7, r1
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000d0e:	9500      	str	r5, [sp, #0]
 8000d10:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000d12:	2200      	movs	r2, #0
 8000d14:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8000d18:	4604      	mov	r4, r0
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000d1a:	f7ff ff95 	bl	8000c48 <I2C_WaitOnFlagUntilTimeout>
 8000d1e:	b980      	cbnz	r0, 8000d42 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000d20:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000d22:	492f      	ldr	r1, [pc, #188]	; (8000de0 <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8000d24:	b2ff      	uxtb	r7, r7
 8000d26:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 8000d2a:	611a      	str	r2, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	462b      	mov	r3, r5
 8000d30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000d32:	f7ff ff49 	bl	8000bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000d36:	b140      	cbz	r0, 8000d4a <I2C_RequestMemoryRead+0x5a>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000d38:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	d101      	bne.n	8000d42 <I2C_RequestMemoryRead+0x52>
      return HAL_ERROR;
 8000d3e:	2001      	movs	r0, #1
 8000d40:	e000      	b.n	8000d44 <I2C_RequestMemoryRead+0x54>
      return HAL_TIMEOUT;
 8000d42:	2003      	movs	r0, #3
}
 8000d44:	b004      	add	sp, #16
 8000d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d4a:	6823      	ldr	r3, [r4, #0]
 8000d4c:	9003      	str	r0, [sp, #12]
 8000d4e:	695a      	ldr	r2, [r3, #20]
 8000d50:	9203      	str	r2, [sp, #12]
 8000d52:	699b      	ldr	r3, [r3, #24]
 8000d54:	9303      	str	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000d56:	462a      	mov	r2, r5
 8000d58:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000d5a:	9b03      	ldr	r3, [sp, #12]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000d5c:	4620      	mov	r0, r4
 8000d5e:	f7ff ffa1 	bl	8000ca4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000d62:	b140      	cbz	r0, 8000d76 <I2C_RequestMemoryRead+0x86>
    if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000d64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	d1eb      	bne.n	8000d42 <I2C_RequestMemoryRead+0x52>
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8000d6a:	6822      	ldr	r2, [r4, #0]
 8000d6c:	6813      	ldr	r3, [r2, #0]
 8000d6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	e7e3      	b.n	8000d3e <I2C_RequestMemoryRead+0x4e>
  if(MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8000d76:	f1b8 0f01 	cmp.w	r8, #1
 8000d7a:	6823      	ldr	r3, [r4, #0]
 8000d7c:	d124      	bne.n	8000dc8 <I2C_RequestMemoryRead+0xd8>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000d7e:	b2f6      	uxtb	r6, r6
 8000d80:	611e      	str	r6, [r3, #16]
  if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000d82:	462a      	mov	r2, r5
 8000d84:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000d86:	4620      	mov	r0, r4
 8000d88:	f7ff ff8c 	bl	8000ca4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000d8c:	4602      	mov	r2, r0
 8000d8e:	2800      	cmp	r0, #0
 8000d90:	d1e8      	bne.n	8000d64 <I2C_RequestMemoryRead+0x74>
  hi2c->Instance->CR1 |= I2C_CR1_START;
 8000d92:	6821      	ldr	r1, [r4, #0]
 8000d94:	680b      	ldr	r3, [r1, #0]
 8000d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d9a:	600b      	str	r3, [r1, #0]
  if(I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000d9c:	4620      	mov	r0, r4
 8000d9e:	9500      	str	r5, [sp, #0]
 8000da0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000da2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000da6:	f7ff ff4f 	bl	8000c48 <I2C_WaitOnFlagUntilTimeout>
 8000daa:	2800      	cmp	r0, #0
 8000dac:	d1c9      	bne.n	8000d42 <I2C_RequestMemoryRead+0x52>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000dae:	6823      	ldr	r3, [r4, #0]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000db0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000db2:	490b      	ldr	r1, [pc, #44]	; (8000de0 <I2C_RequestMemoryRead+0xf0>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000db4:	f047 0701 	orr.w	r7, r7, #1
 8000db8:	611f      	str	r7, [r3, #16]
  if(I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000dba:	4620      	mov	r0, r4
 8000dbc:	462b      	mov	r3, r5
 8000dbe:	f7ff ff03 	bl	8000bc8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000dc2:	2800      	cmp	r0, #0
 8000dc4:	d1b8      	bne.n	8000d38 <I2C_RequestMemoryRead+0x48>
 8000dc6:	e7bd      	b.n	8000d44 <I2C_RequestMemoryRead+0x54>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8000dc8:	0a32      	lsrs	r2, r6, #8
 8000dca:	611a      	str	r2, [r3, #16]
    if(I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8000dcc:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000dce:	462a      	mov	r2, r5
 8000dd0:	4620      	mov	r0, r4
 8000dd2:	f7ff ff67 	bl	8000ca4 <I2C_WaitOnTXEFlagUntilTimeout>
 8000dd6:	2800      	cmp	r0, #0
 8000dd8:	d1c4      	bne.n	8000d64 <I2C_RequestMemoryRead+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8000dda:	6823      	ldr	r3, [r4, #0]
 8000ddc:	e7cf      	b.n	8000d7e <I2C_RequestMemoryRead+0x8e>
 8000dde:	bf00      	nop
 8000de0:	00010002 	.word	0x00010002

08000de4 <HAL_I2C_Init>:
{
 8000de4:	b570      	push	{r4, r5, r6, lr}
  if(hi2c == NULL)
 8000de6:	4604      	mov	r4, r0
 8000de8:	2800      	cmp	r0, #0
 8000dea:	d062      	beq.n	8000eb2 <HAL_I2C_Init+0xce>
  if(hi2c->State == HAL_I2C_STATE_RESET)
 8000dec:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000df0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000df4:	b91b      	cbnz	r3, 8000dfe <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8000df6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000dfa:	f001 f96d 	bl	80020d8 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8000dfe:	6822      	ldr	r2, [r4, #0]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000e00:	4e2d      	ldr	r6, [pc, #180]	; (8000eb8 <HAL_I2C_Init+0xd4>)
  freqrange = I2C_FREQRANGE(pclk1);
 8000e02:	4d2e      	ldr	r5, [pc, #184]	; (8000ebc <HAL_I2C_Init+0xd8>)
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e04:	2324      	movs	r3, #36	; 0x24
 8000e06:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000e0a:	6813      	ldr	r3, [r2, #0]
 8000e0c:	f023 0301 	bic.w	r3, r3, #1
 8000e10:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e12:	f000 ffed 	bl	8001df0 <HAL_RCC_GetPCLK1Freq>
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000e16:	6863      	ldr	r3, [r4, #4]
  hi2c->Instance->CR2 = freqrange;
 8000e18:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000e1a:	fbb0 f5f5 	udiv	r5, r0, r5
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000e1e:	42b3      	cmp	r3, r6
 8000e20:	bf84      	itt	hi
 8000e22:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8000e26:	4369      	mulhi	r1, r5
  hi2c->Instance->CR2 = freqrange;
 8000e28:	6055      	str	r5, [r2, #4]
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000e2a:	bf91      	iteee	ls
 8000e2c:	1c69      	addls	r1, r5, #1
 8000e2e:	f44f 757a 	movhi.w	r5, #1000	; 0x3e8
 8000e32:	fbb1 f1f5 	udivhi	r1, r1, r5
 8000e36:	3101      	addhi	r1, #1
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000e38:	42b3      	cmp	r3, r6
  hi2c->Instance->TRISE = I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed);
 8000e3a:	6211      	str	r1, [r2, #32]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000e3c:	d821      	bhi.n	8000e82 <HAL_I2C_Init+0x9e>
 8000e3e:	005b      	lsls	r3, r3, #1
 8000e40:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e44:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	bf98      	it	ls
 8000e4c:	2004      	movls	r0, #4
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e4e:	6a21      	ldr	r1, [r4, #32]
 8000e50:	69e3      	ldr	r3, [r4, #28]
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000e52:	61d0      	str	r0, [r2, #28]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e54:	430b      	orrs	r3, r1
 8000e56:	6013      	str	r3, [r2, #0]
  hi2c->Instance->OAR1 = (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1);
 8000e58:	68e1      	ldr	r1, [r4, #12]
 8000e5a:	6923      	ldr	r3, [r4, #16]
 8000e5c:	430b      	orrs	r3, r1
 8000e5e:	6093      	str	r3, [r2, #8]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2);
 8000e60:	69a1      	ldr	r1, [r4, #24]
 8000e62:	6963      	ldr	r3, [r4, #20]
 8000e64:	430b      	orrs	r3, r1
 8000e66:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000e68:	6813      	ldr	r3, [r2, #0]
 8000e6a:	f043 0301 	orr.w	r3, r3, #1
 8000e6e:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e70:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000e72:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e74:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000e76:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e7a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e7c:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000e80:	bd70      	pop	{r4, r5, r6, pc}
  hi2c->Instance->CCR = I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle);
 8000e82:	68a1      	ldr	r1, [r4, #8]
 8000e84:	b949      	cbnz	r1, 8000e9a <HAL_I2C_Init+0xb6>
 8000e86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000e8a:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e8e:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000e92:	b163      	cbz	r3, 8000eae <HAL_I2C_Init+0xca>
 8000e94:	f440 4000 	orr.w	r0, r0, #32768	; 0x8000
 8000e98:	e7d9      	b.n	8000e4e <HAL_I2C_Init+0x6a>
 8000e9a:	2119      	movs	r1, #25
 8000e9c:	434b      	muls	r3, r1
 8000e9e:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ea2:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8000ea6:	b113      	cbz	r3, 8000eae <HAL_I2C_Init+0xca>
 8000ea8:	f440 4040 	orr.w	r0, r0, #49152	; 0xc000
 8000eac:	e7cf      	b.n	8000e4e <HAL_I2C_Init+0x6a>
 8000eae:	2001      	movs	r0, #1
 8000eb0:	e7cd      	b.n	8000e4e <HAL_I2C_Init+0x6a>
    return HAL_ERROR;
 8000eb2:	2001      	movs	r0, #1
}
 8000eb4:	bd70      	pop	{r4, r5, r6, pc}
 8000eb6:	bf00      	nop
 8000eb8:	000186a0 	.word	0x000186a0
 8000ebc:	000f4240 	.word	0x000f4240

08000ec0 <HAL_I2C_Mem_Read_DMA>:
{
 8000ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ec4:	4604      	mov	r4, r0
 8000ec6:	b086      	sub	sp, #24
 8000ec8:	461f      	mov	r7, r3
  __IO uint32_t count = 0U;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	9303      	str	r3, [sp, #12]
{
 8000ece:	460d      	mov	r5, r1
 8000ed0:	4616      	mov	r6, r2
 8000ed2:	f8dd a038 	ldr.w	sl, [sp, #56]	; 0x38
 8000ed6:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
  tickstart = HAL_GetTick();
 8000eda:	f7ff fb47 	bl	800056c <HAL_GetTick>
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000ede:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000ee2:	2b20      	cmp	r3, #32
  tickstart = HAL_GetTick();
 8000ee4:	4680      	mov	r8, r0
  if(hi2c->State == HAL_I2C_STATE_READY)
 8000ee6:	d003      	beq.n	8000ef0 <HAL_I2C_Mem_Read_DMA+0x30>
    return HAL_BUSY;
 8000ee8:	2002      	movs	r0, #2
}
 8000eea:	b006      	add	sp, #24
 8000eec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock /25U /1000U);
 8000ef0:	4b4f      	ldr	r3, [pc, #316]	; (8001030 <HAL_I2C_Mem_Read_DMA+0x170>)
 8000ef2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	fbb3 f2f2 	udiv	r2, r3, r2
 8000efc:	2319      	movs	r3, #25
 8000efe:	4353      	muls	r3, r2
 8000f00:	9303      	str	r3, [sp, #12]
      if(count-- == 0U)
 8000f02:	9b03      	ldr	r3, [sp, #12]
 8000f04:	1e5a      	subs	r2, r3, #1
 8000f06:	9203      	str	r2, [sp, #12]
 8000f08:	b93b      	cbnz	r3, 8000f1a <HAL_I2C_Mem_Read_DMA+0x5a>
        hi2c->State= HAL_I2C_STATE_READY;
 8000f0a:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 8000f0c:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State= HAL_I2C_STATE_READY;
 8000f0e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
          __HAL_UNLOCK(hi2c);
 8000f12:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_TIMEOUT;
 8000f16:	2003      	movs	r0, #3
 8000f18:	e7e7      	b.n	8000eea <HAL_I2C_Mem_Read_DMA+0x2a>
    while(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8000f1a:	6821      	ldr	r1, [r4, #0]
 8000f1c:	698b      	ldr	r3, [r1, #24]
 8000f1e:	079a      	lsls	r2, r3, #30
 8000f20:	d4ef      	bmi.n	8000f02 <HAL_I2C_Mem_Read_DMA+0x42>
    __HAL_LOCK(hi2c);
 8000f22:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d0de      	beq.n	8000ee8 <HAL_I2C_Mem_Read_DMA+0x28>
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000f30:	680b      	ldr	r3, [r1, #0]
 8000f32:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8000f34:	bf5e      	ittt	pl
 8000f36:	680b      	ldrpl	r3, [r1, #0]
 8000f38:	f043 0301 	orrpl.w	r3, r3, #1
 8000f3c:	600b      	strpl	r3, [r1, #0]
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8000f3e:	680b      	ldr	r3, [r1, #0]
 8000f40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f44:	600b      	str	r3, [r1, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8000f46:	2322      	movs	r3, #34	; 0x22
 8000f48:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8000f4c:	2340      	movs	r3, #64	; 0x40
 8000f4e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f52:	2200      	movs	r2, #0
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f54:	4b37      	ldr	r3, [pc, #220]	; (8001034 <HAL_I2C_Mem_Read_DMA+0x174>)
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000f56:	6422      	str	r2, [r4, #64]	; 0x40
    hi2c->XferCount = Size;
 8000f58:	f8a4 902a 	strh.w	r9, [r4, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000f5c:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8000f5e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr = pData;
 8000f60:	f8c4 a024 	str.w	sl, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	8523      	strh	r3, [r4, #40]	; 0x28
    if(hi2c->XferSize > 0U)
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d043      	beq.n	8000ff4 <HAL_I2C_Mem_Read_DMA+0x134>
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8000f6c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000f6e:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 8001038 <HAL_I2C_Mem_Read_DMA+0x178>
 8000f72:	f8c0 e03c 	str.w	lr, [r0, #60]	; 0x3c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8000f76:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 800103c <HAL_I2C_Mem_Read_DMA+0x17c>
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8000f7a:	6402      	str	r2, [r0, #64]	; 0x40
      hi2c->hdmarx->XferM1CpltCallback = NULL;
 8000f7c:	6442      	str	r2, [r0, #68]	; 0x44
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8000f7e:	6482      	str	r2, [r0, #72]	; 0x48
      hi2c->hdmarx->XferAbortCallback = NULL;
 8000f80:	6502      	str	r2, [r0, #80]	; 0x50
      HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8000f82:	3110      	adds	r1, #16
 8000f84:	4652      	mov	r2, sl
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8000f86:	f8c0 e04c 	str.w	lr, [r0, #76]	; 0x4c
      HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8000f8a:	f7ff fc17 	bl	80007bc <HAL_DMA_Start_IT>
      if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8000f8e:	2323      	movs	r3, #35	; 0x23
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	f8cd 8004 	str.w	r8, [sp, #4]
 8000f96:	463b      	mov	r3, r7
 8000f98:	4632      	mov	r2, r6
 8000f9a:	4629      	mov	r1, r5
 8000f9c:	4620      	mov	r0, r4
 8000f9e:	f7ff fea7 	bl	8000cf0 <I2C_RequestMemoryRead>
 8000fa2:	b140      	cbz	r0, 8000fb6 <HAL_I2C_Mem_Read_DMA+0xf6>
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fa4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000fa6:	2b04      	cmp	r3, #4
          __HAL_UNLOCK(hi2c);
 8000fa8:	f04f 0300 	mov.w	r3, #0
        if(hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000fac:	d1b1      	bne.n	8000f12 <HAL_I2C_Mem_Read_DMA+0x52>
          __HAL_UNLOCK(hi2c);
 8000fae:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	e799      	b.n	8000eea <HAL_I2C_Mem_Read_DMA+0x2a>
 8000fb6:	6823      	ldr	r3, [r4, #0]
      if(Size == 1U)
 8000fb8:	f1b9 0f01 	cmp.w	r9, #1
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000fbc:	bf0b      	itete	eq
 8000fbe:	681a      	ldreq	r2, [r3, #0]
        hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8000fc0:	685a      	ldrne	r2, [r3, #4]
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000fc2:	f422 6280 	biceq.w	r2, r2, #1024	; 0x400
        hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8000fc6:	f442 5280 	orrne.w	r2, r2, #4096	; 0x1000
        hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8000fca:	bf0c      	ite	eq
 8000fcc:	601a      	streq	r2, [r3, #0]
        hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8000fce:	605a      	strne	r2, [r3, #4]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	9204      	str	r2, [sp, #16]
 8000fd4:	6959      	ldr	r1, [r3, #20]
 8000fd6:	9104      	str	r1, [sp, #16]
 8000fd8:	6999      	ldr	r1, [r3, #24]
 8000fda:	9104      	str	r1, [sp, #16]
 8000fdc:	9904      	ldr	r1, [sp, #16]
      __HAL_UNLOCK(hi2c);
 8000fde:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000fe8:	605a      	str	r2, [r3, #4]
      hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	e77a      	b.n	8000eea <HAL_I2C_Mem_Read_DMA+0x2a>
      if(I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8000ff4:	2323      	movs	r3, #35	; 0x23
 8000ff6:	9300      	str	r3, [sp, #0]
 8000ff8:	f8cd 8004 	str.w	r8, [sp, #4]
 8000ffc:	463b      	mov	r3, r7
 8000ffe:	4632      	mov	r2, r6
 8001000:	4629      	mov	r1, r5
 8001002:	4620      	mov	r0, r4
 8001004:	f7ff fe74 	bl	8000cf0 <I2C_RequestMemoryRead>
 8001008:	2800      	cmp	r0, #0
 800100a:	d1cb      	bne.n	8000fa4 <HAL_I2C_Mem_Read_DMA+0xe4>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800100c:	6823      	ldr	r3, [r4, #0]
 800100e:	9005      	str	r0, [sp, #20]
 8001010:	695a      	ldr	r2, [r3, #20]
 8001012:	9205      	str	r2, [sp, #20]
 8001014:	699a      	ldr	r2, [r3, #24]
 8001016:	9205      	str	r2, [sp, #20]
 8001018:	9a05      	ldr	r2, [sp, #20]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001020:	601a      	str	r2, [r3, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8001022:	2320      	movs	r3, #32
 8001024:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      __HAL_UNLOCK(hi2c);
 8001028:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 800102c:	e75d      	b.n	8000eea <HAL_I2C_Mem_Read_DMA+0x2a>
 800102e:	bf00      	nop
 8001030:	20000008 	.word	0x20000008
 8001034:	ffff0000 	.word	0xffff0000
 8001038:	08001085 	.word	0x08001085
 800103c:	08001051 	.word	0x08001051

08001040 <HAL_I2C_MasterTxCpltCallback>:
 8001040:	4770      	bx	lr

08001042 <HAL_I2C_MasterRxCpltCallback>:
 8001042:	4770      	bx	lr

08001044 <HAL_I2C_SlaveTxCpltCallback>:
 8001044:	4770      	bx	lr

08001046 <HAL_I2C_SlaveRxCpltCallback>:
 8001046:	4770      	bx	lr

08001048 <HAL_I2C_AddrCallback>:
{
 8001048:	4770      	bx	lr

0800104a <HAL_I2C_ListenCpltCallback>:
 800104a:	4770      	bx	lr

0800104c <HAL_I2C_MemTxCpltCallback>:
 800104c:	4770      	bx	lr

0800104e <HAL_I2C_ErrorCallback>:
 800104e:	4770      	bx	lr

08001050 <I2C_DMAError>:
{
 8001050:	b510      	push	{r4, lr}
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8001052:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8001054:	f7ff fcbc 	bl	80009d0 <HAL_DMA_GetError>
 8001058:	2802      	cmp	r0, #2
 800105a:	d012      	beq.n	8001082 <I2C_DMAError+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800105c:	6822      	ldr	r2, [r4, #0]
 800105e:	6813      	ldr	r3, [r2, #0]
 8001060:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001064:	6013      	str	r3, [r2, #0]
    hi2c->XferCount = 0U;
 8001066:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8001068:	2220      	movs	r2, #32
    hi2c->XferCount = 0U;
 800106a:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->State = HAL_I2C_STATE_READY;
 800106c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001070:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8001074:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001076:	f043 0310 	orr.w	r3, r3, #16
 800107a:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800107c:	4620      	mov	r0, r4
 800107e:	f7ff ffe6 	bl	800104e <HAL_I2C_ErrorCallback>
 8001082:	bd10      	pop	{r4, pc}

08001084 <I2C_DMAXferCplt>:
  I2C_HandleTypeDef* hi2c = (I2C_HandleTypeDef*)((DMA_HandleTypeDef*)hdma)->Parent;
 8001084:	6b80      	ldr	r0, [r0, #56]	; 0x38
  uint32_t CurrentState = hi2c->State;
 8001086:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  uint32_t CurrentMode  = hi2c->Mode;
 800108a:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  uint32_t CurrentState = hi2c->State;
 800108e:	b2d2      	uxtb	r2, r2
  if((CurrentState == HAL_I2C_STATE_BUSY_TX) || ((CurrentState == HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE))) 
 8001090:	2a21      	cmp	r2, #33	; 0x21
{
 8001092:	b508      	push	{r3, lr}
  uint32_t CurrentMode  = hi2c->Mode;
 8001094:	b2c9      	uxtb	r1, r1
 8001096:	6803      	ldr	r3, [r0, #0]
  if((CurrentState == HAL_I2C_STATE_BUSY_TX) || ((CurrentState == HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE))) 
 8001098:	d003      	beq.n	80010a2 <I2C_DMAXferCplt+0x1e>
 800109a:	2a22      	cmp	r2, #34	; 0x22
 800109c:	d10c      	bne.n	80010b8 <I2C_DMAXferCplt+0x34>
 800109e:	2920      	cmp	r1, #32
 80010a0:	d10a      	bne.n	80010b8 <I2C_DMAXferCplt+0x34>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010a8:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80010aa:	2200      	movs	r2, #0
 80010ac:	8542      	strh	r2, [r0, #42]	; 0x2a
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80010ae:	685a      	ldr	r2, [r3, #4]
 80010b0:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	bd08      	pop	{r3, pc}
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010be:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80010c6:	601a      	str	r2, [r3, #0]
    hi2c->Instance->CR2 &= ~I2C_CR2_LAST;
 80010c8:	685a      	ldr	r2, [r3, #4]
 80010ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80010ce:	605a      	str	r2, [r3, #4]
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80010d0:	685a      	ldr	r2, [r3, #4]
 80010d2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010d6:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80010d8:	2300      	movs	r3, #0
 80010da:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80010dc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80010de:	b113      	cbz	r3, 80010e6 <I2C_DMAXferCplt+0x62>
      HAL_I2C_ErrorCallback(hi2c);
 80010e0:	f7ff ffb5 	bl	800104e <HAL_I2C_ErrorCallback>
 80010e4:	bd08      	pop	{r3, pc}
      hi2c->State = HAL_I2C_STATE_READY;
 80010e6:	2220      	movs	r2, #32
 80010e8:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80010ec:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80010f0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80010f4:	2a40      	cmp	r2, #64	; 0x40
 80010f6:	d102      	bne.n	80010fe <I2C_DMAXferCplt+0x7a>
        HAL_I2C_MemRxCpltCallback(hi2c);
 80010f8:	f000 fe94 	bl	8001e24 <HAL_I2C_MemRxCpltCallback>
 80010fc:	bd08      	pop	{r3, pc}
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80010fe:	f7ff ffa0 	bl	8001042 <HAL_I2C_MasterRxCpltCallback>
 8001102:	bd08      	pop	{r3, pc}

08001104 <HAL_I2C_AbortCpltCallback>:
{
 8001104:	4770      	bx	lr
	...

08001108 <I2C_ITError>:
  uint32_t CurrentState = hi2c->State;
 8001108:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800110c:	3b29      	subs	r3, #41	; 0x29
 800110e:	2b01      	cmp	r3, #1
{
 8001110:	b510      	push	{r4, lr}
 8001112:	6803      	ldr	r3, [r0, #0]
 8001114:	4604      	mov	r4, r0
  if((CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001116:	d839      	bhi.n	800118c <I2C_ITError+0x84>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001118:	2200      	movs	r2, #0
 800111a:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800111c:	2228      	movs	r2, #40	; 0x28
 800111e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001128:	601a      	str	r2, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	f412 6200 	ands.w	r2, r2, #2048	; 0x800
 8001130:	d054      	beq.n	80011dc <I2C_ITError+0xd4>
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001132:	685a      	ldr	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8001134:	6b60      	ldr	r0, [r4, #52]	; 0x34
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8001136:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800113a:	605a      	str	r2, [r3, #4]
    if(hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800113c:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8001140:	2b01      	cmp	r3, #1
 8001142:	4b39      	ldr	r3, [pc, #228]	; (8001228 <I2C_ITError+0x120>)
 8001144:	d031      	beq.n	80011aa <I2C_ITError+0xa2>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001146:	6503      	str	r3, [r0, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001148:	f7ff fb76 	bl	8000838 <HAL_DMA_Abort_IT>
 800114c:	b150      	cbz	r0, 8001164 <I2C_ITError+0x5c>
        __HAL_I2C_DISABLE(hi2c);
 800114e:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001150:	6b60      	ldr	r0, [r4, #52]	; 0x34
        __HAL_I2C_DISABLE(hi2c);
 8001152:	6813      	ldr	r3, [r2, #0]
 8001154:	f023 0301 	bic.w	r3, r3, #1
 8001158:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 800115a:	2320      	movs	r3, #32
 800115c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001160:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8001162:	4798      	blx	r3
  if((hi2c->State == HAL_I2C_STATE_LISTEN) && ((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF))
 8001164:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8001168:	2b28      	cmp	r3, #40	; 0x28
 800116a:	d10e      	bne.n	800118a <I2C_ITError+0x82>
 800116c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800116e:	075b      	lsls	r3, r3, #29
 8001170:	d50b      	bpl.n	800118a <I2C_ITError+0x82>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001172:	4b2e      	ldr	r3, [pc, #184]	; (800122c <I2C_ITError+0x124>)
 8001174:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001176:	2220      	movs	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8001178:	2300      	movs	r3, #0
 800117a:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ListenCpltCallback(hi2c);
 800117c:	4620      	mov	r0, r4
    hi2c->State = HAL_I2C_STATE_READY;
 800117e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001182:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    HAL_I2C_ListenCpltCallback(hi2c);
 8001186:	f7ff ff60 	bl	800104a <HAL_I2C_ListenCpltCallback>
 800118a:	bd10      	pop	{r4, pc}
    if((hi2c->State != HAL_I2C_STATE_ABORT) && ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) != I2C_CR2_DMAEN))
 800118c:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001190:	2a60      	cmp	r2, #96	; 0x60
 8001192:	d005      	beq.n	80011a0 <I2C_ITError+0x98>
 8001194:	685a      	ldr	r2, [r3, #4]
 8001196:	0512      	lsls	r2, r2, #20
      hi2c->State = HAL_I2C_STATE_READY;
 8001198:	bf5c      	itt	pl
 800119a:	2220      	movpl	r2, #32
 800119c:	f880 203d 	strbpl.w	r2, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80011a0:	2200      	movs	r2, #0
 80011a2:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80011a4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
 80011a8:	e7bb      	b.n	8001122 <I2C_ITError+0x1a>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80011aa:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 80011ac:	6503      	str	r3, [r0, #80]	; 0x50
      if(HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80011ae:	f7ff fb43 	bl	8000838 <HAL_DMA_Abort_IT>
 80011b2:	2800      	cmp	r0, #0
 80011b4:	d0d6      	beq.n	8001164 <I2C_ITError+0x5c>
        if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80011b6:	6822      	ldr	r2, [r4, #0]
 80011b8:	6953      	ldr	r3, [r2, #20]
 80011ba:	0658      	lsls	r0, r3, #25
 80011bc:	d504      	bpl.n	80011c8 <I2C_ITError+0xc0>
          (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80011be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011c0:	6912      	ldr	r2, [r2, #16]
 80011c2:	1c59      	adds	r1, r3, #1
 80011c4:	6261      	str	r1, [r4, #36]	; 0x24
 80011c6:	701a      	strb	r2, [r3, #0]
        __HAL_I2C_DISABLE(hi2c);
 80011c8:	6822      	ldr	r2, [r4, #0]
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80011ca:	6ba0      	ldr	r0, [r4, #56]	; 0x38
        __HAL_I2C_DISABLE(hi2c);
 80011cc:	6813      	ldr	r3, [r2, #0]
 80011ce:	f023 0301 	bic.w	r3, r3, #1
 80011d2:	6013      	str	r3, [r2, #0]
        hi2c->State = HAL_I2C_STATE_READY;
 80011d4:	2320      	movs	r3, #32
 80011d6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80011da:	e7c1      	b.n	8001160 <I2C_ITError+0x58>
  else if(hi2c->State == HAL_I2C_STATE_ABORT)
 80011dc:	f894 103d 	ldrb.w	r1, [r4, #61]	; 0x3d
 80011e0:	2960      	cmp	r1, #96	; 0x60
 80011e2:	d114      	bne.n	800120e <I2C_ITError+0x106>
    hi2c->State = HAL_I2C_STATE_READY;
 80011e4:	2120      	movs	r1, #32
 80011e6:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80011ea:	6422      	str	r2, [r4, #64]	; 0x40
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80011ec:	695a      	ldr	r2, [r3, #20]
 80011ee:	0651      	lsls	r1, r2, #25
 80011f0:	d504      	bpl.n	80011fc <I2C_ITError+0xf4>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80011f2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80011f4:	691b      	ldr	r3, [r3, #16]
 80011f6:	1c51      	adds	r1, r2, #1
 80011f8:	6261      	str	r1, [r4, #36]	; 0x24
 80011fa:	7013      	strb	r3, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 80011fc:	6822      	ldr	r2, [r4, #0]
 80011fe:	6813      	ldr	r3, [r2, #0]
 8001200:	f023 0301 	bic.w	r3, r3, #1
 8001204:	6013      	str	r3, [r2, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001206:	4620      	mov	r0, r4
 8001208:	f7ff ff7c 	bl	8001104 <HAL_I2C_AbortCpltCallback>
 800120c:	e7aa      	b.n	8001164 <I2C_ITError+0x5c>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800120e:	695a      	ldr	r2, [r3, #20]
 8001210:	0652      	lsls	r2, r2, #25
 8001212:	d504      	bpl.n	800121e <I2C_ITError+0x116>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001214:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	1c51      	adds	r1, r2, #1
 800121a:	6261      	str	r1, [r4, #36]	; 0x24
 800121c:	7013      	strb	r3, [r2, #0]
    HAL_I2C_ErrorCallback(hi2c);
 800121e:	4620      	mov	r0, r4
 8001220:	f7ff ff15 	bl	800104e <HAL_I2C_ErrorCallback>
 8001224:	e79e      	b.n	8001164 <I2C_ITError+0x5c>
 8001226:	bf00      	nop
 8001228:	08001905 	.word	0x08001905
 800122c:	ffff0000 	.word	0xffff0000

08001230 <HAL_I2C_EV_IRQHandler>:
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001230:	6803      	ldr	r3, [r0, #0]
{
 8001232:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001234:	699d      	ldr	r5, [r3, #24]
  uint32_t sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001236:	6959      	ldr	r1, [r3, #20]
  uint32_t itsources    = READ_REG(hi2c->Instance->CR2);
 8001238:	685a      	ldr	r2, [r3, #4]
  uint32_t CurrentMode  = hi2c->Mode;
 800123a:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 800123e:	b2e4      	uxtb	r4, r4
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001240:	2c10      	cmp	r4, #16
{
 8001242:	b08d      	sub	sp, #52	; 0x34
  if((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001244:	d002      	beq.n	800124c <HAL_I2C_EV_IRQHandler+0x1c>
 8001246:	2c40      	cmp	r4, #64	; 0x40
 8001248:	f040 8255 	bne.w	80016f6 <HAL_I2C_EV_IRQHandler+0x4c6>
    if(((sr1itflags & I2C_FLAG_SB) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800124c:	f011 1f01 	tst.w	r1, #65537	; 0x10001
 8001250:	d066      	beq.n	8001320 <HAL_I2C_EV_IRQHandler+0xf0>
 8001252:	0597      	lsls	r7, r2, #22
 8001254:	d564      	bpl.n	8001320 <HAL_I2C_EV_IRQHandler+0xf0>
  if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001256:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
 800125a:	2c40      	cmp	r4, #64	; 0x40
 800125c:	d143      	bne.n	80012e6 <HAL_I2C_EV_IRQHandler+0xb6>
    if(hi2c->EventCount == 0U)
 800125e:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001260:	2c00      	cmp	r4, #0
 8001262:	d13b      	bne.n	80012dc <HAL_I2C_EV_IRQHandler+0xac>
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001264:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8001266:	f004 04fe 	and.w	r4, r4, #254	; 0xfe
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800126a:	611c      	str	r4, [r3, #16]
    if((sr2itflags & I2C_FLAG_TRA) != RESET)
 800126c:	4e98      	ldr	r6, [pc, #608]	; (80014d0 <HAL_I2C_EV_IRQHandler+0x2a0>)
 800126e:	4c99      	ldr	r4, [pc, #612]	; (80014d4 <HAL_I2C_EV_IRQHandler+0x2a4>)
 8001270:	402e      	ands	r6, r5
 8001272:	400c      	ands	r4, r1
 8001274:	2e00      	cmp	r6, #0
 8001276:	f000 819f 	beq.w	80015b8 <HAL_I2C_EV_IRQHandler+0x388>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 800127a:	4d97      	ldr	r5, [pc, #604]	; (80014d8 <HAL_I2C_EV_IRQHandler+0x2a8>)
 800127c:	400d      	ands	r5, r1
 800127e:	2d00      	cmp	r5, #0
 8001280:	f000 8166 	beq.w	8001550 <HAL_I2C_EV_IRQHandler+0x320>
 8001284:	0555      	lsls	r5, r2, #21
 8001286:	f140 8163 	bpl.w	8001550 <HAL_I2C_EV_IRQHandler+0x320>
 800128a:	2c00      	cmp	r4, #0
 800128c:	f040 8160 	bne.w	8001550 <HAL_I2C_EV_IRQHandler+0x320>
  uint32_t CurrentState       = hi2c->State;
 8001290:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001294:	8d05      	ldrh	r5, [r0, #40]	; 0x28
  uint32_t CurrentMode        = hi2c->Mode;
 8001296:	f890 103e 	ldrb.w	r1, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800129a:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
  uint32_t CurrentState       = hi2c->State;
 800129c:	b2d2      	uxtb	r2, r2
  uint32_t CurrentMode        = hi2c->Mode;
 800129e:	b2c9      	uxtb	r1, r1
  if((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80012a0:	2d00      	cmp	r5, #0
 80012a2:	f040 8105 	bne.w	80014b0 <HAL_I2C_EV_IRQHandler+0x280>
 80012a6:	2a21      	cmp	r2, #33	; 0x21
 80012a8:	f040 8104 	bne.w	80014b4 <HAL_I2C_EV_IRQHandler+0x284>
    if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80012ac:	2c04      	cmp	r4, #4
 80012ae:	f000 816c 	beq.w	800158a <HAL_I2C_EV_IRQHandler+0x35a>
 80012b2:	2c08      	cmp	r4, #8
 80012b4:	f000 8169 	beq.w	800158a <HAL_I2C_EV_IRQHandler+0x35a>
 80012b8:	f514 3f80 	cmn.w	r4, #65536	; 0x10000
 80012bc:	f000 8165 	beq.w	800158a <HAL_I2C_EV_IRQHandler+0x35a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80012c6:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80012c8:	2311      	movs	r3, #17
 80012ca:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80012cc:	f880 503e 	strb.w	r5, [r0, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80012d0:	2320      	movs	r3, #32
 80012d2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80012d6:	f7ff feb3 	bl	8001040 <HAL_I2C_MasterTxCpltCallback>
 80012da:	e0f6      	b.n	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80012dc:	6c44      	ldr	r4, [r0, #68]	; 0x44
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80012de:	f044 0401 	orr.w	r4, r4, #1
 80012e2:	b2e4      	uxtb	r4, r4
 80012e4:	e7c1      	b.n	800126a <HAL_I2C_EV_IRQHandler+0x3a>
    if(hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80012e6:	6904      	ldr	r4, [r0, #16]
 80012e8:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
 80012ec:	d105      	bne.n	80012fa <HAL_I2C_EV_IRQHandler+0xca>
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 80012ee:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 80012f2:	2c21      	cmp	r4, #33	; 0x21
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80012f4:	6c44      	ldr	r4, [r0, #68]	; 0x44
      if(hi2c->State == HAL_I2C_STATE_BUSY_TX) 
 80012f6:	d1f2      	bne.n	80012de <HAL_I2C_EV_IRQHandler+0xae>
 80012f8:	e7b5      	b.n	8001266 <HAL_I2C_EV_IRQHandler+0x36>
      if(hi2c->EventCount == 0U)
 80012fa:	6d04      	ldr	r4, [r0, #80]	; 0x50
 80012fc:	b934      	cbnz	r4, 800130c <HAL_I2C_EV_IRQHandler+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80012fe:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001300:	11e4      	asrs	r4, r4, #7
 8001302:	f004 0406 	and.w	r4, r4, #6
 8001306:	f044 04f0 	orr.w	r4, r4, #240	; 0xf0
 800130a:	e7ae      	b.n	800126a <HAL_I2C_EV_IRQHandler+0x3a>
      else if(hi2c->EventCount == 1U)
 800130c:	6d04      	ldr	r4, [r0, #80]	; 0x50
 800130e:	2c01      	cmp	r4, #1
 8001310:	d1ac      	bne.n	800126c <HAL_I2C_EV_IRQHandler+0x3c>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8001312:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001314:	11e4      	asrs	r4, r4, #7
 8001316:	f004 0406 	and.w	r4, r4, #6
 800131a:	f044 04f1 	orr.w	r4, r4, #241	; 0xf1
 800131e:	e7a4      	b.n	800126a <HAL_I2C_EV_IRQHandler+0x3a>
    else if(((sr1itflags & I2C_FLAG_ADD10) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001320:	4c6e      	ldr	r4, [pc, #440]	; (80014dc <HAL_I2C_EV_IRQHandler+0x2ac>)
 8001322:	400c      	ands	r4, r1
 8001324:	b11c      	cbz	r4, 800132e <HAL_I2C_EV_IRQHandler+0xfe>
 8001326:	0596      	lsls	r6, r2, #22
 8001328:	d501      	bpl.n	800132e <HAL_I2C_EV_IRQHandler+0xfe>
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800132a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800132c:	e7d9      	b.n	80012e2 <HAL_I2C_EV_IRQHandler+0xb2>
    else if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800132e:	4c6c      	ldr	r4, [pc, #432]	; (80014e0 <HAL_I2C_EV_IRQHandler+0x2b0>)
 8001330:	400c      	ands	r4, r1
 8001332:	2c00      	cmp	r4, #0
 8001334:	d09a      	beq.n	800126c <HAL_I2C_EV_IRQHandler+0x3c>
 8001336:	0594      	lsls	r4, r2, #22
 8001338:	d598      	bpl.n	800126c <HAL_I2C_EV_IRQHandler+0x3c>
  uint32_t CurrentMode        = hi2c->Mode;
 800133a:	f890 403e 	ldrb.w	r4, [r0, #62]	; 0x3e
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800133e:	6ac6      	ldr	r6, [r0, #44]	; 0x2c
  uint32_t Prev_State         = hi2c->PreviousState;
 8001340:	f8d0 e030 	ldr.w	lr, [r0, #48]	; 0x30
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001344:	f890 703d 	ldrb.w	r7, [r0, #61]	; 0x3d
 8001348:	2f22      	cmp	r7, #34	; 0x22
  uint32_t CurrentMode        = hi2c->Mode;
 800134a:	b2e4      	uxtb	r4, r4
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800134c:	f040 80a8 	bne.w	80014a0 <HAL_I2C_EV_IRQHandler+0x270>
    if((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8001350:	6d07      	ldr	r7, [r0, #80]	; 0x50
 8001352:	b947      	cbnz	r7, 8001366 <HAL_I2C_EV_IRQHandler+0x136>
 8001354:	2c40      	cmp	r4, #64	; 0x40
 8001356:	d106      	bne.n	8001366 <HAL_I2C_EV_IRQHandler+0x136>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001358:	9701      	str	r7, [sp, #4]
 800135a:	695c      	ldr	r4, [r3, #20]
 800135c:	9401      	str	r4, [sp, #4]
 800135e:	699c      	ldr	r4, [r3, #24]
 8001360:	9401      	str	r4, [sp, #4]
 8001362:	9c01      	ldr	r4, [sp, #4]
 8001364:	e782      	b.n	800126c <HAL_I2C_EV_IRQHandler+0x3c>
    else if((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8001366:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001368:	b98c      	cbnz	r4, 800138e <HAL_I2C_EV_IRQHandler+0x15e>
 800136a:	6907      	ldr	r7, [r0, #16]
 800136c:	f5b7 4f40 	cmp.w	r7, #49152	; 0xc000
 8001370:	d10d      	bne.n	800138e <HAL_I2C_EV_IRQHandler+0x15e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001372:	9402      	str	r4, [sp, #8]
 8001374:	695c      	ldr	r4, [r3, #20]
 8001376:	9402      	str	r4, [sp, #8]
 8001378:	699c      	ldr	r4, [r3, #24]
 800137a:	9402      	str	r4, [sp, #8]
 800137c:	9c02      	ldr	r4, [sp, #8]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800137e:	681c      	ldr	r4, [r3, #0]
 8001380:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8001384:	601c      	str	r4, [r3, #0]
      hi2c->EventCount++;
 8001386:	6d04      	ldr	r4, [r0, #80]	; 0x50
 8001388:	3401      	adds	r4, #1
      hi2c->EventCount = 0U;
 800138a:	6504      	str	r4, [r0, #80]	; 0x50
 800138c:	e76e      	b.n	800126c <HAL_I2C_EV_IRQHandler+0x3c>
      if(hi2c->XferCount == 0U)
 800138e:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001390:	b2a4      	uxth	r4, r4
 8001392:	b954      	cbnz	r4, 80013aa <HAL_I2C_EV_IRQHandler+0x17a>
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001394:	9403      	str	r4, [sp, #12]
 8001396:	695c      	ldr	r4, [r3, #20]
 8001398:	9403      	str	r4, [sp, #12]
 800139a:	699c      	ldr	r4, [r3, #24]
 800139c:	9403      	str	r4, [sp, #12]
 800139e:	9c03      	ldr	r4, [sp, #12]
            hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80013a0:	681c      	ldr	r4, [r3, #0]
 80013a2:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 80013a6:	601c      	str	r4, [r3, #0]
 80013a8:	e019      	b.n	80013de <HAL_I2C_EV_IRQHandler+0x1ae>
      else if(hi2c->XferCount == 1U)   
 80013aa:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 80013ac:	b2a4      	uxth	r4, r4
 80013ae:	2c01      	cmp	r4, #1
 80013b0:	d142      	bne.n	8001438 <HAL_I2C_EV_IRQHandler+0x208>
        if(CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80013b2:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
 80013b6:	d11b      	bne.n	80013f0 <HAL_I2C_EV_IRQHandler+0x1c0>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80013b8:	681c      	ldr	r4, [r3, #0]
 80013ba:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80013be:	601c      	str	r4, [r3, #0]
          if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80013c0:	685c      	ldr	r4, [r3, #4]
 80013c2:	f414 6400 	ands.w	r4, r4, #2048	; 0x800
 80013c6:	d00c      	beq.n	80013e2 <HAL_I2C_EV_IRQHandler+0x1b2>
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 80013c8:	681c      	ldr	r4, [r3, #0]
 80013ca:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80013ce:	601c      	str	r4, [r3, #0]
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013d0:	2400      	movs	r4, #0
 80013d2:	9404      	str	r4, [sp, #16]
 80013d4:	695c      	ldr	r4, [r3, #20]
 80013d6:	9404      	str	r4, [sp, #16]
 80013d8:	699c      	ldr	r4, [r3, #24]
 80013da:	9404      	str	r4, [sp, #16]
 80013dc:	9c04      	ldr	r4, [sp, #16]
      hi2c->EventCount = 0U;
 80013de:	2400      	movs	r4, #0
 80013e0:	e7d3      	b.n	800138a <HAL_I2C_EV_IRQHandler+0x15a>
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013e2:	9405      	str	r4, [sp, #20]
 80013e4:	695c      	ldr	r4, [r3, #20]
 80013e6:	9405      	str	r4, [sp, #20]
 80013e8:	699c      	ldr	r4, [r3, #24]
 80013ea:	9405      	str	r4, [sp, #20]
 80013ec:	9c05      	ldr	r4, [sp, #20]
 80013ee:	e7d7      	b.n	80013a0 <HAL_I2C_EV_IRQHandler+0x170>
        else if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80013f0:	2e04      	cmp	r6, #4
 80013f2:	d015      	beq.n	8001420 <HAL_I2C_EV_IRQHandler+0x1f0>
 80013f4:	2e08      	cmp	r6, #8
 80013f6:	d013      	beq.n	8001420 <HAL_I2C_EV_IRQHandler+0x1f0>
          && (Prev_State != I2C_STATE_MASTER_BUSY_RX))
 80013f8:	f1be 0f12 	cmp.w	lr, #18
 80013fc:	d010      	beq.n	8001420 <HAL_I2C_EV_IRQHandler+0x1f0>
          if(hi2c->XferOptions != I2C_NEXT_FRAME)
 80013fe:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001400:	2c02      	cmp	r4, #2
            hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001402:	681c      	ldr	r4, [r3, #0]
 8001404:	bf14      	ite	ne
 8001406:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
            hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800140a:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
 800140e:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001410:	2400      	movs	r4, #0
 8001412:	9406      	str	r4, [sp, #24]
 8001414:	695c      	ldr	r4, [r3, #20]
 8001416:	9406      	str	r4, [sp, #24]
 8001418:	699c      	ldr	r4, [r3, #24]
 800141a:	9406      	str	r4, [sp, #24]
 800141c:	9c06      	ldr	r4, [sp, #24]
 800141e:	e7de      	b.n	80013de <HAL_I2C_EV_IRQHandler+0x1ae>
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001420:	681c      	ldr	r4, [r3, #0]
 8001422:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8001426:	601c      	str	r4, [r3, #0]
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001428:	2400      	movs	r4, #0
 800142a:	9407      	str	r4, [sp, #28]
 800142c:	695c      	ldr	r4, [r3, #20]
 800142e:	9407      	str	r4, [sp, #28]
 8001430:	699c      	ldr	r4, [r3, #24]
 8001432:	9407      	str	r4, [sp, #28]
 8001434:	9c07      	ldr	r4, [sp, #28]
 8001436:	e7b3      	b.n	80013a0 <HAL_I2C_EV_IRQHandler+0x170>
      else if(hi2c->XferCount == 2U)
 8001438:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 800143a:	b2a4      	uxth	r4, r4
 800143c:	2c02      	cmp	r4, #2
 800143e:	d11c      	bne.n	800147a <HAL_I2C_EV_IRQHandler+0x24a>
        if(hi2c->XferOptions != I2C_NEXT_FRAME)
 8001440:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001442:	2c02      	cmp	r4, #2
          hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001444:	681c      	ldr	r4, [r3, #0]
 8001446:	bf1d      	ittte	ne
 8001448:	f424 6480 	bicne.w	r4, r4, #1024	; 0x400
 800144c:	601c      	strne	r4, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 800144e:	681c      	ldrne	r4, [r3, #0]
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 8001450:	f444 6480 	orreq.w	r4, r4, #1024	; 0x400
          hi2c->Instance->CR1 |= I2C_CR1_POS;
 8001454:	bf18      	it	ne
 8001456:	f444 6400 	orrne.w	r4, r4, #2048	; 0x800
          hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800145a:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800145c:	685c      	ldr	r4, [r3, #4]
 800145e:	0527      	lsls	r7, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8001460:	bf42      	ittt	mi
 8001462:	685c      	ldrmi	r4, [r3, #4]
 8001464:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 8001468:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800146a:	2400      	movs	r4, #0
 800146c:	9408      	str	r4, [sp, #32]
 800146e:	695c      	ldr	r4, [r3, #20]
 8001470:	9408      	str	r4, [sp, #32]
 8001472:	699c      	ldr	r4, [r3, #24]
 8001474:	9408      	str	r4, [sp, #32]
 8001476:	9c08      	ldr	r4, [sp, #32]
 8001478:	e7b1      	b.n	80013de <HAL_I2C_EV_IRQHandler+0x1ae>
        hi2c->Instance->CR1 |= I2C_CR1_ACK;
 800147a:	681c      	ldr	r4, [r3, #0]
 800147c:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8001480:	601c      	str	r4, [r3, #0]
        if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001482:	685c      	ldr	r4, [r3, #4]
 8001484:	0526      	lsls	r6, r4, #20
          hi2c->Instance->CR2 |= I2C_CR2_LAST;
 8001486:	bf42      	ittt	mi
 8001488:	685c      	ldrmi	r4, [r3, #4]
 800148a:	f444 5480 	orrmi.w	r4, r4, #4096	; 0x1000
 800148e:	605c      	strmi	r4, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001490:	2400      	movs	r4, #0
 8001492:	9409      	str	r4, [sp, #36]	; 0x24
 8001494:	695c      	ldr	r4, [r3, #20]
 8001496:	9409      	str	r4, [sp, #36]	; 0x24
 8001498:	699c      	ldr	r4, [r3, #24]
 800149a:	9409      	str	r4, [sp, #36]	; 0x24
 800149c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800149e:	e79e      	b.n	80013de <HAL_I2C_EV_IRQHandler+0x1ae>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80014a0:	2400      	movs	r4, #0
 80014a2:	940a      	str	r4, [sp, #40]	; 0x28
 80014a4:	695c      	ldr	r4, [r3, #20]
 80014a6:	940a      	str	r4, [sp, #40]	; 0x28
 80014a8:	699c      	ldr	r4, [r3, #24]
 80014aa:	940a      	str	r4, [sp, #40]	; 0x28
 80014ac:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80014ae:	e6dd      	b.n	800126c <HAL_I2C_EV_IRQHandler+0x3c>
  else if((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80014b0:	2a21      	cmp	r2, #33	; 0x21
 80014b2:	d003      	beq.n	80014bc <HAL_I2C_EV_IRQHandler+0x28c>
 80014b4:	2940      	cmp	r1, #64	; 0x40
 80014b6:	d108      	bne.n	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
    ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80014b8:	2a22      	cmp	r2, #34	; 0x22
 80014ba:	d106      	bne.n	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
    if(hi2c->XferCount == 0U)
 80014bc:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80014be:	b292      	uxth	r2, r2
 80014c0:	b982      	cbnz	r2, 80014e4 <HAL_I2C_EV_IRQHandler+0x2b4>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014c8:	605a      	str	r2, [r3, #4]
}
 80014ca:	b00d      	add	sp, #52	; 0x34
 80014cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014ce:	bf00      	nop
 80014d0:	00100004 	.word	0x00100004
 80014d4:	00010004 	.word	0x00010004
 80014d8:	00010080 	.word	0x00010080
 80014dc:	00010008 	.word	0x00010008
 80014e0:	00010002 	.word	0x00010002
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80014e4:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 80014e8:	2a40      	cmp	r2, #64	; 0x40
 80014ea:	d127      	bne.n	800153c <HAL_I2C_EV_IRQHandler+0x30c>
        if(hi2c->EventCount == 0)
 80014ec:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80014ee:	b97a      	cbnz	r2, 8001510 <HAL_I2C_EV_IRQHandler+0x2e0>
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80014f0:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 80014f2:	2a01      	cmp	r2, #1
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80014f4:	6c82      	ldr	r2, [r0, #72]	; 0x48
          if(hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80014f6:	d105      	bne.n	8001504 <HAL_I2C_EV_IRQHandler+0x2d4>
 80014f8:	b2d2      	uxtb	r2, r2
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80014fa:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2;
 80014fc:	6d03      	ldr	r3, [r0, #80]	; 0x50
 80014fe:	3302      	adds	r3, #2
            hi2c->EventCount++;
 8001500:	6503      	str	r3, [r0, #80]	; 0x50
 8001502:	e7e2      	b.n	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001504:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001508:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 800150a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 800150c:	3301      	adds	r3, #1
 800150e:	e7f7      	b.n	8001500 <HAL_I2C_EV_IRQHandler+0x2d0>
        else if(hi2c->EventCount == 1)
 8001510:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8001512:	2a01      	cmp	r2, #1
 8001514:	d102      	bne.n	800151c <HAL_I2C_EV_IRQHandler+0x2ec>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001516:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	e7f5      	b.n	8001508 <HAL_I2C_EV_IRQHandler+0x2d8>
        else if(hi2c->EventCount == 2)
 800151c:	6d02      	ldr	r2, [r0, #80]	; 0x50
 800151e:	2a02      	cmp	r2, #2
 8001520:	d1d3      	bne.n	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
          if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001522:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001526:	2a22      	cmp	r2, #34	; 0x22
 8001528:	d104      	bne.n	8001534 <HAL_I2C_EV_IRQHandler+0x304>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 800152a:	681a      	ldr	r2, [r3, #0]
 800152c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	e7ca      	b.n	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
          else if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001534:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8001538:	2a21      	cmp	r2, #33	; 0x21
 800153a:	d1c6      	bne.n	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 800153c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800153e:	1c51      	adds	r1, r2, #1
 8001540:	6241      	str	r1, [r0, #36]	; 0x24
 8001542:	7812      	ldrb	r2, [r2, #0]
 8001544:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 8001546:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001548:	3b01      	subs	r3, #1
 800154a:	b29b      	uxth	r3, r3
 800154c:	8543      	strh	r3, [r0, #42]	; 0x2a
}
 800154e:	e7bc      	b.n	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001550:	2c00      	cmp	r4, #0
 8001552:	d0ba      	beq.n	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
 8001554:	0594      	lsls	r4, r2, #22
 8001556:	d5b8      	bpl.n	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001558:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800155a:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 800155e:	2a21      	cmp	r2, #33	; 0x21
 8001560:	d1b3      	bne.n	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
    if(hi2c->XferCount != 0U)
 8001562:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001564:	b292      	uxth	r2, r2
 8001566:	2a00      	cmp	r2, #0
 8001568:	d1e8      	bne.n	800153c <HAL_I2C_EV_IRQHandler+0x30c>
      if((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800156a:	2904      	cmp	r1, #4
 800156c:	d00d      	beq.n	800158a <HAL_I2C_EV_IRQHandler+0x35a>
 800156e:	2908      	cmp	r1, #8
 8001570:	d00b      	beq.n	800158a <HAL_I2C_EV_IRQHandler+0x35a>
 8001572:	f511 3f80 	cmn.w	r1, #65536	; 0x10000
 8001576:	d008      	beq.n	800158a <HAL_I2C_EV_IRQHandler+0x35a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001578:	6859      	ldr	r1, [r3, #4]
 800157a:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 800157e:	6059      	str	r1, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001580:	2311      	movs	r3, #17
 8001582:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001584:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
 8001588:	e6a2      	b.n	80012d0 <HAL_I2C_EV_IRQHandler+0xa0>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800158a:	685a      	ldr	r2, [r3, #4]
 800158c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001590:	605a      	str	r2, [r3, #4]
        hi2c->Instance->CR1 |= I2C_CR1_STOP;
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001598:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800159a:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 800159c:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 800159e:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80015a0:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80015a4:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80015a8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
        if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80015ac:	2a40      	cmp	r2, #64	; 0x40
 80015ae:	f47f ae92 	bne.w	80012d6 <HAL_I2C_EV_IRQHandler+0xa6>
          HAL_I2C_MemTxCpltCallback(hi2c);
 80015b2:	f7ff fd4b 	bl	800104c <HAL_I2C_MemTxCpltCallback>
 80015b6:	e788      	b.n	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 80015b8:	4d90      	ldr	r5, [pc, #576]	; (80017fc <HAL_I2C_EV_IRQHandler+0x5cc>)
 80015ba:	400d      	ands	r5, r1
 80015bc:	2d00      	cmp	r5, #0
 80015be:	d041      	beq.n	8001644 <HAL_I2C_EV_IRQHandler+0x414>
 80015c0:	0551      	lsls	r1, r2, #21
 80015c2:	d53f      	bpl.n	8001644 <HAL_I2C_EV_IRQHandler+0x414>
 80015c4:	2c00      	cmp	r4, #0
 80015c6:	d13d      	bne.n	8001644 <HAL_I2C_EV_IRQHandler+0x414>
  if(hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80015c8:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 80015cc:	2a22      	cmp	r2, #34	; 0x22
 80015ce:	f47f af7c 	bne.w	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
    tmp = hi2c->XferCount;
 80015d2:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80015d4:	b292      	uxth	r2, r2
    if(tmp > 3U)
 80015d6:	2a03      	cmp	r2, #3
 80015d8:	d913      	bls.n	8001602 <HAL_I2C_EV_IRQHandler+0x3d2>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80015da:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	1c51      	adds	r1, r2, #1
 80015e0:	6241      	str	r1, [r0, #36]	; 0x24
 80015e2:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 80015e4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80015e6:	3b01      	subs	r3, #1
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	8543      	strh	r3, [r0, #42]	; 0x2a
      if(hi2c->XferCount == 3)
 80015ec:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	2b03      	cmp	r3, #3
 80015f2:	f47f af6a 	bne.w	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80015f6:	6802      	ldr	r2, [r0, #0]
 80015f8:	6853      	ldr	r3, [r2, #4]
 80015fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80015fe:	6053      	str	r3, [r2, #4]
 8001600:	e763      	b.n	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
    else if((tmp == 1U) || (tmp == 0U))
 8001602:	2a01      	cmp	r2, #1
 8001604:	f63f af61 	bhi.w	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800160e:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001616:	605a      	str	r2, [r3, #4]
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001618:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	1c51      	adds	r1, r2, #1
 800161e:	6241      	str	r1, [r0, #36]	; 0x24
 8001620:	7013      	strb	r3, [r2, #0]
      hi2c->XferCount--;
 8001622:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001624:	3b01      	subs	r3, #1
 8001626:	b29b      	uxth	r3, r3
 8001628:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 800162a:	2320      	movs	r3, #32
 800162c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      hi2c->PreviousState = I2C_STATE_NONE;
 8001630:	6304      	str	r4, [r0, #48]	; 0x30
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 8001632:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001636:	f880 403e 	strb.w	r4, [r0, #62]	; 0x3e
      if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800163a:	2b40      	cmp	r3, #64	; 0x40
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 800163c:	d158      	bne.n	80016f0 <HAL_I2C_EV_IRQHandler+0x4c0>
      HAL_I2C_MemRxCpltCallback(hi2c);
 800163e:	f000 fbf1 	bl	8001e24 <HAL_I2C_MemRxCpltCallback>
 8001642:	e742      	b.n	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 8001644:	2c00      	cmp	r4, #0
 8001646:	f43f af40 	beq.w	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
 800164a:	0597      	lsls	r7, r2, #22
 800164c:	f57f af3d 	bpl.w	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001650:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
  if(hi2c->XferCount == 4U)
 8001652:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001654:	b292      	uxth	r2, r2
 8001656:	2a04      	cmp	r2, #4
 8001658:	6a42      	ldr	r2, [r0, #36]	; 0x24
 800165a:	d108      	bne.n	800166e <HAL_I2C_EV_IRQHandler+0x43e>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800165c:	6859      	ldr	r1, [r3, #4]
 800165e:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001662:	6059      	str	r1, [r3, #4]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001664:	1c51      	adds	r1, r2, #1
 8001666:	691b      	ldr	r3, [r3, #16]
 8001668:	6241      	str	r1, [r0, #36]	; 0x24
 800166a:	7013      	strb	r3, [r2, #0]
 800166c:	e76b      	b.n	8001546 <HAL_I2C_EV_IRQHandler+0x316>
  else if(hi2c->XferCount == 3U)
 800166e:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 8001670:	b2a4      	uxth	r4, r4
 8001672:	2c03      	cmp	r4, #3
 8001674:	d108      	bne.n	8001688 <HAL_I2C_EV_IRQHandler+0x458>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001676:	6859      	ldr	r1, [r3, #4]
 8001678:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800167c:	6059      	str	r1, [r3, #4]
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800167e:	6819      	ldr	r1, [r3, #0]
 8001680:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8001684:	6019      	str	r1, [r3, #0]
 8001686:	e7ed      	b.n	8001664 <HAL_I2C_EV_IRQHandler+0x434>
  else if(hi2c->XferCount == 2U)
 8001688:	8d44      	ldrh	r4, [r0, #42]	; 0x2a
 800168a:	b2a4      	uxth	r4, r4
 800168c:	2c02      	cmp	r4, #2
 800168e:	d1e9      	bne.n	8001664 <HAL_I2C_EV_IRQHandler+0x434>
    if((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME))
 8001690:	3901      	subs	r1, #1
 8001692:	2901      	cmp	r1, #1
      hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001694:	6819      	ldr	r1, [r3, #0]
 8001696:	bf9d      	ittte	ls
 8001698:	f421 6180 	bicls.w	r1, r1, #1024	; 0x400
 800169c:	6019      	strls	r1, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800169e:	6819      	ldrls	r1, [r3, #0]
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80016a0:	f441 7100 	orrhi.w	r1, r1, #512	; 0x200
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80016a4:	bf98      	it	ls
 80016a6:	f441 7180 	orrls.w	r1, r1, #256	; 0x100
      hi2c->Instance->CR1 |= I2C_CR1_STOP;
 80016aa:	6019      	str	r1, [r3, #0]
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	1c51      	adds	r1, r2, #1
 80016b0:	6241      	str	r1, [r0, #36]	; 0x24
 80016b2:	7013      	strb	r3, [r2, #0]
    hi2c->XferCount--;
 80016b4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80016b6:	3b01      	subs	r3, #1
 80016b8:	b29b      	uxth	r3, r3
 80016ba:	8543      	strh	r3, [r0, #42]	; 0x2a
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80016bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	6242      	str	r2, [r0, #36]	; 0x24
 80016c2:	6802      	ldr	r2, [r0, #0]
 80016c4:	6912      	ldr	r2, [r2, #16]
 80016c6:	701a      	strb	r2, [r3, #0]
    hi2c->XferCount--;
 80016c8:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80016ca:	6802      	ldr	r2, [r0, #0]
    hi2c->XferCount--;
 80016cc:	3b01      	subs	r3, #1
 80016ce:	b29b      	uxth	r3, r3
 80016d0:	8543      	strh	r3, [r0, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80016d2:	6853      	ldr	r3, [r2, #4]
 80016d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80016d8:	6053      	str	r3, [r2, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80016da:	2320      	movs	r3, #32
 80016dc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->PreviousState = I2C_STATE_NONE;
 80016e0:	2300      	movs	r3, #0
 80016e2:	6303      	str	r3, [r0, #48]	; 0x30
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80016e4:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80016e8:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
    if(hi2c->Mode == HAL_I2C_MODE_MEM)
 80016ec:	2a40      	cmp	r2, #64	; 0x40
 80016ee:	e7a5      	b.n	800163c <HAL_I2C_EV_IRQHandler+0x40c>
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80016f0:	f7ff fca7 	bl	8001042 <HAL_I2C_MasterRxCpltCallback>
 80016f4:	e6e9      	b.n	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
    if(((sr1itflags & I2C_FLAG_ADDR) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80016f6:	4c42      	ldr	r4, [pc, #264]	; (8001800 <HAL_I2C_EV_IRQHandler+0x5d0>)
 80016f8:	400c      	ands	r4, r1
 80016fa:	b174      	cbz	r4, 800171a <HAL_I2C_EV_IRQHandler+0x4ea>
 80016fc:	0596      	lsls	r6, r2, #22
 80016fe:	d50c      	bpl.n	800171a <HAL_I2C_EV_IRQHandler+0x4ea>
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8001700:	6999      	ldr	r1, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8001702:	699b      	ldr	r3, [r3, #24]
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TRA) == RESET)
 8001704:	f081 0104 	eor.w	r1, r1, #4
  if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_DUALF) == RESET)
 8001708:	061d      	lsls	r5, r3, #24
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800170a:	f3c1 0180 	ubfx	r1, r1, #2, #1
    SlaveAddrCode = hi2c->Init.OwnAddress1;
 800170e:	bf54      	ite	pl
 8001710:	8982      	ldrhpl	r2, [r0, #12]
    SlaveAddrCode = hi2c->Init.OwnAddress2;
 8001712:	8b02      	ldrhmi	r2, [r0, #24]
  HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8001714:	f7ff fc98 	bl	8001048 <HAL_I2C_AddrCallback>
 8001718:	e6d7      	b.n	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
    else if(((sr1itflags & I2C_FLAG_STOPF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800171a:	4c3a      	ldr	r4, [pc, #232]	; (8001804 <HAL_I2C_EV_IRQHandler+0x5d4>)
 800171c:	400c      	ands	r4, r1
 800171e:	2c00      	cmp	r4, #0
 8001720:	d074      	beq.n	800180c <HAL_I2C_EV_IRQHandler+0x5dc>
 8001722:	0594      	lsls	r4, r2, #22
 8001724:	d572      	bpl.n	800180c <HAL_I2C_EV_IRQHandler+0x5dc>
  uint32_t CurrentState = hi2c->State;
 8001726:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800172a:	6859      	ldr	r1, [r3, #4]
 800172c:	f421 61e0 	bic.w	r1, r1, #1792	; 0x700
 8001730:	6059      	str	r1, [r3, #4]
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8001732:	2100      	movs	r1, #0
 8001734:	910b      	str	r1, [sp, #44]	; 0x2c
 8001736:	6959      	ldr	r1, [r3, #20]
 8001738:	910b      	str	r1, [sp, #44]	; 0x2c
 800173a:	6819      	ldr	r1, [r3, #0]
 800173c:	f041 0101 	orr.w	r1, r1, #1
 8001740:	6019      	str	r1, [r3, #0]
 8001742:	990b      	ldr	r1, [sp, #44]	; 0x2c
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001744:	6819      	ldr	r1, [r3, #0]
 8001746:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800174a:	6019      	str	r1, [r3, #0]
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800174c:	6859      	ldr	r1, [r3, #4]
 800174e:	0509      	lsls	r1, r1, #20
  uint32_t CurrentState = hi2c->State;
 8001750:	b2d2      	uxtb	r2, r2
  if((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8001752:	d50c      	bpl.n	800176e <HAL_I2C_EV_IRQHandler+0x53e>
    if((hi2c->State == HAL_I2C_STATE_BUSY_RX) || (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001754:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8001758:	2922      	cmp	r1, #34	; 0x22
 800175a:	d003      	beq.n	8001764 <HAL_I2C_EV_IRQHandler+0x534>
 800175c:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8001760:	292a      	cmp	r1, #42	; 0x2a
 8001762:	d129      	bne.n	80017b8 <HAL_I2C_EV_IRQHandler+0x588>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001764:	6b81      	ldr	r1, [r0, #56]	; 0x38
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8001766:	6809      	ldr	r1, [r1, #0]
 8001768:	6849      	ldr	r1, [r1, #4]
 800176a:	b289      	uxth	r1, r1
 800176c:	8541      	strh	r1, [r0, #42]	; 0x2a
  if(hi2c->XferCount != 0U)
 800176e:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8001770:	b289      	uxth	r1, r1
 8001772:	b1e1      	cbz	r1, 80017ae <HAL_I2C_EV_IRQHandler+0x57e>
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001774:	6959      	ldr	r1, [r3, #20]
 8001776:	074f      	lsls	r7, r1, #29
 8001778:	d508      	bpl.n	800178c <HAL_I2C_EV_IRQHandler+0x55c>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 800177a:	6a41      	ldr	r1, [r0, #36]	; 0x24
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	1c4c      	adds	r4, r1, #1
 8001780:	6244      	str	r4, [r0, #36]	; 0x24
 8001782:	700b      	strb	r3, [r1, #0]
      hi2c->XferCount--;
 8001784:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8001786:	3b01      	subs	r3, #1
 8001788:	b29b      	uxth	r3, r3
 800178a:	8543      	strh	r3, [r0, #42]	; 0x2a
    if(__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800178c:	6801      	ldr	r1, [r0, #0]
 800178e:	694b      	ldr	r3, [r1, #20]
 8001790:	065e      	lsls	r6, r3, #25
 8001792:	d508      	bpl.n	80017a6 <HAL_I2C_EV_IRQHandler+0x576>
      (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 8001794:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001796:	6909      	ldr	r1, [r1, #16]
 8001798:	1c5c      	adds	r4, r3, #1
 800179a:	6244      	str	r4, [r0, #36]	; 0x24
 800179c:	7019      	strb	r1, [r3, #0]
      hi2c->XferCount--;
 800179e:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80017a0:	3b01      	subs	r3, #1
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80017a6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80017a8:	f043 0304 	orr.w	r3, r3, #4
 80017ac:	6403      	str	r3, [r0, #64]	; 0x40
  if(hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80017ae:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80017b0:	b123      	cbz	r3, 80017bc <HAL_I2C_EV_IRQHandler+0x58c>
    I2C_ITError(hi2c);
 80017b2:	f7ff fca9 	bl	8001108 <I2C_ITError>
 80017b6:	e688      	b.n	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
      hi2c->XferCount = __HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80017b8:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80017ba:	e7d4      	b.n	8001766 <HAL_I2C_EV_IRQHandler+0x536>
    if((CurrentState == HAL_I2C_STATE_LISTEN ) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN) || \
 80017bc:	f1a2 0128 	sub.w	r1, r2, #40	; 0x28
 80017c0:	2902      	cmp	r1, #2
 80017c2:	d80a      	bhi.n	80017da <HAL_I2C_EV_IRQHandler+0x5aa>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017c4:	4a10      	ldr	r2, [pc, #64]	; (8001808 <HAL_I2C_EV_IRQHandler+0x5d8>)
 80017c6:	62c2      	str	r2, [r0, #44]	; 0x2c
      hi2c->State = HAL_I2C_STATE_READY;
 80017c8:	2220      	movs	r2, #32
      hi2c->PreviousState = I2C_STATE_NONE;
 80017ca:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80017cc:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80017d0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80017d4:	f7ff fc39 	bl	800104a <HAL_I2C_ListenCpltCallback>
 80017d8:	e677      	b.n	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
      if((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80017da:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80017dc:	2b22      	cmp	r3, #34	; 0x22
 80017de:	d002      	beq.n	80017e6 <HAL_I2C_EV_IRQHandler+0x5b6>
 80017e0:	2a22      	cmp	r2, #34	; 0x22
 80017e2:	f47f ae72 	bne.w	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
        hi2c->PreviousState = I2C_STATE_NONE;
 80017e6:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 80017e8:	2220      	movs	r2, #32
        hi2c->PreviousState = I2C_STATE_NONE;
 80017ea:	6303      	str	r3, [r0, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80017ec:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017f0:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80017f4:	f7ff fc27 	bl	8001046 <HAL_I2C_SlaveRxCpltCallback>
 80017f8:	e667      	b.n	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
 80017fa:	bf00      	nop
 80017fc:	00010040 	.word	0x00010040
 8001800:	00010002 	.word	0x00010002
 8001804:	00010010 	.word	0x00010010
 8001808:	ffff0000 	.word	0xffff0000
    else if((sr2itflags & I2C_FLAG_TRA) != RESET)
 800180c:	4e39      	ldr	r6, [pc, #228]	; (80018f4 <HAL_I2C_EV_IRQHandler+0x6c4>)
 800180e:	4c3a      	ldr	r4, [pc, #232]	; (80018f8 <HAL_I2C_EV_IRQHandler+0x6c8>)
 8001810:	402e      	ands	r6, r5
 8001812:	400c      	ands	r4, r1
 8001814:	2e00      	cmp	r6, #0
 8001816:	d036      	beq.n	8001886 <HAL_I2C_EV_IRQHandler+0x656>
      if(((sr1itflags & I2C_FLAG_TXE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8001818:	4d38      	ldr	r5, [pc, #224]	; (80018fc <HAL_I2C_EV_IRQHandler+0x6cc>)
 800181a:	400d      	ands	r5, r1
 800181c:	b33d      	cbz	r5, 800186e <HAL_I2C_EV_IRQHandler+0x63e>
 800181e:	0555      	lsls	r5, r2, #21
 8001820:	d525      	bpl.n	800186e <HAL_I2C_EV_IRQHandler+0x63e>
 8001822:	bb24      	cbnz	r4, 800186e <HAL_I2C_EV_IRQHandler+0x63e>
  uint32_t CurrentState = hi2c->State;
 8001824:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 8001828:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800182a:	b292      	uxth	r2, r2
  uint32_t CurrentState = hi2c->State;
 800182c:	b2c9      	uxtb	r1, r1
  if(hi2c->XferCount != 0U)
 800182e:	2a00      	cmp	r2, #0
 8001830:	f43f ae4b 	beq.w	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
    hi2c->Instance->DR = (*hi2c->pBuffPtr++);
 8001834:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8001836:	1c54      	adds	r4, r2, #1
 8001838:	6244      	str	r4, [r0, #36]	; 0x24
 800183a:	7812      	ldrb	r2, [r2, #0]
 800183c:	611a      	str	r2, [r3, #16]
    hi2c->XferCount--;
 800183e:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001840:	3a01      	subs	r2, #1
 8001842:	b292      	uxth	r2, r2
 8001844:	8542      	strh	r2, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001846:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 8001848:	b292      	uxth	r2, r2
 800184a:	2a00      	cmp	r2, #0
 800184c:	f47f ae3d 	bne.w	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
 8001850:	2929      	cmp	r1, #41	; 0x29
 8001852:	f47f ae3a 	bne.w	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001856:	685a      	ldr	r2, [r3, #4]
 8001858:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800185c:	605a      	str	r2, [r3, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800185e:	2321      	movs	r3, #33	; 0x21
 8001860:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8001862:	2328      	movs	r3, #40	; 0x28
 8001864:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001868:	f7ff fbec 	bl	8001044 <HAL_I2C_SlaveTxCpltCallback>
 800186c:	e62d      	b.n	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 800186e:	2c00      	cmp	r4, #0
 8001870:	f43f ae2b 	beq.w	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
 8001874:	0594      	lsls	r4, r2, #22
 8001876:	f57f ae28 	bpl.w	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
  if(hi2c->XferCount != 0U)
 800187a:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 800187c:	b292      	uxth	r2, r2
 800187e:	2a00      	cmp	r2, #0
 8001880:	f47f ae5c 	bne.w	800153c <HAL_I2C_EV_IRQHandler+0x30c>
 8001884:	e621      	b.n	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
      if(((sr1itflags & I2C_FLAG_RXNE) != RESET) && ((itsources & I2C_IT_BUF) != RESET) && ((sr1itflags & I2C_FLAG_BTF) == RESET))
 8001886:	4d1e      	ldr	r5, [pc, #120]	; (8001900 <HAL_I2C_EV_IRQHandler+0x6d0>)
 8001888:	400d      	ands	r5, r1
 800188a:	b335      	cbz	r5, 80018da <HAL_I2C_EV_IRQHandler+0x6aa>
 800188c:	0551      	lsls	r1, r2, #21
 800188e:	d524      	bpl.n	80018da <HAL_I2C_EV_IRQHandler+0x6aa>
 8001890:	bb1c      	cbnz	r4, 80018da <HAL_I2C_EV_IRQHandler+0x6aa>
  uint32_t CurrentState = hi2c->State;
 8001892:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  if(hi2c->XferCount != 0U)
 8001896:	8d41      	ldrh	r1, [r0, #42]	; 0x2a
 8001898:	b289      	uxth	r1, r1
  uint32_t CurrentState = hi2c->State;
 800189a:	b2d2      	uxtb	r2, r2
  if(hi2c->XferCount != 0U)
 800189c:	2900      	cmp	r1, #0
 800189e:	f43f ae14 	beq.w	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80018a2:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80018a4:	691b      	ldr	r3, [r3, #16]
 80018a6:	1c4c      	adds	r4, r1, #1
 80018a8:	6244      	str	r4, [r0, #36]	; 0x24
 80018aa:	700b      	strb	r3, [r1, #0]
    hi2c->XferCount--;
 80018ac:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80018ae:	3b01      	subs	r3, #1
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	8543      	strh	r3, [r0, #42]	; 0x2a
    if((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80018b4:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f47f ae06 	bne.w	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
 80018be:	2a2a      	cmp	r2, #42	; 0x2a
 80018c0:	f47f ae03 	bne.w	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80018c4:	6802      	ldr	r2, [r0, #0]
 80018c6:	6853      	ldr	r3, [r2, #4]
 80018c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80018cc:	6053      	str	r3, [r2, #4]
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80018ce:	2322      	movs	r3, #34	; 0x22
 80018d0:	6303      	str	r3, [r0, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80018d2:	2328      	movs	r3, #40	; 0x28
 80018d4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80018d8:	e78c      	b.n	80017f4 <HAL_I2C_EV_IRQHandler+0x5c4>
      else if(((sr1itflags & I2C_FLAG_BTF) != RESET) && ((itsources & I2C_IT_EVT) != RESET))
 80018da:	2c00      	cmp	r4, #0
 80018dc:	f43f adf5 	beq.w	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
 80018e0:	0592      	lsls	r2, r2, #22
 80018e2:	f57f adf2 	bpl.w	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
  if(hi2c->XferCount != 0U)
 80018e6:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80018e8:	b292      	uxth	r2, r2
 80018ea:	2a00      	cmp	r2, #0
 80018ec:	f43f aded 	beq.w	80014ca <HAL_I2C_EV_IRQHandler+0x29a>
    (*hi2c->pBuffPtr++) = hi2c->Instance->DR;
 80018f0:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80018f2:	e6b7      	b.n	8001664 <HAL_I2C_EV_IRQHandler+0x434>
 80018f4:	00100004 	.word	0x00100004
 80018f8:	00010004 	.word	0x00010004
 80018fc:	00010080 	.word	0x00010080
 8001900:	00010040 	.word	0x00010040

08001904 <I2C_DMAAbort>:
  I2C_HandleTypeDef* hi2c = ( I2C_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001904:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8001906:	b508      	push	{r3, lr}
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8001908:	6803      	ldr	r3, [r0, #0]
  hi2c->hdmatx->XferAbortCallback = NULL;
 800190a:	6b41      	ldr	r1, [r0, #52]	; 0x34
  hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001912:	601a      	str	r2, [r3, #0]
  hi2c->XferCount = 0U;
 8001914:	2200      	movs	r2, #0
 8001916:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2c->hdmatx->XferAbortCallback = NULL;
 8001918:	650a      	str	r2, [r1, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 800191a:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800191c:	650a      	str	r2, [r1, #80]	; 0x50
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 800191e:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8001922:	2960      	cmp	r1, #96	; 0x60
 8001924:	f04f 0120 	mov.w	r1, #32
    hi2c->State = HAL_I2C_STATE_READY;
 8001928:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800192c:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  if(hi2c->State == HAL_I2C_STATE_ABORT)
 8001930:	d107      	bne.n	8001942 <I2C_DMAAbort+0x3e>
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001932:	6402      	str	r2, [r0, #64]	; 0x40
    __HAL_I2C_DISABLE(hi2c);
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	f022 0201 	bic.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]
    HAL_I2C_AbortCpltCallback(hi2c);
 800193c:	f7ff fbe2 	bl	8001104 <HAL_I2C_AbortCpltCallback>
 8001940:	bd08      	pop	{r3, pc}
    __HAL_I2C_DISABLE(hi2c);
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	f022 0201 	bic.w	r2, r2, #1
 8001948:	601a      	str	r2, [r3, #0]
    HAL_I2C_ErrorCallback(hi2c);
 800194a:	f7ff fb80 	bl	800104e <HAL_I2C_ErrorCallback>
 800194e:	bd08      	pop	{r3, pc}

08001950 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001950:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001954:	4604      	mov	r4, r0
 8001956:	b918      	cbnz	r0, 8001960 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8001958:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 800195a:	b002      	add	sp, #8
 800195c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001960:	6803      	ldr	r3, [r0, #0]
 8001962:	07dd      	lsls	r5, r3, #31
 8001964:	d410      	bmi.n	8001988 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001966:	6823      	ldr	r3, [r4, #0]
 8001968:	0798      	lsls	r0, r3, #30
 800196a:	d458      	bmi.n	8001a1e <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196c:	6823      	ldr	r3, [r4, #0]
 800196e:	071a      	lsls	r2, r3, #28
 8001970:	f100 809a 	bmi.w	8001aa8 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001974:	6823      	ldr	r3, [r4, #0]
 8001976:	075b      	lsls	r3, r3, #29
 8001978:	f100 80b8 	bmi.w	8001aec <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800197c:	69a2      	ldr	r2, [r4, #24]
 800197e:	2a00      	cmp	r2, #0
 8001980:	f040 8119 	bne.w	8001bb6 <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 8001984:	2000      	movs	r0, #0
 8001986:	e7e8      	b.n	800195a <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001988:	4ba6      	ldr	r3, [pc, #664]	; (8001c24 <HAL_RCC_OscConfig+0x2d4>)
 800198a:	689a      	ldr	r2, [r3, #8]
 800198c:	f002 020c 	and.w	r2, r2, #12
 8001990:	2a04      	cmp	r2, #4
 8001992:	d007      	beq.n	80019a4 <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001994:	689a      	ldr	r2, [r3, #8]
 8001996:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800199a:	2a08      	cmp	r2, #8
 800199c:	d10a      	bne.n	80019b4 <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	0259      	lsls	r1, r3, #9
 80019a2:	d507      	bpl.n	80019b4 <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019a4:	4b9f      	ldr	r3, [pc, #636]	; (8001c24 <HAL_RCC_OscConfig+0x2d4>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	039a      	lsls	r2, r3, #14
 80019aa:	d5dc      	bpl.n	8001966 <HAL_RCC_OscConfig+0x16>
 80019ac:	6863      	ldr	r3, [r4, #4]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1d9      	bne.n	8001966 <HAL_RCC_OscConfig+0x16>
 80019b2:	e7d1      	b.n	8001958 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019b4:	6863      	ldr	r3, [r4, #4]
 80019b6:	4d9b      	ldr	r5, [pc, #620]	; (8001c24 <HAL_RCC_OscConfig+0x2d4>)
 80019b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019bc:	d111      	bne.n	80019e2 <HAL_RCC_OscConfig+0x92>
 80019be:	682b      	ldr	r3, [r5, #0]
 80019c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019c4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80019c6:	f7fe fdd1 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ca:	4d96      	ldr	r5, [pc, #600]	; (8001c24 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80019cc:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ce:	682b      	ldr	r3, [r5, #0]
 80019d0:	039b      	lsls	r3, r3, #14
 80019d2:	d4c8      	bmi.n	8001966 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019d4:	f7fe fdca 	bl	800056c <HAL_GetTick>
 80019d8:	1b80      	subs	r0, r0, r6
 80019da:	2864      	cmp	r0, #100	; 0x64
 80019dc:	d9f7      	bls.n	80019ce <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80019de:	2003      	movs	r0, #3
 80019e0:	e7bb      	b.n	800195a <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019e6:	d104      	bne.n	80019f2 <HAL_RCC_OscConfig+0xa2>
 80019e8:	682b      	ldr	r3, [r5, #0]
 80019ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019ee:	602b      	str	r3, [r5, #0]
 80019f0:	e7e5      	b.n	80019be <HAL_RCC_OscConfig+0x6e>
 80019f2:	682a      	ldr	r2, [r5, #0]
 80019f4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019f8:	602a      	str	r2, [r5, #0]
 80019fa:	682a      	ldr	r2, [r5, #0]
 80019fc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a00:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1df      	bne.n	80019c6 <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 8001a06:	f7fe fdb1 	bl	800056c <HAL_GetTick>
 8001a0a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a0c:	682b      	ldr	r3, [r5, #0]
 8001a0e:	039f      	lsls	r7, r3, #14
 8001a10:	d5a9      	bpl.n	8001966 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a12:	f7fe fdab 	bl	800056c <HAL_GetTick>
 8001a16:	1b80      	subs	r0, r0, r6
 8001a18:	2864      	cmp	r0, #100	; 0x64
 8001a1a:	d9f7      	bls.n	8001a0c <HAL_RCC_OscConfig+0xbc>
 8001a1c:	e7df      	b.n	80019de <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a1e:	4b81      	ldr	r3, [pc, #516]	; (8001c24 <HAL_RCC_OscConfig+0x2d4>)
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	f012 0f0c 	tst.w	r2, #12
 8001a26:	d007      	beq.n	8001a38 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a28:	689a      	ldr	r2, [r3, #8]
 8001a2a:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a2e:	2a08      	cmp	r2, #8
 8001a30:	d111      	bne.n	8001a56 <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	025e      	lsls	r6, r3, #9
 8001a36:	d40e      	bmi.n	8001a56 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a38:	4b7a      	ldr	r3, [pc, #488]	; (8001c24 <HAL_RCC_OscConfig+0x2d4>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	0795      	lsls	r5, r2, #30
 8001a3e:	d502      	bpl.n	8001a46 <HAL_RCC_OscConfig+0xf6>
 8001a40:	68e2      	ldr	r2, [r4, #12]
 8001a42:	2a01      	cmp	r2, #1
 8001a44:	d188      	bne.n	8001958 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	6921      	ldr	r1, [r4, #16]
 8001a4a:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8001a4e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8001a52:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a54:	e78a      	b.n	800196c <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001a56:	68e2      	ldr	r2, [r4, #12]
 8001a58:	4b73      	ldr	r3, [pc, #460]	; (8001c28 <HAL_RCC_OscConfig+0x2d8>)
 8001a5a:	b1b2      	cbz	r2, 8001a8a <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a60:	f7fe fd84 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a64:	4d6f      	ldr	r5, [pc, #444]	; (8001c24 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001a66:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a68:	682b      	ldr	r3, [r5, #0]
 8001a6a:	0798      	lsls	r0, r3, #30
 8001a6c:	d507      	bpl.n	8001a7e <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6e:	682b      	ldr	r3, [r5, #0]
 8001a70:	6922      	ldr	r2, [r4, #16]
 8001a72:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001a76:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a7a:	602b      	str	r3, [r5, #0]
 8001a7c:	e776      	b.n	800196c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a7e:	f7fe fd75 	bl	800056c <HAL_GetTick>
 8001a82:	1b80      	subs	r0, r0, r6
 8001a84:	2802      	cmp	r0, #2
 8001a86:	d9ef      	bls.n	8001a68 <HAL_RCC_OscConfig+0x118>
 8001a88:	e7a9      	b.n	80019de <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8001a8a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001a8c:	f7fe fd6e 	bl	800056c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a90:	4d64      	ldr	r5, [pc, #400]	; (8001c24 <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 8001a92:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a94:	682b      	ldr	r3, [r5, #0]
 8001a96:	0799      	lsls	r1, r3, #30
 8001a98:	f57f af68 	bpl.w	800196c <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a9c:	f7fe fd66 	bl	800056c <HAL_GetTick>
 8001aa0:	1b80      	subs	r0, r0, r6
 8001aa2:	2802      	cmp	r0, #2
 8001aa4:	d9f6      	bls.n	8001a94 <HAL_RCC_OscConfig+0x144>
 8001aa6:	e79a      	b.n	80019de <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001aa8:	6962      	ldr	r2, [r4, #20]
 8001aaa:	4b60      	ldr	r3, [pc, #384]	; (8001c2c <HAL_RCC_OscConfig+0x2dc>)
 8001aac:	b17a      	cbz	r2, 8001ace <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 8001aae:	2201      	movs	r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ab2:	f7fe fd5b 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ab6:	4d5b      	ldr	r5, [pc, #364]	; (8001c24 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001ab8:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aba:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001abc:	079f      	lsls	r7, r3, #30
 8001abe:	f53f af59 	bmi.w	8001974 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ac2:	f7fe fd53 	bl	800056c <HAL_GetTick>
 8001ac6:	1b80      	subs	r0, r0, r6
 8001ac8:	2802      	cmp	r0, #2
 8001aca:	d9f6      	bls.n	8001aba <HAL_RCC_OscConfig+0x16a>
 8001acc:	e787      	b.n	80019de <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 8001ace:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001ad0:	f7fe fd4c 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad4:	4d53      	ldr	r5, [pc, #332]	; (8001c24 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001ad6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ad8:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8001ada:	0798      	lsls	r0, r3, #30
 8001adc:	f57f af4a 	bpl.w	8001974 <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ae0:	f7fe fd44 	bl	800056c <HAL_GetTick>
 8001ae4:	1b80      	subs	r0, r0, r6
 8001ae6:	2802      	cmp	r0, #2
 8001ae8:	d9f6      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x188>
 8001aea:	e778      	b.n	80019de <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aec:	4b4d      	ldr	r3, [pc, #308]	; (8001c24 <HAL_RCC_OscConfig+0x2d4>)
 8001aee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001af0:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8001af4:	d128      	bne.n	8001b48 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af6:	9201      	str	r2, [sp, #4]
 8001af8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001afa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001afe:	641a      	str	r2, [r3, #64]	; 0x40
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001b0a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0c:	4d48      	ldr	r5, [pc, #288]	; (8001c30 <HAL_RCC_OscConfig+0x2e0>)
 8001b0e:	682b      	ldr	r3, [r5, #0]
 8001b10:	05d9      	lsls	r1, r3, #23
 8001b12:	d51b      	bpl.n	8001b4c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b14:	68a3      	ldr	r3, [r4, #8]
 8001b16:	4d43      	ldr	r5, [pc, #268]	; (8001c24 <HAL_RCC_OscConfig+0x2d4>)
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d127      	bne.n	8001b6c <HAL_RCC_OscConfig+0x21c>
 8001b1c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b1e:	f043 0301 	orr.w	r3, r3, #1
 8001b22:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001b24:	f7fe fd22 	bl	800056c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b28:	4d3e      	ldr	r5, [pc, #248]	; (8001c24 <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8001b2a:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b2c:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b30:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b32:	079b      	lsls	r3, r3, #30
 8001b34:	d539      	bpl.n	8001baa <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 8001b36:	2e00      	cmp	r6, #0
 8001b38:	f43f af20 	beq.w	800197c <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b3c:	4a39      	ldr	r2, [pc, #228]	; (8001c24 <HAL_RCC_OscConfig+0x2d4>)
 8001b3e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001b40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	e719      	b.n	800197c <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001b48:	2600      	movs	r6, #0
 8001b4a:	e7df      	b.n	8001b0c <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b4c:	682b      	ldr	r3, [r5, #0]
 8001b4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b52:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001b54:	f7fe fd0a 	bl	800056c <HAL_GetTick>
 8001b58:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5a:	682b      	ldr	r3, [r5, #0]
 8001b5c:	05da      	lsls	r2, r3, #23
 8001b5e:	d4d9      	bmi.n	8001b14 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b60:	f7fe fd04 	bl	800056c <HAL_GetTick>
 8001b64:	1bc0      	subs	r0, r0, r7
 8001b66:	2802      	cmp	r0, #2
 8001b68:	d9f7      	bls.n	8001b5a <HAL_RCC_OscConfig+0x20a>
 8001b6a:	e738      	b.n	80019de <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b6c:	2b05      	cmp	r3, #5
 8001b6e:	d104      	bne.n	8001b7a <HAL_RCC_OscConfig+0x22a>
 8001b70:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b72:	f043 0304 	orr.w	r3, r3, #4
 8001b76:	672b      	str	r3, [r5, #112]	; 0x70
 8001b78:	e7d0      	b.n	8001b1c <HAL_RCC_OscConfig+0x1cc>
 8001b7a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b7c:	f022 0201 	bic.w	r2, r2, #1
 8001b80:	672a      	str	r2, [r5, #112]	; 0x70
 8001b82:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8001b84:	f022 0204 	bic.w	r2, r2, #4
 8001b88:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1ca      	bne.n	8001b24 <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8001b8e:	f7fe fced 	bl	800056c <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b92:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001b96:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b98:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001b9a:	0798      	lsls	r0, r3, #30
 8001b9c:	d5cb      	bpl.n	8001b36 <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b9e:	f7fe fce5 	bl	800056c <HAL_GetTick>
 8001ba2:	1bc0      	subs	r0, r0, r7
 8001ba4:	4540      	cmp	r0, r8
 8001ba6:	d9f7      	bls.n	8001b98 <HAL_RCC_OscConfig+0x248>
 8001ba8:	e719      	b.n	80019de <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001baa:	f7fe fcdf 	bl	800056c <HAL_GetTick>
 8001bae:	1bc0      	subs	r0, r0, r7
 8001bb0:	4540      	cmp	r0, r8
 8001bb2:	d9bd      	bls.n	8001b30 <HAL_RCC_OscConfig+0x1e0>
 8001bb4:	e713      	b.n	80019de <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bb6:	4d1b      	ldr	r5, [pc, #108]	; (8001c24 <HAL_RCC_OscConfig+0x2d4>)
 8001bb8:	68ab      	ldr	r3, [r5, #8]
 8001bba:	f003 030c 	and.w	r3, r3, #12
 8001bbe:	2b08      	cmp	r3, #8
 8001bc0:	f43f aeca 	beq.w	8001958 <HAL_RCC_OscConfig+0x8>
 8001bc4:	4e1b      	ldr	r6, [pc, #108]	; (8001c34 <HAL_RCC_OscConfig+0x2e4>)
 8001bc6:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bc8:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001bca:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bcc:	d134      	bne.n	8001c38 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 8001bce:	f7fe fccd 	bl	800056c <HAL_GetTick>
 8001bd2:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bd4:	682b      	ldr	r3, [r5, #0]
 8001bd6:	0199      	lsls	r1, r3, #6
 8001bd8:	d41e      	bmi.n	8001c18 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bda:	6a22      	ldr	r2, [r4, #32]
 8001bdc:	69e3      	ldr	r3, [r4, #28]
 8001bde:	4313      	orrs	r3, r2
 8001be0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001be2:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001be6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001be8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001bec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bee:	4c0d      	ldr	r4, [pc, #52]	; (8001c24 <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bf0:	0852      	lsrs	r2, r2, #1
 8001bf2:	3a01      	subs	r2, #1
 8001bf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001bf8:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001bfe:	f7fe fcb5 	bl	800056c <HAL_GetTick>
 8001c02:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c04:	6823      	ldr	r3, [r4, #0]
 8001c06:	019a      	lsls	r2, r3, #6
 8001c08:	f53f aebc 	bmi.w	8001984 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c0c:	f7fe fcae 	bl	800056c <HAL_GetTick>
 8001c10:	1b40      	subs	r0, r0, r5
 8001c12:	2802      	cmp	r0, #2
 8001c14:	d9f6      	bls.n	8001c04 <HAL_RCC_OscConfig+0x2b4>
 8001c16:	e6e2      	b.n	80019de <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c18:	f7fe fca8 	bl	800056c <HAL_GetTick>
 8001c1c:	1bc0      	subs	r0, r0, r7
 8001c1e:	2802      	cmp	r0, #2
 8001c20:	d9d8      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x284>
 8001c22:	e6dc      	b.n	80019de <HAL_RCC_OscConfig+0x8e>
 8001c24:	40023800 	.word	0x40023800
 8001c28:	42470000 	.word	0x42470000
 8001c2c:	42470e80 	.word	0x42470e80
 8001c30:	40007000 	.word	0x40007000
 8001c34:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8001c38:	f7fe fc98 	bl	800056c <HAL_GetTick>
 8001c3c:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3e:	682b      	ldr	r3, [r5, #0]
 8001c40:	019b      	lsls	r3, r3, #6
 8001c42:	f57f ae9f 	bpl.w	8001984 <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c46:	f7fe fc91 	bl	800056c <HAL_GetTick>
 8001c4a:	1b00      	subs	r0, r0, r4
 8001c4c:	2802      	cmp	r0, #2
 8001c4e:	d9f6      	bls.n	8001c3e <HAL_RCC_OscConfig+0x2ee>
 8001c50:	e6c5      	b.n	80019de <HAL_RCC_OscConfig+0x8e>
 8001c52:	bf00      	nop

08001c54 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c54:	4913      	ldr	r1, [pc, #76]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001c56:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c58:	688b      	ldr	r3, [r1, #8]
 8001c5a:	f003 030c 	and.w	r3, r3, #12
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	d003      	beq.n	8001c6a <HAL_RCC_GetSysClockFreq+0x16>
 8001c62:	2b08      	cmp	r3, #8
 8001c64:	d003      	beq.n	8001c6e <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c66:	4810      	ldr	r0, [pc, #64]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001c68:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8001c6a:	4810      	ldr	r0, [pc, #64]	; (8001cac <HAL_RCC_GetSysClockFreq+0x58>)
 8001c6c:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c6e:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c70:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c72:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c74:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c78:	bf14      	ite	ne
 8001c7a:	480c      	ldrne	r0, [pc, #48]	; (8001cac <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7c:	480a      	ldreq	r0, [pc, #40]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c7e:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001c82:	bf18      	it	ne
 8001c84:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c86:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c8a:	fba1 0100 	umull	r0, r1, r1, r0
 8001c8e:	f7fe fa9b 	bl	80001c8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001c92:	4b04      	ldr	r3, [pc, #16]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x50>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 8001c9e:	fbb0 f0f3 	udiv	r0, r0, r3
 8001ca2:	bd08      	pop	{r3, pc}
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	00f42400 	.word	0x00f42400
 8001cac:	007a1200 	.word	0x007a1200

08001cb0 <HAL_RCC_ClockConfig>:
{
 8001cb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001cb4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001cb6:	4604      	mov	r4, r0
 8001cb8:	b910      	cbnz	r0, 8001cc0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001cba:	2001      	movs	r0, #1
 8001cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cc0:	4b44      	ldr	r3, [pc, #272]	; (8001dd4 <HAL_RCC_ClockConfig+0x124>)
 8001cc2:	681a      	ldr	r2, [r3, #0]
 8001cc4:	f002 020f 	and.w	r2, r2, #15
 8001cc8:	428a      	cmp	r2, r1
 8001cca:	d328      	bcc.n	8001d1e <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ccc:	6821      	ldr	r1, [r4, #0]
 8001cce:	078f      	lsls	r7, r1, #30
 8001cd0:	d42d      	bmi.n	8001d2e <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cd2:	07c8      	lsls	r0, r1, #31
 8001cd4:	d440      	bmi.n	8001d58 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd6:	4b3f      	ldr	r3, [pc, #252]	; (8001dd4 <HAL_RCC_ClockConfig+0x124>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	f002 020f 	and.w	r2, r2, #15
 8001cde:	4295      	cmp	r5, r2
 8001ce0:	d366      	bcc.n	8001db0 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce2:	6822      	ldr	r2, [r4, #0]
 8001ce4:	0751      	lsls	r1, r2, #29
 8001ce6:	d46c      	bmi.n	8001dc2 <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ce8:	0713      	lsls	r3, r2, #28
 8001cea:	d507      	bpl.n	8001cfc <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001cec:	4a3a      	ldr	r2, [pc, #232]	; (8001dd8 <HAL_RCC_ClockConfig+0x128>)
 8001cee:	6921      	ldr	r1, [r4, #16]
 8001cf0:	6893      	ldr	r3, [r2, #8]
 8001cf2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001cf6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001cfa:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cfc:	f7ff ffaa 	bl	8001c54 <HAL_RCC_GetSysClockFreq>
 8001d00:	4b35      	ldr	r3, [pc, #212]	; (8001dd8 <HAL_RCC_ClockConfig+0x128>)
 8001d02:	4a36      	ldr	r2, [pc, #216]	; (8001ddc <HAL_RCC_ClockConfig+0x12c>)
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d0a:	5cd3      	ldrb	r3, [r2, r3]
 8001d0c:	40d8      	lsrs	r0, r3
 8001d0e:	4b34      	ldr	r3, [pc, #208]	; (8001de0 <HAL_RCC_ClockConfig+0x130>)
 8001d10:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d12:	2000      	movs	r0, #0
 8001d14:	f7fe fbe0 	bl	80004d8 <HAL_InitTick>
  return HAL_OK;
 8001d18:	2000      	movs	r0, #0
 8001d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1e:	b2ca      	uxtb	r2, r1
 8001d20:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	4299      	cmp	r1, r3
 8001d2a:	d1c6      	bne.n	8001cba <HAL_RCC_ClockConfig+0xa>
 8001d2c:	e7ce      	b.n	8001ccc <HAL_RCC_ClockConfig+0x1c>
 8001d2e:	4b2a      	ldr	r3, [pc, #168]	; (8001dd8 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d30:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d34:	bf1e      	ittt	ne
 8001d36:	689a      	ldrne	r2, [r3, #8]
 8001d38:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8001d3c:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d3e:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d40:	bf42      	ittt	mi
 8001d42:	689a      	ldrmi	r2, [r3, #8]
 8001d44:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8001d48:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	68a0      	ldr	r0, [r4, #8]
 8001d4e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001d52:	4302      	orrs	r2, r0
 8001d54:	609a      	str	r2, [r3, #8]
 8001d56:	e7bc      	b.n	8001cd2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d58:	6862      	ldr	r2, [r4, #4]
 8001d5a:	4b1f      	ldr	r3, [pc, #124]	; (8001dd8 <HAL_RCC_ClockConfig+0x128>)
 8001d5c:	2a01      	cmp	r2, #1
 8001d5e:	d11d      	bne.n	8001d9c <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d66:	d0a8      	beq.n	8001cba <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d68:	4e1b      	ldr	r6, [pc, #108]	; (8001dd8 <HAL_RCC_ClockConfig+0x128>)
 8001d6a:	68b3      	ldr	r3, [r6, #8]
 8001d6c:	f023 0303 	bic.w	r3, r3, #3
 8001d70:	4313      	orrs	r3, r2
 8001d72:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8001d74:	f7fe fbfa 	bl	800056c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d78:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001d7c:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7e:	68b3      	ldr	r3, [r6, #8]
 8001d80:	6862      	ldr	r2, [r4, #4]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001d8a:	d0a4      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d8c:	f7fe fbee 	bl	800056c <HAL_GetTick>
 8001d90:	1bc0      	subs	r0, r0, r7
 8001d92:	4540      	cmp	r0, r8
 8001d94:	d9f3      	bls.n	8001d7e <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 8001d96:	2003      	movs	r0, #3
}
 8001d98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d9c:	1e91      	subs	r1, r2, #2
 8001d9e:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da0:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001da2:	d802      	bhi.n	8001daa <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001da4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001da8:	e7dd      	b.n	8001d66 <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001daa:	f013 0f02 	tst.w	r3, #2
 8001dae:	e7da      	b.n	8001d66 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db0:	b2ea      	uxtb	r2, r5
 8001db2:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 030f 	and.w	r3, r3, #15
 8001dba:	429d      	cmp	r5, r3
 8001dbc:	f47f af7d 	bne.w	8001cba <HAL_RCC_ClockConfig+0xa>
 8001dc0:	e78f      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001dc2:	4905      	ldr	r1, [pc, #20]	; (8001dd8 <HAL_RCC_ClockConfig+0x128>)
 8001dc4:	68e0      	ldr	r0, [r4, #12]
 8001dc6:	688b      	ldr	r3, [r1, #8]
 8001dc8:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001dcc:	4303      	orrs	r3, r0
 8001dce:	608b      	str	r3, [r1, #8]
 8001dd0:	e78a      	b.n	8001ce8 <HAL_RCC_ClockConfig+0x38>
 8001dd2:	bf00      	nop
 8001dd4:	40023c00 	.word	0x40023c00
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	080022db 	.word	0x080022db
 8001de0:	20000008 	.word	0x20000008

08001de4 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001de4:	4b01      	ldr	r3, [pc, #4]	; (8001dec <HAL_RCC_GetHCLKFreq+0x8>)
 8001de6:	6818      	ldr	r0, [r3, #0]
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	20000008 	.word	0x20000008

08001df0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001df2:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001dfa:	5cd3      	ldrb	r3, [r2, r3]
 8001dfc:	4a03      	ldr	r2, [pc, #12]	; (8001e0c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001dfe:	6810      	ldr	r0, [r2, #0]
}
 8001e00:	40d8      	lsrs	r0, r3
 8001e02:	4770      	bx	lr
 8001e04:	40023800 	.word	0x40023800
 8001e08:	080022eb 	.word	0x080022eb
 8001e0c:	20000008 	.word	0x20000008

08001e10 <BCD2DEC>:
	}
}

uint8_t BCD2DEC(uint8_t data)
{
	return (data>>4)*10 + (data&0x0f);
 8001e10:	0903      	lsrs	r3, r0, #4
 8001e12:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8001e16:	f000 000f 	and.w	r0, r0, #15
 8001e1a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001e1e:	b2c0      	uxtb	r0, r0
 8001e20:	4770      	bx	lr
	...

08001e24 <HAL_I2C_MemRxCpltCallback>:
{
 8001e24:	b508      	push	{r3, lr}
	if(hi2c->Instance==hi2c1.Instance)
 8001e26:	4b15      	ldr	r3, [pc, #84]	; (8001e7c <HAL_I2C_MemRxCpltCallback+0x58>)
 8001e28:	6802      	ldr	r2, [r0, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d123      	bne.n	8001e78 <HAL_I2C_MemRxCpltCallback+0x54>
		second=BCD2DEC(receive_data[0]);
 8001e30:	4a13      	ldr	r2, [pc, #76]	; (8001e80 <HAL_I2C_MemRxCpltCallback+0x5c>)
 8001e32:	7810      	ldrb	r0, [r2, #0]
 8001e34:	f7ff ffec 	bl	8001e10 <BCD2DEC>
 8001e38:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <HAL_I2C_MemRxCpltCallback+0x60>)
 8001e3a:	7018      	strb	r0, [r3, #0]
		minute=BCD2DEC(receive_data[1]);
 8001e3c:	7850      	ldrb	r0, [r2, #1]
 8001e3e:	f7ff ffe7 	bl	8001e10 <BCD2DEC>
 8001e42:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <HAL_I2C_MemRxCpltCallback+0x64>)
 8001e44:	7018      	strb	r0, [r3, #0]
		hour=BCD2DEC(receive_data[2]);
 8001e46:	7890      	ldrb	r0, [r2, #2]
 8001e48:	f7ff ffe2 	bl	8001e10 <BCD2DEC>
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <HAL_I2C_MemRxCpltCallback+0x68>)
 8001e4e:	7018      	strb	r0, [r3, #0]
		day=BCD2DEC(receive_data[3]);
 8001e50:	78d0      	ldrb	r0, [r2, #3]
 8001e52:	f7ff ffdd 	bl	8001e10 <BCD2DEC>
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <HAL_I2C_MemRxCpltCallback+0x6c>)
 8001e58:	7018      	strb	r0, [r3, #0]
		date=BCD2DEC(receive_data[4]);
 8001e5a:	7910      	ldrb	r0, [r2, #4]
 8001e5c:	f7ff ffd8 	bl	8001e10 <BCD2DEC>
 8001e60:	4b0c      	ldr	r3, [pc, #48]	; (8001e94 <HAL_I2C_MemRxCpltCallback+0x70>)
 8001e62:	7018      	strb	r0, [r3, #0]
		month=BCD2DEC(receive_data[5]);
 8001e64:	7950      	ldrb	r0, [r2, #5]
 8001e66:	f7ff ffd3 	bl	8001e10 <BCD2DEC>
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_I2C_MemRxCpltCallback+0x74>)
 8001e6c:	7018      	strb	r0, [r3, #0]
		year= BCD2DEC(receive_data[6]);
 8001e6e:	7990      	ldrb	r0, [r2, #6]
 8001e70:	f7ff ffce 	bl	8001e10 <BCD2DEC>
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_I2C_MemRxCpltCallback+0x78>)
 8001e76:	7018      	strb	r0, [r3, #0]
 8001e78:	bd08      	pop	{r3, pc}
 8001e7a:	bf00      	nop
 8001e7c:	2000002c 	.word	0x2000002c
 8001e80:	20000084 	.word	0x20000084
 8001e84:	20000081 	.word	0x20000081
 8001e88:	20000082 	.word	0x20000082
 8001e8c:	2000008b 	.word	0x2000008b
 8001e90:	200000ed 	.word	0x200000ed
 8001e94:	200000f5 	.word	0x200000f5
 8001e98:	20000080 	.word	0x20000080
 8001e9c:	200000ec 	.word	0x200000ec

08001ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ea0:	b530      	push	{r4, r5, lr}
 8001ea2:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea4:	4b27      	ldr	r3, [pc, #156]	; (8001f44 <SystemClock_Config+0xa4>)
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	9101      	str	r1, [sp, #4]
 8001eaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001eac:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001eb0:	641a      	str	r2, [r3, #64]	; 0x40
 8001eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb8:	9301      	str	r3, [sp, #4]
 8001eba:	9b01      	ldr	r3, [sp, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ebc:	4b22      	ldr	r3, [pc, #136]	; (8001f48 <SystemClock_Config+0xa8>)
 8001ebe:	9102      	str	r1, [sp, #8]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ece:	9302      	str	r3, [sp, #8]
 8001ed0:	9b02      	ldr	r3, [sp, #8]

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001ed6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001eda:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001edc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ee0:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ee2:	2308      	movs	r3, #8
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ee4:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ee6:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ee8:	2504      	movs	r5, #4
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001eea:	f44f 73a8 	mov.w	r3, #336	; 0x150
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001eee:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ef0:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001ef2:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ef4:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001ef6:	9513      	str	r5, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ef8:	f7ff fd2a 	bl	8001950 <HAL_RCC_OscConfig>
 8001efc:	b100      	cbz	r0, 8001f00 <SystemClock_Config+0x60>
 8001efe:	e7fe      	b.n	8001efe <SystemClock_Config+0x5e>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f00:	230f      	movs	r3, #15
 8001f02:	9303      	str	r3, [sp, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f04:	9005      	str	r0, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f06:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f0a:	2105      	movs	r1, #5
 8001f0c:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f0e:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001f10:	9306      	str	r3, [sp, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001f12:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001f14:	f7ff fecc 	bl	8001cb0 <HAL_RCC_ClockConfig>
 8001f18:	4604      	mov	r4, r0
 8001f1a:	b100      	cbz	r0, 8001f1e <SystemClock_Config+0x7e>
 8001f1c:	e7fe      	b.n	8001f1c <SystemClock_Config+0x7c>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8001f1e:	f7ff ff61 	bl	8001de4 <HAL_RCC_GetHCLKFreq>
 8001f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f26:	fbb0 f0f3 	udiv	r0, r0, r3
 8001f2a:	f7fe fb8b 	bl	8000644 <HAL_SYSTICK_Config>

    /**Configure the Systick
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8001f2e:	4628      	mov	r0, r5
 8001f30:	f7fe fb9e 	bl	8000670 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8001f34:	4622      	mov	r2, r4
 8001f36:	4621      	mov	r1, r4
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3c:	f7fe fb42 	bl	80005c4 <HAL_NVIC_SetPriority>
}
 8001f40:	b015      	add	sp, #84	; 0x54
 8001f42:	bd30      	pop	{r4, r5, pc}
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40007000 	.word	0x40007000

08001f4c <main>:
{
 8001f4c:	b500      	push	{lr}
 8001f4e:	b08b      	sub	sp, #44	; 0x2c
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f50:	2400      	movs	r4, #0
 8001f52:	4d35      	ldr	r5, [pc, #212]	; (8002028 <main+0xdc>)
  HAL_Init();
 8001f54:	f7fe fae4 	bl	8000520 <HAL_Init>
  SystemClock_Config();
 8001f58:	f7ff ffa2 	bl	8001ea0 <SystemClock_Config>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f5c:	9402      	str	r4, [sp, #8]
 8001f5e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f60:	4832      	ldr	r0, [pc, #200]	; (800202c <main+0xe0>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f66:	632b      	str	r3, [r5, #48]	; 0x30
 8001f68:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001f6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f6e:	9302      	str	r3, [sp, #8]
 8001f70:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f72:	9403      	str	r4, [sp, #12]
 8001f74:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001f76:	f043 0308 	orr.w	r3, r3, #8
 8001f7a:	632b      	str	r3, [r5, #48]	; 0x30
 8001f7c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	9303      	str	r3, [sp, #12]
 8001f84:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f86:	9404      	str	r4, [sp, #16]
 8001f88:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001f8a:	f043 0302 	orr.w	r3, r3, #2
 8001f8e:	632b      	str	r3, [r5, #48]	; 0x30
 8001f90:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001f92:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f96:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f98:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001f9a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9e:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8001fa0:	f7fe fdf8 	bl	8000b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001fa8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001faa:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fac:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fae:	481f      	ldr	r0, [pc, #124]	; (800202c <main+0xe0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fb0:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fb6:	f7fe fd0d 	bl	80009d4 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fba:	9405      	str	r4, [sp, #20]
 8001fbc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001fbe:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001fc2:	632b      	str	r3, [r5, #48]	; 0x30
 8001fc4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  hi2c1.Instance = I2C1;
 8001fc6:	4d1a      	ldr	r5, [pc, #104]	; (8002030 <main+0xe4>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001fcc:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fce:	9305      	str	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001fd0:	4621      	mov	r1, r4
 8001fd2:	200b      	movs	r0, #11
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fd4:	9b05      	ldr	r3, [sp, #20]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001fd6:	f7fe faf5 	bl	80005c4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001fda:	200b      	movs	r0, #11
 8001fdc:	f7fe fb26 	bl	800062c <HAL_NVIC_EnableIRQ>
  hi2c1.Init.ClockSpeed = 100000;
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <main+0xe8>)
 8001fe2:	4a15      	ldr	r2, [pc, #84]	; (8002038 <main+0xec>)
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001fe4:	60ac      	str	r4, [r5, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8001fe6:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fea:	4628      	mov	r0, r5
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001fec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8001ff0:	60ec      	str	r4, [r5, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ff2:	612b      	str	r3, [r5, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ff4:	616c      	str	r4, [r5, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001ff6:	61ac      	str	r4, [r5, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ff8:	61ec      	str	r4, [r5, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ffa:	622c      	str	r4, [r5, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001ffc:	f7fe fef2 	bl	8000de4 <HAL_I2C_Init>
 8002000:	b980      	cbnz	r0, 8002024 <main+0xd8>
		HAL_I2C_Mem_Read_DMA(&hi2c1,0x68<<1,0,I2C_MEMADD_SIZE_8BIT,receive_data,7);
 8002002:	4c0e      	ldr	r4, [pc, #56]	; (800203c <main+0xf0>)
	 i=receive_data[0];
 8002004:	4e0e      	ldr	r6, [pc, #56]	; (8002040 <main+0xf4>)
		HAL_I2C_Mem_Read_DMA(&hi2c1,0x68<<1,0,I2C_MEMADD_SIZE_8BIT,receive_data,7);
 8002006:	9400      	str	r4, [sp, #0]
 8002008:	2307      	movs	r3, #7
 800200a:	9301      	str	r3, [sp, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	2301      	movs	r3, #1
 8002010:	21d0      	movs	r1, #208	; 0xd0
 8002012:	4628      	mov	r0, r5
 8002014:	f7fe ff54 	bl	8000ec0 <HAL_I2C_Mem_Read_DMA>
		HAL_Delay(200);
 8002018:	20c8      	movs	r0, #200	; 0xc8
 800201a:	f7fe faad 	bl	8000578 <HAL_Delay>
	 i=receive_data[0];
 800201e:	7823      	ldrb	r3, [r4, #0]
 8002020:	7033      	strb	r3, [r6, #0]
 8002022:	e7f0      	b.n	8002006 <main+0xba>
 8002024:	e7fe      	b.n	8002024 <main+0xd8>
 8002026:	bf00      	nop
 8002028:	40023800 	.word	0x40023800
 800202c:	40020c00 	.word	0x40020c00
 8002030:	2000002c 	.word	0x2000002c
 8002034:	000186a0 	.word	0x000186a0
 8002038:	40005400 	.word	0x40005400
 800203c:	20000084 	.word	0x20000084
 8002040:	20000083 	.word	0x20000083

08002044 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8002044:	e7fe      	b.n	8002044 <_Error_Handler>
	...

08002048 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002048:	b513      	push	{r0, r1, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800204a:	4b22      	ldr	r3, [pc, #136]	; (80020d4 <HAL_MspInit+0x8c>)
 800204c:	2400      	movs	r4, #0
 800204e:	9400      	str	r4, [sp, #0]
 8002050:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002052:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002056:	645a      	str	r2, [r3, #68]	; 0x44
 8002058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800205a:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 800205e:	9200      	str	r2, [sp, #0]
 8002060:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	9401      	str	r4, [sp, #4]
 8002064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002066:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800206a:	641a      	str	r2, [r3, #64]	; 0x40
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002072:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002074:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8002076:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002078:	f7fe fa92 	bl	80005a0 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 800207c:	4622      	mov	r2, r4
 800207e:	4621      	mov	r1, r4
 8002080:	f06f 000b 	mvn.w	r0, #11
 8002084:	f7fe fa9e 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8002088:	4622      	mov	r2, r4
 800208a:	4621      	mov	r1, r4
 800208c:	f06f 000a 	mvn.w	r0, #10
 8002090:	f7fe fa98 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8002094:	4622      	mov	r2, r4
 8002096:	4621      	mov	r1, r4
 8002098:	f06f 0009 	mvn.w	r0, #9
 800209c:	f7fe fa92 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80020a0:	4622      	mov	r2, r4
 80020a2:	4621      	mov	r1, r4
 80020a4:	f06f 0004 	mvn.w	r0, #4
 80020a8:	f7fe fa8c 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80020ac:	4622      	mov	r2, r4
 80020ae:	4621      	mov	r1, r4
 80020b0:	f06f 0003 	mvn.w	r0, #3
 80020b4:	f7fe fa86 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80020b8:	4622      	mov	r2, r4
 80020ba:	4621      	mov	r1, r4
 80020bc:	f06f 0001 	mvn.w	r0, #1
 80020c0:	f7fe fa80 	bl	80005c4 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80020c4:	4622      	mov	r2, r4
 80020c6:	4621      	mov	r1, r4
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	f7fe fa7a 	bl	80005c4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020d0:	b002      	add	sp, #8
 80020d2:	bd10      	pop	{r4, pc}
 80020d4:	40023800 	.word	0x40023800

080020d8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020d8:	b530      	push	{r4, r5, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(hi2c->Instance==I2C1)
 80020da:	6802      	ldr	r2, [r0, #0]
 80020dc:	4b22      	ldr	r3, [pc, #136]	; (8002168 <HAL_I2C_MspInit+0x90>)
 80020de:	429a      	cmp	r2, r3
{
 80020e0:	b087      	sub	sp, #28
 80020e2:	4605      	mov	r5, r0
  if(hi2c->Instance==I2C1)
 80020e4:	d13e      	bne.n	8002164 <HAL_I2C_MspInit+0x8c>
  
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80020e6:	23c0      	movs	r3, #192	; 0xc0
 80020e8:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020ea:	2312      	movs	r3, #18
 80020ec:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80020ee:	2301      	movs	r3, #1
 80020f0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f2:	2303      	movs	r3, #3
 80020f4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020f6:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020f8:	eb0d 0103 	add.w	r1, sp, r3
 80020fc:	481b      	ldr	r0, [pc, #108]	; (800216c <HAL_I2C_MspInit+0x94>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80020fe:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002100:	f7fe fc68 	bl	80009d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002104:	2300      	movs	r3, #0
 8002106:	4a1a      	ldr	r2, [pc, #104]	; (8002170 <HAL_I2C_MspInit+0x98>)
 8002108:	9300      	str	r3, [sp, #0]
 800210a:	6c11      	ldr	r1, [r2, #64]	; 0x40
  
    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 800210c:	4c19      	ldr	r4, [pc, #100]	; (8002174 <HAL_I2C_MspInit+0x9c>)
    __HAL_RCC_I2C1_CLK_ENABLE();
 800210e:	f441 1100 	orr.w	r1, r1, #2097152	; 0x200000
 8002112:	6411      	str	r1, [r2, #64]	; 0x40
 8002114:	6c12      	ldr	r2, [r2, #64]	; 0x40
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002116:	4918      	ldr	r1, [pc, #96]	; (8002178 <HAL_I2C_MspInit+0xa0>)
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002118:	60a3      	str	r3, [r4, #8]
    __HAL_RCC_I2C1_CLK_ENABLE();
 800211a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800211e:	9200      	str	r2, [sp, #0]
 8002120:	9a00      	ldr	r2, [sp, #0]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002122:	60e3      	str	r3, [r4, #12]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002124:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002128:	e884 0006 	stmia.w	r4, {r1, r2}
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800212c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002130:	6122      	str	r2, [r4, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002132:	4620      	mov	r0, r4
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 8002134:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002138:	6163      	str	r3, [r4, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800213a:	61a3      	str	r3, [r4, #24]
    hdma_i2c1_rx.Init.Mode = DMA_CIRCULAR;
 800213c:	61e2      	str	r2, [r4, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800213e:	6223      	str	r3, [r4, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002140:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002142:	f7fe fabd 	bl	80006c0 <HAL_DMA_Init>
 8002146:	b118      	cbz	r0, 8002150 <HAL_I2C_MspInit+0x78>
    {
      _Error_Handler(__FILE__, __LINE__);
 8002148:	2179      	movs	r1, #121	; 0x79
 800214a:	480c      	ldr	r0, [pc, #48]	; (800217c <HAL_I2C_MspInit+0xa4>)
 800214c:	f7ff ff7a 	bl	8002044 <_Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002150:	2200      	movs	r2, #0
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002152:	63ac      	str	r4, [r5, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002154:	201f      	movs	r0, #31
 8002156:	4611      	mov	r1, r2
    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8002158:	63a5      	str	r5, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800215a:	f7fe fa33 	bl	80005c4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800215e:	201f      	movs	r0, #31
 8002160:	f7fe fa64 	bl	800062c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002164:	b007      	add	sp, #28
 8002166:	bd30      	pop	{r4, r5, pc}
 8002168:	40005400 	.word	0x40005400
 800216c:	40020400 	.word	0x40020400
 8002170:	40023800 	.word	0x40023800
 8002174:	2000008c 	.word	0x2000008c
 8002178:	40026010 	.word	0x40026010
 800217c:	080022c0 	.word	0x080022c0

08002180 <NMI_Handler>:
 8002180:	4770      	bx	lr

08002182 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8002182:	e7fe      	b.n	8002182 <HardFault_Handler>

08002184 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8002184:	e7fe      	b.n	8002184 <MemManage_Handler>

08002186 <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8002186:	e7fe      	b.n	8002186 <BusFault_Handler>

08002188 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8002188:	e7fe      	b.n	8002188 <UsageFault_Handler>

0800218a <SVC_Handler>:
 800218a:	4770      	bx	lr

0800218c <DebugMon_Handler>:
 800218c:	4770      	bx	lr

0800218e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 800218e:	4770      	bx	lr

08002190 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8002190:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002192:	f7fe f9df 	bl	8000554 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002196:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 800219a:	f7fe ba76 	b.w	800068a <HAL_SYSTICK_IRQHandler>
	...

080021a0 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80021a0:	4801      	ldr	r0, [pc, #4]	; (80021a8 <DMA1_Stream0_IRQHandler+0x8>)
 80021a2:	f7fe bb5b 	b.w	800085c <HAL_DMA_IRQHandler>
 80021a6:	bf00      	nop
 80021a8:	2000008c 	.word	0x2000008c

080021ac <I2C1_EV_IRQHandler>:
void I2C1_EV_IRQHandler(void)
{
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80021ac:	4801      	ldr	r0, [pc, #4]	; (80021b4 <I2C1_EV_IRQHandler+0x8>)
 80021ae:	f7ff b83f 	b.w	8001230 <HAL_I2C_EV_IRQHandler>
 80021b2:	bf00      	nop
 80021b4:	2000002c 	.word	0x2000002c

080021b8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021b8:	490f      	ldr	r1, [pc, #60]	; (80021f8 <SystemInit+0x40>)
 80021ba:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80021be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80021c6:	4b0d      	ldr	r3, [pc, #52]	; (80021fc <SystemInit+0x44>)
 80021c8:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80021ca:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 80021cc:	f042 0201 	orr.w	r2, r2, #1
 80021d0:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80021d2:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80021da:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80021de:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80021e0:	4a07      	ldr	r2, [pc, #28]	; (8002200 <SystemInit+0x48>)
 80021e2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021ea:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80021ec:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021ee:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80021f2:	608b      	str	r3, [r1, #8]
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	e000ed00 	.word	0xe000ed00
 80021fc:	40023800 	.word	0x40023800
 8002200:	24003010 	.word	0x24003010

08002204 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002204:	f8df d034 	ldr.w	sp, [pc, #52]	; 800223c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002208:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800220a:	e003      	b.n	8002214 <LoopCopyDataInit>

0800220c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800220e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002210:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002212:	3104      	adds	r1, #4

08002214 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002214:	480b      	ldr	r0, [pc, #44]	; (8002244 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002216:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002218:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800221a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800221c:	d3f6      	bcc.n	800220c <CopyDataInit>
  ldr  r2, =_sbss
 800221e:	4a0b      	ldr	r2, [pc, #44]	; (800224c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002220:	e002      	b.n	8002228 <LoopFillZerobss>

08002222 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002222:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002224:	f842 3b04 	str.w	r3, [r2], #4

08002228 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002228:	4b09      	ldr	r3, [pc, #36]	; (8002250 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800222a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800222c:	d3f9      	bcc.n	8002222 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800222e:	f7ff ffc3 	bl	80021b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002232:	f000 f811 	bl	8002258 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002236:	f7ff fe89 	bl	8001f4c <main>
  bx  lr    
 800223a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800223c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002240:	08002304 	.word	0x08002304
  ldr  r0, =_sdata
 8002244:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002248:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 800224c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8002250:	200000f8 	.word	0x200000f8

08002254 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002254:	e7fe      	b.n	8002254 <ADC_IRQHandler>
	...

08002258 <__libc_init_array>:
 8002258:	b570      	push	{r4, r5, r6, lr}
 800225a:	4e0d      	ldr	r6, [pc, #52]	; (8002290 <__libc_init_array+0x38>)
 800225c:	4c0d      	ldr	r4, [pc, #52]	; (8002294 <__libc_init_array+0x3c>)
 800225e:	1ba4      	subs	r4, r4, r6
 8002260:	10a4      	asrs	r4, r4, #2
 8002262:	2500      	movs	r5, #0
 8002264:	42a5      	cmp	r5, r4
 8002266:	d109      	bne.n	800227c <__libc_init_array+0x24>
 8002268:	4e0b      	ldr	r6, [pc, #44]	; (8002298 <__libc_init_array+0x40>)
 800226a:	4c0c      	ldr	r4, [pc, #48]	; (800229c <__libc_init_array+0x44>)
 800226c:	f000 f818 	bl	80022a0 <_init>
 8002270:	1ba4      	subs	r4, r4, r6
 8002272:	10a4      	asrs	r4, r4, #2
 8002274:	2500      	movs	r5, #0
 8002276:	42a5      	cmp	r5, r4
 8002278:	d105      	bne.n	8002286 <__libc_init_array+0x2e>
 800227a:	bd70      	pop	{r4, r5, r6, pc}
 800227c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002280:	4798      	blx	r3
 8002282:	3501      	adds	r5, #1
 8002284:	e7ee      	b.n	8002264 <__libc_init_array+0xc>
 8002286:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800228a:	4798      	blx	r3
 800228c:	3501      	adds	r5, #1
 800228e:	e7f2      	b.n	8002276 <__libc_init_array+0x1e>
 8002290:	080022fc 	.word	0x080022fc
 8002294:	080022fc 	.word	0x080022fc
 8002298:	080022fc 	.word	0x080022fc
 800229c:	08002300 	.word	0x08002300

080022a0 <_init>:
 80022a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022a2:	bf00      	nop
 80022a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022a6:	bc08      	pop	{r3}
 80022a8:	469e      	mov	lr, r3
 80022aa:	4770      	bx	lr

080022ac <_fini>:
 80022ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ae:	bf00      	nop
 80022b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022b2:	bc08      	pop	{r3}
 80022b4:	469e      	mov	lr, r3
 80022b6:	4770      	bx	lr
