
GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003924  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08003a34  08003a34  00013a34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000014  08003b00  08003b00  00013b00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003b14  08003b14  00013b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  20000000  08003b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000124  20000088  08003ba0  00020088  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200001ac  08003ba0  000201ac  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_info   000133fa  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003700  00000000  00000000  000334ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000d50  00000000  00000000  00036bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c20  00000000  00000000  00037900  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000061bb  00000000  00000000  00038520  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000049c7  00000000  00000000  0003e6db  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  000430a2  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00003ea4  00000000  00000000  00043120  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         0000003c  00000000  00000000  00046fc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      000000ac  00000000  00000000  00047000  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000088 	.word	0x20000088
 800012c:	00000000 	.word	0x00000000
 8000130:	08003a1c 	.word	0x08003a1c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000008c 	.word	0x2000008c
 800014c:	08003a1c 	.word	0x08003a1c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_d2f>:
 8000a80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a88:	bf24      	itt	cs
 8000a8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a92:	d90d      	bls.n	8000ab0 <__aeabi_d2f+0x30>
 8000a94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa8:	bf08      	it	eq
 8000aaa:	f020 0001 	biceq.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab4:	d121      	bne.n	8000afa <__aeabi_d2f+0x7a>
 8000ab6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aba:	bfbc      	itt	lt
 8000abc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	4770      	bxlt	lr
 8000ac2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aca:	f1c2 0218 	rsb	r2, r2, #24
 8000ace:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad6:	fa20 f002 	lsr.w	r0, r0, r2
 8000ada:	bf18      	it	ne
 8000adc:	f040 0001 	orrne.w	r0, r0, #1
 8000ae0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aec:	ea40 000c 	orr.w	r0, r0, ip
 8000af0:	fa23 f302 	lsr.w	r3, r3, r2
 8000af4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af8:	e7cc      	b.n	8000a94 <__aeabi_d2f+0x14>
 8000afa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afe:	d107      	bne.n	8000b10 <__aeabi_d2f+0x90>
 8000b00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b04:	bf1e      	ittt	ne
 8000b06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0e:	4770      	bxne	lr
 8000b10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_frsub>:
 8000b20:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b24:	e002      	b.n	8000b2c <__addsf3>
 8000b26:	bf00      	nop

08000b28 <__aeabi_fsub>:
 8000b28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b2c <__addsf3>:
 8000b2c:	0042      	lsls	r2, r0, #1
 8000b2e:	bf1f      	itttt	ne
 8000b30:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b34:	ea92 0f03 	teqne	r2, r3
 8000b38:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b3c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b40:	d06a      	beq.n	8000c18 <__addsf3+0xec>
 8000b42:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b46:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4a:	bfc1      	itttt	gt
 8000b4c:	18d2      	addgt	r2, r2, r3
 8000b4e:	4041      	eorgt	r1, r0
 8000b50:	4048      	eorgt	r0, r1
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	bfb8      	it	lt
 8000b56:	425b      	neglt	r3, r3
 8000b58:	2b19      	cmp	r3, #25
 8000b5a:	bf88      	it	hi
 8000b5c:	4770      	bxhi	lr
 8000b5e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6a:	bf18      	it	ne
 8000b6c:	4240      	negne	r0, r0
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b76:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7a:	bf18      	it	ne
 8000b7c:	4249      	negne	r1, r1
 8000b7e:	ea92 0f03 	teq	r2, r3
 8000b82:	d03f      	beq.n	8000c04 <__addsf3+0xd8>
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	fa41 fc03 	asr.w	ip, r1, r3
 8000b8c:	eb10 000c 	adds.w	r0, r0, ip
 8000b90:	f1c3 0320 	rsb	r3, r3, #32
 8000b94:	fa01 f103 	lsl.w	r1, r1, r3
 8000b98:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b9c:	d502      	bpl.n	8000ba4 <__addsf3+0x78>
 8000b9e:	4249      	negs	r1, r1
 8000ba0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba8:	d313      	bcc.n	8000bd2 <__addsf3+0xa6>
 8000baa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bae:	d306      	bcc.n	8000bbe <__addsf3+0x92>
 8000bb0:	0840      	lsrs	r0, r0, #1
 8000bb2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bb6:	f102 0201 	add.w	r2, r2, #1
 8000bba:	2afe      	cmp	r2, #254	; 0xfe
 8000bbc:	d251      	bcs.n	8000c62 <__addsf3+0x136>
 8000bbe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	ea40 0003 	orr.w	r0, r0, r3
 8000bd0:	4770      	bx	lr
 8000bd2:	0049      	lsls	r1, r1, #1
 8000bd4:	eb40 0000 	adc.w	r0, r0, r0
 8000bd8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bdc:	f1a2 0201 	sub.w	r2, r2, #1
 8000be0:	d1ed      	bne.n	8000bbe <__addsf3+0x92>
 8000be2:	fab0 fc80 	clz	ip, r0
 8000be6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bea:	ebb2 020c 	subs.w	r2, r2, ip
 8000bee:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf2:	bfaa      	itet	ge
 8000bf4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf8:	4252      	neglt	r2, r2
 8000bfa:	4318      	orrge	r0, r3
 8000bfc:	bfbc      	itt	lt
 8000bfe:	40d0      	lsrlt	r0, r2
 8000c00:	4318      	orrlt	r0, r3
 8000c02:	4770      	bx	lr
 8000c04:	f092 0f00 	teq	r2, #0
 8000c08:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c0c:	bf06      	itte	eq
 8000c0e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c12:	3201      	addeq	r2, #1
 8000c14:	3b01      	subne	r3, #1
 8000c16:	e7b5      	b.n	8000b84 <__addsf3+0x58>
 8000c18:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c20:	bf18      	it	ne
 8000c22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c26:	d021      	beq.n	8000c6c <__addsf3+0x140>
 8000c28:	ea92 0f03 	teq	r2, r3
 8000c2c:	d004      	beq.n	8000c38 <__addsf3+0x10c>
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	bf08      	it	eq
 8000c34:	4608      	moveq	r0, r1
 8000c36:	4770      	bx	lr
 8000c38:	ea90 0f01 	teq	r0, r1
 8000c3c:	bf1c      	itt	ne
 8000c3e:	2000      	movne	r0, #0
 8000c40:	4770      	bxne	lr
 8000c42:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c46:	d104      	bne.n	8000c52 <__addsf3+0x126>
 8000c48:	0040      	lsls	r0, r0, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c50:	4770      	bx	lr
 8000c52:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c56:	bf3c      	itt	cc
 8000c58:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c5c:	4770      	bxcc	lr
 8000c5e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c62:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6a:	4770      	bx	lr
 8000c6c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c70:	bf16      	itet	ne
 8000c72:	4608      	movne	r0, r1
 8000c74:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c78:	4601      	movne	r1, r0
 8000c7a:	0242      	lsls	r2, r0, #9
 8000c7c:	bf06      	itte	eq
 8000c7e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c82:	ea90 0f01 	teqeq	r0, r1
 8000c86:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_ui2f>:
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e004      	b.n	8000c9c <__aeabi_i2f+0x8>
 8000c92:	bf00      	nop

08000c94 <__aeabi_i2f>:
 8000c94:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c98:	bf48      	it	mi
 8000c9a:	4240      	negmi	r0, r0
 8000c9c:	ea5f 0c00 	movs.w	ip, r0
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca8:	4601      	mov	r1, r0
 8000caa:	f04f 0000 	mov.w	r0, #0
 8000cae:	e01c      	b.n	8000cea <__aeabi_l2f+0x2a>

08000cb0 <__aeabi_ul2f>:
 8000cb0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	e00a      	b.n	8000cd4 <__aeabi_l2f+0x14>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_l2f>:
 8000cc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ccc:	d502      	bpl.n	8000cd4 <__aeabi_l2f+0x14>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	ea5f 0c01 	movs.w	ip, r1
 8000cd8:	bf02      	ittt	eq
 8000cda:	4684      	moveq	ip, r0
 8000cdc:	4601      	moveq	r1, r0
 8000cde:	2000      	moveq	r0, #0
 8000ce0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce4:	bf08      	it	eq
 8000ce6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cea:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cee:	fabc f28c 	clz	r2, ip
 8000cf2:	3a08      	subs	r2, #8
 8000cf4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf8:	db10      	blt.n	8000d1c <__aeabi_l2f+0x5c>
 8000cfa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cfe:	4463      	add	r3, ip
 8000d00:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d04:	f1c2 0220 	rsb	r2, r2, #32
 8000d08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d10:	eb43 0002 	adc.w	r0, r3, r2
 8000d14:	bf08      	it	eq
 8000d16:	f020 0001 	biceq.w	r0, r0, #1
 8000d1a:	4770      	bx	lr
 8000d1c:	f102 0220 	add.w	r2, r2, #32
 8000d20:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d24:	f1c2 0220 	rsb	r2, r2, #32
 8000d28:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d2c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d30:	eb43 0002 	adc.w	r0, r3, r2
 8000d34:	bf08      	it	eq
 8000d36:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_fmul>:
 8000d3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d44:	bf1e      	ittt	ne
 8000d46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4a:	ea92 0f0c 	teqne	r2, ip
 8000d4e:	ea93 0f0c 	teqne	r3, ip
 8000d52:	d06f      	beq.n	8000e34 <__aeabi_fmul+0xf8>
 8000d54:	441a      	add	r2, r3
 8000d56:	ea80 0c01 	eor.w	ip, r0, r1
 8000d5a:	0240      	lsls	r0, r0, #9
 8000d5c:	bf18      	it	ne
 8000d5e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d62:	d01e      	beq.n	8000da2 <__aeabi_fmul+0x66>
 8000d64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d68:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d6c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d70:	fba0 3101 	umull	r3, r1, r0, r1
 8000d74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d78:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d7c:	bf3e      	ittt	cc
 8000d7e:	0049      	lslcc	r1, r1, #1
 8000d80:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d84:	005b      	lslcc	r3, r3, #1
 8000d86:	ea40 0001 	orr.w	r0, r0, r1
 8000d8a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d8e:	2afd      	cmp	r2, #253	; 0xfd
 8000d90:	d81d      	bhi.n	8000dce <__aeabi_fmul+0x92>
 8000d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9a:	bf08      	it	eq
 8000d9c:	f020 0001 	biceq.w	r0, r0, #1
 8000da0:	4770      	bx	lr
 8000da2:	f090 0f00 	teq	r0, #0
 8000da6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000daa:	bf08      	it	eq
 8000dac:	0249      	lsleq	r1, r1, #9
 8000dae:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000db6:	3a7f      	subs	r2, #127	; 0x7f
 8000db8:	bfc2      	ittt	gt
 8000dba:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dbe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc2:	4770      	bxgt	lr
 8000dc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	3a01      	subs	r2, #1
 8000dce:	dc5d      	bgt.n	8000e8c <__aeabi_fmul+0x150>
 8000dd0:	f112 0f19 	cmn.w	r2, #25
 8000dd4:	bfdc      	itt	le
 8000dd6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dda:	4770      	bxle	lr
 8000ddc:	f1c2 0200 	rsb	r2, r2, #0
 8000de0:	0041      	lsls	r1, r0, #1
 8000de2:	fa21 f102 	lsr.w	r1, r1, r2
 8000de6:	f1c2 0220 	rsb	r2, r2, #32
 8000dea:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dee:	ea5f 0031 	movs.w	r0, r1, rrx
 8000df2:	f140 0000 	adc.w	r0, r0, #0
 8000df6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dfa:	bf08      	it	eq
 8000dfc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e00:	4770      	bx	lr
 8000e02:	f092 0f00 	teq	r2, #0
 8000e06:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0040      	lsleq	r0, r0, #1
 8000e0e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e12:	3a01      	subeq	r2, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xce>
 8000e16:	ea40 000c 	orr.w	r0, r0, ip
 8000e1a:	f093 0f00 	teq	r3, #0
 8000e1e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0049      	lsleq	r1, r1, #1
 8000e26:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e2a:	3b01      	subeq	r3, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fmul+0xe6>
 8000e2e:	ea41 010c 	orr.w	r1, r1, ip
 8000e32:	e78f      	b.n	8000d54 <__aeabi_fmul+0x18>
 8000e34:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e38:	ea92 0f0c 	teq	r2, ip
 8000e3c:	bf18      	it	ne
 8000e3e:	ea93 0f0c 	teqne	r3, ip
 8000e42:	d00a      	beq.n	8000e5a <__aeabi_fmul+0x11e>
 8000e44:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e48:	bf18      	it	ne
 8000e4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e4e:	d1d8      	bne.n	8000e02 <__aeabi_fmul+0xc6>
 8000e50:	ea80 0001 	eor.w	r0, r0, r1
 8000e54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e58:	4770      	bx	lr
 8000e5a:	f090 0f00 	teq	r0, #0
 8000e5e:	bf17      	itett	ne
 8000e60:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e64:	4608      	moveq	r0, r1
 8000e66:	f091 0f00 	teqne	r1, #0
 8000e6a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e6e:	d014      	beq.n	8000e9a <__aeabi_fmul+0x15e>
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	d101      	bne.n	8000e7a <__aeabi_fmul+0x13e>
 8000e76:	0242      	lsls	r2, r0, #9
 8000e78:	d10f      	bne.n	8000e9a <__aeabi_fmul+0x15e>
 8000e7a:	ea93 0f0c 	teq	r3, ip
 8000e7e:	d103      	bne.n	8000e88 <__aeabi_fmul+0x14c>
 8000e80:	024b      	lsls	r3, r1, #9
 8000e82:	bf18      	it	ne
 8000e84:	4608      	movne	r0, r1
 8000e86:	d108      	bne.n	8000e9a <__aeabi_fmul+0x15e>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e98:	4770      	bx	lr
 8000e9a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_fdiv>:
 8000ea4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eac:	bf1e      	ittt	ne
 8000eae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb2:	ea92 0f0c 	teqne	r2, ip
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d069      	beq.n	8000f90 <__aeabi_fdiv+0xec>
 8000ebc:	eba2 0203 	sub.w	r2, r2, r3
 8000ec0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec4:	0249      	lsls	r1, r1, #9
 8000ec6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eca:	d037      	beq.n	8000f3c <__aeabi_fdiv+0x98>
 8000ecc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000edc:	428b      	cmp	r3, r1
 8000ede:	bf38      	it	cc
 8000ee0:	005b      	lslcc	r3, r3, #1
 8000ee2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ee6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eea:	428b      	cmp	r3, r1
 8000eec:	bf24      	itt	cs
 8000eee:	1a5b      	subcs	r3, r3, r1
 8000ef0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef8:	bf24      	itt	cs
 8000efa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000efe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f02:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f06:	bf24      	itt	cs
 8000f08:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f10:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f1a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f1e:	011b      	lsls	r3, r3, #4
 8000f20:	bf18      	it	ne
 8000f22:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f26:	d1e0      	bne.n	8000eea <__aeabi_fdiv+0x46>
 8000f28:	2afd      	cmp	r2, #253	; 0xfd
 8000f2a:	f63f af50 	bhi.w	8000dce <__aeabi_fmul+0x92>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f34:	bf08      	it	eq
 8000f36:	f020 0001 	biceq.w	r0, r0, #1
 8000f3a:	4770      	bx	lr
 8000f3c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f40:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f44:	327f      	adds	r2, #127	; 0x7f
 8000f46:	bfc2      	ittt	gt
 8000f48:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f4c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f50:	4770      	bxgt	lr
 8000f52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f56:	f04f 0300 	mov.w	r3, #0
 8000f5a:	3a01      	subs	r2, #1
 8000f5c:	e737      	b.n	8000dce <__aeabi_fmul+0x92>
 8000f5e:	f092 0f00 	teq	r2, #0
 8000f62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0040      	lsleq	r0, r0, #1
 8000f6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f6e:	3a01      	subeq	r2, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xc2>
 8000f72:	ea40 000c 	orr.w	r0, r0, ip
 8000f76:	f093 0f00 	teq	r3, #0
 8000f7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f7e:	bf02      	ittt	eq
 8000f80:	0049      	lsleq	r1, r1, #1
 8000f82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f86:	3b01      	subeq	r3, #1
 8000f88:	d0f9      	beq.n	8000f7e <__aeabi_fdiv+0xda>
 8000f8a:	ea41 010c 	orr.w	r1, r1, ip
 8000f8e:	e795      	b.n	8000ebc <__aeabi_fdiv+0x18>
 8000f90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f94:	ea92 0f0c 	teq	r2, ip
 8000f98:	d108      	bne.n	8000fac <__aeabi_fdiv+0x108>
 8000f9a:	0242      	lsls	r2, r0, #9
 8000f9c:	f47f af7d 	bne.w	8000e9a <__aeabi_fmul+0x15e>
 8000fa0:	ea93 0f0c 	teq	r3, ip
 8000fa4:	f47f af70 	bne.w	8000e88 <__aeabi_fmul+0x14c>
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e776      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fac:	ea93 0f0c 	teq	r3, ip
 8000fb0:	d104      	bne.n	8000fbc <__aeabi_fdiv+0x118>
 8000fb2:	024b      	lsls	r3, r1, #9
 8000fb4:	f43f af4c 	beq.w	8000e50 <__aeabi_fmul+0x114>
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e76e      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fbc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc0:	bf18      	it	ne
 8000fc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	d1ca      	bne.n	8000f5e <__aeabi_fdiv+0xba>
 8000fc8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fcc:	f47f af5c 	bne.w	8000e88 <__aeabi_fmul+0x14c>
 8000fd0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fd4:	f47f af3c 	bne.w	8000e50 <__aeabi_fmul+0x114>
 8000fd8:	e75f      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fda:	bf00      	nop

08000fdc <__gesf2>:
 8000fdc:	f04f 3cff 	mov.w	ip, #4294967295
 8000fe0:	e006      	b.n	8000ff0 <__cmpsf2+0x4>
 8000fe2:	bf00      	nop

08000fe4 <__lesf2>:
 8000fe4:	f04f 0c01 	mov.w	ip, #1
 8000fe8:	e002      	b.n	8000ff0 <__cmpsf2+0x4>
 8000fea:	bf00      	nop

08000fec <__cmpsf2>:
 8000fec:	f04f 0c01 	mov.w	ip, #1
 8000ff0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ff4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000ff8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000ffc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001000:	bf18      	it	ne
 8001002:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001006:	d011      	beq.n	800102c <__cmpsf2+0x40>
 8001008:	b001      	add	sp, #4
 800100a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800100e:	bf18      	it	ne
 8001010:	ea90 0f01 	teqne	r0, r1
 8001014:	bf58      	it	pl
 8001016:	ebb2 0003 	subspl.w	r0, r2, r3
 800101a:	bf88      	it	hi
 800101c:	17c8      	asrhi	r0, r1, #31
 800101e:	bf38      	it	cc
 8001020:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001024:	bf18      	it	ne
 8001026:	f040 0001 	orrne.w	r0, r0, #1
 800102a:	4770      	bx	lr
 800102c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001030:	d102      	bne.n	8001038 <__cmpsf2+0x4c>
 8001032:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001036:	d105      	bne.n	8001044 <__cmpsf2+0x58>
 8001038:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800103c:	d1e4      	bne.n	8001008 <__cmpsf2+0x1c>
 800103e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001042:	d0e1      	beq.n	8001008 <__cmpsf2+0x1c>
 8001044:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop

0800104c <__aeabi_cfrcmple>:
 800104c:	4684      	mov	ip, r0
 800104e:	4608      	mov	r0, r1
 8001050:	4661      	mov	r1, ip
 8001052:	e7ff      	b.n	8001054 <__aeabi_cfcmpeq>

08001054 <__aeabi_cfcmpeq>:
 8001054:	b50f      	push	{r0, r1, r2, r3, lr}
 8001056:	f7ff ffc9 	bl	8000fec <__cmpsf2>
 800105a:	2800      	cmp	r0, #0
 800105c:	bf48      	it	mi
 800105e:	f110 0f00 	cmnmi.w	r0, #0
 8001062:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001064 <__aeabi_fcmpeq>:
 8001064:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001068:	f7ff fff4 	bl	8001054 <__aeabi_cfcmpeq>
 800106c:	bf0c      	ite	eq
 800106e:	2001      	moveq	r0, #1
 8001070:	2000      	movne	r0, #0
 8001072:	f85d fb08 	ldr.w	pc, [sp], #8
 8001076:	bf00      	nop

08001078 <__aeabi_fcmplt>:
 8001078:	f84d ed08 	str.w	lr, [sp, #-8]!
 800107c:	f7ff ffea 	bl	8001054 <__aeabi_cfcmpeq>
 8001080:	bf34      	ite	cc
 8001082:	2001      	movcc	r0, #1
 8001084:	2000      	movcs	r0, #0
 8001086:	f85d fb08 	ldr.w	pc, [sp], #8
 800108a:	bf00      	nop

0800108c <__aeabi_fcmple>:
 800108c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001090:	f7ff ffe0 	bl	8001054 <__aeabi_cfcmpeq>
 8001094:	bf94      	ite	ls
 8001096:	2001      	movls	r0, #1
 8001098:	2000      	movhi	r0, #0
 800109a:	f85d fb08 	ldr.w	pc, [sp], #8
 800109e:	bf00      	nop

080010a0 <__aeabi_fcmpge>:
 80010a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a4:	f7ff ffd2 	bl	800104c <__aeabi_cfrcmple>
 80010a8:	bf94      	ite	ls
 80010aa:	2001      	movls	r0, #1
 80010ac:	2000      	movhi	r0, #0
 80010ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b2:	bf00      	nop

080010b4 <__aeabi_fcmpgt>:
 80010b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b8:	f7ff ffc8 	bl	800104c <__aeabi_cfrcmple>
 80010bc:	bf34      	ite	cc
 80010be:	2001      	movcc	r0, #1
 80010c0:	2000      	movcs	r0, #0
 80010c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010c6:	bf00      	nop

080010c8 <__aeabi_f2iz>:
 80010c8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80010cc:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 80010d0:	d30f      	bcc.n	80010f2 <__aeabi_f2iz+0x2a>
 80010d2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 80010d6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010da:	d90d      	bls.n	80010f8 <__aeabi_f2iz+0x30>
 80010dc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80010e4:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80010e8:	fa23 f002 	lsr.w	r0, r3, r2
 80010ec:	bf18      	it	ne
 80010ee:	4240      	negne	r0, r0
 80010f0:	4770      	bx	lr
 80010f2:	f04f 0000 	mov.w	r0, #0
 80010f6:	4770      	bx	lr
 80010f8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 80010fc:	d101      	bne.n	8001102 <__aeabi_f2iz+0x3a>
 80010fe:	0242      	lsls	r2, r0, #9
 8001100:	d105      	bne.n	800110e <__aeabi_f2iz+0x46>
 8001102:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001106:	bf08      	it	eq
 8001108:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800110c:	4770      	bx	lr
 800110e:	f04f 0000 	mov.w	r0, #0
 8001112:	4770      	bx	lr

08001114 <__aeabi_f2uiz>:
 8001114:	0042      	lsls	r2, r0, #1
 8001116:	d20e      	bcs.n	8001136 <__aeabi_f2uiz+0x22>
 8001118:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 800111c:	d30b      	bcc.n	8001136 <__aeabi_f2uiz+0x22>
 800111e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001122:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001126:	d409      	bmi.n	800113c <__aeabi_f2uiz+0x28>
 8001128:	ea4f 2300 	mov.w	r3, r0, lsl #8
 800112c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	4770      	bx	lr
 8001136:	f04f 0000 	mov.w	r0, #0
 800113a:	4770      	bx	lr
 800113c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001140:	d101      	bne.n	8001146 <__aeabi_f2uiz+0x32>
 8001142:	0242      	lsls	r2, r0, #9
 8001144:	d102      	bne.n	800114c <__aeabi_f2uiz+0x38>
 8001146:	f04f 30ff 	mov.w	r0, #4294967295
 800114a:	4770      	bx	lr
 800114c:	f04f 0000 	mov.w	r0, #0
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop

08001154 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800115c:	4a05      	ldr	r2, [pc, #20]	; (8001174 <NVIC_PriorityGroupConfig+0x20>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001168:	60d3      	str	r3, [r2, #12]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001178:	b480      	push	{r7}
 800117a:	b087      	sub	sp, #28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	230f      	movs	r3, #15
 800118a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	78db      	ldrb	r3, [r3, #3]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d03a      	beq.n	800120a <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001194:	4b27      	ldr	r3, [pc, #156]	; (8001234 <NVIC_Init+0xbc>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	43db      	mvns	r3, r3
 800119a:	0a1b      	lsrs	r3, r3, #8
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f1c3 0304 	rsb	r3, r3, #4
 80011a8:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa22 f303 	lsr.w	r3, r2, r3
 80011b2:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	785b      	ldrb	r3, [r3, #1]
 80011b8:	461a      	mov	r2, r3
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	789b      	ldrb	r3, [r3, #2]
 80011c6:	461a      	mov	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4013      	ands	r3, r2
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80011d8:	4a17      	ldr	r2, [pc, #92]	; (8001238 <NVIC_Init+0xc0>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	6979      	ldr	r1, [r7, #20]
 80011e0:	b2c9      	uxtb	r1, r1
 80011e2:	4413      	add	r3, r2
 80011e4:	460a      	mov	r2, r1
 80011e6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011ea:	4a13      	ldr	r2, [pc, #76]	; (8001238 <NVIC_Init+0xc0>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	095b      	lsrs	r3, r3, #5
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	f003 031f 	and.w	r3, r3, #31
 80011fe:	2101      	movs	r1, #1
 8001200:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001204:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001208:	e00f      	b.n	800122a <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800120a:	490b      	ldr	r1, [pc, #44]	; (8001238 <NVIC_Init+0xc0>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	095b      	lsrs	r3, r3, #5
 8001212:	b2db      	uxtb	r3, r3
 8001214:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	f003 031f 	and.w	r3, r3, #31
 800121e:	2201      	movs	r2, #1
 8001220:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001222:	f100 0320 	add.w	r3, r0, #32
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800122a:	bf00      	nop
 800122c:	371c      	adds	r7, #28
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00
 8001238:	e000e100 	.word	0xe000e100

0800123c <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8001244:	2300      	movs	r3, #0
 8001246:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <EXTI_GetITStatus+0x44>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	4013      	ands	r3, r2
 8001254:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <EXTI_GetITStatus+0x44>)
 8001258:	695a      	ldr	r2, [r3, #20]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4013      	ands	r3, r2
 800125e:	2b00      	cmp	r3, #0
 8001260:	d005      	beq.n	800126e <EXTI_GetITStatus+0x32>
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d002      	beq.n	800126e <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8001268:	2301      	movs	r3, #1
 800126a:	73fb      	strb	r3, [r7, #15]
 800126c:	e001      	b.n	8001272 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40010400 	.word	0x40010400

08001284 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 800128c:	4a03      	ldr	r2, [pc, #12]	; (800129c <EXTI_ClearITPendingBit+0x18>)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6153      	str	r3, [r2, #20]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	40010400 	.word	0x40010400

080012a0 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	; 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
 80012ae:	2300      	movs	r3, #0
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	2300      	movs	r3, #0
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	78db      	ldrb	r3, [r3, #3]
 80012c6:	f003 030f 	and.w	r3, r3, #15
 80012ca:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	78db      	ldrb	r3, [r3, #3]
 80012d0:	f003 0310 	and.w	r3, r3, #16
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d005      	beq.n	80012e4 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	789b      	ldrb	r3, [r3, #2]
 80012dc:	461a      	mov	r2, r3
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	881b      	ldrh	r3, [r3, #0]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d044      	beq.n	8001378 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
 80012f8:	e038      	b.n	800136c <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80012fa:	2201      	movs	r2, #1
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	881b      	ldrh	r3, [r3, #0]
 8001308:	461a      	mov	r2, r3
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	4013      	ands	r3, r2
 800130e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	429a      	cmp	r2, r3
 8001316:	d126      	bne.n	8001366 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800131e:	220f      	movs	r2, #15
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	43db      	mvns	r3, r3
 800132c:	697a      	ldr	r2, [r7, #20]
 800132e:	4013      	ands	r3, r2
 8001330:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001332:	69fa      	ldr	r2, [r7, #28]
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	4313      	orrs	r3, r2
 800133e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	78db      	ldrb	r3, [r3, #3]
 8001344:	2b28      	cmp	r3, #40	; 0x28
 8001346:	d105      	bne.n	8001354 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8001348:	2201      	movs	r2, #1
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	409a      	lsls	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	615a      	str	r2, [r3, #20]
 8001352:	e008      	b.n	8001366 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	78db      	ldrb	r3, [r3, #3]
 8001358:	2b48      	cmp	r3, #72	; 0x48
 800135a:	d104      	bne.n	8001366 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 800135c:	2201      	movs	r2, #1
 800135e:	69bb      	ldr	r3, [r7, #24]
 8001360:	409a      	lsls	r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	3301      	adds	r3, #1
 800136a:	61bb      	str	r3, [r7, #24]
 800136c:	69bb      	ldr	r3, [r7, #24]
 800136e:	2b07      	cmp	r3, #7
 8001370:	d9c3      	bls.n	80012fa <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	697a      	ldr	r2, [r7, #20]
 8001376:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	881b      	ldrh	r3, [r3, #0]
 800137c:	2bff      	cmp	r3, #255	; 0xff
 800137e:	d946      	bls.n	800140e <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
 800138a:	e03a      	b.n	8001402 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	3308      	adds	r3, #8
 8001390:	2201      	movs	r2, #1
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	881b      	ldrh	r3, [r3, #0]
 800139c:	461a      	mov	r2, r3
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d127      	bne.n	80013fc <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80013b2:	220f      	movs	r2, #15
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	43db      	mvns	r3, r3
 80013c0:	697a      	ldr	r2, [r7, #20]
 80013c2:	4013      	ands	r3, r2
 80013c4:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80013c6:	69fa      	ldr	r2, [r7, #28]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	697a      	ldr	r2, [r7, #20]
 80013d0:	4313      	orrs	r3, r2
 80013d2:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	78db      	ldrb	r3, [r3, #3]
 80013d8:	2b28      	cmp	r3, #40	; 0x28
 80013da:	d105      	bne.n	80013e8 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80013dc:	69bb      	ldr	r3, [r7, #24]
 80013de:	3308      	adds	r3, #8
 80013e0:	2201      	movs	r2, #1
 80013e2:	409a      	lsls	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	78db      	ldrb	r3, [r3, #3]
 80013ec:	2b48      	cmp	r3, #72	; 0x48
 80013ee:	d105      	bne.n	80013fc <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	3308      	adds	r3, #8
 80013f4:	2201      	movs	r2, #1
 80013f6:	409a      	lsls	r2, r3
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	3301      	adds	r3, #1
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	2b07      	cmp	r3, #7
 8001406:	d9c1      	bls.n	800138c <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	605a      	str	r2, [r3, #4]
  }
}
 800140e:	bf00      	nop
 8001410:	3724      	adds	r7, #36	; 0x24
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	8a1b      	ldrh	r3, [r3, #16]
 8001424:	b29b      	uxth	r3, r3
 8001426:	b2db      	uxtb	r3, r3
}
 8001428:	4618      	mov	r0, r3
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr

08001432 <I2C_GetLastEvent>:
  *    I2C_Events in stm32f10x_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 8001432:	b480      	push	{r7}
 8001434:	b087      	sub	sp, #28
 8001436:	af00      	add	r7, sp, #0
 8001438:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	613b      	str	r3, [r7, #16]
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	8a9b      	ldrh	r3, [r3, #20]
 800144a:	b29b      	uxth	r3, r3
 800144c:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	8b1b      	ldrh	r3, [r3, #24]
 8001452:	b29b      	uxth	r3, r3
 8001454:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	041b      	lsls	r3, r3, #16
 800145a:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	4313      	orrs	r3, r2
 8001462:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001466:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 8001468:	697b      	ldr	r3, [r7, #20]
}
 800146a:	4618      	mov	r0, r3
 800146c:	371c      	adds	r7, #28
 800146e:	46bd      	mov	sp, r7
 8001470:	bc80      	pop	{r7}
 8001472:	4770      	bx	lr

08001474 <I2C_GetITStatus>:
  *                       Address matched flag (Slave mode)"ENDAD"
  *     @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_Mask) >> 16) & (I2Cx->CR2)) ;
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	0c1b      	lsrs	r3, r3, #16
 800148a:	687a      	ldr	r2, [r7, #4]
 800148c:	8892      	ldrh	r2, [r2, #4]
 800148e:	b292      	uxth	r2, r2
 8001490:	4013      	ands	r3, r2
 8001492:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001496:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_Mask;
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800149e:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	8a9b      	ldrh	r3, [r3, #20]
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	461a      	mov	r2, r3
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <I2C_GetITStatus+0x48>
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <I2C_GetITStatus+0x48>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 80014b6:	2301      	movs	r3, #1
 80014b8:	73fb      	strb	r3, [r7, #15]
 80014ba:	e001      	b.n	80014c0 <I2C_GetITStatus+0x4c>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 80014bc:	2300      	movs	r3, #0
 80014be:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 80014c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <I2C_ClearITPendingBit>:
  *     I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *     I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b085      	sub	sp, #20
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));
  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_Mask;
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80014e0:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	829a      	strh	r2, [r3, #20]
}
 80014ee:	bf00      	nop
 80014f0:	3714      	adds	r7, #20
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bc80      	pop	{r7}
 80014f6:	4770      	bx	lr

080014f8 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	2300      	movs	r3, #0
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	2300      	movs	r3, #0
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	2300      	movs	r3, #0
 800150e:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001510:	4b4c      	ldr	r3, [pc, #304]	; (8001644 <RCC_GetClocksFreq+0x14c>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f003 030c 	and.w	r3, r3, #12
 8001518:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	2b04      	cmp	r3, #4
 800151e:	d007      	beq.n	8001530 <RCC_GetClocksFreq+0x38>
 8001520:	2b08      	cmp	r3, #8
 8001522:	d009      	beq.n	8001538 <RCC_GetClocksFreq+0x40>
 8001524:	2b00      	cmp	r3, #0
 8001526:	d133      	bne.n	8001590 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a47      	ldr	r2, [pc, #284]	; (8001648 <RCC_GetClocksFreq+0x150>)
 800152c:	601a      	str	r2, [r3, #0]
      break;
 800152e:	e033      	b.n	8001598 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a45      	ldr	r2, [pc, #276]	; (8001648 <RCC_GetClocksFreq+0x150>)
 8001534:	601a      	str	r2, [r3, #0]
      break;
 8001536:	e02f      	b.n	8001598 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 8001538:	4b42      	ldr	r3, [pc, #264]	; (8001644 <RCC_GetClocksFreq+0x14c>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001540:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001542:	4b40      	ldr	r3, [pc, #256]	; (8001644 <RCC_GetClocksFreq+0x14c>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800154a:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	0c9b      	lsrs	r3, r3, #18
 8001550:	3302      	adds	r3, #2
 8001552:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d106      	bne.n	8001568 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	4a3b      	ldr	r2, [pc, #236]	; (800164c <RCC_GetClocksFreq+0x154>)
 800155e:	fb02 f203 	mul.w	r2, r2, r3
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 8001566:	e017      	b.n	8001598 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 8001568:	4b36      	ldr	r3, [pc, #216]	; (8001644 <RCC_GetClocksFreq+0x14c>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d006      	beq.n	8001582 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4a35      	ldr	r2, [pc, #212]	; (800164c <RCC_GetClocksFreq+0x154>)
 8001578:	fb02 f203 	mul.w	r2, r2, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	601a      	str	r2, [r3, #0]
      break;
 8001580:	e00a      	b.n	8001598 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	4a30      	ldr	r2, [pc, #192]	; (8001648 <RCC_GetClocksFreq+0x150>)
 8001586:	fb02 f203 	mul.w	r2, r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	601a      	str	r2, [r3, #0]
      break;
 800158e:	e003      	b.n	8001598 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a2d      	ldr	r2, [pc, #180]	; (8001648 <RCC_GetClocksFreq+0x150>)
 8001594:	601a      	str	r2, [r3, #0]
      break;
 8001596:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001598:	4b2a      	ldr	r3, [pc, #168]	; (8001644 <RCC_GetClocksFreq+0x14c>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015a0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	091b      	lsrs	r3, r3, #4
 80015a6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80015a8:	4a29      	ldr	r2, [pc, #164]	; (8001650 <RCC_GetClocksFreq+0x158>)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	4413      	add	r3, r2
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	40da      	lsrs	r2, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80015c0:	4b20      	ldr	r3, [pc, #128]	; (8001644 <RCC_GetClocksFreq+0x14c>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80015c8:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80015d0:	4a1f      	ldr	r2, [pc, #124]	; (8001650 <RCC_GetClocksFreq+0x158>)
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	4413      	add	r3, r2
 80015d6:	781b      	ldrb	r3, [r3, #0]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	40da      	lsrs	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 80015e8:	4b16      	ldr	r3, [pc, #88]	; (8001644 <RCC_GetClocksFreq+0x14c>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80015f0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	0adb      	lsrs	r3, r3, #11
 80015f6:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80015f8:	4a15      	ldr	r2, [pc, #84]	; (8001650 <RCC_GetClocksFreq+0x158>)
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	4413      	add	r3, r2
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	b2db      	uxtb	r3, r3
 8001602:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	40da      	lsrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001610:	4b0c      	ldr	r3, [pc, #48]	; (8001644 <RCC_GetClocksFreq+0x14c>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001618:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	0b9b      	lsrs	r3, r3, #14
 800161e:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8001620:	4a0c      	ldr	r2, [pc, #48]	; (8001654 <RCC_GetClocksFreq+0x15c>)
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	4413      	add	r3, r2
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68da      	ldr	r2, [r3, #12]
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	fbb2 f2f3 	udiv	r2, r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	611a      	str	r2, [r3, #16]
}
 800163a:	bf00      	nop
 800163c:	371c      	adds	r7, #28
 800163e:	46bd      	mov	sp, r7
 8001640:	bc80      	pop	{r7}
 8001642:	4770      	bx	lr
 8001644:	40021000 	.word	0x40021000
 8001648:	007a1200 	.word	0x007a1200
 800164c:	003d0900 	.word	0x003d0900
 8001650:	20000004 	.word	0x20000004
 8001654:	20000014 	.word	0x20000014

08001658 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001664:	78fb      	ldrb	r3, [r7, #3]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d006      	beq.n	8001678 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800166a:	4909      	ldr	r1, [pc, #36]	; (8001690 <RCC_APB2PeriphClockCmd+0x38>)
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <RCC_APB2PeriphClockCmd+0x38>)
 800166e:	699a      	ldr	r2, [r3, #24]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	4313      	orrs	r3, r2
 8001674:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8001676:	e006      	b.n	8001686 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001678:	4905      	ldr	r1, [pc, #20]	; (8001690 <RCC_APB2PeriphClockCmd+0x38>)
 800167a:	4b05      	ldr	r3, [pc, #20]	; (8001690 <RCC_APB2PeriphClockCmd+0x38>)
 800167c:	699a      	ldr	r2, [r3, #24]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	43db      	mvns	r3, r3
 8001682:	4013      	ands	r3, r2
 8001684:	618b      	str	r3, [r1, #24]
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	bc80      	pop	{r7}
 800168e:	4770      	bx	lr
 8001690:	40021000 	.word	0x40021000

08001694 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	460b      	mov	r3, r1
 800169e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80016a0:	78fb      	ldrb	r3, [r7, #3]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d006      	beq.n	80016b4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80016a6:	4909      	ldr	r1, [pc, #36]	; (80016cc <RCC_APB1PeriphClockCmd+0x38>)
 80016a8:	4b08      	ldr	r3, [pc, #32]	; (80016cc <RCC_APB1PeriphClockCmd+0x38>)
 80016aa:	69da      	ldr	r2, [r3, #28]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	4313      	orrs	r3, r2
 80016b0:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80016b2:	e006      	b.n	80016c2 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80016b4:	4905      	ldr	r1, [pc, #20]	; (80016cc <RCC_APB1PeriphClockCmd+0x38>)
 80016b6:	4b05      	ldr	r3, [pc, #20]	; (80016cc <RCC_APB1PeriphClockCmd+0x38>)
 80016b8:	69da      	ldr	r2, [r3, #28]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	43db      	mvns	r3, r3
 80016be:	4013      	ands	r3, r2
 80016c0:	61cb      	str	r3, [r1, #28]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	40021000 	.word	0x40021000

080016d0 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	899b      	ldrh	r3, [r3, #12]
 80016dc:	b29b      	uxth	r3, r3
}
 80016de:	4618      	mov	r0, r3
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bc80      	pop	{r7}
 80016e6:	4770      	bx	lr

080016e8 <SPI_I2S_GetITStatus>:
  *     @arg SPI_IT_CRCERR: CRC Error interrupt.
  *     @arg I2S_IT_UDR: Underrun Error interrupt.
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 80016f4:	2300      	movs	r3, #0
 80016f6:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 80016f8:	2300      	movs	r3, #0
 80016fa:	81bb      	strh	r3, [r7, #12]
 80016fc:	2300      	movs	r3, #0
 80016fe:	817b      	strh	r3, [r7, #10]
 8001700:	2300      	movs	r3, #0
 8001702:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI/I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	2201      	movs	r2, #1
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI/I2S IT mask */
  itmask = SPI_I2S_IT >> 4;
 8001712:	78fb      	ldrb	r3, [r7, #3]
 8001714:	091b      	lsrs	r3, r3, #4
 8001716:	b2db      	uxtb	r3, r3
 8001718:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 800171a:	897b      	ldrh	r3, [r7, #10]
 800171c:	2201      	movs	r2, #1
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	889b      	ldrh	r3, [r3, #4]
 8001728:	b29a      	uxth	r2, r3
 800172a:	897b      	ldrh	r3, [r7, #10]
 800172c:	4013      	ands	r3, r2
 800172e:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI/I2S interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	891b      	ldrh	r3, [r3, #8]
 8001734:	b29a      	uxth	r2, r3
 8001736:	89bb      	ldrh	r3, [r7, #12]
 8001738:	4013      	ands	r3, r2
 800173a:	b29b      	uxth	r3, r3
 800173c:	2b00      	cmp	r3, #0
 800173e:	d005      	beq.n	800174c <SPI_I2S_GetITStatus+0x64>
 8001740:	893b      	ldrh	r3, [r7, #8]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d002      	beq.n	800174c <SPI_I2S_GetITStatus+0x64>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8001746:	2301      	movs	r3, #1
 8001748:	73fb      	strb	r3, [r7, #15]
 800174a:	e001      	b.n	8001750 <SPI_I2S_GetITStatus+0x68>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 800174c:	2300      	movs	r3, #0
 800174e:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 8001750:	7bfb      	ldrb	r3, [r7, #15]
}
 8001752:	4618      	mov	r0, r3
 8001754:	3714      	adds	r7, #20
 8001756:	46bd      	mov	sp, r7
 8001758:	bc80      	pop	{r7}
 800175a:	4770      	bx	lr

0800175c <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08c      	sub	sp, #48	; 0x30
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001766:	2300      	movs	r3, #0
 8001768:	62fb      	str	r3, [r7, #44]	; 0x2c
 800176a:	2300      	movs	r3, #0
 800176c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 800176e:	2300      	movs	r3, #0
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	8a1b      	ldrh	r3, [r3, #16]
 8001782:	b29b      	uxth	r3, r3
 8001784:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8001786:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001788:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 800178c:	4013      	ands	r3, r2
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	88db      	ldrh	r3, [r3, #6]
 8001794:	461a      	mov	r2, r3
 8001796:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001798:	4313      	orrs	r3, r2
 800179a:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 800179c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179e:	b29a      	uxth	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	899b      	ldrh	r3, [r3, #12]
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80017ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ae:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 80017b2:	4013      	ands	r3, r2
 80017b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	889a      	ldrh	r2, [r3, #4]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	891b      	ldrh	r3, [r3, #8]
 80017be:	4313      	orrs	r3, r2
 80017c0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80017c6:	4313      	orrs	r3, r2
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	461a      	mov	r2, r3
 80017cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ce:	4313      	orrs	r3, r2
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80017d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d4:	b29a      	uxth	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	8a9b      	ldrh	r3, [r3, #20]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 80017e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017e4:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 80017e8:	4013      	ands	r3, r2
 80017ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	899b      	ldrh	r3, [r3, #12]
 80017f0:	461a      	mov	r2, r3
 80017f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f4:	4313      	orrs	r3, r2
 80017f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80017f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001800:	f107 0308 	add.w	r3, r7, #8
 8001804:	4618      	mov	r0, r3
 8001806:	f7ff fe77 	bl	80014f8 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	4a2e      	ldr	r2, [pc, #184]	; (80018c8 <USART_Init+0x16c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d102      	bne.n	8001818 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	62bb      	str	r3, [r7, #40]	; 0x28
 8001816:	e001      	b.n	800181c <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	899b      	ldrh	r3, [r3, #12]
 8001820:	b29b      	uxth	r3, r3
 8001822:	b21b      	sxth	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	da0c      	bge.n	8001842 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001828:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800182a:	4613      	mov	r3, r2
 800182c:	009b      	lsls	r3, r3, #2
 800182e:	4413      	add	r3, r2
 8001830:	009a      	lsls	r2, r3, #2
 8001832:	441a      	add	r2, r3
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	fbb2 f3f3 	udiv	r3, r2, r3
 800183e:	627b      	str	r3, [r7, #36]	; 0x24
 8001840:	e00b      	b.n	800185a <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001842:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	009a      	lsls	r2, r3, #2
 800184c:	441a      	add	r2, r3
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	fbb2 f3f3 	udiv	r3, r2, r3
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	4a1b      	ldr	r2, [pc, #108]	; (80018cc <USART_Init+0x170>)
 800185e:	fba2 2303 	umull	r2, r3, r2, r3
 8001862:	095b      	lsrs	r3, r3, #5
 8001864:	011b      	lsls	r3, r3, #4
 8001866:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800186a:	091b      	lsrs	r3, r3, #4
 800186c:	2264      	movs	r2, #100	; 0x64
 800186e:	fb02 f303 	mul.w	r3, r2, r3
 8001872:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	899b      	ldrh	r3, [r3, #12]
 800187c:	b29b      	uxth	r3, r3
 800187e:	b21b      	sxth	r3, r3
 8001880:	2b00      	cmp	r3, #0
 8001882:	da0c      	bge.n	800189e <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001884:	6a3b      	ldr	r3, [r7, #32]
 8001886:	00db      	lsls	r3, r3, #3
 8001888:	3332      	adds	r3, #50	; 0x32
 800188a:	4a10      	ldr	r2, [pc, #64]	; (80018cc <USART_Init+0x170>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	095b      	lsrs	r3, r3, #5
 8001892:	f003 0307 	and.w	r3, r3, #7
 8001896:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001898:	4313      	orrs	r3, r2
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800189c:	e00b      	b.n	80018b6 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800189e:	6a3b      	ldr	r3, [r7, #32]
 80018a0:	011b      	lsls	r3, r3, #4
 80018a2:	3332      	adds	r3, #50	; 0x32
 80018a4:	4a09      	ldr	r2, [pc, #36]	; (80018cc <USART_Init+0x170>)
 80018a6:	fba2 2303 	umull	r2, r3, r2, r3
 80018aa:	095b      	lsrs	r3, r3, #5
 80018ac:	f003 030f 	and.w	r3, r3, #15
 80018b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018b2:	4313      	orrs	r3, r2
 80018b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80018b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b8:	b29a      	uxth	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	811a      	strh	r2, [r3, #8]
}
 80018be:	bf00      	nop
 80018c0:	3730      	adds	r7, #48	; 0x30
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	40013800 	.word	0x40013800
 80018cc:	51eb851f 	.word	0x51eb851f

080018d0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80018dc:	78fb      	ldrb	r3, [r7, #3]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d008      	beq.n	80018f4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	899b      	ldrh	r3, [r3, #12]
 80018e6:	b29b      	uxth	r3, r3
 80018e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018ec:	b29a      	uxth	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 80018f2:	e007      	b.n	8001904 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	899b      	ldrh	r3, [r3, #12]
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018fe:	b29a      	uxth	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	819a      	strh	r2, [r3, #12]
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	bc80      	pop	{r7}
 800190c:	4770      	bx	lr

0800190e <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800190e:	b480      	push	{r7}
 8001910:	b087      	sub	sp, #28
 8001912:	af00      	add	r7, sp, #0
 8001914:	6078      	str	r0, [r7, #4]
 8001916:	460b      	mov	r3, r1
 8001918:	807b      	strh	r3, [r7, #2]
 800191a:	4613      	mov	r3, r2
 800191c:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
 8001922:	2300      	movs	r3, #0
 8001924:	60fb      	str	r3, [r7, #12]
 8001926:	2300      	movs	r3, #0
 8001928:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001932:	887b      	ldrh	r3, [r7, #2]
 8001934:	b2db      	uxtb	r3, r3
 8001936:	095b      	lsrs	r3, r3, #5
 8001938:	b2db      	uxtb	r3, r3
 800193a:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 800193c:	887b      	ldrh	r3, [r7, #2]
 800193e:	f003 031f 	and.w	r3, r3, #31
 8001942:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001944:	2201      	movs	r2, #1
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d103      	bne.n	800195c <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	330c      	adds	r3, #12
 8001958:	617b      	str	r3, [r7, #20]
 800195a:	e009      	b.n	8001970 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d103      	bne.n	800196a <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3310      	adds	r3, #16
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	e002      	b.n	8001970 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	3314      	adds	r3, #20
 800196e:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8001970:	787b      	ldrb	r3, [r7, #1]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d006      	beq.n	8001984 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	697a      	ldr	r2, [r7, #20]
 800197a:	6811      	ldr	r1, [r2, #0]
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	430a      	orrs	r2, r1
 8001980:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8001982:	e006      	b.n	8001992 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	6811      	ldr	r1, [r2, #0]
 800198a:	68ba      	ldr	r2, [r7, #8]
 800198c:	43d2      	mvns	r2, r2
 800198e:	400a      	ands	r2, r1
 8001990:	601a      	str	r2, [r3, #0]
}
 8001992:	bf00      	nop
 8001994:	371c      	adds	r7, #28
 8001996:	46bd      	mov	sp, r7
 8001998:	bc80      	pop	{r7}
 800199a:	4770      	bx	lr

0800199c <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	889b      	ldrh	r3, [r3, #4]
 80019a8:	b29b      	uxth	r3, r3
 80019aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019ae:	b29b      	uxth	r3, r3
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	370c      	adds	r7, #12
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b085      	sub	sp, #20
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
 80019c2:	460b      	mov	r3, r1
 80019c4:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	881b      	ldrh	r3, [r3, #0]
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	887b      	ldrh	r3, [r7, #2]
 80019d2:	4013      	ands	r3, r2
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d002      	beq.n	80019e0 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80019da:	2301      	movs	r3, #1
 80019dc:	73fb      	strb	r3, [r7, #15]
 80019de:	e001      	b.n	80019e4 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80019e0:	2300      	movs	r3, #0
 80019e2:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bc80      	pop	{r7}
 80019ee:	4770      	bx	lr

080019f0 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b083      	sub	sp, #12
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	460b      	mov	r3, r1
 80019fa:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 80019fc:	887b      	ldrh	r3, [r7, #2]
 80019fe:	43db      	mvns	r3, r3
 8001a00:	b29a      	uxth	r2, r3
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	801a      	strh	r2, [r3, #0]
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	460b      	mov	r3, r1
 8001a1a:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
 8001a24:	2300      	movs	r3, #0
 8001a26:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001a2c:	887b      	ldrh	r3, [r7, #2]
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	095b      	lsrs	r3, r3, #5
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 8001a36:	887b      	ldrh	r3, [r7, #2]
 8001a38:	f003 031f 	and.w	r3, r3, #31
 8001a3c:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001a3e:	2201      	movs	r2, #1
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d107      	bne.n	8001a5e <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	899b      	ldrh	r3, [r3, #12]
 8001a52:	b29b      	uxth	r3, r3
 8001a54:	461a      	mov	r2, r3
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]
 8001a5c:	e011      	b.n	8001a82 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	2b02      	cmp	r3, #2
 8001a62:	d107      	bne.n	8001a74 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	8a1b      	ldrh	r3, [r3, #16]
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	617b      	str	r3, [r7, #20]
 8001a72:	e006      	b.n	8001a82 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	8a9b      	ldrh	r3, [r3, #20]
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001a82:	887b      	ldrh	r3, [r7, #2]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	881b      	ldrh	r3, [r3, #0]
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d005      	beq.n	8001ab4 <USART_GetITStatus+0xa4>
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d002      	beq.n	8001ab4 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	74fb      	strb	r3, [r7, #19]
 8001ab2:	e001      	b.n	8001ab8 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001ab8:	7cfb      	ldrb	r3, [r7, #19]
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	371c      	adds	r7, #28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr

08001ac4 <_ZN12AccelStepper12distanceToGoEv>:
	return false;
    }
}

long AccelStepper::distanceToGo()
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
    return _targetPos - _currentPos;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	695a      	ldr	r2, [r3, #20]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr

08001ae0 <_ZN12AccelStepper15computeNewSpeedEv>:
    _stepInterval = 0;
    _speed = 0.0;
}

void AccelStepper::computeNewSpeed()
{
 8001ae0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001ae4:	b084      	sub	sp, #16
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
    long distanceTo = distanceToGo(); // +ve is clockwise from curent location
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ffea 	bl	8001ac4 <_ZN12AccelStepper12distanceToGoEv>
 8001af0:	60f8      	str	r0, [r7, #12]

    long stepsToStop = (long)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	699a      	ldr	r2, [r3, #24]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	699b      	ldr	r3, [r3, #24]
 8001afa:	4619      	mov	r1, r3
 8001afc:	4610      	mov	r0, r2
 8001afe:	f7ff f91d 	bl	8000d3c <__aeabi_fmul>
 8001b02:	4603      	mov	r3, r0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe fc8f 	bl	8000428 <__aeabi_f2d>
 8001b0a:	4604      	mov	r4, r0
 8001b0c:	460d      	mov	r5, r1
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a1b      	ldr	r3, [r3, #32]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7fe fc88 	bl	8000428 <__aeabi_f2d>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	f7fe fb26 	bl	800016c <__adddf3>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4620      	mov	r0, r4
 8001b26:	4629      	mov	r1, r5
 8001b28:	f7fe fdfc 	bl	8000724 <__aeabi_ddiv>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	460c      	mov	r4, r1
 8001b30:	4618      	mov	r0, r3
 8001b32:	4621      	mov	r1, r4
 8001b34:	f7fe ff7c 	bl	8000a30 <__aeabi_d2iz>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	60bb      	str	r3, [r7, #8]

    if (distanceTo == 0 && stepsToStop <= 1)
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d10d      	bne.n	8001b5e <_ZN12AccelStepper15computeNewSpeedEv+0x7e>
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	dc0a      	bgt.n	8001b5e <_ZN12AccelStepper15computeNewSpeedEv+0x7e>
    {
	// We are at the target and its time to stop
	_stepInterval = 0;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	629a      	str	r2, [r3, #40]	; 0x28
	_speed = 0.0;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	619a      	str	r2, [r3, #24]
	_n = 0;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	641a      	str	r2, [r3, #64]	; 0x40
	return;
 8001b5c:	e0d5      	b.n	8001d0a <_ZN12AccelStepper15computeNewSpeedEv+0x22a>
    }

    if (distanceTo > 0)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	dd25      	ble.n	8001bb0 <_ZN12AccelStepper15computeNewSpeedEv+0xd0>
    {
	// We are anticlockwise from the target
	// Need to go clockwise from here, maybe decelerate now
	if (_n > 0)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	dd0f      	ble.n	8001b8c <_ZN12AccelStepper15computeNewSpeedEv+0xac>
	{
	    // Currently accelerating, need to decel now? Or maybe going the wrong way?
	    if ((stepsToStop >= distanceTo) || _direction == DIRECTION_CCW)
 8001b6c:	68ba      	ldr	r2, [r7, #8]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	da06      	bge.n	8001b82 <_ZN12AccelStepper15computeNewSpeedEv+0xa2>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	791b      	ldrb	r3, [r3, #4]
 8001b78:	f083 0301 	eor.w	r3, r3, #1
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d040      	beq.n	8001c04 <_ZN12AccelStepper15computeNewSpeedEv+0x124>
		_n = -stepsToStop; // Start deceleration
 8001b82:	68bb      	ldr	r3, [r7, #8]
 8001b84:	425a      	negs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	641a      	str	r2, [r3, #64]	; 0x40
 8001b8a:	e03b      	b.n	8001c04 <_ZN12AccelStepper15computeNewSpeedEv+0x124>
	}
	else if (_n < 0)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	da37      	bge.n	8001c04 <_ZN12AccelStepper15computeNewSpeedEv+0x124>
	{
	    // Currently decelerating, need to accel again?
	    if ((stepsToStop < distanceTo) && _direction == DIRECTION_CW)
 8001b94:	68ba      	ldr	r2, [r7, #8]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	da33      	bge.n	8001c04 <_ZN12AccelStepper15computeNewSpeedEv+0x124>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	791b      	ldrb	r3, [r3, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d02f      	beq.n	8001c04 <_ZN12AccelStepper15computeNewSpeedEv+0x124>
		_n = -_n; // Start accceleration
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	425a      	negs	r2, r3
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	641a      	str	r2, [r3, #64]	; 0x40
 8001bae:	e029      	b.n	8001c04 <_ZN12AccelStepper15computeNewSpeedEv+0x124>
	}
    }
    else if (distanceTo < 0)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	da26      	bge.n	8001c04 <_ZN12AccelStepper15computeNewSpeedEv+0x124>
    {
	// We are clockwise from the target
	// Need to go anticlockwise from here, maybe decelerate
	if (_n > 0)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	dd0d      	ble.n	8001bda <_ZN12AccelStepper15computeNewSpeedEv+0xfa>
	{
	    // Currently accelerating, need to decel now? Or maybe going the wrong way?
	    if ((stepsToStop >= -distanceTo) || _direction == DIRECTION_CW)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	425a      	negs	r2, r3
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	dd03      	ble.n	8001bd0 <_ZN12AccelStepper15computeNewSpeedEv+0xf0>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	791b      	ldrb	r3, [r3, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d019      	beq.n	8001c04 <_ZN12AccelStepper15computeNewSpeedEv+0x124>
		_n = -stepsToStop; // Start deceleration
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	425a      	negs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	641a      	str	r2, [r3, #64]	; 0x40
 8001bd8:	e014      	b.n	8001c04 <_ZN12AccelStepper15computeNewSpeedEv+0x124>
	}
	else if (_n < 0)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	da10      	bge.n	8001c04 <_ZN12AccelStepper15computeNewSpeedEv+0x124>
	{
	    // Currently decelerating, need to accel again?
	    if ((stepsToStop < -distanceTo) && _direction == DIRECTION_CCW)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	425a      	negs	r2, r3
 8001be6:	68bb      	ldr	r3, [r7, #8]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	dd0b      	ble.n	8001c04 <_ZN12AccelStepper15computeNewSpeedEv+0x124>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	791b      	ldrb	r3, [r3, #4]
 8001bf0:	f083 0301 	eor.w	r3, r3, #1
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d004      	beq.n	8001c04 <_ZN12AccelStepper15computeNewSpeedEv+0x124>
		_n = -_n; // Start accceleration
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	425a      	negs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	641a      	str	r2, [r3, #64]	; 0x40
	}
    }

    // Need to accelerate or decelerate
    if (_n == 0)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d10c      	bne.n	8001c26 <_ZN12AccelStepper15computeNewSpeedEv+0x146>
    {
	// First step from stopped
	_cn = _c0;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	649a      	str	r2, [r3, #72]	; 0x48
	_direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	bfcc      	ite	gt
 8001c1a:	2301      	movgt	r3, #1
 8001c1c:	2300      	movle	r3, #0
 8001c1e:	b2da      	uxtb	r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	711a      	strb	r2, [r3, #4]
 8001c24:	e04d      	b.n	8001cc2 <_ZN12AccelStepper15computeNewSpeedEv+0x1e2>
    }
    else
    {
	// Subsequent step. Works for accel (n is +_ve) and decel (n is -ve).
	_cn = _cn - ((2.0 * _cn) / ((4.0 * _n) + 1)); // Equation 13
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fbfc 	bl	8000428 <__aeabi_f2d>
 8001c30:	4604      	mov	r4, r0
 8001c32:	460d      	mov	r5, r1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7fe fbf5 	bl	8000428 <__aeabi_f2d>
 8001c3e:	4602      	mov	r2, r0
 8001c40:	460b      	mov	r3, r1
 8001c42:	f7fe fa93 	bl	800016c <__adddf3>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	4690      	mov	r8, r2
 8001c4c:	4699      	mov	r9, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c52:	4618      	mov	r0, r3
 8001c54:	f7fe fbd6 	bl	8000404 <__aeabi_i2d>
 8001c58:	f04f 0200 	mov.w	r2, #0
 8001c5c:	4b2d      	ldr	r3, [pc, #180]	; (8001d14 <_ZN12AccelStepper15computeNewSpeedEv+0x234>)
 8001c5e:	f7fe fc37 	bl	80004d0 <__aeabi_dmul>
 8001c62:	4602      	mov	r2, r0
 8001c64:	460b      	mov	r3, r1
 8001c66:	4610      	mov	r0, r2
 8001c68:	4619      	mov	r1, r3
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	4b2a      	ldr	r3, [pc, #168]	; (8001d18 <_ZN12AccelStepper15computeNewSpeedEv+0x238>)
 8001c70:	f7fe fa7c 	bl	800016c <__adddf3>
 8001c74:	4602      	mov	r2, r0
 8001c76:	460b      	mov	r3, r1
 8001c78:	4640      	mov	r0, r8
 8001c7a:	4649      	mov	r1, r9
 8001c7c:	f7fe fd52 	bl	8000724 <__aeabi_ddiv>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4620      	mov	r0, r4
 8001c86:	4629      	mov	r1, r5
 8001c88:	f7fe fa6e 	bl	8000168 <__aeabi_dsub>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	460c      	mov	r4, r1
 8001c90:	4618      	mov	r0, r3
 8001c92:	4621      	mov	r1, r4
 8001c94:	f7fe fef4 	bl	8000a80 <__aeabi_d2f>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	649a      	str	r2, [r3, #72]	; 0x48
	_cn = max(_cn, _cmin);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4610      	mov	r0, r2
 8001caa:	f7ff fa03 	bl	80010b4 <__aeabi_fcmpgt>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d002      	beq.n	8001cba <_ZN12AccelStepper15computeNewSpeedEv+0x1da>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cb8:	e001      	b.n	8001cbe <_ZN12AccelStepper15computeNewSpeedEv+0x1de>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6493      	str	r3, [r2, #72]	; 0x48
    }
    _n++;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	1c5a      	adds	r2, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	641a      	str	r2, [r3, #64]	; 0x40
    _stepInterval = _cn;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fa1f 	bl	8001114 <__aeabi_f2uiz>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28
    _speed = 1000000.0 / _cn;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	480e      	ldr	r0, [pc, #56]	; (8001d1c <_ZN12AccelStepper15computeNewSpeedEv+0x23c>)
 8001ce4:	f7ff f8de 	bl	8000ea4 <__aeabi_fdiv>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	461a      	mov	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	619a      	str	r2, [r3, #24]
    if (_direction == DIRECTION_CCW)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	791b      	ldrb	r3, [r3, #4]
 8001cf4:	f083 0301 	eor.w	r3, r3, #1
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d005      	beq.n	8001d0a <_ZN12AccelStepper15computeNewSpeedEv+0x22a>
	_speed = -_speed;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f083 4200 	eor.w	r2, r3, #2147483648	; 0x80000000
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	619a      	str	r2, [r3, #24]
    Serial.println(_stepInterval);
    Serial.println(distanceTo);
    Serial.println(stepsToStop);
    Serial.println("-----");
#endif
}
 8001d0a:	3710      	adds	r7, #16
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d12:	bf00      	nop
 8001d14:	40100000 	.word	0x40100000
 8001d18:	3ff00000 	.word	0x3ff00000
 8001d1c:	49742400 	.word	0x49742400

08001d20 <_ZN12AccelStepperC1Ehhhhhb>:
    if (runSpeed())
	computeNewSpeed();
    return _speed != 0.0 || distanceToGo() != 0;
}

AccelStepper::AccelStepper(uint8_t interface, uint8_t pin1, uint8_t pin2, uint8_t pin3, uint8_t pin4, bool enable)
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	4608      	mov	r0, r1
 8001d2a:	4611      	mov	r1, r2
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4603      	mov	r3, r0
 8001d30:	70fb      	strb	r3, [r7, #3]
 8001d32:	460b      	mov	r3, r1
 8001d34:	70bb      	strb	r3, [r7, #2]
 8001d36:	4613      	mov	r3, r2
 8001d38:	707b      	strb	r3, [r7, #1]
 8001d3a:	4a36      	ldr	r2, [pc, #216]	; (8001e14 <_ZN12AccelStepperC1Ehhhhhb+0xf4>)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	601a      	str	r2, [r3, #0]
{
    _interface = interface;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	78fa      	ldrb	r2, [r7, #3]
 8001d44:	715a      	strb	r2, [r3, #5]
    _currentPos = 0;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	611a      	str	r2, [r3, #16]
    _targetPos = 0;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	615a      	str	r2, [r3, #20]
    _speed = 0.0;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	619a      	str	r2, [r3, #24]
    _maxSpeed = 1.0;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d60:	61da      	str	r2, [r3, #28]
    _acceleration = 0.0;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f04f 0200 	mov.w	r2, #0
 8001d68:	621a      	str	r2, [r3, #32]
    _sqrt_twoa = 1.0;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24
    _stepInterval = 0;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	629a      	str	r2, [r3, #40]	; 0x28
    _minPulseWidth = 1;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	631a      	str	r2, [r3, #48]	; 0x30
    _enablePin = 0xff;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	22ff      	movs	r2, #255	; 0xff
 8001d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    _lastStepTime = 0;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	62da      	str	r2, [r3, #44]	; 0x2c
    _pin[0] = pin1;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	78ba      	ldrb	r2, [r7, #2]
 8001d90:	719a      	strb	r2, [r3, #6]
    _pin[1] = pin2;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	787a      	ldrb	r2, [r7, #1]
 8001d96:	71da      	strb	r2, [r3, #7]
    _pin[2] = pin3;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	7e3a      	ldrb	r2, [r7, #24]
 8001d9c:	721a      	strb	r2, [r3, #8]
    _pin[3] = pin4;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	7f3a      	ldrb	r2, [r7, #28]
 8001da2:	725a      	strb	r2, [r3, #9]
    _enableInverted = false;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2200      	movs	r2, #0
 8001da8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    // NEW
    _n = 0;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2200      	movs	r2, #0
 8001db0:	641a      	str	r2, [r3, #64]	; 0x40
    _c0 = 0.0;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f04f 0200 	mov.w	r2, #0
 8001db8:	645a      	str	r2, [r3, #68]	; 0x44
    _cn = 0.0;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f04f 0200 	mov.w	r2, #0
 8001dc0:	649a      	str	r2, [r3, #72]	; 0x48
    _cmin = 1.0;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001dc8:	64da      	str	r2, [r3, #76]	; 0x4c
    _direction = DIRECTION_CCW;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2200      	movs	r2, #0
 8001dce:	711a      	strb	r2, [r3, #4]

    int i;
    for (i = 0; i < 4; i++)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2b03      	cmp	r3, #3
 8001dd8:	dc09      	bgt.n	8001dee <_ZN12AccelStepperC1Ehhhhhb+0xce>
	_pinInverted[i] = 0;
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	330a      	adds	r3, #10
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < 4; i++)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	3301      	adds	r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	e7f2      	b.n	8001dd4 <_ZN12AccelStepperC1Ehhhhhb+0xb4>
    if (enable)
 8001dee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d002      	beq.n	8001dfc <_ZN12AccelStepperC1Ehhhhhb+0xdc>
	enableOutputs();
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 fb04 	bl	8002404 <_ZN12AccelStepper13enableOutputsEv>
    // Some reasonable default
    setAcceleration(1);
 8001dfc:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f809 	bl	8001e18 <_ZN12AccelStepper15setAccelerationEf>
    SysTick_Init();
 8001e06:	f001 fa1b 	bl	8003240 <SysTick_Init>
}
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	3710      	adds	r7, #16
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	08003a74 	.word	0x08003a74

08001e18 <_ZN12AccelStepper15setAccelerationEf>:
{
    return _maxSpeed;
}

void AccelStepper::setAcceleration(float acceleration)
{
 8001e18:	b590      	push	{r4, r7, lr}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
    if (acceleration == 0.0)
 8001e22:	f04f 0100 	mov.w	r1, #0
 8001e26:	6838      	ldr	r0, [r7, #0]
 8001e28:	f7ff f91c 	bl	8001064 <__aeabi_fcmpeq>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d15d      	bne.n	8001eee <_ZN12AccelStepper15setAccelerationEf+0xd6>
	return;
    if (acceleration < 0.0)
 8001e32:	f04f 0100 	mov.w	r1, #0
 8001e36:	6838      	ldr	r0, [r7, #0]
 8001e38:	f7ff f91e 	bl	8001078 <__aeabi_fcmplt>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d003      	beq.n	8001e4a <_ZN12AccelStepper15setAccelerationEf+0x32>
      acceleration = -acceleration;
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001e48:	603b      	str	r3, [r7, #0]
    if (_acceleration != acceleration)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6a1b      	ldr	r3, [r3, #32]
 8001e4e:	6839      	ldr	r1, [r7, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff f907 	bl	8001064 <__aeabi_fcmpeq>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d149      	bne.n	8001ef0 <_ZN12AccelStepper15setAccelerationEf+0xd8>
    {
	// Recompute _n per Equation 17
	_n = _n * (_acceleration / acceleration);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7fe ff17 	bl	8000c94 <__aeabi_i2f>
 8001e66:	4604      	mov	r4, r0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a1b      	ldr	r3, [r3, #32]
 8001e6c:	6839      	ldr	r1, [r7, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff f818 	bl	8000ea4 <__aeabi_fdiv>
 8001e74:	4603      	mov	r3, r0
 8001e76:	4619      	mov	r1, r3
 8001e78:	4620      	mov	r0, r4
 8001e7a:	f7fe ff5f 	bl	8000d3c <__aeabi_fmul>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff f921 	bl	80010c8 <__aeabi_f2iz>
 8001e86:	4602      	mov	r2, r0
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	641a      	str	r2, [r3, #64]	; 0x40
	// New c0 per Equation 7, with correction per Equation 15
	_c0 = 0.676 * sqrt(2.0 / acceleration) * 1000000.0; // Equation 15
 8001e8c:	6838      	ldr	r0, [r7, #0]
 8001e8e:	f7fe facb 	bl	8000428 <__aeabi_f2d>
 8001e92:	4603      	mov	r3, r0
 8001e94:	460c      	mov	r4, r1
 8001e96:	461a      	mov	r2, r3
 8001e98:	4623      	mov	r3, r4
 8001e9a:	f04f 0000 	mov.w	r0, #0
 8001e9e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001ea2:	f7fe fc3f 	bl	8000724 <__aeabi_ddiv>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	460c      	mov	r4, r1
 8001eaa:	4618      	mov	r0, r3
 8001eac:	4621      	mov	r1, r4
 8001eae:	f001 fbc7 	bl	8003640 <sqrt>
 8001eb2:	a311      	add	r3, pc, #68	; (adr r3, 8001ef8 <_ZN12AccelStepper15setAccelerationEf+0xe0>)
 8001eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb8:	f7fe fb0a 	bl	80004d0 <__aeabi_dmul>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	460c      	mov	r4, r1
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	4621      	mov	r1, r4
 8001ec4:	a30e      	add	r3, pc, #56	; (adr r3, 8001f00 <_ZN12AccelStepper15setAccelerationEf+0xe8>)
 8001ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eca:	f7fe fb01 	bl	80004d0 <__aeabi_dmul>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	460c      	mov	r4, r1
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	4621      	mov	r1, r4
 8001ed6:	f7fe fdd3 	bl	8000a80 <__aeabi_d2f>
 8001eda:	4602      	mov	r2, r0
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	645a      	str	r2, [r3, #68]	; 0x44
	_acceleration = acceleration;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	621a      	str	r2, [r3, #32]
	computeNewSpeed();
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7ff fdfa 	bl	8001ae0 <_ZN12AccelStepper15computeNewSpeedEv>
 8001eec:	e000      	b.n	8001ef0 <_ZN12AccelStepper15setAccelerationEf+0xd8>
	return;
 8001eee:	bf00      	nop
    }
}
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd90      	pop	{r4, r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	c083126f 	.word	0xc083126f
 8001efc:	3fe5a1ca 	.word	0x3fe5a1ca
 8001f00:	00000000 	.word	0x00000000
 8001f04:	412e8480 	.word	0x412e8480

08001f08 <_ZN12AccelStepper4stepEl>:
    return _speed;
}

// Subclasses can override
void AccelStepper::step(long step)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
    switch (_interface)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	795b      	ldrb	r3, [r3, #5]
 8001f16:	2b08      	cmp	r3, #8
 8001f18:	d84c      	bhi.n	8001fb4 <_ZN12AccelStepper4stepEl+0xac>
 8001f1a:	a201      	add	r2, pc, #4	; (adr r2, 8001f20 <_ZN12AccelStepper4stepEl+0x18>)
 8001f1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f20:	08001f45 	.word	0x08001f45
 8001f24:	08001f55 	.word	0x08001f55
 8001f28:	08001f65 	.word	0x08001f65
 8001f2c:	08001f75 	.word	0x08001f75
 8001f30:	08001f85 	.word	0x08001f85
 8001f34:	08001fb5 	.word	0x08001fb5
 8001f38:	08001f95 	.word	0x08001f95
 8001f3c:	08001fb5 	.word	0x08001fb5
 8001f40:	08001fa5 	.word	0x08001fa5
    {
        case FUNCTION:
            step0(step);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	3310      	adds	r3, #16
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	6839      	ldr	r1, [r7, #0]
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	4798      	blx	r3
            break;
 8001f52:	e02f      	b.n	8001fb4 <_ZN12AccelStepper4stepEl+0xac>

	case DRIVER:
	    step1(step);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	3314      	adds	r3, #20
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	6839      	ldr	r1, [r7, #0]
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	4798      	blx	r3
	    break;
 8001f62:	e027      	b.n	8001fb4 <_ZN12AccelStepper4stepEl+0xac>

	case FULL2WIRE:
	    step2(step);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	3318      	adds	r3, #24
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	6839      	ldr	r1, [r7, #0]
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	4798      	blx	r3
	    break;
 8001f72:	e01f      	b.n	8001fb4 <_ZN12AccelStepper4stepEl+0xac>

	case FULL3WIRE:
	    step3(step);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	331c      	adds	r3, #28
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6839      	ldr	r1, [r7, #0]
 8001f7e:	6878      	ldr	r0, [r7, #4]
 8001f80:	4798      	blx	r3
	    break;
 8001f82:	e017      	b.n	8001fb4 <_ZN12AccelStepper4stepEl+0xac>

	case FULL4WIRE:
	    step4(step);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	3320      	adds	r3, #32
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6839      	ldr	r1, [r7, #0]
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	4798      	blx	r3
	    break;
 8001f92:	e00f      	b.n	8001fb4 <_ZN12AccelStepper4stepEl+0xac>

	case HALF3WIRE:
	    step6(step);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	3324      	adds	r3, #36	; 0x24
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6839      	ldr	r1, [r7, #0]
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	4798      	blx	r3
	    break;
 8001fa2:	e007      	b.n	8001fb4 <_ZN12AccelStepper4stepEl+0xac>

	case HALF4WIRE:
	    step8(step);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	3328      	adds	r3, #40	; 0x28
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6839      	ldr	r1, [r7, #0]
 8001fae:	6878      	ldr	r0, [r7, #4]
 8001fb0:	4798      	blx	r3
	    break;
 8001fb2:	bf00      	nop
    }
}
 8001fb4:	bf00      	nop
 8001fb6:	3708      	adds	r7, #8
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <_ZN12AccelStepper13setOutputPinsEh>:
// You might want to override this to implement eg serial output
// bit 0 of the mask corresponds to _pin[0]
// bit 1 of the mask corresponds to _pin[1]
// ....
void AccelStepper::setOutputPins(uint8_t mask)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	70fb      	strb	r3, [r7, #3]
    uint8_t numpins = 2;
 8001fc8:	2302      	movs	r3, #2
 8001fca:	73fb      	strb	r3, [r7, #15]
    if (_interface == FULL4WIRE || _interface == HALF4WIRE)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	795b      	ldrb	r3, [r3, #5]
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d003      	beq.n	8001fdc <_ZN12AccelStepper13setOutputPinsEh+0x20>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	795b      	ldrb	r3, [r3, #5]
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d102      	bne.n	8001fe2 <_ZN12AccelStepper13setOutputPinsEh+0x26>
	numpins = 4;
 8001fdc:	2304      	movs	r3, #4
 8001fde:	73fb      	strb	r3, [r7, #15]
 8001fe0:	e009      	b.n	8001ff6 <_ZN12AccelStepper13setOutputPinsEh+0x3a>
    else if (_interface == FULL3WIRE || _interface == HALF3WIRE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	795b      	ldrb	r3, [r3, #5]
 8001fe6:	2b03      	cmp	r3, #3
 8001fe8:	d003      	beq.n	8001ff2 <_ZN12AccelStepper13setOutputPinsEh+0x36>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	795b      	ldrb	r3, [r3, #5]
 8001fee:	2b06      	cmp	r3, #6
 8001ff0:	d101      	bne.n	8001ff6 <_ZN12AccelStepper13setOutputPinsEh+0x3a>
	numpins = 3;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	73fb      	strb	r3, [r7, #15]
    uint8_t i;
    for (i = 0; i < numpins; i++)
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	73bb      	strb	r3, [r7, #14]
 8001ffa:	7bba      	ldrb	r2, [r7, #14]
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	da1e      	bge.n	8002040 <_ZN12AccelStepper13setOutputPinsEh+0x84>
	digitalWrite(_pin[i], (mask & (1 << i)) ? (HIGH ^ _pinInverted[i]) : (LOW ^ _pinInverted[i]));
 8002002:	7bbb      	ldrb	r3, [r7, #14]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	4413      	add	r3, r2
 8002008:	7998      	ldrb	r0, [r3, #6]
 800200a:	78fa      	ldrb	r2, [r7, #3]
 800200c:	7bbb      	ldrb	r3, [r7, #14]
 800200e:	fa42 f303 	asr.w	r3, r2, r3
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d007      	beq.n	800202a <_ZN12AccelStepper13setOutputPinsEh+0x6e>
 800201a:	7bbb      	ldrb	r3, [r7, #14]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	4413      	add	r3, r2
 8002020:	7a9b      	ldrb	r3, [r3, #10]
 8002022:	f083 0301 	eor.w	r3, r3, #1
 8002026:	b2db      	uxtb	r3, r3
 8002028:	e003      	b.n	8002032 <_ZN12AccelStepper13setOutputPinsEh+0x76>
 800202a:	7bbb      	ldrb	r3, [r7, #14]
 800202c:	687a      	ldr	r2, [r7, #4]
 800202e:	4413      	add	r3, r2
 8002030:	7a9b      	ldrb	r3, [r3, #10]
 8002032:	4619      	mov	r1, r3
 8002034:	f000 fac2 	bl	80025bc <digitalWrite>
    for (i = 0; i < numpins; i++)
 8002038:	7bbb      	ldrb	r3, [r7, #14]
 800203a:	3301      	adds	r3, #1
 800203c:	73bb      	strb	r3, [r7, #14]
 800203e:	e7dc      	b.n	8001ffa <_ZN12AccelStepper13setOutputPinsEh+0x3e>
}
 8002040:	bf00      	nop
 8002042:	3710      	adds	r7, #16
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <_ZN12AccelStepper5step0El>:

// 0 pin step function (ie for functional usage)
void AccelStepper::step0(long step)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
    (void)(step); // Unused
    if (_speed > 0)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	f04f 0100 	mov.w	r1, #0
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff f82a 	bl	80010b4 <__aeabi_fcmpgt>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d003      	beq.n	800206e <_ZN12AccelStepper5step0El+0x26>
	_forward();
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800206a:	4798      	blx	r3
    else
	_backward();
}
 800206c:	e002      	b.n	8002074 <_ZN12AccelStepper5step0El+0x2c>
	_backward();
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002072:	4798      	blx	r3
}
 8002074:	bf00      	nop
 8002076:	3708      	adds	r7, #8
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}

0800207c <_ZN12AccelStepper5step1El>:

// 1 pin step function (ie for stepper drivers)
// This is passed the current step number (0 to 7)
// Subclasses can override
void AccelStepper::step1(long step)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
    (void)(step); // Unused

    // _pin[0] is step, _pin[1] is direction
    setOutputPins(_direction ? 0b10 : 0b00); // Set direction first else get rogue pulses
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3308      	adds	r3, #8
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	7912      	ldrb	r2, [r2, #4]
 8002092:	2a00      	cmp	r2, #0
 8002094:	d001      	beq.n	800209a <_ZN12AccelStepper5step1El+0x1e>
 8002096:	2202      	movs	r2, #2
 8002098:	e000      	b.n	800209c <_ZN12AccelStepper5step1El+0x20>
 800209a:	2200      	movs	r2, #0
 800209c:	4611      	mov	r1, r2
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	4798      	blx	r3
    setOutputPins(_direction ? 0b11 : 0b01); // step HIGH
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	3308      	adds	r3, #8
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	7912      	ldrb	r2, [r2, #4]
 80020ae:	2a00      	cmp	r2, #0
 80020b0:	d001      	beq.n	80020b6 <_ZN12AccelStepper5step1El+0x3a>
 80020b2:	2203      	movs	r2, #3
 80020b4:	e000      	b.n	80020b8 <_ZN12AccelStepper5step1El+0x3c>
 80020b6:	2201      	movs	r2, #1
 80020b8:	4611      	mov	r1, r2
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	4798      	blx	r3
    // Caution 200ns setup time
    // Delay the minimum allowed pulse width
    delayMicroseconds(_minPulseWidth);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4618      	mov	r0, r3
 80020c4:	f001 f918 	bl	80032f8 <delayMicroseconds>
    setOutputPins(_direction ? 0b10 : 0b00); // step LOW
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	3308      	adds	r3, #8
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	7912      	ldrb	r2, [r2, #4]
 80020d4:	2a00      	cmp	r2, #0
 80020d6:	d001      	beq.n	80020dc <_ZN12AccelStepper5step1El+0x60>
 80020d8:	2202      	movs	r2, #2
 80020da:	e000      	b.n	80020de <_ZN12AccelStepper5step1El+0x62>
 80020dc:	2200      	movs	r2, #0
 80020de:	4611      	mov	r1, r2
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	4798      	blx	r3
}
 80020e4:	bf00      	nop
 80020e6:	3708      	adds	r7, #8
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <_ZN12AccelStepper5step2El>:

// 2 pin step function
// This is passed the current step number (0 to 7)
// Subclasses can override
void AccelStepper::step2(long step)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
    switch (step & 0x3)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b03      	cmp	r3, #3
 80020fe:	d82b      	bhi.n	8002158 <_ZN12AccelStepper5step2El+0x6c>
 8002100:	a201      	add	r2, pc, #4	; (adr r2, 8002108 <_ZN12AccelStepper5step2El+0x1c>)
 8002102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002106:	bf00      	nop
 8002108:	08002119 	.word	0x08002119
 800210c:	08002129 	.word	0x08002129
 8002110:	08002139 	.word	0x08002139
 8002114:	08002149 	.word	0x08002149
    {
	case 0: /* 01 */
	    setOutputPins(0b10);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	3308      	adds	r3, #8
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2102      	movs	r1, #2
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	4798      	blx	r3
	    break;
 8002126:	e017      	b.n	8002158 <_ZN12AccelStepper5step2El+0x6c>

	case 1: /* 11 */
	    setOutputPins(0b11);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	3308      	adds	r3, #8
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2103      	movs	r1, #3
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	4798      	blx	r3
	    break;
 8002136:	e00f      	b.n	8002158 <_ZN12AccelStepper5step2El+0x6c>

	case 2: /* 10 */
	    setOutputPins(0b01);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	3308      	adds	r3, #8
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2101      	movs	r1, #1
 8002142:	6878      	ldr	r0, [r7, #4]
 8002144:	4798      	blx	r3
	    break;
 8002146:	e007      	b.n	8002158 <_ZN12AccelStepper5step2El+0x6c>

	case 3: /* 00 */
	    setOutputPins(0b00);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	3308      	adds	r3, #8
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2100      	movs	r1, #0
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	4798      	blx	r3
	    break;
 8002156:	bf00      	nop
    }
}
 8002158:	bf00      	nop
 800215a:	3708      	adds	r7, #8
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <_ZN12AccelStepper5step3El>:
// 3 pin step function
// This is passed the current step number (0 to 7)
// Subclasses can override
void AccelStepper::step3(long step)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
    switch (step % 3)
 800216a:	6839      	ldr	r1, [r7, #0]
 800216c:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <_ZN12AccelStepper5step3El+0x64>)
 800216e:	fb83 3201 	smull	r3, r2, r3, r1
 8002172:	17cb      	asrs	r3, r1, #31
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	461a      	mov	r2, r3
 8002178:	0052      	lsls	r2, r2, #1
 800217a:	441a      	add	r2, r3
 800217c:	1a8b      	subs	r3, r1, r2
 800217e:	2b01      	cmp	r3, #1
 8002180:	d00c      	beq.n	800219c <_ZN12AccelStepper5step3El+0x3c>
 8002182:	2b02      	cmp	r3, #2
 8002184:	d012      	beq.n	80021ac <_ZN12AccelStepper5step3El+0x4c>
 8002186:	2b00      	cmp	r3, #0
 8002188:	d000      	beq.n	800218c <_ZN12AccelStepper5step3El+0x2c>
	case 2:    //010
	    setOutputPins(0b010);
	    break;

    }
}
 800218a:	e017      	b.n	80021bc <_ZN12AccelStepper5step3El+0x5c>
	    setOutputPins(0b100);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	3308      	adds	r3, #8
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	2104      	movs	r1, #4
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	4798      	blx	r3
	    break;
 800219a:	e00f      	b.n	80021bc <_ZN12AccelStepper5step3El+0x5c>
	    setOutputPins(0b001);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	3308      	adds	r3, #8
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	2101      	movs	r1, #1
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	4798      	blx	r3
	    break;
 80021aa:	e007      	b.n	80021bc <_ZN12AccelStepper5step3El+0x5c>
	    setOutputPins(0b010);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	3308      	adds	r3, #8
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2102      	movs	r1, #2
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	4798      	blx	r3
	    break;
 80021ba:	bf00      	nop
}
 80021bc:	bf00      	nop
 80021be:	3708      	adds	r7, #8
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	55555556 	.word	0x55555556

080021c8 <_ZN12AccelStepper5step4El>:

// 4 pin step function for half stepper
// This is passed the current step number (0 to 7)
// Subclasses can override
void AccelStepper::step4(long step)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
    switch (step & 0x3)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	2b03      	cmp	r3, #3
 80021da:	d82b      	bhi.n	8002234 <_ZN12AccelStepper5step4El+0x6c>
 80021dc:	a201      	add	r2, pc, #4	; (adr r2, 80021e4 <_ZN12AccelStepper5step4El+0x1c>)
 80021de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e2:	bf00      	nop
 80021e4:	080021f5 	.word	0x080021f5
 80021e8:	08002205 	.word	0x08002205
 80021ec:	08002215 	.word	0x08002215
 80021f0:	08002225 	.word	0x08002225
    {
	case 0:    // 1010
	    setOutputPins(0b0101);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	3308      	adds	r3, #8
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2105      	movs	r1, #5
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	4798      	blx	r3
	    break;
 8002202:	e017      	b.n	8002234 <_ZN12AccelStepper5step4El+0x6c>

	case 1:    // 0110
	    setOutputPins(0b0110);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	3308      	adds	r3, #8
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	2106      	movs	r1, #6
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	4798      	blx	r3
	    break;
 8002212:	e00f      	b.n	8002234 <_ZN12AccelStepper5step4El+0x6c>

	case 2:    //0101
	    setOutputPins(0b1010);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	3308      	adds	r3, #8
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	210a      	movs	r1, #10
 800221e:	6878      	ldr	r0, [r7, #4]
 8002220:	4798      	blx	r3
	    break;
 8002222:	e007      	b.n	8002234 <_ZN12AccelStepper5step4El+0x6c>

	case 3:    //1001
	    setOutputPins(0b1001);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	3308      	adds	r3, #8
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2109      	movs	r1, #9
 800222e:	6878      	ldr	r0, [r7, #4]
 8002230:	4798      	blx	r3
	    break;
 8002232:	bf00      	nop
    }
}
 8002234:	bf00      	nop
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <_ZN12AccelStepper5step6El>:

// 3 pin half step function
// This is passed the current step number (0 to 7)
// Subclasses can override
void AccelStepper::step6(long step)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
    switch (step % 6)
 8002246:	6839      	ldr	r1, [r7, #0]
 8002248:	4b27      	ldr	r3, [pc, #156]	; (80022e8 <_ZN12AccelStepper5step6El+0xac>)
 800224a:	fb83 3201 	smull	r3, r2, r3, r1
 800224e:	17cb      	asrs	r3, r1, #31
 8002250:	1ad2      	subs	r2, r2, r3
 8002252:	4613      	mov	r3, r2
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	4413      	add	r3, r2
 8002258:	005b      	lsls	r3, r3, #1
 800225a:	1aca      	subs	r2, r1, r3
 800225c:	2a05      	cmp	r2, #5
 800225e:	d83f      	bhi.n	80022e0 <_ZN12AccelStepper5step6El+0xa4>
 8002260:	a301      	add	r3, pc, #4	; (adr r3, 8002268 <_ZN12AccelStepper5step6El+0x2c>)
 8002262:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8002266:	bf00      	nop
 8002268:	08002281 	.word	0x08002281
 800226c:	08002291 	.word	0x08002291
 8002270:	080022a1 	.word	0x080022a1
 8002274:	080022b1 	.word	0x080022b1
 8002278:	080022c1 	.word	0x080022c1
 800227c:	080022d1 	.word	0x080022d1
    {
	case 0:    // 100
	    setOutputPins(0b100);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	3308      	adds	r3, #8
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2104      	movs	r1, #4
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	4798      	blx	r3
            break;
 800228e:	e027      	b.n	80022e0 <_ZN12AccelStepper5step6El+0xa4>

        case 1:    // 101
	    setOutputPins(0b101);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	3308      	adds	r3, #8
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2105      	movs	r1, #5
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	4798      	blx	r3
            break;
 800229e:	e01f      	b.n	80022e0 <_ZN12AccelStepper5step6El+0xa4>

	case 2:    // 001
	    setOutputPins(0b001);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	3308      	adds	r3, #8
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2101      	movs	r1, #1
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	4798      	blx	r3
            break;
 80022ae:	e017      	b.n	80022e0 <_ZN12AccelStepper5step6El+0xa4>

        case 3:    // 011
	    setOutputPins(0b011);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	3308      	adds	r3, #8
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2103      	movs	r1, #3
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	4798      	blx	r3
            break;
 80022be:	e00f      	b.n	80022e0 <_ZN12AccelStepper5step6El+0xa4>

	case 4:    // 010
	    setOutputPins(0b010);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	3308      	adds	r3, #8
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2102      	movs	r1, #2
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	4798      	blx	r3
            break;
 80022ce:	e007      	b.n	80022e0 <_ZN12AccelStepper5step6El+0xa4>

	case 5:    // 011
	    setOutputPins(0b110);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	3308      	adds	r3, #8
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2106      	movs	r1, #6
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	4798      	blx	r3
            break;
 80022de:	bf00      	nop

    }
}
 80022e0:	bf00      	nop
 80022e2:	3708      	adds	r7, #8
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bd80      	pop	{r7, pc}
 80022e8:	2aaaaaab 	.word	0x2aaaaaab

080022ec <_ZN12AccelStepper5step8El>:

// 4 pin half step function
// This is passed the current step number (0 to 7)
// Subclasses can override
void AccelStepper::step8(long step)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
 80022f4:	6039      	str	r1, [r7, #0]
    switch (step & 0x7)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	f003 0307 	and.w	r3, r3, #7
 80022fc:	2b07      	cmp	r3, #7
 80022fe:	d853      	bhi.n	80023a8 <_ZN12AccelStepper5step8El+0xbc>
 8002300:	a201      	add	r2, pc, #4	; (adr r2, 8002308 <_ZN12AccelStepper5step8El+0x1c>)
 8002302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002306:	bf00      	nop
 8002308:	08002329 	.word	0x08002329
 800230c:	08002339 	.word	0x08002339
 8002310:	08002349 	.word	0x08002349
 8002314:	08002359 	.word	0x08002359
 8002318:	08002369 	.word	0x08002369
 800231c:	08002379 	.word	0x08002379
 8002320:	08002389 	.word	0x08002389
 8002324:	08002399 	.word	0x08002399
    {
	case 0:    // 1000
	    setOutputPins(0b0001);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3308      	adds	r3, #8
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2101      	movs	r1, #1
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	4798      	blx	r3
            break;
 8002336:	e037      	b.n	80023a8 <_ZN12AccelStepper5step8El+0xbc>

        case 1:    // 1010
	    setOutputPins(0b0101);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	3308      	adds	r3, #8
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2105      	movs	r1, #5
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	4798      	blx	r3
            break;
 8002346:	e02f      	b.n	80023a8 <_ZN12AccelStepper5step8El+0xbc>

	case 2:    // 0010
	    setOutputPins(0b0100);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	3308      	adds	r3, #8
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	2104      	movs	r1, #4
 8002352:	6878      	ldr	r0, [r7, #4]
 8002354:	4798      	blx	r3
            break;
 8002356:	e027      	b.n	80023a8 <_ZN12AccelStepper5step8El+0xbc>

        case 3:    // 0110
	    setOutputPins(0b0110);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	3308      	adds	r3, #8
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	2106      	movs	r1, #6
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	4798      	blx	r3
            break;
 8002366:	e01f      	b.n	80023a8 <_ZN12AccelStepper5step8El+0xbc>

	case 4:    // 0100
	    setOutputPins(0b0010);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	3308      	adds	r3, #8
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2102      	movs	r1, #2
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	4798      	blx	r3
            break;
 8002376:	e017      	b.n	80023a8 <_ZN12AccelStepper5step8El+0xbc>

        case 5:    //0101
	    setOutputPins(0b1010);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	3308      	adds	r3, #8
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	210a      	movs	r1, #10
 8002382:	6878      	ldr	r0, [r7, #4]
 8002384:	4798      	blx	r3
            break;
 8002386:	e00f      	b.n	80023a8 <_ZN12AccelStepper5step8El+0xbc>

	case 6:    // 0001
	    setOutputPins(0b1000);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	3308      	adds	r3, #8
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2108      	movs	r1, #8
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	4798      	blx	r3
            break;
 8002396:	e007      	b.n	80023a8 <_ZN12AccelStepper5step8El+0xbc>

        case 7:    //1001
	    setOutputPins(0b1001);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	3308      	adds	r3, #8
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2109      	movs	r1, #9
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	4798      	blx	r3
            break;
 80023a6:	bf00      	nop
    }
}
 80023a8:	bf00      	nop
 80023aa:	3708      	adds	r7, #8
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}

080023b0 <_ZN12AccelStepper14disableOutputsEv>:

// Prevents power consumption on the outputs
void    AccelStepper::disableOutputs()
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
    if (! _interface) return;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	795b      	ldrb	r3, [r3, #5]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d01d      	beq.n	80023fc <_ZN12AccelStepper14disableOutputsEv+0x4c>

    setOutputPins(0); // Handles inversion automatically
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	3308      	adds	r3, #8
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2100      	movs	r1, #0
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	4798      	blx	r3
    if (_enablePin != 0xff)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023d4:	2bff      	cmp	r3, #255	; 0xff
 80023d6:	d012      	beq.n	80023fe <_ZN12AccelStepper14disableOutputsEv+0x4e>
    {
        pinMode(_enablePin, OUTPUT);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023de:	2110      	movs	r1, #16
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 f883 	bl	80024ec <pinMode>
        digitalWrite(_enablePin, LOW ^ _enableInverted);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023f2:	4619      	mov	r1, r3
 80023f4:	4610      	mov	r0, r2
 80023f6:	f000 f8e1 	bl	80025bc <digitalWrite>
 80023fa:	e000      	b.n	80023fe <_ZN12AccelStepper14disableOutputsEv+0x4e>
    if (! _interface) return;
 80023fc:	bf00      	nop
    }
}
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}

08002404 <_ZN12AccelStepper13enableOutputsEv>:

void    AccelStepper::enableOutputs()
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
    if (! _interface)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	795b      	ldrb	r3, [r3, #5]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d048      	beq.n	80024a6 <_ZN12AccelStepper13enableOutputsEv+0xa2>
	return;

    pinMode(_pin[0], OUTPUT);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	799b      	ldrb	r3, [r3, #6]
 8002418:	2110      	movs	r1, #16
 800241a:	4618      	mov	r0, r3
 800241c:	f000 f866 	bl	80024ec <pinMode>
    pinMode(_pin[1], OUTPUT);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	79db      	ldrb	r3, [r3, #7]
 8002424:	2110      	movs	r1, #16
 8002426:	4618      	mov	r0, r3
 8002428:	f000 f860 	bl	80024ec <pinMode>
    if (_interface == FULL4WIRE || _interface == HALF4WIRE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	795b      	ldrb	r3, [r3, #5]
 8002430:	2b04      	cmp	r3, #4
 8002432:	d003      	beq.n	800243c <_ZN12AccelStepper13enableOutputsEv+0x38>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	795b      	ldrb	r3, [r3, #5]
 8002438:	2b08      	cmp	r3, #8
 800243a:	d10c      	bne.n	8002456 <_ZN12AccelStepper13enableOutputsEv+0x52>
    {
        pinMode(_pin[2], OUTPUT);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	7a1b      	ldrb	r3, [r3, #8]
 8002440:	2110      	movs	r1, #16
 8002442:	4618      	mov	r0, r3
 8002444:	f000 f852 	bl	80024ec <pinMode>
        pinMode(_pin[3], OUTPUT);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	7a5b      	ldrb	r3, [r3, #9]
 800244c:	2110      	movs	r1, #16
 800244e:	4618      	mov	r0, r3
 8002450:	f000 f84c 	bl	80024ec <pinMode>
 8002454:	e00d      	b.n	8002472 <_ZN12AccelStepper13enableOutputsEv+0x6e>
    }
    else if (_interface == FULL3WIRE || _interface == HALF3WIRE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	795b      	ldrb	r3, [r3, #5]
 800245a:	2b03      	cmp	r3, #3
 800245c:	d003      	beq.n	8002466 <_ZN12AccelStepper13enableOutputsEv+0x62>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	795b      	ldrb	r3, [r3, #5]
 8002462:	2b06      	cmp	r3, #6
 8002464:	d105      	bne.n	8002472 <_ZN12AccelStepper13enableOutputsEv+0x6e>
    {
        pinMode(_pin[2], OUTPUT);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	7a1b      	ldrb	r3, [r3, #8]
 800246a:	2110      	movs	r1, #16
 800246c:	4618      	mov	r0, r3
 800246e:	f000 f83d 	bl	80024ec <pinMode>
    }

    if (_enablePin != 0xff)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002478:	2bff      	cmp	r3, #255	; 0xff
 800247a:	d015      	beq.n	80024a8 <_ZN12AccelStepper13enableOutputsEv+0xa4>
    {
        pinMode(_enablePin, OUTPUT);
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002482:	2110      	movs	r1, #16
 8002484:	4618      	mov	r0, r3
 8002486:	f000 f831 	bl	80024ec <pinMode>
        digitalWrite(_enablePin, HIGH ^ _enableInverted);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002496:	f083 0301 	eor.w	r3, r3, #1
 800249a:	b2db      	uxtb	r3, r3
 800249c:	4619      	mov	r1, r3
 800249e:	4610      	mov	r0, r2
 80024a0:	f000 f88c 	bl	80025bc <digitalWrite>
 80024a4:	e000      	b.n	80024a8 <_ZN12AccelStepper13enableOutputsEv+0xa4>
	return;
 80024a6:	bf00      	nop
    }
}
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}

080024ae <getDigitalGPIO>:
 * get GPIO function
 * return GPIO_TypeDef from GPIO_PINx
 * GPIO_PINx: A0-C15
 */
GPIO_TypeDef *getDigitalGPIO(uint8_t GPIO_PINx)
{
 80024ae:	b480      	push	{r7}
 80024b0:	b083      	sub	sp, #12
 80024b2:	af00      	add	r7, sp, #0
 80024b4:	4603      	mov	r3, r0
 80024b6:	71fb      	strb	r3, [r7, #7]
	return (GPIO_TypeDef *)((GPIO_PINx / 16)*0x0400 + 0x40010800);
 80024b8:	79fb      	ldrb	r3, [r7, #7]
 80024ba:	091b      	lsrs	r3, r3, #4
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80024c2:	3342      	adds	r3, #66	; 0x42
 80024c4:	029b      	lsls	r3, r3, #10
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	bc80      	pop	{r7}
 80024ce:	4770      	bx	lr

080024d0 <getDigitalPin>:
 * get GPIO function
 * return Pin number from GPIO_PINx
 * GPIO_PINx: A0-C15
 */
uint8_t getDigitalPin(uint8_t GPIO_PINx)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
	return GPIO_PINx % 16;
 80024da:	79fb      	ldrb	r3, [r7, #7]
 80024dc:	f003 030f 	and.w	r3, r3, #15
 80024e0:	b2db      	uxtb	r3, r3
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	370c      	adds	r7, #12
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bc80      	pop	{r7}
 80024ea:	4770      	bx	lr

080024ec <pinMode>:
 * pin configuration function
 * mode: INPUT, OUT_PUT, INPUT_PULLUP, INPUT_PULLDOWN
 * GPIO_PINx: A0 - C15
 */
void pinMode(uint8_t GPIO_PINx, uint8_t mode)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4603      	mov	r3, r0
 80024f4:	460a      	mov	r2, r1
 80024f6:	71fb      	strb	r3, [r7, #7]
 80024f8:	4613      	mov	r3, r2
 80024fa:	71bb      	strb	r3, [r7, #6]
	GPIO_TypeDef* GPIOx = getDigitalGPIO(GPIO_PINx);
 80024fc:	79fb      	ldrb	r3, [r7, #7]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff ffd5 	bl	80024ae <getDigitalGPIO>
 8002504:	6178      	str	r0, [r7, #20]
	uint8_t PINx = getDigitalPin(GPIO_PINx);
 8002506:	79fb      	ldrb	r3, [r7, #7]
 8002508:	4618      	mov	r0, r3
 800250a:	f7ff ffe1 	bl	80024d0 <getDigitalPin>
 800250e:	4603      	mov	r3, r0
 8002510:	74fb      	strb	r3, [r7, #19]

	GPIO_InitTypeDef  GPIO_InitStructure;

	/* Enable the GPIO_AHPclock Clock */
	if(GPIOx == GPIOA)	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	4a23      	ldr	r2, [pc, #140]	; (80025a4 <pinMode+0xb8>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d104      	bne.n	8002524 <pinMode+0x38>
 800251a:	2101      	movs	r1, #1
 800251c:	2004      	movs	r0, #4
 800251e:	f7ff f89b 	bl	8001658 <RCC_APB2PeriphClockCmd>
 8002522:	e02b      	b.n	800257c <pinMode+0x90>
	else if(GPIOx == GPIOB)	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	4a20      	ldr	r2, [pc, #128]	; (80025a8 <pinMode+0xbc>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d104      	bne.n	8002536 <pinMode+0x4a>
 800252c:	2101      	movs	r1, #1
 800252e:	2008      	movs	r0, #8
 8002530:	f7ff f892 	bl	8001658 <RCC_APB2PeriphClockCmd>
 8002534:	e022      	b.n	800257c <pinMode+0x90>
	else if(GPIOx == GPIOC)	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	4a1c      	ldr	r2, [pc, #112]	; (80025ac <pinMode+0xc0>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d104      	bne.n	8002548 <pinMode+0x5c>
 800253e:	2101      	movs	r1, #1
 8002540:	2010      	movs	r0, #16
 8002542:	f7ff f889 	bl	8001658 <RCC_APB2PeriphClockCmd>
 8002546:	e019      	b.n	800257c <pinMode+0x90>
	else if(GPIOx == GPIOD)	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	4a19      	ldr	r2, [pc, #100]	; (80025b0 <pinMode+0xc4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d104      	bne.n	800255a <pinMode+0x6e>
 8002550:	2101      	movs	r1, #1
 8002552:	2020      	movs	r0, #32
 8002554:	f7ff f880 	bl	8001658 <RCC_APB2PeriphClockCmd>
 8002558:	e010      	b.n	800257c <pinMode+0x90>
	else if(GPIOx == GPIOE)	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE, ENABLE);
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	4a15      	ldr	r2, [pc, #84]	; (80025b4 <pinMode+0xc8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d104      	bne.n	800256c <pinMode+0x80>
 8002562:	2101      	movs	r1, #1
 8002564:	2040      	movs	r0, #64	; 0x40
 8002566:	f7ff f877 	bl	8001658 <RCC_APB2PeriphClockCmd>
 800256a:	e007      	b.n	800257c <pinMode+0x90>
	else if(GPIOx == GPIOF)	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOF, ENABLE);
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	4a12      	ldr	r2, [pc, #72]	; (80025b8 <pinMode+0xcc>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d103      	bne.n	800257c <pinMode+0x90>
 8002574:	2101      	movs	r1, #1
 8002576:	2080      	movs	r0, #128	; 0x80
 8002578:	f7ff f86e 	bl	8001658 <RCC_APB2PeriphClockCmd>

	/* Configure the GPIO PINx */
	GPIO_InitStructure.GPIO_Mode = (GPIOMode_TypeDef)mode;
 800257c:	79bb      	ldrb	r3, [r7, #6]
 800257e:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002580:	2303      	movs	r3, #3
 8002582:	73bb      	strb	r3, [r7, #14]

	GPIO_InitStructure.GPIO_Pin = (1<<PINx);
 8002584:	7cfb      	ldrb	r3, [r7, #19]
 8002586:	2201      	movs	r2, #1
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	b29b      	uxth	r3, r3
 800258e:	81bb      	strh	r3, [r7, #12]
	GPIO_Init(GPIOx, &GPIO_InitStructure);
 8002590:	f107 030c 	add.w	r3, r7, #12
 8002594:	4619      	mov	r1, r3
 8002596:	6978      	ldr	r0, [r7, #20]
 8002598:	f7fe fe82 	bl	80012a0 <GPIO_Init>
}// end pinMode function
 800259c:	bf00      	nop
 800259e:	3718      	adds	r7, #24
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	40010800 	.word	0x40010800
 80025a8:	40010c00 	.word	0x40010c00
 80025ac:	40011000 	.word	0x40011000
 80025b0:	40011400 	.word	0x40011400
 80025b4:	40011800 	.word	0x40011800
 80025b8:	40011c00 	.word	0x40011c00

080025bc <digitalWrite>:
 * write state on pin function
 * GPIO_PINx: A0 - C15
 * val = HIGH(1), LOW(0)
 */
void digitalWrite(uint8_t GPIO_PINx, uint8_t val)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	460a      	mov	r2, r1
 80025c6:	71fb      	strb	r3, [r7, #7]
 80025c8:	4613      	mov	r3, r2
 80025ca:	71bb      	strb	r3, [r7, #6]
	GPIO_TypeDef* GPIOx = getDigitalGPIO(GPIO_PINx);
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff ff6d 	bl	80024ae <getDigitalGPIO>
 80025d4:	60f8      	str	r0, [r7, #12]
	uint8_t PINx = getDigitalPin(GPIO_PINx);
 80025d6:	79fb      	ldrb	r3, [r7, #7]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff79 	bl	80024d0 <getDigitalPin>
 80025de:	4603      	mov	r3, r0
 80025e0:	72fb      	strb	r3, [r7, #11]

	if (val == HIGH)	GPIOx->BSRR = (1<<PINx);
 80025e2:	79bb      	ldrb	r3, [r7, #6]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d107      	bne.n	80025f8 <digitalWrite+0x3c>
 80025e8:	7afb      	ldrb	r3, [r7, #11]
 80025ea:	2201      	movs	r2, #1
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	461a      	mov	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	611a      	str	r2, [r3, #16]
	else	GPIOx->BRR = (1<<PINx);
}
 80025f6:	e006      	b.n	8002606 <digitalWrite+0x4a>
	else	GPIOx->BRR = (1<<PINx);
 80025f8:	7afb      	ldrb	r3, [r7, #11]
 80025fa:	2201      	movs	r2, #1
 80025fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002600:	461a      	mov	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	615a      	str	r2, [r3, #20]
}
 8002606:	bf00      	nop
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
	...

08002610 <EXTI0_IRQHandler>:
  * @brief  This function handles EXTI0 interrupt.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line0) != RESET)
 8002614:	2001      	movs	r0, #1
 8002616:	f7fe fe11 	bl	800123c <EXTI_GetITStatus>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <EXTI0_IRQHandler+0x1c>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line0);
 8002620:	2001      	movs	r0, #1
 8002622:	f7fe fe2f 	bl	8001284 <EXTI_ClearITPendingBit>
		intFunc[0]();
 8002626:	4b02      	ldr	r3, [pc, #8]	; (8002630 <EXTI0_IRQHandler+0x20>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4798      	blx	r3
	}
}
 800262c:	bf00      	nop
 800262e:	bd80      	pop	{r7, pc}
 8002630:	200000a4 	.word	0x200000a4

08002634 <EXTI1_IRQHandler>:
  * @brief  This function handles EXTI1 interrupt.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line1) != RESET)
 8002638:	2002      	movs	r0, #2
 800263a:	f7fe fdff 	bl	800123c <EXTI_GetITStatus>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	d005      	beq.n	8002650 <EXTI1_IRQHandler+0x1c>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line1);
 8002644:	2002      	movs	r0, #2
 8002646:	f7fe fe1d 	bl	8001284 <EXTI_ClearITPendingBit>
		intFunc[1]();
 800264a:	4b02      	ldr	r3, [pc, #8]	; (8002654 <EXTI1_IRQHandler+0x20>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	4798      	blx	r3
	}
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}
 8002654:	200000a4 	.word	0x200000a4

08002658 <EXTI2_IRQHandler>:
  * @brief  This function handles EXTI2 interrupt.
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line2) != RESET)
 800265c:	2004      	movs	r0, #4
 800265e:	f7fe fded 	bl	800123c <EXTI_GetITStatus>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d005      	beq.n	8002674 <EXTI2_IRQHandler+0x1c>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line2);
 8002668:	2004      	movs	r0, #4
 800266a:	f7fe fe0b 	bl	8001284 <EXTI_ClearITPendingBit>
		intFunc[2]();
 800266e:	4b02      	ldr	r3, [pc, #8]	; (8002678 <EXTI2_IRQHandler+0x20>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	4798      	blx	r3
	}
}
 8002674:	bf00      	nop
 8002676:	bd80      	pop	{r7, pc}
 8002678:	200000a4 	.word	0x200000a4

0800267c <EXTI3_IRQHandler>:
  * @brief  This function handles EXTI3 interrupt.
  * @param  None
  * @retval None
  */
void EXTI3_IRQHandler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line3) != RESET)
 8002680:	2008      	movs	r0, #8
 8002682:	f7fe fddb 	bl	800123c <EXTI_GetITStatus>
 8002686:	4603      	mov	r3, r0
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <EXTI3_IRQHandler+0x1c>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line3);
 800268c:	2008      	movs	r0, #8
 800268e:	f7fe fdf9 	bl	8001284 <EXTI_ClearITPendingBit>
		intFunc[3]();
 8002692:	4b02      	ldr	r3, [pc, #8]	; (800269c <EXTI3_IRQHandler+0x20>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	4798      	blx	r3
	}
}
 8002698:	bf00      	nop
 800269a:	bd80      	pop	{r7, pc}
 800269c:	200000a4 	.word	0x200000a4

080026a0 <EXTI4_IRQHandler>:
  * @brief  This function handles EXTI4 interrupt.
  * @param  None
  * @retval None
  */
void EXTI4_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line4) != RESET)
 80026a4:	2010      	movs	r0, #16
 80026a6:	f7fe fdc9 	bl	800123c <EXTI_GetITStatus>
 80026aa:	4603      	mov	r3, r0
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d005      	beq.n	80026bc <EXTI4_IRQHandler+0x1c>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line4);
 80026b0:	2010      	movs	r0, #16
 80026b2:	f7fe fde7 	bl	8001284 <EXTI_ClearITPendingBit>
		intFunc[4]();
 80026b6:	4b02      	ldr	r3, [pc, #8]	; (80026c0 <EXTI4_IRQHandler+0x20>)
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	4798      	blx	r3
	}
}
 80026bc:	bf00      	nop
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	200000a4 	.word	0x200000a4

080026c4 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI4 interrupt.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line10) != RESET)
 80026c8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026cc:	f7fe fdb6 	bl	800123c <EXTI_GetITStatus>
 80026d0:	4603      	mov	r3, r0
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d006      	beq.n	80026e4 <EXTI15_10_IRQHandler+0x20>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line10);
 80026d6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80026da:	f7fe fdd3 	bl	8001284 <EXTI_ClearITPendingBit>
		intFunc[10]();
 80026de:	4b25      	ldr	r3, [pc, #148]	; (8002774 <EXTI15_10_IRQHandler+0xb0>)
 80026e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e2:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line11) != RESET)
 80026e4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80026e8:	f7fe fda8 	bl	800123c <EXTI_GetITStatus>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d006      	beq.n	8002700 <EXTI15_10_IRQHandler+0x3c>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line11);
 80026f2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80026f6:	f7fe fdc5 	bl	8001284 <EXTI_ClearITPendingBit>
		intFunc[11]();
 80026fa:	4b1e      	ldr	r3, [pc, #120]	; (8002774 <EXTI15_10_IRQHandler+0xb0>)
 80026fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026fe:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line12) != RESET)
 8002700:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002704:	f7fe fd9a 	bl	800123c <EXTI_GetITStatus>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d006      	beq.n	800271c <EXTI15_10_IRQHandler+0x58>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line12);
 800270e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002712:	f7fe fdb7 	bl	8001284 <EXTI_ClearITPendingBit>
		intFunc[12]();
 8002716:	4b17      	ldr	r3, [pc, #92]	; (8002774 <EXTI15_10_IRQHandler+0xb0>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line13) != RESET)
 800271c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002720:	f7fe fd8c 	bl	800123c <EXTI_GetITStatus>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d006      	beq.n	8002738 <EXTI15_10_IRQHandler+0x74>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line13);
 800272a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800272e:	f7fe fda9 	bl	8001284 <EXTI_ClearITPendingBit>
		intFunc[13]();
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <EXTI15_10_IRQHandler+0xb0>)
 8002734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002736:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line14) != RESET)
 8002738:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800273c:	f7fe fd7e 	bl	800123c <EXTI_GetITStatus>
 8002740:	4603      	mov	r3, r0
 8002742:	2b00      	cmp	r3, #0
 8002744:	d006      	beq.n	8002754 <EXTI15_10_IRQHandler+0x90>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line14);
 8002746:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800274a:	f7fe fd9b 	bl	8001284 <EXTI_ClearITPendingBit>
		intFunc[14]();
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <EXTI15_10_IRQHandler+0xb0>)
 8002750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002752:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line15) != RESET)
 8002754:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002758:	f7fe fd70 	bl	800123c <EXTI_GetITStatus>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d006      	beq.n	8002770 <EXTI15_10_IRQHandler+0xac>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line15);
 8002762:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002766:	f7fe fd8d 	bl	8001284 <EXTI_ClearITPendingBit>
		intFunc[15]();
 800276a:	4b02      	ldr	r3, [pc, #8]	; (8002774 <EXTI15_10_IRQHandler+0xb0>)
 800276c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800276e:	4798      	blx	r3
	}
}
 8002770:	bf00      	nop
 8002772:	bd80      	pop	{r7, pc}
 8002774:	200000a4 	.word	0x200000a4

08002778 <EXTI9_5_IRQHandler>:
  * @param  None
  * @retval None
  */

void EXTI9_5_IRQHandler(void)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line5) != RESET)
 800277c:	2020      	movs	r0, #32
 800277e:	f7fe fd5d 	bl	800123c <EXTI_GetITStatus>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d005      	beq.n	8002794 <EXTI9_5_IRQHandler+0x1c>
	{
		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(EXTI_Line5);
 8002788:	2020      	movs	r0, #32
 800278a:	f7fe fd7b 	bl	8001284 <EXTI_ClearITPendingBit>
		intFunc[5]();
 800278e:	4b1c      	ldr	r3, [pc, #112]	; (8002800 <EXTI9_5_IRQHandler+0x88>)
 8002790:	695b      	ldr	r3, [r3, #20]
 8002792:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line6) != RESET)
 8002794:	2040      	movs	r0, #64	; 0x40
 8002796:	f7fe fd51 	bl	800123c <EXTI_GetITStatus>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d005      	beq.n	80027ac <EXTI9_5_IRQHandler+0x34>
	{
		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(EXTI_Line6);
 80027a0:	2040      	movs	r0, #64	; 0x40
 80027a2:	f7fe fd6f 	bl	8001284 <EXTI_ClearITPendingBit>
		intFunc[6]();
 80027a6:	4b16      	ldr	r3, [pc, #88]	; (8002800 <EXTI9_5_IRQHandler+0x88>)
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line7) != RESET)
 80027ac:	2080      	movs	r0, #128	; 0x80
 80027ae:	f7fe fd45 	bl	800123c <EXTI_GetITStatus>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d005      	beq.n	80027c4 <EXTI9_5_IRQHandler+0x4c>
	{
		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(EXTI_Line7);
 80027b8:	2080      	movs	r0, #128	; 0x80
 80027ba:	f7fe fd63 	bl	8001284 <EXTI_ClearITPendingBit>
		intFunc[7]();
 80027be:	4b10      	ldr	r3, [pc, #64]	; (8002800 <EXTI9_5_IRQHandler+0x88>)
 80027c0:	69db      	ldr	r3, [r3, #28]
 80027c2:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line8) != RESET)
 80027c4:	f44f 7080 	mov.w	r0, #256	; 0x100
 80027c8:	f7fe fd38 	bl	800123c <EXTI_GetITStatus>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d006      	beq.n	80027e0 <EXTI9_5_IRQHandler+0x68>
	{
		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(EXTI_Line8);
 80027d2:	f44f 7080 	mov.w	r0, #256	; 0x100
 80027d6:	f7fe fd55 	bl	8001284 <EXTI_ClearITPendingBit>
		intFunc[8]();
 80027da:	4b09      	ldr	r3, [pc, #36]	; (8002800 <EXTI9_5_IRQHandler+0x88>)
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line9) != RESET)
 80027e0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80027e4:	f7fe fd2a 	bl	800123c <EXTI_GetITStatus>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d006      	beq.n	80027fc <EXTI9_5_IRQHandler+0x84>
	{
		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(EXTI_Line9);
 80027ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80027f2:	f7fe fd47 	bl	8001284 <EXTI_ClearITPendingBit>
		intFunc[9]();
 80027f6:	4b02      	ldr	r3, [pc, #8]	; (8002800 <EXTI9_5_IRQHandler+0x88>)
 80027f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027fa:	4798      	blx	r3
	}
}
 80027fc:	bf00      	nop
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	200000a4 	.word	0x200000a4

08002804 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
 800280c:	4a05      	ldr	r2, [pc, #20]	; (8002824 <_ZN5PrintC1Ev+0x20>)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	601a      	str	r2, [r3, #0]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	605a      	str	r2, [r3, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	4618      	mov	r0, r3
 800281c:	370c      	adds	r7, #12
 800281e:	46bd      	mov	sp, r7
 8002820:	bc80      	pop	{r7}
 8002822:	4770      	bx	lr
 8002824:	08003aa8 	.word	0x08003aa8

08002828 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	2300      	movs	r3, #0
 8002832:	4618      	mov	r0, r3
 8002834:	370c      	adds	r7, #12
 8002836:	46bd      	mov	sp, r7
 8002838:	bc80      	pop	{r7}
 800283a:	4770      	bx	lr

0800283c <_ZN5Print5flushEv>:
    size_t println(long, int = DEC);
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	bf00      	nop
 8002846:	370c      	adds	r7, #12
 8002848:	46bd      	mov	sp, r7
 800284a:	bc80      	pop	{r7}
 800284c:	4770      	bx	lr

0800284e <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 800284e:	b590      	push	{r4, r7, lr}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
 8002856:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <_ZN5Print5writeEPKc+0x14>
 800285e:	2300      	movs	r3, #0
 8002860:	e00c      	b.n	800287c <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	3304      	adds	r3, #4
 8002868:	681c      	ldr	r4, [r3, #0]
 800286a:	6838      	ldr	r0, [r7, #0]
 800286c:	f7fd fc70 	bl	8000150 <strlen>
 8002870:	4603      	mov	r3, r0
 8002872:	461a      	mov	r2, r3
 8002874:	6839      	ldr	r1, [r7, #0]
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	47a0      	blx	r4
 800287a:	4603      	mov	r3, r0
    }
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	bd90      	pop	{r4, r7, pc}

08002884 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]
  while (size--) {
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	1e5a      	subs	r2, r3, #1
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	bf14      	ite	ne
 800289e:	2301      	movne	r3, #1
 80028a0:	2300      	moveq	r3, #0
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d016      	beq.n	80028d6 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	1c59      	adds	r1, r3, #1
 80028b2:	60b9      	str	r1, [r7, #8]
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	4619      	mov	r1, r3
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	4790      	blx	r2
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	bf14      	ite	ne
 80028c2:	2301      	movne	r3, #1
 80028c4:	2300      	moveq	r3, #0
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d003      	beq.n	80028d4 <_ZN5Print5writeEPKhj+0x50>
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	3301      	adds	r3, #1
 80028d0:	617b      	str	r3, [r7, #20]
  while (size--) {
 80028d2:	e7df      	b.n	8002894 <_ZN5Print5writeEPKhj+0x10>
    else break;
 80028d4:	bf00      	nop
  }
  return n;
 80028d6:	697b      	ldr	r3, [r7, #20]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <_ZN5Print5printEPKc>:


size_t Print::print(const char str[])
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  return write(str);
 80028ea:	6839      	ldr	r1, [r7, #0]
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff ffae 	bl	800284e <_ZN5Print5writeEPKc>
 80028f2:	4603      	mov	r3, r0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3708      	adds	r7, #8
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <_ZN5Print7printlnEv>:
{
  return printFloat(n, digits);
}

size_t Print::println(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  return write("\r\n");
 8002904:	4904      	ldr	r1, [pc, #16]	; (8002918 <_ZN5Print7printlnEv+0x1c>)
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7ff ffa1 	bl	800284e <_ZN5Print5writeEPKc>
 800290c:	4603      	mov	r3, r0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	08003a34 	.word	0x08003a34

0800291c <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
  size_t n = print(c);
 8002926:	6839      	ldr	r1, [r7, #0]
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f7ff ffd9 	bl	80028e0 <_ZN5Print5printEPKc>
 800292e:	60f8      	str	r0, [r7, #12]
  n += println();
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f7ff ffe3 	bl	80028fc <_ZN5Print7printlnEv>
 8002936:	4602      	mov	r2, r0
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4413      	add	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]
  return n;
 800293e:	68fb      	ldr	r3, [r7, #12]
}
 8002940:	4618      	mov	r0, r3
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <_ZN8SPIClassC1Ei>:
#include <GPIO/GPIO.h>
#include <SPI/SPIClass.h>

static volatile voidFuncPtr receiveEvent[2] = {NULL,NULL};

SPIClass::SPIClass(int SPI)
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	4a38      	ldr	r2, [pc, #224]	; (8002a34 <_ZN8SPIClassC1Ei+0xec>)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	601a      	str	r2, [r3, #0]
{
	switch (SPI)
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	2b01      	cmp	r3, #1
 800295c:	d002      	beq.n	8002964 <_ZN8SPIClassC1Ei+0x1c>
 800295e:	2b02      	cmp	r3, #2
 8002960:	d031      	beq.n	80029c6 <_ZN8SPIClassC1Ei+0x7e>
			SPI_Pin_MISO = getDigitalPin(SPI2_PIN_MISO);
			SPI_Pin_MOSI = getDigitalPin(SPI2_PIN_MOSI);
			break;

		default:
			break;
 8002962:	e061      	b.n	8002a28 <_ZN8SPIClassC1Ei+0xe0>
			SPInum = SPI1;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a34      	ldr	r2, [pc, #208]	; (8002a38 <_ZN8SPIClassC1Ei+0xf0>)
 8002968:	619a      	str	r2, [r3, #24]
			SPI_RCC_PER = RCC_APB2Periph_SPI1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002970:	61da      	str	r2, [r3, #28]
			SPI_RCC_GPIO = SPI1_RCC_GPIO;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2204      	movs	r2, #4
 8002976:	621a      	str	r2, [r3, #32]
			SPI_RCC_AFIO = SPI1_RCC_AFIO;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	625a      	str	r2, [r3, #36]	; 0x24
			SPI_GPIO = SPI1_GPIO;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a2e      	ldr	r2, [pc, #184]	; (8002a3c <_ZN8SPIClassC1Ei+0xf4>)
 8002982:	629a      	str	r2, [r3, #40]	; 0x28
			SPI_Pin_NSS = getDigitalPin(SPI1_PIN_NSS);
 8002984:	2004      	movs	r0, #4
 8002986:	f7ff fda3 	bl	80024d0 <getDigitalPin>
 800298a:	4603      	mov	r3, r0
 800298c:	461a      	mov	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			SPI_Pin_SCK = getDigitalPin(SPI1_PIN_SCK);
 8002994:	2005      	movs	r0, #5
 8002996:	f7ff fd9b 	bl	80024d0 <getDigitalPin>
 800299a:	4603      	mov	r3, r0
 800299c:	461a      	mov	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			SPI_Pin_MISO = getDigitalPin(SPI1_PIN_MISO);
 80029a4:	2006      	movs	r0, #6
 80029a6:	f7ff fd93 	bl	80024d0 <getDigitalPin>
 80029aa:	4603      	mov	r3, r0
 80029ac:	461a      	mov	r2, r3
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			SPI_Pin_MOSI = getDigitalPin(SPI1_PIN_MOSI);
 80029b4:	2007      	movs	r0, #7
 80029b6:	f7ff fd8b 	bl	80024d0 <getDigitalPin>
 80029ba:	4603      	mov	r3, r0
 80029bc:	461a      	mov	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
			break;
 80029c4:	e030      	b.n	8002a28 <_ZN8SPIClassC1Ei+0xe0>
			SPInum = SPI2;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	4a1d      	ldr	r2, [pc, #116]	; (8002a40 <_ZN8SPIClassC1Ei+0xf8>)
 80029ca:	619a      	str	r2, [r3, #24]
			SPI_RCC_PER = RCC_APB1Periph_SPI2;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029d2:	61da      	str	r2, [r3, #28]
			SPI_RCC_GPIO = SPI2_RCC_GPIO;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2208      	movs	r2, #8
 80029d8:	621a      	str	r2, [r3, #32]
			SPI_RCC_AFIO = SPI2_RCC_AFIO;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	2201      	movs	r2, #1
 80029de:	625a      	str	r2, [r3, #36]	; 0x24
			SPI_GPIO = SPI2_GPIO;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a18      	ldr	r2, [pc, #96]	; (8002a44 <_ZN8SPIClassC1Ei+0xfc>)
 80029e4:	629a      	str	r2, [r3, #40]	; 0x28
			SPI_Pin_NSS = getDigitalPin(SPI2_PIN_NSS);
 80029e6:	201c      	movs	r0, #28
 80029e8:	f7ff fd72 	bl	80024d0 <getDigitalPin>
 80029ec:	4603      	mov	r3, r0
 80029ee:	461a      	mov	r2, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			SPI_Pin_SCK = getDigitalPin(SPI2_PIN_SCK);
 80029f6:	201d      	movs	r0, #29
 80029f8:	f7ff fd6a 	bl	80024d0 <getDigitalPin>
 80029fc:	4603      	mov	r3, r0
 80029fe:	461a      	mov	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			SPI_Pin_MISO = getDigitalPin(SPI2_PIN_MISO);
 8002a06:	201e      	movs	r0, #30
 8002a08:	f7ff fd62 	bl	80024d0 <getDigitalPin>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	461a      	mov	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			SPI_Pin_MOSI = getDigitalPin(SPI2_PIN_MOSI);
 8002a16:	201f      	movs	r0, #31
 8002a18:	f7ff fd5a 	bl	80024d0 <getDigitalPin>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	461a      	mov	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
			break;
 8002a26:	bf00      	nop
	}
}
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	08003ac0 	.word	0x08003ac0
 8002a38:	40013000 	.word	0x40013000
 8002a3c:	40010800 	.word	0x40010800
 8002a40:	40003800 	.word	0x40003800
 8002a44:	40010c00 	.word	0x40010c00

08002a48 <_ZN8SPIClassD1Ev>:

SPIClass::~SPIClass()
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	4a04      	ldr	r2, [pc, #16]	; (8002a64 <_ZN8SPIClassD1Ev+0x1c>)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr
 8002a62:	bf00      	nop
 8002a64:	08003ac0 	.word	0x08003ac0

08002a68 <_ZN8SPIClassD0Ev>:
SPIClass::~SPIClass()
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
}
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f7ff ffe9 	bl	8002a48 <_ZN8SPIClassD1Ev>
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 fdc6 	bl	8003608 <_ZdlPv>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <SPI1_IRQHandler>:
{
	SPI_I2S_ITConfig(SPInum, SPI_I2S_IT_RXNE, DISABLE);
}

void SPI1_IRQHandler(void)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	af00      	add	r7, sp, #0
	if (SPI_I2S_GetITStatus(SPI1, SPI_I2S_IT_RXNE) != RESET)
 8002a8c:	2160      	movs	r1, #96	; 0x60
 8002a8e:	480e      	ldr	r0, [pc, #56]	; (8002ac8 <SPI1_IRQHandler+0x40>)
 8002a90:	f7fe fe2a 	bl	80016e8 <SPI_I2S_GetITStatus>
 8002a94:	4603      	mov	r3, r0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	bf14      	ite	ne
 8002a9a:	2301      	movne	r3, #1
 8002a9c:	2300      	moveq	r3, #0
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00e      	beq.n	8002ac2 <SPI1_IRQHandler+0x3a>
	{
		SPI_I2S_ReceiveData(SPI1);
 8002aa4:	4808      	ldr	r0, [pc, #32]	; (8002ac8 <SPI1_IRQHandler+0x40>)
 8002aa6:	f7fe fe13 	bl	80016d0 <SPI_I2S_ReceiveData>
		if(receiveEvent[0] != NULL) receiveEvent[0]();
 8002aaa:	4b08      	ldr	r3, [pc, #32]	; (8002acc <SPI1_IRQHandler+0x44>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	bf14      	ite	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	2300      	moveq	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d002      	beq.n	8002ac2 <SPI1_IRQHandler+0x3a>
 8002abc:	4b03      	ldr	r3, [pc, #12]	; (8002acc <SPI1_IRQHandler+0x44>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4798      	blx	r3
	}
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	40013000 	.word	0x40013000
 8002acc:	200000e4 	.word	0x200000e4

08002ad0 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	af00      	add	r7, sp, #0
	if (SPI_I2S_GetITStatus(SPI2, SPI_I2S_IT_RXNE) != RESET)
 8002ad4:	2160      	movs	r1, #96	; 0x60
 8002ad6:	480e      	ldr	r0, [pc, #56]	; (8002b10 <SPI2_IRQHandler+0x40>)
 8002ad8:	f7fe fe06 	bl	80016e8 <SPI_I2S_GetITStatus>
 8002adc:	4603      	mov	r3, r0
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	bf14      	ite	ne
 8002ae2:	2301      	movne	r3, #1
 8002ae4:	2300      	moveq	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d00e      	beq.n	8002b0a <SPI2_IRQHandler+0x3a>
	{
		SPI_I2S_ReceiveData(SPI2);
 8002aec:	4808      	ldr	r0, [pc, #32]	; (8002b10 <SPI2_IRQHandler+0x40>)
 8002aee:	f7fe fdef 	bl	80016d0 <SPI_I2S_ReceiveData>
		if(receiveEvent[1] != NULL) receiveEvent[1]();
 8002af2:	4b08      	ldr	r3, [pc, #32]	; (8002b14 <SPI2_IRQHandler+0x44>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	bf14      	ite	ne
 8002afa:	2301      	movne	r3, #1
 8002afc:	2300      	moveq	r3, #0
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <SPI2_IRQHandler+0x3a>
 8002b04:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <SPI2_IRQHandler+0x44>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	4798      	blx	r3
	}
}
 8002b0a:	bf00      	nop
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40003800 	.word	0x40003800
 8002b14:	200000e4 	.word	0x200000e4

08002b18 <_Z41__static_initialization_and_destruction_0ii>:

SPIClass SPI = SPIClass();
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d10d      	bne.n	8002b44 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d108      	bne.n	8002b44 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8002b32:	2101      	movs	r1, #1
 8002b34:	4805      	ldr	r0, [pc, #20]	; (8002b4c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002b36:	f7ff ff07 	bl	8002948 <_ZN8SPIClassC1Ei>
 8002b3a:	4a05      	ldr	r2, [pc, #20]	; (8002b50 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8002b3c:	4905      	ldr	r1, [pc, #20]	; (8002b54 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002b3e:	4803      	ldr	r0, [pc, #12]	; (8002b4c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002b40:	f000 fd64 	bl	800360c <__aeabi_atexit>
 8002b44:	bf00      	nop
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}
 8002b4c:	200000ec 	.word	0x200000ec
 8002b50:	20000000 	.word	0x20000000
 8002b54:	08002a49 	.word	0x08002a49

08002b58 <_GLOBAL__sub_I__ZN8SPIClassC2Ei>:
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002b60:	2001      	movs	r0, #1
 8002b62:	f7ff ffd9 	bl	8002b18 <_Z41__static_initialization_and_destruction_0ii>
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <_ZN14HardwareSerialC1Ei>:
#include <stm32f1xx_it.h>
#include <Serial/Serial.h>

//USART_TypeDef *HardwareSerial::USARTnum;

HardwareSerial::HardwareSerial(int USART)
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff fe45 	bl	8002804 <_ZN5PrintC1Ev>
 8002b7a:	4a36      	ldr	r2, [pc, #216]	; (8002c54 <_ZN14HardwareSerialC1Ei+0xec>)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	601a      	str	r2, [r3, #0]
{

	switch (USART)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d023      	beq.n	8002bce <_ZN14HardwareSerialC1Ei+0x66>
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d040      	beq.n	8002c0c <_ZN14HardwareSerialC1Ei+0xa4>
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d000      	beq.n	8002b90 <_ZN14HardwareSerialC1Ei+0x28>
			USART_Pin_Tx = getDigitalPin(USART3_PIN_TX);
			USART_Pin_Rx = getDigitalPin(USART3_PIN_RX);
			break;

		default:
			break;
 8002b8e:	e05c      	b.n	8002c4a <_ZN14HardwareSerialC1Ei+0xe2>
			USARTnum = USART1;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	4a31      	ldr	r2, [pc, #196]	; (8002c58 <_ZN14HardwareSerialC1Ei+0xf0>)
 8002b94:	609a      	str	r2, [r3, #8]
			USART_RCC_PER = RCC_APB2Periph_USART1;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002b9c:	60da      	str	r2, [r3, #12]
			USART_RCC_GPIO = USART1_RCC_GPIO;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2204      	movs	r2, #4
 8002ba2:	611a      	str	r2, [r3, #16]
			USART_RCC_AFIO = USART1_RCC_AFIO;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	615a      	str	r2, [r3, #20]
			USART_GPIO = USART1_GPIO;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a2b      	ldr	r2, [pc, #172]	; (8002c5c <_ZN14HardwareSerialC1Ei+0xf4>)
 8002bae:	619a      	str	r2, [r3, #24]
			USART_Pin_Tx = getDigitalPin(USART1_PIN_TX);
 8002bb0:	2009      	movs	r0, #9
 8002bb2:	f7ff fc8d 	bl	80024d0 <getDigitalPin>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461a      	mov	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	771a      	strb	r2, [r3, #28]
			USART_Pin_Rx = getDigitalPin(USART1_PIN_RX);
 8002bbe:	200a      	movs	r0, #10
 8002bc0:	f7ff fc86 	bl	80024d0 <getDigitalPin>
 8002bc4:	4603      	mov	r3, r0
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	775a      	strb	r2, [r3, #29]
			break;
 8002bcc:	e03d      	b.n	8002c4a <_ZN14HardwareSerialC1Ei+0xe2>
			USARTnum = USART2;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a23      	ldr	r2, [pc, #140]	; (8002c60 <_ZN14HardwareSerialC1Ei+0xf8>)
 8002bd2:	609a      	str	r2, [r3, #8]
			USART_RCC_PER = RCC_APB1Periph_USART2;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bda:	60da      	str	r2, [r3, #12]
			USART_RCC_GPIO = USART2_RCC_GPIO;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2204      	movs	r2, #4
 8002be0:	611a      	str	r2, [r3, #16]
			USART_RCC_AFIO = USART2_RCC_AFIO;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	615a      	str	r2, [r3, #20]
			USART_GPIO = USART2_GPIO;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	4a1c      	ldr	r2, [pc, #112]	; (8002c5c <_ZN14HardwareSerialC1Ei+0xf4>)
 8002bec:	619a      	str	r2, [r3, #24]
			USART_Pin_Tx = getDigitalPin(USART2_PIN_TX);
 8002bee:	2002      	movs	r0, #2
 8002bf0:	f7ff fc6e 	bl	80024d0 <getDigitalPin>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	771a      	strb	r2, [r3, #28]
			USART_Pin_Rx = getDigitalPin(USART2_PIN_RX);
 8002bfc:	2003      	movs	r0, #3
 8002bfe:	f7ff fc67 	bl	80024d0 <getDigitalPin>
 8002c02:	4603      	mov	r3, r0
 8002c04:	461a      	mov	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	775a      	strb	r2, [r3, #29]
			break;
 8002c0a:	e01e      	b.n	8002c4a <_ZN14HardwareSerialC1Ei+0xe2>
			USARTnum = USART3;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a15      	ldr	r2, [pc, #84]	; (8002c64 <_ZN14HardwareSerialC1Ei+0xfc>)
 8002c10:	609a      	str	r2, [r3, #8]
			USART_RCC_PER = RCC_APB1Periph_USART3;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002c18:	60da      	str	r2, [r3, #12]
			USART_RCC_GPIO = USART3_RCC_GPIO;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2208      	movs	r2, #8
 8002c1e:	611a      	str	r2, [r3, #16]
			USART_RCC_AFIO = USART3_RCC_AFIO;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2201      	movs	r2, #1
 8002c24:	615a      	str	r2, [r3, #20]
			USART_GPIO = USART3_GPIO;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a0f      	ldr	r2, [pc, #60]	; (8002c68 <_ZN14HardwareSerialC1Ei+0x100>)
 8002c2a:	619a      	str	r2, [r3, #24]
			USART_Pin_Tx = getDigitalPin(USART3_PIN_TX);
 8002c2c:	201a      	movs	r0, #26
 8002c2e:	f7ff fc4f 	bl	80024d0 <getDigitalPin>
 8002c32:	4603      	mov	r3, r0
 8002c34:	461a      	mov	r2, r3
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	771a      	strb	r2, [r3, #28]
			USART_Pin_Rx = getDigitalPin(USART3_PIN_RX);
 8002c3a:	201b      	movs	r0, #27
 8002c3c:	f7ff fc48 	bl	80024d0 <getDigitalPin>
 8002c40:	4603      	mov	r3, r0
 8002c42:	461a      	mov	r2, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	775a      	strb	r2, [r3, #29]
			break;
 8002c48:	bf00      	nop
	}
}
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3708      	adds	r7, #8
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	08003ad0 	.word	0x08003ad0
 8002c58:	40013800 	.word	0x40013800
 8002c5c:	40010800 	.word	0x40010800
 8002c60:	40004400 	.word	0x40004400
 8002c64:	40004800 	.word	0x40004800
 8002c68:	40010c00 	.word	0x40010c00

08002c6c <_ZN14HardwareSerialD1Ev>:

HardwareSerial::~HardwareSerial()
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	4a04      	ldr	r2, [pc, #16]	; (8002c88 <_ZN14HardwareSerialD1Ev+0x1c>)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bc80      	pop	{r7}
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	08003ad0 	.word	0x08003ad0

08002c8c <_ZN14HardwareSerialD0Ev>:
HardwareSerial::~HardwareSerial()
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b082      	sub	sp, #8
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
}
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7ff ffe9 	bl	8002c6c <_ZN14HardwareSerialD1Ev>
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f000 fcb4 	bl	8003608 <_ZdlPv>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
	...

08002cac <_ZN14HardwareSerial5beginEm>:
 * only for usart1
 * Rx - A10
 * Tx - A9
 */
void HardwareSerial::begin(uint32_t baud)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b088      	sub	sp, #32
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]

	// check USART is available
	assert_param(IS_USART_123_PERIPH(USARTnum));

	// set clock for GPIOA
	RCC_APB2PeriphClockCmd(USART_RCC_GPIO | USART_RCC_AFIO, ENABLE);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	691a      	ldr	r2, [r3, #16]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	695b      	ldr	r3, [r3, #20]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	2101      	movs	r1, #1
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fe fcc8 	bl	8001658 <RCC_APB2PeriphClockCmd>
	// set clock for USART1
	if (USARTnum == USART1)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	4a54      	ldr	r2, [pc, #336]	; (8002e20 <_ZN14HardwareSerial5beginEm+0x174>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d106      	bne.n	8002ce0 <_ZN14HardwareSerial5beginEm+0x34>
	{
		RCC_APB2PeriphClockCmd(USART_RCC_PER, ENABLE);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fe fcbd 	bl	8001658 <RCC_APB2PeriphClockCmd>
 8002cde:	e016      	b.n	8002d0e <_ZN14HardwareSerial5beginEm+0x62>
	}
	else if(USARTnum == USART2)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	4a4f      	ldr	r2, [pc, #316]	; (8002e24 <_ZN14HardwareSerial5beginEm+0x178>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d106      	bne.n	8002cf8 <_ZN14HardwareSerial5beginEm+0x4c>
	{
		RCC_APB1PeriphClockCmd(USART_RCC_PER, ENABLE);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	2101      	movs	r1, #1
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fe fccf 	bl	8001694 <RCC_APB1PeriphClockCmd>
 8002cf6:	e00a      	b.n	8002d0e <_ZN14HardwareSerial5beginEm+0x62>
	}
	else if(USARTnum == USART3)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	4a4a      	ldr	r2, [pc, #296]	; (8002e28 <_ZN14HardwareSerial5beginEm+0x17c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d105      	bne.n	8002d0e <_ZN14HardwareSerial5beginEm+0x62>
	{
		RCC_APB1PeriphClockCmd(USART_RCC_PER, ENABLE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	2101      	movs	r1, #1
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f7fe fcc3 	bl	8001694 <RCC_APB1PeriphClockCmd>
	}

	// config A9 - Tx pin
	Gpio_InitStructure.GPIO_Pin = (1<<USART_Pin_Tx);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	7f1b      	ldrb	r3, [r3, #28]
 8002d12:	461a      	mov	r2, r3
 8002d14:	2301      	movs	r3, #1
 8002d16:	4093      	lsls	r3, r2
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	81bb      	strh	r3, [r7, #12]
	Gpio_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8002d1c:	2318      	movs	r3, #24
 8002d1e:	73fb      	strb	r3, [r7, #15]
	Gpio_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8002d20:	2303      	movs	r3, #3
 8002d22:	73bb      	strb	r3, [r7, #14]
	GPIO_Init(USART_GPIO, &Gpio_InitStructure);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	f107 020c 	add.w	r2, r7, #12
 8002d2c:	4611      	mov	r1, r2
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7fe fab6 	bl	80012a0 <GPIO_Init>

	// config A10 Rx pin
	Gpio_InitStructure.GPIO_Pin = (1<<USART_Pin_Rx);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	7f5b      	ldrb	r3, [r3, #29]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	4093      	lsls	r3, r2
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	81bb      	strh	r3, [r7, #12]
	Gpio_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8002d42:	2304      	movs	r3, #4
 8002d44:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(USART_GPIO, &Gpio_InitStructure);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	f107 020c 	add.w	r2, r7, #12
 8002d4e:	4611      	mov	r1, r2
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fe faa5 	bl	80012a0 <GPIO_Init>

	// set USART1 parameter
	Usart_InitStructure.USART_BaudRate = baud;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	613b      	str	r3, [r7, #16]
	Usart_InitStructure.USART_HardwareFlowControl =	USART_HardwareFlowControl_None;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	83bb      	strh	r3, [r7, #28]
	Usart_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002d5e:	230c      	movs	r3, #12
 8002d60:	837b      	strh	r3, [r7, #26]
	Usart_InitStructure.USART_Parity = USART_Parity_No;
 8002d62:	2300      	movs	r3, #0
 8002d64:	833b      	strh	r3, [r7, #24]
	Usart_InitStructure.USART_StopBits = USART_StopBits_1;
 8002d66:	2300      	movs	r3, #0
 8002d68:	82fb      	strh	r3, [r7, #22]
	Usart_InitStructure.USART_WordLength = USART_WordLength_8b;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	82bb      	strh	r3, [r7, #20]

	//Init USART1
	USART_Init(USARTnum, &Usart_InitStructure);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f107 0210 	add.w	r2, r7, #16
 8002d76:	4611      	mov	r1, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fe fcef 	bl	800175c <USART_Init>

	/* Enable the USARTx Interrupt */
	if (USARTnum == USART1)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	4a27      	ldr	r2, [pc, #156]	; (8002e20 <_ZN14HardwareSerial5beginEm+0x174>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d10d      	bne.n	8002da4 <_ZN14HardwareSerial5beginEm+0xf8>
	{
		NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8002d88:	2325      	movs	r3, #37	; 0x25
 8002d8a:	723b      	strb	r3, [r7, #8]
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	727b      	strb	r3, [r7, #9]
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002d90:	2300      	movs	r3, #0
 8002d92:	72bb      	strb	r3, [r7, #10]
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002d94:	2301      	movs	r3, #1
 8002d96:	72fb      	strb	r3, [r7, #11]
		NVIC_Init(&NVIC_InitStructure);
 8002d98:	f107 0308 	add.w	r3, r7, #8
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fe f9eb 	bl	8001178 <NVIC_Init>
 8002da2:	e024      	b.n	8002dee <_ZN14HardwareSerial5beginEm+0x142>
	}
	else if (USARTnum == USART2)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	4a1e      	ldr	r2, [pc, #120]	; (8002e24 <_ZN14HardwareSerial5beginEm+0x178>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d10d      	bne.n	8002dca <_ZN14HardwareSerial5beginEm+0x11e>
	{
		NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8002dae:	2326      	movs	r3, #38	; 0x26
 8002db0:	723b      	strb	r3, [r7, #8]
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002db2:	2300      	movs	r3, #0
 8002db4:	727b      	strb	r3, [r7, #9]
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002db6:	2300      	movs	r3, #0
 8002db8:	72bb      	strb	r3, [r7, #10]
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	72fb      	strb	r3, [r7, #11]
		NVIC_Init(&NVIC_InitStructure);
 8002dbe:	f107 0308 	add.w	r3, r7, #8
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fe f9d8 	bl	8001178 <NVIC_Init>
 8002dc8:	e011      	b.n	8002dee <_ZN14HardwareSerial5beginEm+0x142>
	}

	else if (USARTnum == USART3)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	4a16      	ldr	r2, [pc, #88]	; (8002e28 <_ZN14HardwareSerial5beginEm+0x17c>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d10c      	bne.n	8002dee <_ZN14HardwareSerial5beginEm+0x142>
	{
		NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 8002dd4:	2327      	movs	r3, #39	; 0x27
 8002dd6:	723b      	strb	r3, [r7, #8]
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	727b      	strb	r3, [r7, #9]
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	72bb      	strb	r3, [r7, #10]
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8002de0:	2301      	movs	r3, #1
 8002de2:	72fb      	strb	r3, [r7, #11]
		NVIC_Init(&NVIC_InitStructure);
 8002de4:	f107 0308 	add.w	r3, r7, #8
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7fe f9c5 	bl	8001178 <NVIC_Init>
	}

	//clear flag for the first time
	USART_ClearFlag(USARTnum, USART_FLAG_RXNE);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	2120      	movs	r1, #32
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7fe fdfb 	bl	80019f0 <USART_ClearFlag>

	// enable receive interrupt
	USART_ITConfig(USARTnum, USART_IT_RXNE, ENABLE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f240 5125 	movw	r1, #1317	; 0x525
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fe fd82 	bl	800190e <USART_ITConfig>

	// enable USART 1
	USART_Cmd(USARTnum, ENABLE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	2101      	movs	r1, #1
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7fe fd5d 	bl	80018d0 <USART_Cmd>
}
 8002e16:	bf00      	nop
 8002e18:	3720      	adds	r7, #32
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	40013800 	.word	0x40013800
 8002e24:	40004400 	.word	0x40004400
 8002e28:	40004800 	.word	0x40004800

08002e2c <_ZN14HardwareSerial5writeEh>:
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
	}
}

size_t HardwareSerial::write(uint8_t val)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	70fb      	strb	r3, [r7, #3]
	while(USART_GetFlagStatus(USARTnum,USART_FLAG_TXE) == 0);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	2180      	movs	r1, #128	; 0x80
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f7fe fdbb 	bl	80019ba <USART_GetFlagStatus>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	bf0c      	ite	eq
 8002e4a:	2301      	moveq	r3, #1
 8002e4c:	2300      	movne	r3, #0
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d000      	beq.n	8002e56 <_ZN14HardwareSerial5writeEh+0x2a>
 8002e54:	e7f0      	b.n	8002e38 <_ZN14HardwareSerial5writeEh+0xc>
	/* Check the parameters */
	assert_param(IS_USART_ALL_PERIPH(USARTnum));
	assert_param(IS_USART_DATA(val));

	/* Transmit Data */
	USARTnum->DR = (val & (uint16_t) 0x01FF);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	b292      	uxth	r2, r2
 8002e5e:	809a      	strh	r2, [r3, #4]
	return 1;
 8002e60:	2301      	movs	r3, #1
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
	...

08002e6c <USART1_IRQHandler>:
	// return value
	return USARTnum->DR & 0xff;
}

void USART1_IRQHandler()
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 8002e70:	f240 5125 	movw	r1, #1317	; 0x525
 8002e74:	480d      	ldr	r0, [pc, #52]	; (8002eac <USART1_IRQHandler+0x40>)
 8002e76:	f7fe fdcb 	bl	8001a10 <USART_GetITStatus>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	bf14      	ite	ne
 8002e80:	2301      	movne	r3, #1
 8002e82:	2300      	moveq	r3, #0
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00e      	beq.n	8002ea8 <USART1_IRQHandler+0x3c>
	{
		if (USART_ReceiveData(USART1) == 13)// ki tu ket thuc
 8002e8a:	4808      	ldr	r0, [pc, #32]	; (8002eac <USART1_IRQHandler+0x40>)
 8002e8c:	f7fe fd86 	bl	800199c <USART_ReceiveData>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b0d      	cmp	r3, #13
 8002e94:	bf0c      	ite	eq
 8002e96:	2301      	moveq	r3, #1
 8002e98:	2300      	movne	r3, #0
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d102      	bne.n	8002ea6 <USART1_IRQHandler+0x3a>
		{
			return;
		}
		SerialEvent();
 8002ea0:	f3af 8000 	nop.w
 8002ea4:	e000      	b.n	8002ea8 <USART1_IRQHandler+0x3c>
			return;
 8002ea6:	bf00      	nop
	}
}
 8002ea8:	bd80      	pop	{r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	40013800 	.word	0x40013800

08002eb0 <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	af00      	add	r7, sp, #0
	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8002eb4:	f240 5125 	movw	r1, #1317	; 0x525
 8002eb8:	480d      	ldr	r0, [pc, #52]	; (8002ef0 <USART2_IRQHandler+0x40>)
 8002eba:	f7fe fda9 	bl	8001a10 <USART_GetITStatus>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf14      	ite	ne
 8002ec4:	2301      	movne	r3, #1
 8002ec6:	2300      	moveq	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00e      	beq.n	8002eec <USART2_IRQHandler+0x3c>
	{
		if (USART_ReceiveData(USART2) == 13)// ki tu ket thuc
 8002ece:	4808      	ldr	r0, [pc, #32]	; (8002ef0 <USART2_IRQHandler+0x40>)
 8002ed0:	f7fe fd64 	bl	800199c <USART_ReceiveData>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b0d      	cmp	r3, #13
 8002ed8:	bf0c      	ite	eq
 8002eda:	2301      	moveq	r3, #1
 8002edc:	2300      	movne	r3, #0
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d102      	bne.n	8002eea <USART2_IRQHandler+0x3a>
		{
			return;
		}
		Serial2Event();
 8002ee4:	f3af 8000 	nop.w
 8002ee8:	e000      	b.n	8002eec <USART2_IRQHandler+0x3c>
			return;
 8002eea:	bf00      	nop
	}
}
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40004400 	.word	0x40004400

08002ef4 <USART3_IRQHandler>:

void USART3_IRQHandler()
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
	if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)
 8002ef8:	f240 5125 	movw	r1, #1317	; 0x525
 8002efc:	480d      	ldr	r0, [pc, #52]	; (8002f34 <USART3_IRQHandler+0x40>)
 8002efe:	f7fe fd87 	bl	8001a10 <USART_GetITStatus>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	bf14      	ite	ne
 8002f08:	2301      	movne	r3, #1
 8002f0a:	2300      	moveq	r3, #0
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00e      	beq.n	8002f30 <USART3_IRQHandler+0x3c>
	{
		if (USART_ReceiveData(USART3) == 13)// ki tu ket thuc
 8002f12:	4808      	ldr	r0, [pc, #32]	; (8002f34 <USART3_IRQHandler+0x40>)
 8002f14:	f7fe fd42 	bl	800199c <USART_ReceiveData>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b0d      	cmp	r3, #13
 8002f1c:	bf0c      	ite	eq
 8002f1e:	2301      	moveq	r3, #1
 8002f20:	2300      	movne	r3, #0
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d102      	bne.n	8002f2e <USART3_IRQHandler+0x3a>
		{
			return;
		}
		Serial3Event();
 8002f28:	f3af 8000 	nop.w
 8002f2c:	e000      	b.n	8002f30 <USART3_IRQHandler+0x3c>
			return;
 8002f2e:	bf00      	nop
	}
}
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	40004800 	.word	0x40004800

08002f38 <_Z41__static_initialization_and_destruction_0ii>:

HardwareSerial Serial = HardwareSerial();
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b082      	sub	sp, #8
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d10d      	bne.n	8002f64 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d108      	bne.n	8002f64 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8002f52:	2101      	movs	r1, #1
 8002f54:	4805      	ldr	r0, [pc, #20]	; (8002f6c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002f56:	f7ff fe07 	bl	8002b68 <_ZN14HardwareSerialC1Ei>
 8002f5a:	4a05      	ldr	r2, [pc, #20]	; (8002f70 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8002f5c:	4905      	ldr	r1, [pc, #20]	; (8002f74 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8002f5e:	4803      	ldr	r0, [pc, #12]	; (8002f6c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8002f60:	f000 fb54 	bl	800360c <__aeabi_atexit>
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	2000011c 	.word	0x2000011c
 8002f70:	20000000 	.word	0x20000000
 8002f74:	08002c6d 	.word	0x08002c6d

08002f78 <_GLOBAL__sub_I__ZN14HardwareSerialC2Ei>:
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002f80:	2001      	movs	r0, #1
 8002f82:	f7ff ffd9 	bl	8002f38 <_Z41__static_initialization_and_destruction_0ii>
 8002f86:	bd80      	pop	{r7, pc}

08002f88 <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);



TwoWire::TwoWire()
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	4a04      	ldr	r2, [pc, #16]	; (8002fa4 <_ZN7TwoWireC1Ev+0x1c>)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	370c      	adds	r7, #12
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	08003af0 	.word	0x08003af0

08002fa8 <_ZN7TwoWireD1Ev>:

TwoWire::~TwoWire()
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	4a04      	ldr	r2, [pc, #16]	; (8002fc4 <_ZN7TwoWireD1Ev+0x1c>)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	08003af0 	.word	0x08003af0

08002fc8 <_ZN7TwoWireD0Ev>:
TwoWire::~TwoWire()
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
}
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f7ff ffe9 	bl	8002fa8 <_ZN7TwoWireD1Ev>
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 fb16 	bl	8003608 <_ZdlPv>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3708      	adds	r7, #8
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <I2C1_EV_IRQHandler>:
    I2C_ITConfig(I2C1, I2C_IT_EVT, ENABLE); //Part of the STM32 I2C driver
    I2C_ITConfig(I2C1, I2C_IT_BUF, ENABLE); //Part of the STM32 I2C driver
}

void I2C1_EV_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
	//uint32_t event = I2C_GetLastEvent(I2C1);
	//Serial.println(event,HEX);
	switch ( I2C_GetLastEvent(I2C1))
 8002fec:	4834      	ldr	r0, [pc, #208]	; (80030c0 <I2C1_EV_IRQHandler+0xd8>)
 8002fee:	f7fe fa20 	bl	8001432 <I2C_GetLastEvent>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4a33      	ldr	r2, [pc, #204]	; (80030c4 <I2C1_EV_IRQHandler+0xdc>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d018      	beq.n	800302c <I2C1_EV_IRQHandler+0x44>
 8002ffa:	4a32      	ldr	r2, [pc, #200]	; (80030c4 <I2C1_EV_IRQHandler+0xdc>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d807      	bhi.n	8003010 <I2C1_EV_IRQHandler+0x28>
 8003000:	2b40      	cmp	r3, #64	; 0x40
 8003002:	d024      	beq.n	800304e <I2C1_EV_IRQHandler+0x66>
 8003004:	f1b3 1f02 	cmp.w	r3, #131074	; 0x20002
 8003008:	d00c      	beq.n	8003024 <I2C1_EV_IRQHandler+0x3c>
 800300a:	2b10      	cmp	r3, #16
 800300c:	d040      	beq.n	8003090 <I2C1_EV_IRQHandler+0xa8>
			Twi_ClearFlag(I2C1, I2C_SR1_ADDR);
			Twi_ClearFlag(I2C1, I2C_SR1_STOPF);
			break;

		default:
			break;
 800300e:	e04d      	b.n	80030ac <I2C1_EV_IRQHandler+0xc4>
	switch ( I2C_GetLastEvent(I2C1))
 8003010:	4a2d      	ldr	r2, [pc, #180]	; (80030c8 <I2C1_EV_IRQHandler+0xe0>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d02c      	beq.n	8003070 <I2C1_EV_IRQHandler+0x88>
 8003016:	4a2d      	ldr	r2, [pc, #180]	; (80030cc <I2C1_EV_IRQHandler+0xe4>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d042      	beq.n	80030a2 <I2C1_EV_IRQHandler+0xba>
 800301c:	4a2c      	ldr	r2, [pc, #176]	; (80030d0 <I2C1_EV_IRQHandler+0xe8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d041      	beq.n	80030a6 <I2C1_EV_IRQHandler+0xbe>
			break;
 8003022:	e043      	b.n	80030ac <I2C1_EV_IRQHandler+0xc4>
			status = I2C_STT_SLAVE_RECEIVE;
 8003024:	4b2b      	ldr	r3, [pc, #172]	; (80030d4 <I2C1_EV_IRQHandler+0xec>)
 8003026:	2221      	movs	r2, #33	; 0x21
 8003028:	701a      	strb	r2, [r3, #0]
			break;
 800302a:	e03f      	b.n	80030ac <I2C1_EV_IRQHandler+0xc4>
			if(onReceiveFunc != NULL)
 800302c:	4b2a      	ldr	r3, [pc, #168]	; (80030d8 <I2C1_EV_IRQHandler+0xf0>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2b00      	cmp	r3, #0
 8003032:	bf14      	ite	ne
 8003034:	2301      	movne	r3, #1
 8003036:	2300      	moveq	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d003      	beq.n	8003046 <I2C1_EV_IRQHandler+0x5e>
				onReceiveFunc();
 800303e:	4b26      	ldr	r3, [pc, #152]	; (80030d8 <I2C1_EV_IRQHandler+0xf0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4798      	blx	r3
			break;
 8003044:	e032      	b.n	80030ac <I2C1_EV_IRQHandler+0xc4>
			else I2C_ReceiveData(I2C1);
 8003046:	481e      	ldr	r0, [pc, #120]	; (80030c0 <I2C1_EV_IRQHandler+0xd8>)
 8003048:	f7fe f9e6 	bl	8001418 <I2C_ReceiveData>
			break;
 800304c:	e02e      	b.n	80030ac <I2C1_EV_IRQHandler+0xc4>
			if(onReceiveFunc != NULL)
 800304e:	4b22      	ldr	r3, [pc, #136]	; (80030d8 <I2C1_EV_IRQHandler+0xf0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	bf14      	ite	ne
 8003056:	2301      	movne	r3, #1
 8003058:	2300      	moveq	r3, #0
 800305a:	b2db      	uxtb	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <I2C1_EV_IRQHandler+0x80>
				onReceiveFunc();
 8003060:	4b1d      	ldr	r3, [pc, #116]	; (80030d8 <I2C1_EV_IRQHandler+0xf0>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4798      	blx	r3
			break;
 8003066:	e021      	b.n	80030ac <I2C1_EV_IRQHandler+0xc4>
			else I2C_ReceiveData(I2C1);
 8003068:	4815      	ldr	r0, [pc, #84]	; (80030c0 <I2C1_EV_IRQHandler+0xd8>)
 800306a:	f7fe f9d5 	bl	8001418 <I2C_ReceiveData>
			break;
 800306e:	e01d      	b.n	80030ac <I2C1_EV_IRQHandler+0xc4>
			status = I2C_STT_SLAVE_TRANSMIT;
 8003070:	4b18      	ldr	r3, [pc, #96]	; (80030d4 <I2C1_EV_IRQHandler+0xec>)
 8003072:	2220      	movs	r2, #32
 8003074:	701a      	strb	r2, [r3, #0]
			if(onRequestFunc != NULL)
 8003076:	4b19      	ldr	r3, [pc, #100]	; (80030dc <I2C1_EV_IRQHandler+0xf4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	bf14      	ite	ne
 800307e:	2301      	movne	r3, #1
 8003080:	2300      	moveq	r3, #0
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d010      	beq.n	80030aa <I2C1_EV_IRQHandler+0xc2>
				onRequestFunc();
 8003088:	4b14      	ldr	r3, [pc, #80]	; (80030dc <I2C1_EV_IRQHandler+0xf4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4798      	blx	r3
			break;
 800308e:	e00c      	b.n	80030aa <I2C1_EV_IRQHandler+0xc2>
			Twi_ClearFlag(I2C1, I2C_SR1_ADDR);
 8003090:	2102      	movs	r1, #2
 8003092:	480b      	ldr	r0, [pc, #44]	; (80030c0 <I2C1_EV_IRQHandler+0xd8>)
 8003094:	f000 f864 	bl	8003160 <Twi_ClearFlag>
			Twi_ClearFlag(I2C1, I2C_SR1_STOPF);
 8003098:	2110      	movs	r1, #16
 800309a:	4809      	ldr	r0, [pc, #36]	; (80030c0 <I2C1_EV_IRQHandler+0xd8>)
 800309c:	f000 f860 	bl	8003160 <Twi_ClearFlag>
			break;
 80030a0:	e004      	b.n	80030ac <I2C1_EV_IRQHandler+0xc4>
			break;
 80030a2:	bf00      	nop
 80030a4:	e002      	b.n	80030ac <I2C1_EV_IRQHandler+0xc4>
			break;
 80030a6:	bf00      	nop
 80030a8:	e000      	b.n	80030ac <I2C1_EV_IRQHandler+0xc4>
			break;
 80030aa:	bf00      	nop
	}

	//Serial.println((char)I2C_ReceiveData(I2C1));
	// Master has STOP sent
	Twi_ClearFlag(I2C1, I2C_SR1_ADDR);
 80030ac:	2102      	movs	r1, #2
 80030ae:	4804      	ldr	r0, [pc, #16]	; (80030c0 <I2C1_EV_IRQHandler+0xd8>)
 80030b0:	f000 f856 	bl	8003160 <Twi_ClearFlag>
	Twi_ClearFlag(I2C1, I2C_SR1_STOPF);
 80030b4:	2110      	movs	r1, #16
 80030b6:	4802      	ldr	r0, [pc, #8]	; (80030c0 <I2C1_EV_IRQHandler+0xd8>)
 80030b8:	f000 f852 	bl	8003160 <Twi_ClearFlag>
}
 80030bc:	bf00      	nop
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	40005400 	.word	0x40005400
 80030c4:	00020044 	.word	0x00020044
 80030c8:	00060082 	.word	0x00060082
 80030cc:	00060084 	.word	0x00060084
 80030d0:	00060080 	.word	0x00060080
 80030d4:	20000144 	.word	0x20000144
 80030d8:	20000140 	.word	0x20000140
 80030dc:	2000013c 	.word	0x2000013c

080030e0 <I2C1_ER_IRQHandler>:

/*******************************************************************/
void I2C1_ER_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
	if (I2C_GetITStatus(I2C1, I2C_IT_AF))
 80030e4:	4908      	ldr	r1, [pc, #32]	; (8003108 <I2C1_ER_IRQHandler+0x28>)
 80030e6:	4809      	ldr	r0, [pc, #36]	; (800310c <I2C1_ER_IRQHandler+0x2c>)
 80030e8:	f7fe f9c4 	bl	8001474 <I2C_GetITStatus>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	bf14      	ite	ne
 80030f2:	2301      	movne	r3, #1
 80030f4:	2300      	moveq	r3, #0
 80030f6:	b2db      	uxtb	r3, r3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <I2C1_ER_IRQHandler+0x24>
	{
		I2C_ClearITPendingBit(I2C1, I2C_IT_AF);
 80030fc:	4902      	ldr	r1, [pc, #8]	; (8003108 <I2C1_ER_IRQHandler+0x28>)
 80030fe:	4803      	ldr	r0, [pc, #12]	; (800310c <I2C1_ER_IRQHandler+0x2c>)
 8003100:	f7fe f9e4 	bl	80014cc <I2C_ClearITPendingBit>
	}
}
 8003104:	bf00      	nop
 8003106:	bd80      	pop	{r7, pc}
 8003108:	01000400 	.word	0x01000400
 800310c:	40005400 	.word	0x40005400

08003110 <_Z41__static_initialization_and_destruction_0ii>:
/*******************************************************************/

TwoWire Wire;
 8003110:	b580      	push	{r7, lr}
 8003112:	b082      	sub	sp, #8
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d10c      	bne.n	800313a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003126:	4293      	cmp	r3, r2
 8003128:	d107      	bne.n	800313a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 800312a:	4806      	ldr	r0, [pc, #24]	; (8003144 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 800312c:	f7ff ff2c 	bl	8002f88 <_ZN7TwoWireC1Ev>
 8003130:	4a05      	ldr	r2, [pc, #20]	; (8003148 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8003132:	4906      	ldr	r1, [pc, #24]	; (800314c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8003134:	4803      	ldr	r0, [pc, #12]	; (8003144 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8003136:	f000 fa69 	bl	800360c <__aeabi_atexit>
 800313a:	bf00      	nop
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	20000148 	.word	0x20000148
 8003148:	20000000 	.word	0x20000000
 800314c:	08002fa9 	.word	0x08002fa9

08003150 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
 8003150:	b580      	push	{r7, lr}
 8003152:	af00      	add	r7, sp, #0
 8003154:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003158:	2001      	movs	r0, #1
 800315a:	f7ff ffd9 	bl	8003110 <_Z41__static_initialization_and_destruction_0ii>
 800315e:	bd80      	pop	{r7, pc}

08003160 <Twi_ClearFlag>:
  /* Send the address */
  I2Cx->DR = Address;
}

void Twi_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_SR1)
{
 8003160:	b480      	push	{r7}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
	while((I2Cx->SR1 & I2C_SR1) == I2C_SR1)
 800316a:	e00f      	b.n	800318c <Twi_ClearFlag+0x2c>
	{
		I2Cx->SR1;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	8a9b      	ldrh	r3, [r3, #20]

		if(I2C_SR1 == I2C_SR1_STOPF) I2Cx->CR1 |= 0x1;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	2b10      	cmp	r3, #16
 8003174:	d108      	bne.n	8003188 <Twi_ClearFlag+0x28>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	881b      	ldrh	r3, [r3, #0]
 800317a:	b29b      	uxth	r3, r3
 800317c:	f043 0301 	orr.w	r3, r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	801a      	strh	r2, [r3, #0]
 8003186:	e001      	b.n	800318c <Twi_ClearFlag+0x2c>
		else I2Cx->SR2;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	8b1b      	ldrh	r3, [r3, #24]
	while((I2Cx->SR1 & I2C_SR1) == I2C_SR1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	8a9b      	ldrh	r3, [r3, #20]
 8003190:	b29b      	uxth	r3, r3
 8003192:	461a      	mov	r2, r3
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	401a      	ands	r2, r3
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d0e6      	beq.n	800316c <Twi_ClearFlag+0xc>
	}
}
 800319e:	bf00      	nop
 80031a0:	370c      	adds	r7, #12
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bc80      	pop	{r7}
 80031a6:	4770      	bx	lr

080031a8 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	6039      	str	r1, [r7, #0]
 80031b2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80031b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	da0b      	bge.n	80031d4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80031bc:	490d      	ldr	r1, [pc, #52]	; (80031f4 <NVIC_SetPriority+0x4c>)
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	f003 030f 	and.w	r3, r3, #15
 80031c4:	3b04      	subs	r3, #4
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	b2d2      	uxtb	r2, r2
 80031ca:	0112      	lsls	r2, r2, #4
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	440b      	add	r3, r1
 80031d0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80031d2:	e009      	b.n	80031e8 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80031d4:	4908      	ldr	r1, [pc, #32]	; (80031f8 <NVIC_SetPriority+0x50>)
 80031d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	b2d2      	uxtb	r2, r2
 80031de:	0112      	lsls	r2, r2, #4
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	440b      	add	r3, r1
 80031e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bc80      	pop	{r7}
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	e000ed00 	.word	0xe000ed00
 80031f8:	e000e100 	.word	0xe000e100

080031fc <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800320a:	d301      	bcc.n	8003210 <SysTick_Config+0x14>
 800320c:	2301      	movs	r3, #1
 800320e:	e011      	b.n	8003234 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8003210:	4a0a      	ldr	r2, [pc, #40]	; (800323c <SysTick_Config+0x40>)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003218:	3b01      	subs	r3, #1
 800321a:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 800321c:	210f      	movs	r1, #15
 800321e:	f04f 30ff 	mov.w	r0, #4294967295
 8003222:	f7ff ffc1 	bl	80031a8 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8003226:	4b05      	ldr	r3, [pc, #20]	; (800323c <SysTick_Config+0x40>)
 8003228:	2200      	movs	r2, #0
 800322a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800322c:	4b03      	ldr	r3, [pc, #12]	; (800323c <SysTick_Config+0x40>)
 800322e:	2207      	movs	r2, #7
 8003230:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8003232:	2300      	movs	r3, #0
}
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	e000e010 	.word	0xe000e010

08003240 <SysTick_Init>:
uint32_t tim_cnt = 0;
uint32_t ticker;
volatile uint32_t us;

void SysTick_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	af00      	add	r7, sp, #0
	if (SysTick_Config(SystemCoreClock / 1000)) //1ms per interrupt
 8003244:	4b0d      	ldr	r3, [pc, #52]	; (800327c <SysTick_Init+0x3c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a0d      	ldr	r2, [pc, #52]	; (8003280 <SysTick_Init+0x40>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	099b      	lsrs	r3, r3, #6
 8003250:	4618      	mov	r0, r3
 8003252:	f7ff ffd3 	bl	80031fc <SysTick_Config>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d000      	beq.n	800325e <SysTick_Init+0x1e>
	{
		while(1);
 800325c:	e7fe      	b.n	800325c <SysTick_Init+0x1c>
	}
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 800325e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8003262:	f7fd ff77 	bl	8001154 <NVIC_PriorityGroupConfig>
	NVIC_SetPriority(SysTick_IRQn, 0);
 8003266:	2100      	movs	r1, #0
 8003268:	f04f 30ff 	mov.w	r0, #4294967295
 800326c:	f7ff ff9c 	bl	80031a8 <NVIC_SetPriority>
	ticker = 0;
 8003270:	4b04      	ldr	r3, [pc, #16]	; (8003284 <SysTick_Init+0x44>)
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
}
 8003276:	bf00      	nop
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20000018 	.word	0x20000018
 8003280:	10624dd3 	.word	0x10624dd3
 8003284:	200001a0 	.word	0x200001a0

08003288 <micros>:
{
	return ticker;
}

uint32_t micros(void)
{
 8003288:	b480      	push	{r7}
 800328a:	af00      	add	r7, sp, #0
	/* us = ticker*1000+(SystemCoreClock/1000-SysTick->VAL)/80; */
	us = ticker * 1000 + 1000 - SysTick->VAL / 80;
 800328c:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <micros+0x30>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	3301      	adds	r3, #1
 8003292:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003296:	fb02 f203 	mul.w	r2, r2, r3
 800329a:	4b08      	ldr	r3, [pc, #32]	; (80032bc <micros+0x34>)
 800329c:	689b      	ldr	r3, [r3, #8]
 800329e:	4908      	ldr	r1, [pc, #32]	; (80032c0 <micros+0x38>)
 80032a0:	fba1 1303 	umull	r1, r3, r1, r3
 80032a4:	099b      	lsrs	r3, r3, #6
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	4a06      	ldr	r2, [pc, #24]	; (80032c4 <micros+0x3c>)
 80032aa:	6013      	str	r3, [r2, #0]
	return us;
 80032ac:	4b05      	ldr	r3, [pc, #20]	; (80032c4 <micros+0x3c>)
 80032ae:	681b      	ldr	r3, [r3, #0]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr
 80032b8:	200001a0 	.word	0x200001a0
 80032bc:	e000e010 	.word	0xe000e010
 80032c0:	cccccccd 	.word	0xcccccccd
 80032c4:	200001a4 	.word	0x200001a4

080032c8 <delay>:

void delay(uint32_t nTime)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
	uint32_t curTime = ticker;
 80032d0:	4b08      	ldr	r3, [pc, #32]	; (80032f4 <delay+0x2c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60fb      	str	r3, [r7, #12]
	while ((nTime - (ticker - curTime)) > 0);
 80032d6:	bf00      	nop
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <delay+0x2c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	1ad2      	subs	r2, r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4413      	add	r3, r2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d1f7      	bne.n	80032d8 <delay+0x10>
}
 80032e8:	bf00      	nop
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bc80      	pop	{r7}
 80032f0:	4770      	bx	lr
 80032f2:	bf00      	nop
 80032f4:	200001a0 	.word	0x200001a0

080032f8 <delayMicroseconds>:

void delayMicroseconds(uint32_t nTime)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
	uint32_t curTime = micros();
 8003300:	f7ff ffc2 	bl	8003288 <micros>
 8003304:	60f8      	str	r0, [r7, #12]
	while((nTime-(micros()-curTime)) > 0);
 8003306:	bf00      	nop
 8003308:	f7ff ffbe 	bl	8003288 <micros>
 800330c:	4602      	mov	r2, r0
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	1a9a      	subs	r2, r3, r2
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4413      	add	r3, r2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1f6      	bne.n	8003308 <delayMicroseconds+0x10>
}
 800331a:	bf00      	nop
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
	...

08003324 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8003324:	b480      	push	{r7}
 8003326:	af00      	add	r7, sp, #0
	ticker++;
 8003328:	4b04      	ldr	r3, [pc, #16]	; (800333c <SysTick_Handler+0x18>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3301      	adds	r3, #1
 800332e:	4a03      	ldr	r2, [pc, #12]	; (800333c <SysTick_Handler+0x18>)
 8003330:	6013      	str	r3, [r2, #0]
}
 8003332:	bf00      	nop
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	200001a0 	.word	0x200001a0

08003340 <main>:
/************************************************************/
// Define some steppers and the pins the will use
AccelStepper stepper(1,A5,A4);// pin 5 step, pin 4 dir

int main(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
	SysTick_Init();
 8003344:	f7ff ff7c 	bl	8003240 <SysTick_Init>
	Serial.begin(115200);
 8003348:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800334c:	4813      	ldr	r0, [pc, #76]	; (800339c <main+0x5c>)
 800334e:	f7ff fcad 	bl	8002cac <_ZN14HardwareSerial5beginEm>
	Serial.println("READY!!!!!!");
 8003352:	4913      	ldr	r1, [pc, #76]	; (80033a0 <main+0x60>)
 8003354:	4811      	ldr	r0, [pc, #68]	; (800339c <main+0x5c>)
 8003356:	f7ff fae1 	bl	800291c <_ZN5Print7printlnEPKc>

	pinMode(6,OUTPUT); // Enable pin - chân khởi động - nối vào GND sẽ giúp ta bật động cơ bước, nối vô VCC động cơ bước được thả ra. Nôm na: GND = servo.attach, VCC = servo.detach
 800335a:	2110      	movs	r1, #16
 800335c:	2006      	movs	r0, #6
 800335e:	f7ff f8c5 	bl	80024ec <pinMode>
	pinMode(5,OUTPUT); // Step pin
 8003362:	2110      	movs	r1, #16
 8003364:	2005      	movs	r0, #5
 8003366:	f7ff f8c1 	bl	80024ec <pinMode>
	pinMode(4,OUTPUT); // Dir - pin
 800336a:	2110      	movs	r1, #16
 800336c:	2004      	movs	r0, #4
 800336e:	f7ff f8bd 	bl	80024ec <pinMode>
	digitalWrite(6,LOW); // Set Enable low
 8003372:	2100      	movs	r1, #0
 8003374:	2006      	movs	r0, #6
 8003376:	f7ff f921 	bl	80025bc <digitalWrite>
	while (1)
	{
		digitalWrite(6,LOW); // Đặt Enable ở trạng thái LOW
 800337a:	2100      	movs	r1, #0
 800337c:	2006      	movs	r0, #6
 800337e:	f7ff f91d 	bl	80025bc <digitalWrite>
		digitalWrite(4,HIGH); // Đặt Dir  ở trạng thái HIGH
 8003382:	2101      	movs	r1, #1
 8003384:	2004      	movs	r0, #4
 8003386:	f7ff f919 	bl	80025bc <digitalWrite>
		Serial.println("Cho chay 200 steps (1 vong)");
 800338a:	4906      	ldr	r1, [pc, #24]	; (80033a4 <main+0x64>)
 800338c:	4803      	ldr	r0, [pc, #12]	; (800339c <main+0x5c>)
 800338e:	f7ff fac5 	bl	800291c <_ZN5Print7printlnEPKc>

//		Serial.println("Pause");
		delay(300); // dừng 1 s rồi quay tiếp
 8003392:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003396:	f7ff ff97 	bl	80032c8 <delay>
		digitalWrite(6,LOW); // Đặt Enable ở trạng thái LOW
 800339a:	e7ee      	b.n	800337a <main+0x3a>
 800339c:	2000011c 	.word	0x2000011c
 80033a0:	08003a44 	.word	0x08003a44
 80033a4:	08003a50 	.word	0x08003a50

080033a8 <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b086      	sub	sp, #24
 80033ac:	af04      	add	r7, sp, #16
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d110      	bne.n	80033da <_Z41__static_initialization_and_destruction_0ii+0x32>
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033be:	4293      	cmp	r3, r2
 80033c0:	d10b      	bne.n	80033da <_Z41__static_initialization_and_destruction_0ii+0x32>
AccelStepper stepper(1,A5,A4);// pin 5 step, pin 4 dir
 80033c2:	2301      	movs	r3, #1
 80033c4:	9302      	str	r3, [sp, #8]
 80033c6:	2305      	movs	r3, #5
 80033c8:	9301      	str	r3, [sp, #4]
 80033ca:	2304      	movs	r3, #4
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	2304      	movs	r3, #4
 80033d0:	2205      	movs	r2, #5
 80033d2:	2101      	movs	r1, #1
 80033d4:	4803      	ldr	r0, [pc, #12]	; (80033e4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80033d6:	f7fe fca3 	bl	8001d20 <_ZN12AccelStepperC1Ehhhhhb>
}
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	2000014c 	.word	0x2000014c

080033e8 <_GLOBAL__sub_I_ttt>:
 80033e8:	b580      	push	{r7, lr}
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80033f0:	2001      	movs	r0, #1
 80033f2:	f7ff ffd9 	bl	80033a8 <_Z41__static_initialization_and_destruction_0ii>
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80033f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003430 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80033fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80033fe:	e003      	b.n	8003408 <LoopCopyDataInit>

08003400 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003400:	4b0c      	ldr	r3, [pc, #48]	; (8003434 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8003402:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003404:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003406:	3104      	adds	r1, #4

08003408 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003408:	480b      	ldr	r0, [pc, #44]	; (8003438 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800340a:	4b0c      	ldr	r3, [pc, #48]	; (800343c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 800340c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800340e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003410:	d3f6      	bcc.n	8003400 <CopyDataInit>
	ldr	r2, =_sbss
 8003412:	4a0b      	ldr	r2, [pc, #44]	; (8003440 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8003414:	e002      	b.n	800341c <LoopFillZerobss>

08003416 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003416:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003418:	f842 3b04 	str.w	r3, [r2], #4

0800341c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800341c:	4b09      	ldr	r3, [pc, #36]	; (8003444 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 800341e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003420:	d3f9      	bcc.n	8003416 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003422:	f000 f837 	bl	8003494 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003426:	f000 fa29 	bl	800387c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800342a:	f7ff ff89 	bl	8003340 <main>
	bx	lr
 800342e:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003430:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8003434:	08003b18 	.word	0x08003b18
	ldr	r0, =_sdata
 8003438:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800343c:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 8003440:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 8003444:	200001ac 	.word	0x200001ac

08003448 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003448:	e7fe      	b.n	8003448 <ADC1_2_IRQHandler>

0800344a <NMI_Handler>:
  * @retval None
  */


void NMI_Handler(void)
{
 800344a:	b480      	push	{r7}
 800344c:	af00      	add	r7, sp, #0
}
 800344e:	bf00      	nop
 8003450:	46bd      	mov	sp, r7
 8003452:	bc80      	pop	{r7}
 8003454:	4770      	bx	lr

08003456 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003456:	b480      	push	{r7}
 8003458:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800345a:	e7fe      	b.n	800345a <HardFault_Handler+0x4>

0800345c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800345c:	b480      	push	{r7}
 800345e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8003460:	e7fe      	b.n	8003460 <MemManage_Handler+0x4>

08003462 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8003462:	b480      	push	{r7}
 8003464:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8003466:	e7fe      	b.n	8003466 <BusFault_Handler+0x4>

08003468 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800346c:	e7fe      	b.n	800346c <UsageFault_Handler+0x4>

0800346e <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800346e:	b480      	push	{r7}
 8003470:	af00      	add	r7, sp, #0
}
 8003472:	bf00      	nop
 8003474:	46bd      	mov	sp, r7
 8003476:	bc80      	pop	{r7}
 8003478:	4770      	bx	lr

0800347a <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800347a:	b480      	push	{r7}
 800347c:	af00      	add	r7, sp, #0
}
 800347e:	bf00      	nop
 8003480:	46bd      	mov	sp, r7
 8003482:	bc80      	pop	{r7}
 8003484:	4770      	bx	lr

08003486 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8003486:	b480      	push	{r7}
 8003488:	af00      	add	r7, sp, #0
}
 800348a:	bf00      	nop
 800348c:	46bd      	mov	sp, r7
 800348e:	bc80      	pop	{r7}
 8003490:	4770      	bx	lr
	...

08003494 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8003498:	4a15      	ldr	r2, [pc, #84]	; (80034f0 <SystemInit+0x5c>)
 800349a:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <SystemInit+0x5c>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80034a4:	4912      	ldr	r1, [pc, #72]	; (80034f0 <SystemInit+0x5c>)
 80034a6:	4b12      	ldr	r3, [pc, #72]	; (80034f0 <SystemInit+0x5c>)
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	4b12      	ldr	r3, [pc, #72]	; (80034f4 <SystemInit+0x60>)
 80034ac:	4013      	ands	r3, r2
 80034ae:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80034b0:	4a0f      	ldr	r2, [pc, #60]	; (80034f0 <SystemInit+0x5c>)
 80034b2:	4b0f      	ldr	r3, [pc, #60]	; (80034f0 <SystemInit+0x5c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80034ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034be:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80034c0:	4a0b      	ldr	r2, [pc, #44]	; (80034f0 <SystemInit+0x5c>)
 80034c2:	4b0b      	ldr	r3, [pc, #44]	; (80034f0 <SystemInit+0x5c>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034ca:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80034cc:	4a08      	ldr	r2, [pc, #32]	; (80034f0 <SystemInit+0x5c>)
 80034ce:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <SystemInit+0x5c>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80034d6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <SystemInit+0x5c>)
 80034da:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80034de:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 80034e0:	f000 f80c 	bl	80034fc <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80034e4:	4b04      	ldr	r3, [pc, #16]	; (80034f8 <SystemInit+0x64>)
 80034e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80034ea:	609a      	str	r2, [r3, #8]
#endif 
}
 80034ec:	bf00      	nop
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40021000 	.word	0x40021000
 80034f4:	f8ff0000 	.word	0xf8ff0000
 80034f8:	e000ed00 	.word	0xe000ed00

080034fc <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8003500:	f000 f802 	bl	8003508 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8003504:	bf00      	nop
 8003506:	bd80      	pop	{r7, pc}

08003508 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800350e:	2300      	movs	r3, #0
 8003510:	607b      	str	r3, [r7, #4]
 8003512:	2300      	movs	r3, #0
 8003514:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003516:	4a3a      	ldr	r2, [pc, #232]	; (8003600 <SetSysClockTo72+0xf8>)
 8003518:	4b39      	ldr	r3, [pc, #228]	; (8003600 <SetSysClockTo72+0xf8>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003520:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003522:	4b37      	ldr	r3, [pc, #220]	; (8003600 <SetSysClockTo72+0xf8>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800352a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	3301      	adds	r3, #1
 8003530:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d103      	bne.n	8003540 <SetSysClockTo72+0x38>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800353e:	d1f0      	bne.n	8003522 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003540:	4b2f      	ldr	r3, [pc, #188]	; (8003600 <SetSysClockTo72+0xf8>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d002      	beq.n	8003552 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800354c:	2301      	movs	r3, #1
 800354e:	603b      	str	r3, [r7, #0]
 8003550:	e001      	b.n	8003556 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003552:	2300      	movs	r3, #0
 8003554:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d14b      	bne.n	80035f4 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 800355c:	4a29      	ldr	r2, [pc, #164]	; (8003604 <SetSysClockTo72+0xfc>)
 800355e:	4b29      	ldr	r3, [pc, #164]	; (8003604 <SetSysClockTo72+0xfc>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f043 0310 	orr.w	r3, r3, #16
 8003566:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8003568:	4a26      	ldr	r2, [pc, #152]	; (8003604 <SetSysClockTo72+0xfc>)
 800356a:	4b26      	ldr	r3, [pc, #152]	; (8003604 <SetSysClockTo72+0xfc>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f023 0303 	bic.w	r3, r3, #3
 8003572:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8003574:	4a23      	ldr	r2, [pc, #140]	; (8003604 <SetSysClockTo72+0xfc>)
 8003576:	4b23      	ldr	r3, [pc, #140]	; (8003604 <SetSysClockTo72+0xfc>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f043 0302 	orr.w	r3, r3, #2
 800357e:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003580:	4a1f      	ldr	r2, [pc, #124]	; (8003600 <SetSysClockTo72+0xf8>)
 8003582:	4b1f      	ldr	r3, [pc, #124]	; (8003600 <SetSysClockTo72+0xf8>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8003588:	4a1d      	ldr	r2, [pc, #116]	; (8003600 <SetSysClockTo72+0xf8>)
 800358a:	4b1d      	ldr	r3, [pc, #116]	; (8003600 <SetSysClockTo72+0xf8>)
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8003590:	4a1b      	ldr	r2, [pc, #108]	; (8003600 <SetSysClockTo72+0xf8>)
 8003592:	4b1b      	ldr	r3, [pc, #108]	; (8003600 <SetSysClockTo72+0xf8>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800359a:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 800359c:	4a18      	ldr	r2, [pc, #96]	; (8003600 <SetSysClockTo72+0xf8>)
 800359e:	4b18      	ldr	r3, [pc, #96]	; (8003600 <SetSysClockTo72+0xf8>)
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80035a6:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80035a8:	4a15      	ldr	r2, [pc, #84]	; (8003600 <SetSysClockTo72+0xf8>)
 80035aa:	4b15      	ldr	r3, [pc, #84]	; (8003600 <SetSysClockTo72+0xf8>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80035b2:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80035b4:	4a12      	ldr	r2, [pc, #72]	; (8003600 <SetSysClockTo72+0xf8>)
 80035b6:	4b12      	ldr	r3, [pc, #72]	; (8003600 <SetSysClockTo72+0xf8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80035be:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80035c0:	bf00      	nop
 80035c2:	4b0f      	ldr	r3, [pc, #60]	; (8003600 <SetSysClockTo72+0xf8>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f9      	beq.n	80035c2 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80035ce:	4a0c      	ldr	r2, [pc, #48]	; (8003600 <SetSysClockTo72+0xf8>)
 80035d0:	4b0b      	ldr	r3, [pc, #44]	; (8003600 <SetSysClockTo72+0xf8>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f023 0303 	bic.w	r3, r3, #3
 80035d8:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80035da:	4a09      	ldr	r2, [pc, #36]	; (8003600 <SetSysClockTo72+0xf8>)
 80035dc:	4b08      	ldr	r3, [pc, #32]	; (8003600 <SetSysClockTo72+0xf8>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f043 0302 	orr.w	r3, r3, #2
 80035e4:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 80035e6:	bf00      	nop
 80035e8:	4b05      	ldr	r3, [pc, #20]	; (8003600 <SetSysClockTo72+0xf8>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	f003 030c 	and.w	r3, r3, #12
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d1f9      	bne.n	80035e8 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr
 80035fe:	bf00      	nop
 8003600:	40021000 	.word	0x40021000
 8003604:	40022000 	.word	0x40022000

08003608 <_ZdlPv>:
 8003608:	f000 b95c 	b.w	80038c4 <free>

0800360c <__aeabi_atexit>:
 800360c:	460b      	mov	r3, r1
 800360e:	4601      	mov	r1, r0
 8003610:	4618      	mov	r0, r3
 8003612:	f000 b91f 	b.w	8003854 <__cxa_atexit>

08003616 <__cxa_pure_virtual>:
 8003616:	b508      	push	{r3, lr}
 8003618:	f000 f80c 	bl	8003634 <_ZSt9terminatev>

0800361c <_ZN10__cxxabiv111__terminateEPFvvE>:
 800361c:	b508      	push	{r3, lr}
 800361e:	4780      	blx	r0
 8003620:	f000 f910 	bl	8003844 <abort>

08003624 <_ZSt13get_terminatev>:
 8003624:	4b02      	ldr	r3, [pc, #8]	; (8003630 <_ZSt13get_terminatev+0xc>)
 8003626:	6818      	ldr	r0, [r3, #0]
 8003628:	f3bf 8f5b 	dmb	ish
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	2000001c 	.word	0x2000001c

08003634 <_ZSt9terminatev>:
 8003634:	b508      	push	{r3, lr}
 8003636:	f7ff fff5 	bl	8003624 <_ZSt13get_terminatev>
 800363a:	f7ff ffef 	bl	800361c <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08003640 <sqrt>:
 8003640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003644:	b08b      	sub	sp, #44	; 0x2c
 8003646:	4604      	mov	r4, r0
 8003648:	460d      	mov	r5, r1
 800364a:	f000 f84d 	bl	80036e8 <__ieee754_sqrt>
 800364e:	4b24      	ldr	r3, [pc, #144]	; (80036e0 <sqrt+0xa0>)
 8003650:	4680      	mov	r8, r0
 8003652:	f993 a000 	ldrsb.w	sl, [r3]
 8003656:	4689      	mov	r9, r1
 8003658:	f1ba 3fff 	cmp.w	sl, #4294967295
 800365c:	d02b      	beq.n	80036b6 <sqrt+0x76>
 800365e:	4622      	mov	r2, r4
 8003660:	462b      	mov	r3, r5
 8003662:	4620      	mov	r0, r4
 8003664:	4629      	mov	r1, r5
 8003666:	f7fd f9cd 	bl	8000a04 <__aeabi_dcmpun>
 800366a:	4683      	mov	fp, r0
 800366c:	bb18      	cbnz	r0, 80036b6 <sqrt+0x76>
 800366e:	2600      	movs	r6, #0
 8003670:	2700      	movs	r7, #0
 8003672:	4632      	mov	r2, r6
 8003674:	463b      	mov	r3, r7
 8003676:	4620      	mov	r0, r4
 8003678:	4629      	mov	r1, r5
 800367a:	f7fd f99b 	bl	80009b4 <__aeabi_dcmplt>
 800367e:	b1d0      	cbz	r0, 80036b6 <sqrt+0x76>
 8003680:	2301      	movs	r3, #1
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	4b17      	ldr	r3, [pc, #92]	; (80036e4 <sqrt+0xa4>)
 8003686:	f8cd b020 	str.w	fp, [sp, #32]
 800368a:	9301      	str	r3, [sp, #4]
 800368c:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8003690:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8003694:	f1ba 0f00 	cmp.w	sl, #0
 8003698:	d112      	bne.n	80036c0 <sqrt+0x80>
 800369a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800369e:	4668      	mov	r0, sp
 80036a0:	f000 f8ce 	bl	8003840 <matherr>
 80036a4:	b1b8      	cbz	r0, 80036d6 <sqrt+0x96>
 80036a6:	9b08      	ldr	r3, [sp, #32]
 80036a8:	b11b      	cbz	r3, 80036b2 <sqrt+0x72>
 80036aa:	f000 f8e1 	bl	8003870 <__errno>
 80036ae:	9b08      	ldr	r3, [sp, #32]
 80036b0:	6003      	str	r3, [r0, #0]
 80036b2:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 80036b6:	4640      	mov	r0, r8
 80036b8:	4649      	mov	r1, r9
 80036ba:	b00b      	add	sp, #44	; 0x2c
 80036bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036c0:	4632      	mov	r2, r6
 80036c2:	463b      	mov	r3, r7
 80036c4:	4630      	mov	r0, r6
 80036c6:	4639      	mov	r1, r7
 80036c8:	f7fd f82c 	bl	8000724 <__aeabi_ddiv>
 80036cc:	f1ba 0f02 	cmp.w	sl, #2
 80036d0:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80036d4:	d1e3      	bne.n	800369e <sqrt+0x5e>
 80036d6:	f000 f8cb 	bl	8003870 <__errno>
 80036da:	2321      	movs	r3, #33	; 0x21
 80036dc:	6003      	str	r3, [r0, #0]
 80036de:	e7e2      	b.n	80036a6 <sqrt+0x66>
 80036e0:	20000020 	.word	0x20000020
 80036e4:	08003af8 	.word	0x08003af8

080036e8 <__ieee754_sqrt>:
 80036e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80036ec:	f8df e14c 	ldr.w	lr, [pc, #332]	; 800383c <__ieee754_sqrt+0x154>
 80036f0:	4606      	mov	r6, r0
 80036f2:	ea3e 0e01 	bics.w	lr, lr, r1
 80036f6:	460d      	mov	r5, r1
 80036f8:	4607      	mov	r7, r0
 80036fa:	460a      	mov	r2, r1
 80036fc:	460c      	mov	r4, r1
 80036fe:	4603      	mov	r3, r0
 8003700:	d10f      	bne.n	8003722 <__ieee754_sqrt+0x3a>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	f7fc fee3 	bl	80004d0 <__aeabi_dmul>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4630      	mov	r0, r6
 8003710:	4629      	mov	r1, r5
 8003712:	f7fc fd2b 	bl	800016c <__adddf3>
 8003716:	4606      	mov	r6, r0
 8003718:	460d      	mov	r5, r1
 800371a:	4630      	mov	r0, r6
 800371c:	4629      	mov	r1, r5
 800371e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003722:	2900      	cmp	r1, #0
 8003724:	dc0e      	bgt.n	8003744 <__ieee754_sqrt+0x5c>
 8003726:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 800372a:	ea5e 0707 	orrs.w	r7, lr, r7
 800372e:	d0f4      	beq.n	800371a <__ieee754_sqrt+0x32>
 8003730:	b141      	cbz	r1, 8003744 <__ieee754_sqrt+0x5c>
 8003732:	4602      	mov	r2, r0
 8003734:	460b      	mov	r3, r1
 8003736:	f7fc fd17 	bl	8000168 <__aeabi_dsub>
 800373a:	4602      	mov	r2, r0
 800373c:	460b      	mov	r3, r1
 800373e:	f7fc fff1 	bl	8000724 <__aeabi_ddiv>
 8003742:	e7e8      	b.n	8003716 <__ieee754_sqrt+0x2e>
 8003744:	1512      	asrs	r2, r2, #20
 8003746:	d10c      	bne.n	8003762 <__ieee754_sqrt+0x7a>
 8003748:	2c00      	cmp	r4, #0
 800374a:	d06e      	beq.n	800382a <__ieee754_sqrt+0x142>
 800374c:	2100      	movs	r1, #0
 800374e:	02e6      	lsls	r6, r4, #11
 8003750:	d56f      	bpl.n	8003832 <__ieee754_sqrt+0x14a>
 8003752:	1e48      	subs	r0, r1, #1
 8003754:	1a12      	subs	r2, r2, r0
 8003756:	f1c1 0020 	rsb	r0, r1, #32
 800375a:	fa23 f000 	lsr.w	r0, r3, r0
 800375e:	4304      	orrs	r4, r0
 8003760:	408b      	lsls	r3, r1
 8003762:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003766:	07d5      	lsls	r5, r2, #31
 8003768:	f04f 0500 	mov.w	r5, #0
 800376c:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003770:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 8003774:	bf42      	ittt	mi
 8003776:	0064      	lslmi	r4, r4, #1
 8003778:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 800377c:	005b      	lslmi	r3, r3, #1
 800377e:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 8003782:	1050      	asrs	r0, r2, #1
 8003784:	4421      	add	r1, r4
 8003786:	2216      	movs	r2, #22
 8003788:	462c      	mov	r4, r5
 800378a:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800378e:	005b      	lsls	r3, r3, #1
 8003790:	19a7      	adds	r7, r4, r6
 8003792:	428f      	cmp	r7, r1
 8003794:	bfde      	ittt	le
 8003796:	1bc9      	suble	r1, r1, r7
 8003798:	19bc      	addle	r4, r7, r6
 800379a:	19ad      	addle	r5, r5, r6
 800379c:	0049      	lsls	r1, r1, #1
 800379e:	3a01      	subs	r2, #1
 80037a0:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80037a4:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80037a8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80037ac:	d1f0      	bne.n	8003790 <__ieee754_sqrt+0xa8>
 80037ae:	f04f 0e20 	mov.w	lr, #32
 80037b2:	4694      	mov	ip, r2
 80037b4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80037b8:	42a1      	cmp	r1, r4
 80037ba:	eb06 070c 	add.w	r7, r6, ip
 80037be:	dc02      	bgt.n	80037c6 <__ieee754_sqrt+0xde>
 80037c0:	d112      	bne.n	80037e8 <__ieee754_sqrt+0x100>
 80037c2:	429f      	cmp	r7, r3
 80037c4:	d810      	bhi.n	80037e8 <__ieee754_sqrt+0x100>
 80037c6:	2f00      	cmp	r7, #0
 80037c8:	eb07 0c06 	add.w	ip, r7, r6
 80037cc:	da34      	bge.n	8003838 <__ieee754_sqrt+0x150>
 80037ce:	f1bc 0f00 	cmp.w	ip, #0
 80037d2:	db31      	blt.n	8003838 <__ieee754_sqrt+0x150>
 80037d4:	f104 0801 	add.w	r8, r4, #1
 80037d8:	1b09      	subs	r1, r1, r4
 80037da:	4644      	mov	r4, r8
 80037dc:	429f      	cmp	r7, r3
 80037de:	bf88      	it	hi
 80037e0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 80037e4:	1bdb      	subs	r3, r3, r7
 80037e6:	4432      	add	r2, r6
 80037e8:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 80037ec:	f1be 0e01 	subs.w	lr, lr, #1
 80037f0:	4439      	add	r1, r7
 80037f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80037f6:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80037fa:	d1dd      	bne.n	80037b8 <__ieee754_sqrt+0xd0>
 80037fc:	430b      	orrs	r3, r1
 80037fe:	d006      	beq.n	800380e <__ieee754_sqrt+0x126>
 8003800:	1c54      	adds	r4, r2, #1
 8003802:	bf0b      	itete	eq
 8003804:	4672      	moveq	r2, lr
 8003806:	3201      	addne	r2, #1
 8003808:	3501      	addeq	r5, #1
 800380a:	f022 0201 	bicne.w	r2, r2, #1
 800380e:	106b      	asrs	r3, r5, #1
 8003810:	0852      	lsrs	r2, r2, #1
 8003812:	07e9      	lsls	r1, r5, #31
 8003814:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8003818:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800381c:	bf48      	it	mi
 800381e:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8003822:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 8003826:	4616      	mov	r6, r2
 8003828:	e777      	b.n	800371a <__ieee754_sqrt+0x32>
 800382a:	0adc      	lsrs	r4, r3, #11
 800382c:	3a15      	subs	r2, #21
 800382e:	055b      	lsls	r3, r3, #21
 8003830:	e78a      	b.n	8003748 <__ieee754_sqrt+0x60>
 8003832:	0064      	lsls	r4, r4, #1
 8003834:	3101      	adds	r1, #1
 8003836:	e78a      	b.n	800374e <__ieee754_sqrt+0x66>
 8003838:	46a0      	mov	r8, r4
 800383a:	e7cd      	b.n	80037d8 <__ieee754_sqrt+0xf0>
 800383c:	7ff00000 	.word	0x7ff00000

08003840 <matherr>:
 8003840:	2000      	movs	r0, #0
 8003842:	4770      	bx	lr

08003844 <abort>:
 8003844:	b508      	push	{r3, lr}
 8003846:	2006      	movs	r0, #6
 8003848:	f000 f8b8 	bl	80039bc <raise>
 800384c:	2001      	movs	r0, #1
 800384e:	f000 f8e3 	bl	8003a18 <_exit>
	...

08003854 <__cxa_atexit>:
 8003854:	b510      	push	{r4, lr}
 8003856:	4c05      	ldr	r4, [pc, #20]	; (800386c <__cxa_atexit+0x18>)
 8003858:	4613      	mov	r3, r2
 800385a:	b12c      	cbz	r4, 8003868 <__cxa_atexit+0x14>
 800385c:	460a      	mov	r2, r1
 800385e:	4601      	mov	r1, r0
 8003860:	2002      	movs	r0, #2
 8003862:	f3af 8000 	nop.w
 8003866:	bd10      	pop	{r4, pc}
 8003868:	4620      	mov	r0, r4
 800386a:	bd10      	pop	{r4, pc}
 800386c:	00000000 	.word	0x00000000

08003870 <__errno>:
 8003870:	4b01      	ldr	r3, [pc, #4]	; (8003878 <__errno+0x8>)
 8003872:	6818      	ldr	r0, [r3, #0]
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	20000024 	.word	0x20000024

0800387c <__libc_init_array>:
 800387c:	b570      	push	{r4, r5, r6, lr}
 800387e:	2500      	movs	r5, #0
 8003880:	4e0c      	ldr	r6, [pc, #48]	; (80038b4 <__libc_init_array+0x38>)
 8003882:	4c0d      	ldr	r4, [pc, #52]	; (80038b8 <__libc_init_array+0x3c>)
 8003884:	1ba4      	subs	r4, r4, r6
 8003886:	10a4      	asrs	r4, r4, #2
 8003888:	42a5      	cmp	r5, r4
 800388a:	d109      	bne.n	80038a0 <__libc_init_array+0x24>
 800388c:	f000 f8c6 	bl	8003a1c <_init>
 8003890:	2500      	movs	r5, #0
 8003892:	4e0a      	ldr	r6, [pc, #40]	; (80038bc <__libc_init_array+0x40>)
 8003894:	4c0a      	ldr	r4, [pc, #40]	; (80038c0 <__libc_init_array+0x44>)
 8003896:	1ba4      	subs	r4, r4, r6
 8003898:	10a4      	asrs	r4, r4, #2
 800389a:	42a5      	cmp	r5, r4
 800389c:	d105      	bne.n	80038aa <__libc_init_array+0x2e>
 800389e:	bd70      	pop	{r4, r5, r6, pc}
 80038a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038a4:	4798      	blx	r3
 80038a6:	3501      	adds	r5, #1
 80038a8:	e7ee      	b.n	8003888 <__libc_init_array+0xc>
 80038aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80038ae:	4798      	blx	r3
 80038b0:	3501      	adds	r5, #1
 80038b2:	e7f2      	b.n	800389a <__libc_init_array+0x1e>
 80038b4:	08003b00 	.word	0x08003b00
 80038b8:	08003b00 	.word	0x08003b00
 80038bc:	08003b00 	.word	0x08003b00
 80038c0:	08003b14 	.word	0x08003b14

080038c4 <free>:
 80038c4:	4b02      	ldr	r3, [pc, #8]	; (80038d0 <free+0xc>)
 80038c6:	4601      	mov	r1, r0
 80038c8:	6818      	ldr	r0, [r3, #0]
 80038ca:	f000 b803 	b.w	80038d4 <_free_r>
 80038ce:	bf00      	nop
 80038d0:	20000024 	.word	0x20000024

080038d4 <_free_r>:
 80038d4:	b538      	push	{r3, r4, r5, lr}
 80038d6:	4605      	mov	r5, r0
 80038d8:	2900      	cmp	r1, #0
 80038da:	d043      	beq.n	8003964 <_free_r+0x90>
 80038dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038e0:	1f0c      	subs	r4, r1, #4
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	bfb8      	it	lt
 80038e6:	18e4      	addlt	r4, r4, r3
 80038e8:	f000 f884 	bl	80039f4 <__malloc_lock>
 80038ec:	4a1e      	ldr	r2, [pc, #120]	; (8003968 <_free_r+0x94>)
 80038ee:	6813      	ldr	r3, [r2, #0]
 80038f0:	4610      	mov	r0, r2
 80038f2:	b933      	cbnz	r3, 8003902 <_free_r+0x2e>
 80038f4:	6063      	str	r3, [r4, #4]
 80038f6:	6014      	str	r4, [r2, #0]
 80038f8:	4628      	mov	r0, r5
 80038fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038fe:	f000 b87a 	b.w	80039f6 <__malloc_unlock>
 8003902:	42a3      	cmp	r3, r4
 8003904:	d90b      	bls.n	800391e <_free_r+0x4a>
 8003906:	6821      	ldr	r1, [r4, #0]
 8003908:	1862      	adds	r2, r4, r1
 800390a:	4293      	cmp	r3, r2
 800390c:	bf01      	itttt	eq
 800390e:	681a      	ldreq	r2, [r3, #0]
 8003910:	685b      	ldreq	r3, [r3, #4]
 8003912:	1852      	addeq	r2, r2, r1
 8003914:	6022      	streq	r2, [r4, #0]
 8003916:	6063      	str	r3, [r4, #4]
 8003918:	6004      	str	r4, [r0, #0]
 800391a:	e7ed      	b.n	80038f8 <_free_r+0x24>
 800391c:	4613      	mov	r3, r2
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	b10a      	cbz	r2, 8003926 <_free_r+0x52>
 8003922:	42a2      	cmp	r2, r4
 8003924:	d9fa      	bls.n	800391c <_free_r+0x48>
 8003926:	6819      	ldr	r1, [r3, #0]
 8003928:	1858      	adds	r0, r3, r1
 800392a:	42a0      	cmp	r0, r4
 800392c:	d10b      	bne.n	8003946 <_free_r+0x72>
 800392e:	6820      	ldr	r0, [r4, #0]
 8003930:	4401      	add	r1, r0
 8003932:	1858      	adds	r0, r3, r1
 8003934:	4282      	cmp	r2, r0
 8003936:	6019      	str	r1, [r3, #0]
 8003938:	d1de      	bne.n	80038f8 <_free_r+0x24>
 800393a:	6810      	ldr	r0, [r2, #0]
 800393c:	6852      	ldr	r2, [r2, #4]
 800393e:	4401      	add	r1, r0
 8003940:	6019      	str	r1, [r3, #0]
 8003942:	605a      	str	r2, [r3, #4]
 8003944:	e7d8      	b.n	80038f8 <_free_r+0x24>
 8003946:	d902      	bls.n	800394e <_free_r+0x7a>
 8003948:	230c      	movs	r3, #12
 800394a:	602b      	str	r3, [r5, #0]
 800394c:	e7d4      	b.n	80038f8 <_free_r+0x24>
 800394e:	6820      	ldr	r0, [r4, #0]
 8003950:	1821      	adds	r1, r4, r0
 8003952:	428a      	cmp	r2, r1
 8003954:	bf01      	itttt	eq
 8003956:	6811      	ldreq	r1, [r2, #0]
 8003958:	6852      	ldreq	r2, [r2, #4]
 800395a:	1809      	addeq	r1, r1, r0
 800395c:	6021      	streq	r1, [r4, #0]
 800395e:	6062      	str	r2, [r4, #4]
 8003960:	605c      	str	r4, [r3, #4]
 8003962:	e7c9      	b.n	80038f8 <_free_r+0x24>
 8003964:	bd38      	pop	{r3, r4, r5, pc}
 8003966:	bf00      	nop
 8003968:	2000019c 	.word	0x2000019c

0800396c <_raise_r>:
 800396c:	291f      	cmp	r1, #31
 800396e:	b538      	push	{r3, r4, r5, lr}
 8003970:	4604      	mov	r4, r0
 8003972:	460d      	mov	r5, r1
 8003974:	d904      	bls.n	8003980 <_raise_r+0x14>
 8003976:	2316      	movs	r3, #22
 8003978:	6003      	str	r3, [r0, #0]
 800397a:	f04f 30ff 	mov.w	r0, #4294967295
 800397e:	bd38      	pop	{r3, r4, r5, pc}
 8003980:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003982:	b112      	cbz	r2, 800398a <_raise_r+0x1e>
 8003984:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003988:	b94b      	cbnz	r3, 800399e <_raise_r+0x32>
 800398a:	4620      	mov	r0, r4
 800398c:	f000 f830 	bl	80039f0 <_getpid_r>
 8003990:	462a      	mov	r2, r5
 8003992:	4601      	mov	r1, r0
 8003994:	4620      	mov	r0, r4
 8003996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800399a:	f000 b817 	b.w	80039cc <_kill_r>
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d00a      	beq.n	80039b8 <_raise_r+0x4c>
 80039a2:	1c59      	adds	r1, r3, #1
 80039a4:	d103      	bne.n	80039ae <_raise_r+0x42>
 80039a6:	2316      	movs	r3, #22
 80039a8:	6003      	str	r3, [r0, #0]
 80039aa:	2001      	movs	r0, #1
 80039ac:	bd38      	pop	{r3, r4, r5, pc}
 80039ae:	2400      	movs	r4, #0
 80039b0:	4628      	mov	r0, r5
 80039b2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80039b6:	4798      	blx	r3
 80039b8:	2000      	movs	r0, #0
 80039ba:	bd38      	pop	{r3, r4, r5, pc}

080039bc <raise>:
 80039bc:	4b02      	ldr	r3, [pc, #8]	; (80039c8 <raise+0xc>)
 80039be:	4601      	mov	r1, r0
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	f7ff bfd3 	b.w	800396c <_raise_r>
 80039c6:	bf00      	nop
 80039c8:	20000024 	.word	0x20000024

080039cc <_kill_r>:
 80039cc:	b538      	push	{r3, r4, r5, lr}
 80039ce:	2300      	movs	r3, #0
 80039d0:	4c06      	ldr	r4, [pc, #24]	; (80039ec <_kill_r+0x20>)
 80039d2:	4605      	mov	r5, r0
 80039d4:	4608      	mov	r0, r1
 80039d6:	4611      	mov	r1, r2
 80039d8:	6023      	str	r3, [r4, #0]
 80039da:	f000 f815 	bl	8003a08 <_kill>
 80039de:	1c43      	adds	r3, r0, #1
 80039e0:	d102      	bne.n	80039e8 <_kill_r+0x1c>
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	b103      	cbz	r3, 80039e8 <_kill_r+0x1c>
 80039e6:	602b      	str	r3, [r5, #0]
 80039e8:	bd38      	pop	{r3, r4, r5, pc}
 80039ea:	bf00      	nop
 80039ec:	200001a8 	.word	0x200001a8

080039f0 <_getpid_r>:
 80039f0:	f000 b802 	b.w	80039f8 <_getpid>

080039f4 <__malloc_lock>:
 80039f4:	4770      	bx	lr

080039f6 <__malloc_unlock>:
 80039f6:	4770      	bx	lr

080039f8 <_getpid>:
 80039f8:	2258      	movs	r2, #88	; 0x58
 80039fa:	4b02      	ldr	r3, [pc, #8]	; (8003a04 <_getpid+0xc>)
 80039fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003a00:	601a      	str	r2, [r3, #0]
 8003a02:	4770      	bx	lr
 8003a04:	200001a8 	.word	0x200001a8

08003a08 <_kill>:
 8003a08:	2258      	movs	r2, #88	; 0x58
 8003a0a:	4b02      	ldr	r3, [pc, #8]	; (8003a14 <_kill+0xc>)
 8003a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	4770      	bx	lr
 8003a14:	200001a8 	.word	0x200001a8

08003a18 <_exit>:
 8003a18:	e7fe      	b.n	8003a18 <_exit>
	...

08003a1c <_init>:
 8003a1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a1e:	bf00      	nop
 8003a20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a22:	bc08      	pop	{r3}
 8003a24:	469e      	mov	lr, r3
 8003a26:	4770      	bx	lr

08003a28 <_fini>:
 8003a28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a2a:	bf00      	nop
 8003a2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a2e:	bc08      	pop	{r3}
 8003a30:	469e      	mov	lr, r3
 8003a32:	4770      	bx	lr
