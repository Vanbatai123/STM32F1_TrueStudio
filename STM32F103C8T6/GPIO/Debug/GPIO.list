
GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005738  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f4  08005844  08005844  00015844  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000018  08005b38  08005b38  00015b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08005b50  08005b50  00015b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000088  20000000  08005b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003d0  20000088  08005bdc  00020088  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000458  08005bdc  00020458  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
  9 .debug_info   0002779d  00000000  00000000  000200b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000055a2  00000000  00000000  0004784e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00001270  00000000  00000000  0004cdf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001178  00000000  00000000  0004e060  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00008bf4  00000000  00000000  0004f1d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000079c5  00000000  00000000  00057dcc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0005f791  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00005304  00000000  00000000  0005f810  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stab         0000003c  00000000  00000000  00064b14  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      000000ac  00000000  00000000  00064b50  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000088 	.word	0x20000088
 8000128:	00000000 	.word	0x00000000
 800012c:	0800582c 	.word	0x0800582c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000008c 	.word	0x2000008c
 8000148:	0800582c 	.word	0x0800582c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <__aeabi_drsub>:
 800015c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000160:	e002      	b.n	8000168 <__adddf3>
 8000162:	bf00      	nop

08000164 <__aeabi_dsub>:
 8000164:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000168 <__adddf3>:
 8000168:	b530      	push	{r4, r5, lr}
 800016a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800016e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000172:	ea94 0f05 	teq	r4, r5
 8000176:	bf08      	it	eq
 8000178:	ea90 0f02 	teqeq	r0, r2
 800017c:	bf1f      	itttt	ne
 800017e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000182:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000186:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800018e:	f000 80e2 	beq.w	8000356 <__adddf3+0x1ee>
 8000192:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000196:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019a:	bfb8      	it	lt
 800019c:	426d      	neglt	r5, r5
 800019e:	dd0c      	ble.n	80001ba <__adddf3+0x52>
 80001a0:	442c      	add	r4, r5
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	ea82 0000 	eor.w	r0, r2, r0
 80001ae:	ea83 0101 	eor.w	r1, r3, r1
 80001b2:	ea80 0202 	eor.w	r2, r0, r2
 80001b6:	ea81 0303 	eor.w	r3, r1, r3
 80001ba:	2d36      	cmp	r5, #54	; 0x36
 80001bc:	bf88      	it	hi
 80001be:	bd30      	pophi	{r4, r5, pc}
 80001c0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001c8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001cc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d0:	d002      	beq.n	80001d8 <__adddf3+0x70>
 80001d2:	4240      	negs	r0, r0
 80001d4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001d8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001dc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x84>
 80001e6:	4252      	negs	r2, r2
 80001e8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001ec:	ea94 0f05 	teq	r4, r5
 80001f0:	f000 80a7 	beq.w	8000342 <__adddf3+0x1da>
 80001f4:	f1a4 0401 	sub.w	r4, r4, #1
 80001f8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001fc:	db0d      	blt.n	800021a <__adddf3+0xb2>
 80001fe:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000202:	fa22 f205 	lsr.w	r2, r2, r5
 8000206:	1880      	adds	r0, r0, r2
 8000208:	f141 0100 	adc.w	r1, r1, #0
 800020c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000210:	1880      	adds	r0, r0, r2
 8000212:	fa43 f305 	asr.w	r3, r3, r5
 8000216:	4159      	adcs	r1, r3
 8000218:	e00e      	b.n	8000238 <__adddf3+0xd0>
 800021a:	f1a5 0520 	sub.w	r5, r5, #32
 800021e:	f10e 0e20 	add.w	lr, lr, #32
 8000222:	2a01      	cmp	r2, #1
 8000224:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000228:	bf28      	it	cs
 800022a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800022e:	fa43 f305 	asr.w	r3, r3, r5
 8000232:	18c0      	adds	r0, r0, r3
 8000234:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000238:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800023c:	d507      	bpl.n	800024e <__adddf3+0xe6>
 800023e:	f04f 0e00 	mov.w	lr, #0
 8000242:	f1dc 0c00 	rsbs	ip, ip, #0
 8000246:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024a:	eb6e 0101 	sbc.w	r1, lr, r1
 800024e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000252:	d31b      	bcc.n	800028c <__adddf3+0x124>
 8000254:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000258:	d30c      	bcc.n	8000274 <__adddf3+0x10c>
 800025a:	0849      	lsrs	r1, r1, #1
 800025c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000260:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000264:	f104 0401 	add.w	r4, r4, #1
 8000268:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800026c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000270:	f080 809a 	bcs.w	80003a8 <__adddf3+0x240>
 8000274:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000278:	bf08      	it	eq
 800027a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800027e:	f150 0000 	adcs.w	r0, r0, #0
 8000282:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000286:	ea41 0105 	orr.w	r1, r1, r5
 800028a:	bd30      	pop	{r4, r5, pc}
 800028c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000290:	4140      	adcs	r0, r0
 8000292:	eb41 0101 	adc.w	r1, r1, r1
 8000296:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029a:	f1a4 0401 	sub.w	r4, r4, #1
 800029e:	d1e9      	bne.n	8000274 <__adddf3+0x10c>
 80002a0:	f091 0f00 	teq	r1, #0
 80002a4:	bf04      	itt	eq
 80002a6:	4601      	moveq	r1, r0
 80002a8:	2000      	moveq	r0, #0
 80002aa:	fab1 f381 	clz	r3, r1
 80002ae:	bf08      	it	eq
 80002b0:	3320      	addeq	r3, #32
 80002b2:	f1a3 030b 	sub.w	r3, r3, #11
 80002b6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ba:	da0c      	bge.n	80002d6 <__adddf3+0x16e>
 80002bc:	320c      	adds	r2, #12
 80002be:	dd08      	ble.n	80002d2 <__adddf3+0x16a>
 80002c0:	f102 0c14 	add.w	ip, r2, #20
 80002c4:	f1c2 020c 	rsb	r2, r2, #12
 80002c8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002cc:	fa21 f102 	lsr.w	r1, r1, r2
 80002d0:	e00c      	b.n	80002ec <__adddf3+0x184>
 80002d2:	f102 0214 	add.w	r2, r2, #20
 80002d6:	bfd8      	it	le
 80002d8:	f1c2 0c20 	rsble	ip, r2, #32
 80002dc:	fa01 f102 	lsl.w	r1, r1, r2
 80002e0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e4:	bfdc      	itt	le
 80002e6:	ea41 010c 	orrle.w	r1, r1, ip
 80002ea:	4090      	lslle	r0, r2
 80002ec:	1ae4      	subs	r4, r4, r3
 80002ee:	bfa2      	ittt	ge
 80002f0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f4:	4329      	orrge	r1, r5
 80002f6:	bd30      	popge	{r4, r5, pc}
 80002f8:	ea6f 0404 	mvn.w	r4, r4
 80002fc:	3c1f      	subs	r4, #31
 80002fe:	da1c      	bge.n	800033a <__adddf3+0x1d2>
 8000300:	340c      	adds	r4, #12
 8000302:	dc0e      	bgt.n	8000322 <__adddf3+0x1ba>
 8000304:	f104 0414 	add.w	r4, r4, #20
 8000308:	f1c4 0220 	rsb	r2, r4, #32
 800030c:	fa20 f004 	lsr.w	r0, r0, r4
 8000310:	fa01 f302 	lsl.w	r3, r1, r2
 8000314:	ea40 0003 	orr.w	r0, r0, r3
 8000318:	fa21 f304 	lsr.w	r3, r1, r4
 800031c:	ea45 0103 	orr.w	r1, r5, r3
 8000320:	bd30      	pop	{r4, r5, pc}
 8000322:	f1c4 040c 	rsb	r4, r4, #12
 8000326:	f1c4 0220 	rsb	r2, r4, #32
 800032a:	fa20 f002 	lsr.w	r0, r0, r2
 800032e:	fa01 f304 	lsl.w	r3, r1, r4
 8000332:	ea40 0003 	orr.w	r0, r0, r3
 8000336:	4629      	mov	r1, r5
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	fa21 f004 	lsr.w	r0, r1, r4
 800033e:	4629      	mov	r1, r5
 8000340:	bd30      	pop	{r4, r5, pc}
 8000342:	f094 0f00 	teq	r4, #0
 8000346:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034a:	bf06      	itte	eq
 800034c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000350:	3401      	addeq	r4, #1
 8000352:	3d01      	subne	r5, #1
 8000354:	e74e      	b.n	80001f4 <__adddf3+0x8c>
 8000356:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035a:	bf18      	it	ne
 800035c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000360:	d029      	beq.n	80003b6 <__adddf3+0x24e>
 8000362:	ea94 0f05 	teq	r4, r5
 8000366:	bf08      	it	eq
 8000368:	ea90 0f02 	teqeq	r0, r2
 800036c:	d005      	beq.n	800037a <__adddf3+0x212>
 800036e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000372:	bf04      	itt	eq
 8000374:	4619      	moveq	r1, r3
 8000376:	4610      	moveq	r0, r2
 8000378:	bd30      	pop	{r4, r5, pc}
 800037a:	ea91 0f03 	teq	r1, r3
 800037e:	bf1e      	ittt	ne
 8000380:	2100      	movne	r1, #0
 8000382:	2000      	movne	r0, #0
 8000384:	bd30      	popne	{r4, r5, pc}
 8000386:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038a:	d105      	bne.n	8000398 <__adddf3+0x230>
 800038c:	0040      	lsls	r0, r0, #1
 800038e:	4149      	adcs	r1, r1
 8000390:	bf28      	it	cs
 8000392:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000396:	bd30      	pop	{r4, r5, pc}
 8000398:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800039c:	bf3c      	itt	cc
 800039e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a2:	bd30      	popcc	{r4, r5, pc}
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b0:	f04f 0000 	mov.w	r0, #0
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ba:	bf1a      	itte	ne
 80003bc:	4619      	movne	r1, r3
 80003be:	4610      	movne	r0, r2
 80003c0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c4:	bf1c      	itt	ne
 80003c6:	460b      	movne	r3, r1
 80003c8:	4602      	movne	r2, r0
 80003ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003ce:	bf06      	itte	eq
 80003d0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d4:	ea91 0f03 	teqeq	r1, r3
 80003d8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	bf00      	nop

080003e0 <__aeabi_ui2d>:
 80003e0:	f090 0f00 	teq	r0, #0
 80003e4:	bf04      	itt	eq
 80003e6:	2100      	moveq	r1, #0
 80003e8:	4770      	bxeq	lr
 80003ea:	b530      	push	{r4, r5, lr}
 80003ec:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f4:	f04f 0500 	mov.w	r5, #0
 80003f8:	f04f 0100 	mov.w	r1, #0
 80003fc:	e750      	b.n	80002a0 <__adddf3+0x138>
 80003fe:	bf00      	nop

08000400 <__aeabi_i2d>:
 8000400:	f090 0f00 	teq	r0, #0
 8000404:	bf04      	itt	eq
 8000406:	2100      	moveq	r1, #0
 8000408:	4770      	bxeq	lr
 800040a:	b530      	push	{r4, r5, lr}
 800040c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000410:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000414:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000418:	bf48      	it	mi
 800041a:	4240      	negmi	r0, r0
 800041c:	f04f 0100 	mov.w	r1, #0
 8000420:	e73e      	b.n	80002a0 <__adddf3+0x138>
 8000422:	bf00      	nop

08000424 <__aeabi_f2d>:
 8000424:	0042      	lsls	r2, r0, #1
 8000426:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042a:	ea4f 0131 	mov.w	r1, r1, rrx
 800042e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000432:	bf1f      	itttt	ne
 8000434:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000438:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800043c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000440:	4770      	bxne	lr
 8000442:	f092 0f00 	teq	r2, #0
 8000446:	bf14      	ite	ne
 8000448:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800044c:	4770      	bxeq	lr
 800044e:	b530      	push	{r4, r5, lr}
 8000450:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000454:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000458:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800045c:	e720      	b.n	80002a0 <__adddf3+0x138>
 800045e:	bf00      	nop

08000460 <__aeabi_ul2d>:
 8000460:	ea50 0201 	orrs.w	r2, r0, r1
 8000464:	bf08      	it	eq
 8000466:	4770      	bxeq	lr
 8000468:	b530      	push	{r4, r5, lr}
 800046a:	f04f 0500 	mov.w	r5, #0
 800046e:	e00a      	b.n	8000486 <__aeabi_l2d+0x16>

08000470 <__aeabi_l2d>:
 8000470:	ea50 0201 	orrs.w	r2, r0, r1
 8000474:	bf08      	it	eq
 8000476:	4770      	bxeq	lr
 8000478:	b530      	push	{r4, r5, lr}
 800047a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047e:	d502      	bpl.n	8000486 <__aeabi_l2d+0x16>
 8000480:	4240      	negs	r0, r0
 8000482:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000486:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000492:	f43f aedc 	beq.w	800024e <__adddf3+0xe6>
 8000496:	f04f 0203 	mov.w	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a6:	bf18      	it	ne
 80004a8:	3203      	addne	r2, #3
 80004aa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ae:	f1c2 0320 	rsb	r3, r2, #32
 80004b2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b6:	fa20 f002 	lsr.w	r0, r0, r2
 80004ba:	fa01 fe03 	lsl.w	lr, r1, r3
 80004be:	ea40 000e 	orr.w	r0, r0, lr
 80004c2:	fa21 f102 	lsr.w	r1, r1, r2
 80004c6:	4414      	add	r4, r2
 80004c8:	e6c1      	b.n	800024e <__adddf3+0xe6>
 80004ca:	bf00      	nop

080004cc <__aeabi_dmul>:
 80004cc:	b570      	push	{r4, r5, r6, lr}
 80004ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004da:	bf1d      	ittte	ne
 80004dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e0:	ea94 0f0c 	teqne	r4, ip
 80004e4:	ea95 0f0c 	teqne	r5, ip
 80004e8:	f000 f8de 	bleq	80006a8 <__aeabi_dmul+0x1dc>
 80004ec:	442c      	add	r4, r5
 80004ee:	ea81 0603 	eor.w	r6, r1, r3
 80004f2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fe:	bf18      	it	ne
 8000500:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000504:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000508:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800050c:	d038      	beq.n	8000580 <__aeabi_dmul+0xb4>
 800050e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000522:	f04f 0600 	mov.w	r6, #0
 8000526:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052a:	f09c 0f00 	teq	ip, #0
 800052e:	bf18      	it	ne
 8000530:	f04e 0e01 	orrne.w	lr, lr, #1
 8000534:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000538:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 800053c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000540:	d204      	bcs.n	800054c <__aeabi_dmul+0x80>
 8000542:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000546:	416d      	adcs	r5, r5
 8000548:	eb46 0606 	adc.w	r6, r6, r6
 800054c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000550:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000554:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000558:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800055c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000560:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000564:	bf88      	it	hi
 8000566:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056a:	d81e      	bhi.n	80005aa <__aeabi_dmul+0xde>
 800056c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000570:	bf08      	it	eq
 8000572:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000576:	f150 0000 	adcs.w	r0, r0, #0
 800057a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057e:	bd70      	pop	{r4, r5, r6, pc}
 8000580:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000584:	ea46 0101 	orr.w	r1, r6, r1
 8000588:	ea40 0002 	orr.w	r0, r0, r2
 800058c:	ea81 0103 	eor.w	r1, r1, r3
 8000590:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000594:	bfc2      	ittt	gt
 8000596:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059e:	bd70      	popgt	{r4, r5, r6, pc}
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f04f 0e00 	mov.w	lr, #0
 80005a8:	3c01      	subs	r4, #1
 80005aa:	f300 80ab 	bgt.w	8000704 <__aeabi_dmul+0x238>
 80005ae:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b2:	bfde      	ittt	le
 80005b4:	2000      	movle	r0, #0
 80005b6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd70      	pople	{r4, r5, r6, pc}
 80005bc:	f1c4 0400 	rsb	r4, r4, #0
 80005c0:	3c20      	subs	r4, #32
 80005c2:	da35      	bge.n	8000630 <__aeabi_dmul+0x164>
 80005c4:	340c      	adds	r4, #12
 80005c6:	dc1b      	bgt.n	8000600 <__aeabi_dmul+0x134>
 80005c8:	f104 0414 	add.w	r4, r4, #20
 80005cc:	f1c4 0520 	rsb	r5, r4, #32
 80005d0:	fa00 f305 	lsl.w	r3, r0, r5
 80005d4:	fa20 f004 	lsr.w	r0, r0, r4
 80005d8:	fa01 f205 	lsl.w	r2, r1, r5
 80005dc:	ea40 0002 	orr.w	r0, r0, r2
 80005e0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005ec:	fa21 f604 	lsr.w	r6, r1, r4
 80005f0:	eb42 0106 	adc.w	r1, r2, r6
 80005f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f8:	bf08      	it	eq
 80005fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fe:	bd70      	pop	{r4, r5, r6, pc}
 8000600:	f1c4 040c 	rsb	r4, r4, #12
 8000604:	f1c4 0520 	rsb	r5, r4, #32
 8000608:	fa00 f304 	lsl.w	r3, r0, r4
 800060c:	fa20 f005 	lsr.w	r0, r0, r5
 8000610:	fa01 f204 	lsl.w	r2, r1, r4
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800061c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000620:	f141 0100 	adc.w	r1, r1, #0
 8000624:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000628:	bf08      	it	eq
 800062a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f1c4 0520 	rsb	r5, r4, #32
 8000634:	fa00 f205 	lsl.w	r2, r0, r5
 8000638:	ea4e 0e02 	orr.w	lr, lr, r2
 800063c:	fa20 f304 	lsr.w	r3, r0, r4
 8000640:	fa01 f205 	lsl.w	r2, r1, r5
 8000644:	ea43 0302 	orr.w	r3, r3, r2
 8000648:	fa21 f004 	lsr.w	r0, r1, r4
 800064c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000650:	fa21 f204 	lsr.w	r2, r1, r4
 8000654:	ea20 0002 	bic.w	r0, r0, r2
 8000658:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800065c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000660:	bf08      	it	eq
 8000662:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	f094 0f00 	teq	r4, #0
 800066c:	d10f      	bne.n	800068e <__aeabi_dmul+0x1c2>
 800066e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000672:	0040      	lsls	r0, r0, #1
 8000674:	eb41 0101 	adc.w	r1, r1, r1
 8000678:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800067c:	bf08      	it	eq
 800067e:	3c01      	subeq	r4, #1
 8000680:	d0f7      	beq.n	8000672 <__aeabi_dmul+0x1a6>
 8000682:	ea41 0106 	orr.w	r1, r1, r6
 8000686:	f095 0f00 	teq	r5, #0
 800068a:	bf18      	it	ne
 800068c:	4770      	bxne	lr
 800068e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000692:	0052      	lsls	r2, r2, #1
 8000694:	eb43 0303 	adc.w	r3, r3, r3
 8000698:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800069c:	bf08      	it	eq
 800069e:	3d01      	subeq	r5, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1c6>
 80006a2:	ea43 0306 	orr.w	r3, r3, r6
 80006a6:	4770      	bx	lr
 80006a8:	ea94 0f0c 	teq	r4, ip
 80006ac:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b0:	bf18      	it	ne
 80006b2:	ea95 0f0c 	teqne	r5, ip
 80006b6:	d00c      	beq.n	80006d2 <__aeabi_dmul+0x206>
 80006b8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006bc:	bf18      	it	ne
 80006be:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c2:	d1d1      	bne.n	8000668 <__aeabi_dmul+0x19c>
 80006c4:	ea81 0103 	eor.w	r1, r1, r3
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	f04f 0000 	mov.w	r0, #0
 80006d0:	bd70      	pop	{r4, r5, r6, pc}
 80006d2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d6:	bf06      	itte	eq
 80006d8:	4610      	moveq	r0, r2
 80006da:	4619      	moveq	r1, r3
 80006dc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e0:	d019      	beq.n	8000716 <__aeabi_dmul+0x24a>
 80006e2:	ea94 0f0c 	teq	r4, ip
 80006e6:	d102      	bne.n	80006ee <__aeabi_dmul+0x222>
 80006e8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006ec:	d113      	bne.n	8000716 <__aeabi_dmul+0x24a>
 80006ee:	ea95 0f0c 	teq	r5, ip
 80006f2:	d105      	bne.n	8000700 <__aeabi_dmul+0x234>
 80006f4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f8:	bf1c      	itt	ne
 80006fa:	4610      	movne	r0, r2
 80006fc:	4619      	movne	r1, r3
 80006fe:	d10a      	bne.n	8000716 <__aeabi_dmul+0x24a>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800070c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000710:	f04f 0000 	mov.w	r0, #0
 8000714:	bd70      	pop	{r4, r5, r6, pc}
 8000716:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071e:	bd70      	pop	{r4, r5, r6, pc}

08000720 <__aeabi_ddiv>:
 8000720:	b570      	push	{r4, r5, r6, lr}
 8000722:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000726:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072e:	bf1d      	ittte	ne
 8000730:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000734:	ea94 0f0c 	teqne	r4, ip
 8000738:	ea95 0f0c 	teqne	r5, ip
 800073c:	f000 f8a7 	bleq	800088e <__aeabi_ddiv+0x16e>
 8000740:	eba4 0405 	sub.w	r4, r4, r5
 8000744:	ea81 0e03 	eor.w	lr, r1, r3
 8000748:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800074c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000750:	f000 8088 	beq.w	8000864 <__aeabi_ddiv+0x144>
 8000754:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000758:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800075c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000760:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000764:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000768:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800076c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000770:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000774:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000778:	429d      	cmp	r5, r3
 800077a:	bf08      	it	eq
 800077c:	4296      	cmpeq	r6, r2
 800077e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000782:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000786:	d202      	bcs.n	800078e <__aeabi_ddiv+0x6e>
 8000788:	085b      	lsrs	r3, r3, #1
 800078a:	ea4f 0232 	mov.w	r2, r2, rrx
 800078e:	1ab6      	subs	r6, r6, r2
 8000790:	eb65 0503 	sbc.w	r5, r5, r3
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007aa:	bf22      	ittt	cs
 80007ac:	1ab6      	subcs	r6, r6, r2
 80007ae:	4675      	movcs	r5, lr
 80007b0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	ebb6 0e02 	subs.w	lr, r6, r2
 80007be:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c2:	bf22      	ittt	cs
 80007c4:	1ab6      	subcs	r6, r6, r2
 80007c6:	4675      	movcs	r5, lr
 80007c8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007cc:	085b      	lsrs	r3, r3, #1
 80007ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007da:	bf22      	ittt	cs
 80007dc:	1ab6      	subcs	r6, r6, r2
 80007de:	4675      	movcs	r5, lr
 80007e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e4:	085b      	lsrs	r3, r3, #1
 80007e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ea:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ee:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f2:	bf22      	ittt	cs
 80007f4:	1ab6      	subcs	r6, r6, r2
 80007f6:	4675      	movcs	r5, lr
 80007f8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007fc:	ea55 0e06 	orrs.w	lr, r5, r6
 8000800:	d018      	beq.n	8000834 <__aeabi_ddiv+0x114>
 8000802:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000806:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000812:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000816:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081e:	d1c0      	bne.n	80007a2 <__aeabi_ddiv+0x82>
 8000820:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000824:	d10b      	bne.n	800083e <__aeabi_ddiv+0x11e>
 8000826:	ea41 0100 	orr.w	r1, r1, r0
 800082a:	f04f 0000 	mov.w	r0, #0
 800082e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000832:	e7b6      	b.n	80007a2 <__aeabi_ddiv+0x82>
 8000834:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000838:	bf04      	itt	eq
 800083a:	4301      	orreq	r1, r0
 800083c:	2000      	moveq	r0, #0
 800083e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000842:	bf88      	it	hi
 8000844:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000848:	f63f aeaf 	bhi.w	80005aa <__aeabi_dmul+0xde>
 800084c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000850:	bf04      	itt	eq
 8000852:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000856:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085a:	f150 0000 	adcs.w	r0, r0, #0
 800085e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000862:	bd70      	pop	{r4, r5, r6, pc}
 8000864:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000868:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800086c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000870:	bfc2      	ittt	gt
 8000872:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000876:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087a:	bd70      	popgt	{r4, r5, r6, pc}
 800087c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000880:	f04f 0e00 	mov.w	lr, #0
 8000884:	3c01      	subs	r4, #1
 8000886:	e690      	b.n	80005aa <__aeabi_dmul+0xde>
 8000888:	ea45 0e06 	orr.w	lr, r5, r6
 800088c:	e68d      	b.n	80005aa <__aeabi_dmul+0xde>
 800088e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000892:	ea94 0f0c 	teq	r4, ip
 8000896:	bf08      	it	eq
 8000898:	ea95 0f0c 	teqeq	r5, ip
 800089c:	f43f af3b 	beq.w	8000716 <__aeabi_dmul+0x24a>
 80008a0:	ea94 0f0c 	teq	r4, ip
 80008a4:	d10a      	bne.n	80008bc <__aeabi_ddiv+0x19c>
 80008a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008aa:	f47f af34 	bne.w	8000716 <__aeabi_dmul+0x24a>
 80008ae:	ea95 0f0c 	teq	r5, ip
 80008b2:	f47f af25 	bne.w	8000700 <__aeabi_dmul+0x234>
 80008b6:	4610      	mov	r0, r2
 80008b8:	4619      	mov	r1, r3
 80008ba:	e72c      	b.n	8000716 <__aeabi_dmul+0x24a>
 80008bc:	ea95 0f0c 	teq	r5, ip
 80008c0:	d106      	bne.n	80008d0 <__aeabi_ddiv+0x1b0>
 80008c2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c6:	f43f aefd 	beq.w	80006c4 <__aeabi_dmul+0x1f8>
 80008ca:	4610      	mov	r0, r2
 80008cc:	4619      	mov	r1, r3
 80008ce:	e722      	b.n	8000716 <__aeabi_dmul+0x24a>
 80008d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d4:	bf18      	it	ne
 80008d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008da:	f47f aec5 	bne.w	8000668 <__aeabi_dmul+0x19c>
 80008de:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e2:	f47f af0d 	bne.w	8000700 <__aeabi_dmul+0x234>
 80008e6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ea:	f47f aeeb 	bne.w	80006c4 <__aeabi_dmul+0x1f8>
 80008ee:	e712      	b.n	8000716 <__aeabi_dmul+0x24a>

080008f0 <__gedf2>:
 80008f0:	f04f 3cff 	mov.w	ip, #4294967295
 80008f4:	e006      	b.n	8000904 <__cmpdf2+0x4>
 80008f6:	bf00      	nop

080008f8 <__ledf2>:
 80008f8:	f04f 0c01 	mov.w	ip, #1
 80008fc:	e002      	b.n	8000904 <__cmpdf2+0x4>
 80008fe:	bf00      	nop

08000900 <__cmpdf2>:
 8000900:	f04f 0c01 	mov.w	ip, #1
 8000904:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000908:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800090c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000914:	bf18      	it	ne
 8000916:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091a:	d01b      	beq.n	8000954 <__cmpdf2+0x54>
 800091c:	b001      	add	sp, #4
 800091e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000922:	bf0c      	ite	eq
 8000924:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000928:	ea91 0f03 	teqne	r1, r3
 800092c:	bf02      	ittt	eq
 800092e:	ea90 0f02 	teqeq	r0, r2
 8000932:	2000      	moveq	r0, #0
 8000934:	4770      	bxeq	lr
 8000936:	f110 0f00 	cmn.w	r0, #0
 800093a:	ea91 0f03 	teq	r1, r3
 800093e:	bf58      	it	pl
 8000940:	4299      	cmppl	r1, r3
 8000942:	bf08      	it	eq
 8000944:	4290      	cmpeq	r0, r2
 8000946:	bf2c      	ite	cs
 8000948:	17d8      	asrcs	r0, r3, #31
 800094a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094e:	f040 0001 	orr.w	r0, r0, #1
 8000952:	4770      	bx	lr
 8000954:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000958:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800095c:	d102      	bne.n	8000964 <__cmpdf2+0x64>
 800095e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000962:	d107      	bne.n	8000974 <__cmpdf2+0x74>
 8000964:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000968:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800096c:	d1d6      	bne.n	800091c <__cmpdf2+0x1c>
 800096e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000972:	d0d3      	beq.n	800091c <__cmpdf2+0x1c>
 8000974:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop

0800097c <__aeabi_cdrcmple>:
 800097c:	4684      	mov	ip, r0
 800097e:	4610      	mov	r0, r2
 8000980:	4662      	mov	r2, ip
 8000982:	468c      	mov	ip, r1
 8000984:	4619      	mov	r1, r3
 8000986:	4663      	mov	r3, ip
 8000988:	e000      	b.n	800098c <__aeabi_cdcmpeq>
 800098a:	bf00      	nop

0800098c <__aeabi_cdcmpeq>:
 800098c:	b501      	push	{r0, lr}
 800098e:	f7ff ffb7 	bl	8000900 <__cmpdf2>
 8000992:	2800      	cmp	r0, #0
 8000994:	bf48      	it	mi
 8000996:	f110 0f00 	cmnmi.w	r0, #0
 800099a:	bd01      	pop	{r0, pc}

0800099c <__aeabi_dcmpeq>:
 800099c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a0:	f7ff fff4 	bl	800098c <__aeabi_cdcmpeq>
 80009a4:	bf0c      	ite	eq
 80009a6:	2001      	moveq	r0, #1
 80009a8:	2000      	movne	r0, #0
 80009aa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ae:	bf00      	nop

080009b0 <__aeabi_dcmplt>:
 80009b0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b4:	f7ff ffea 	bl	800098c <__aeabi_cdcmpeq>
 80009b8:	bf34      	ite	cc
 80009ba:	2001      	movcc	r0, #1
 80009bc:	2000      	movcs	r0, #0
 80009be:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c2:	bf00      	nop

080009c4 <__aeabi_dcmple>:
 80009c4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c8:	f7ff ffe0 	bl	800098c <__aeabi_cdcmpeq>
 80009cc:	bf94      	ite	ls
 80009ce:	2001      	movls	r0, #1
 80009d0:	2000      	movhi	r0, #0
 80009d2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d6:	bf00      	nop

080009d8 <__aeabi_dcmpge>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff ffce 	bl	800097c <__aeabi_cdrcmple>
 80009e0:	bf94      	ite	ls
 80009e2:	2001      	movls	r0, #1
 80009e4:	2000      	movhi	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmpgt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffc4 	bl	800097c <__aeabi_cdrcmple>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmpun>:
 8000a00:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d102      	bne.n	8000a10 <__aeabi_dcmpun+0x10>
 8000a0a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0e:	d10a      	bne.n	8000a26 <__aeabi_dcmpun+0x26>
 8000a10:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a18:	d102      	bne.n	8000a20 <__aeabi_dcmpun+0x20>
 8000a1a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1e:	d102      	bne.n	8000a26 <__aeabi_dcmpun+0x26>
 8000a20:	f04f 0000 	mov.w	r0, #0
 8000a24:	4770      	bx	lr
 8000a26:	f04f 0001 	mov.w	r0, #1
 8000a2a:	4770      	bx	lr

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_frsub>:
 8000a6c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a70:	e002      	b.n	8000a78 <__addsf3>
 8000a72:	bf00      	nop

08000a74 <__aeabi_fsub>:
 8000a74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a78 <__addsf3>:
 8000a78:	0042      	lsls	r2, r0, #1
 8000a7a:	bf1f      	itttt	ne
 8000a7c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a80:	ea92 0f03 	teqne	r2, r3
 8000a84:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000a88:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a8c:	d06a      	beq.n	8000b64 <__addsf3+0xec>
 8000a8e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000a92:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000a96:	bfc1      	itttt	gt
 8000a98:	18d2      	addgt	r2, r2, r3
 8000a9a:	4041      	eorgt	r1, r0
 8000a9c:	4048      	eorgt	r0, r1
 8000a9e:	4041      	eorgt	r1, r0
 8000aa0:	bfb8      	it	lt
 8000aa2:	425b      	neglt	r3, r3
 8000aa4:	2b19      	cmp	r3, #25
 8000aa6:	bf88      	it	hi
 8000aa8:	4770      	bxhi	lr
 8000aaa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ab6:	bf18      	it	ne
 8000ab8:	4240      	negne	r0, r0
 8000aba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000abe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ac2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ac6:	bf18      	it	ne
 8000ac8:	4249      	negne	r1, r1
 8000aca:	ea92 0f03 	teq	r2, r3
 8000ace:	d03f      	beq.n	8000b50 <__addsf3+0xd8>
 8000ad0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ad4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ad8:	eb10 000c 	adds.w	r0, r0, ip
 8000adc:	f1c3 0320 	rsb	r3, r3, #32
 8000ae0:	fa01 f103 	lsl.w	r1, r1, r3
 8000ae4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ae8:	d502      	bpl.n	8000af0 <__addsf3+0x78>
 8000aea:	4249      	negs	r1, r1
 8000aec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000af0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000af4:	d313      	bcc.n	8000b1e <__addsf3+0xa6>
 8000af6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000afa:	d306      	bcc.n	8000b0a <__addsf3+0x92>
 8000afc:	0840      	lsrs	r0, r0, #1
 8000afe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b02:	f102 0201 	add.w	r2, r2, #1
 8000b06:	2afe      	cmp	r2, #254	; 0xfe
 8000b08:	d251      	bcs.n	8000bae <__addsf3+0x136>
 8000b0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b12:	bf08      	it	eq
 8000b14:	f020 0001 	biceq.w	r0, r0, #1
 8000b18:	ea40 0003 	orr.w	r0, r0, r3
 8000b1c:	4770      	bx	lr
 8000b1e:	0049      	lsls	r1, r1, #1
 8000b20:	eb40 0000 	adc.w	r0, r0, r0
 8000b24:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000b28:	f1a2 0201 	sub.w	r2, r2, #1
 8000b2c:	d1ed      	bne.n	8000b0a <__addsf3+0x92>
 8000b2e:	fab0 fc80 	clz	ip, r0
 8000b32:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b36:	ebb2 020c 	subs.w	r2, r2, ip
 8000b3a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b3e:	bfaa      	itet	ge
 8000b40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b44:	4252      	neglt	r2, r2
 8000b46:	4318      	orrge	r0, r3
 8000b48:	bfbc      	itt	lt
 8000b4a:	40d0      	lsrlt	r0, r2
 8000b4c:	4318      	orrlt	r0, r3
 8000b4e:	4770      	bx	lr
 8000b50:	f092 0f00 	teq	r2, #0
 8000b54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b58:	bf06      	itte	eq
 8000b5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b5e:	3201      	addeq	r2, #1
 8000b60:	3b01      	subne	r3, #1
 8000b62:	e7b5      	b.n	8000ad0 <__addsf3+0x58>
 8000b64:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b6c:	bf18      	it	ne
 8000b6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b72:	d021      	beq.n	8000bb8 <__addsf3+0x140>
 8000b74:	ea92 0f03 	teq	r2, r3
 8000b78:	d004      	beq.n	8000b84 <__addsf3+0x10c>
 8000b7a:	f092 0f00 	teq	r2, #0
 8000b7e:	bf08      	it	eq
 8000b80:	4608      	moveq	r0, r1
 8000b82:	4770      	bx	lr
 8000b84:	ea90 0f01 	teq	r0, r1
 8000b88:	bf1c      	itt	ne
 8000b8a:	2000      	movne	r0, #0
 8000b8c:	4770      	bxne	lr
 8000b8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000b92:	d104      	bne.n	8000b9e <__addsf3+0x126>
 8000b94:	0040      	lsls	r0, r0, #1
 8000b96:	bf28      	it	cs
 8000b98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	4770      	bx	lr
 8000b9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ba2:	bf3c      	itt	cc
 8000ba4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ba8:	4770      	bxcc	lr
 8000baa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bb6:	4770      	bx	lr
 8000bb8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bbc:	bf16      	itet	ne
 8000bbe:	4608      	movne	r0, r1
 8000bc0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bc4:	4601      	movne	r1, r0
 8000bc6:	0242      	lsls	r2, r0, #9
 8000bc8:	bf06      	itte	eq
 8000bca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bce:	ea90 0f01 	teqeq	r0, r1
 8000bd2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_ui2f>:
 8000bd8:	f04f 0300 	mov.w	r3, #0
 8000bdc:	e004      	b.n	8000be8 <__aeabi_i2f+0x8>
 8000bde:	bf00      	nop

08000be0 <__aeabi_i2f>:
 8000be0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	bf48      	it	mi
 8000be6:	4240      	negmi	r0, r0
 8000be8:	ea5f 0c00 	movs.w	ip, r0
 8000bec:	bf08      	it	eq
 8000bee:	4770      	bxeq	lr
 8000bf0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000bf4:	4601      	mov	r1, r0
 8000bf6:	f04f 0000 	mov.w	r0, #0
 8000bfa:	e01c      	b.n	8000c36 <__aeabi_l2f+0x2a>

08000bfc <__aeabi_ul2f>:
 8000bfc:	ea50 0201 	orrs.w	r2, r0, r1
 8000c00:	bf08      	it	eq
 8000c02:	4770      	bxeq	lr
 8000c04:	f04f 0300 	mov.w	r3, #0
 8000c08:	e00a      	b.n	8000c20 <__aeabi_l2f+0x14>
 8000c0a:	bf00      	nop

08000c0c <__aeabi_l2f>:
 8000c0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c10:	bf08      	it	eq
 8000c12:	4770      	bxeq	lr
 8000c14:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c18:	d502      	bpl.n	8000c20 <__aeabi_l2f+0x14>
 8000c1a:	4240      	negs	r0, r0
 8000c1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c20:	ea5f 0c01 	movs.w	ip, r1
 8000c24:	bf02      	ittt	eq
 8000c26:	4684      	moveq	ip, r0
 8000c28:	4601      	moveq	r1, r0
 8000c2a:	2000      	moveq	r0, #0
 8000c2c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c30:	bf08      	it	eq
 8000c32:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c36:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c3a:	fabc f28c 	clz	r2, ip
 8000c3e:	3a08      	subs	r2, #8
 8000c40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c44:	db10      	blt.n	8000c68 <__aeabi_l2f+0x5c>
 8000c46:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c50:	f1c2 0220 	rsb	r2, r2, #32
 8000c54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c58:	fa20 f202 	lsr.w	r2, r0, r2
 8000c5c:	eb43 0002 	adc.w	r0, r3, r2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f102 0220 	add.w	r2, r2, #32
 8000c6c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c70:	f1c2 0220 	rsb	r2, r2, #32
 8000c74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c78:	fa21 f202 	lsr.w	r2, r1, r2
 8000c7c:	eb43 0002 	adc.w	r0, r3, r2
 8000c80:	bf08      	it	eq
 8000c82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c86:	4770      	bx	lr

08000c88 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 8000c90:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <NVIC_PriorityGroupConfig+0x20>)
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9c:	60d3      	str	r3, [r2, #12]
}
 8000c9e:	bf00      	nop
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bc80      	pop	{r7}
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b087      	sub	sp, #28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	617b      	str	r3, [r7, #20]
 8000cb8:	2300      	movs	r3, #0
 8000cba:	613b      	str	r3, [r7, #16]
 8000cbc:	230f      	movs	r3, #15
 8000cbe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	78db      	ldrb	r3, [r3, #3]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d03a      	beq.n	8000d3e <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8000cc8:	4b27      	ldr	r3, [pc, #156]	; (8000d68 <NVIC_Init+0xbc>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	0a1b      	lsrs	r3, r3, #8
 8000cd0:	f003 0307 	and.w	r3, r3, #7
 8000cd4:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	f1c3 0304 	rsb	r3, r3, #4
 8000cdc:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8000ce6:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	785b      	ldrb	r3, [r3, #1]
 8000cec:	461a      	mov	r2, r3
 8000cee:	693b      	ldr	r3, [r7, #16]
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	789b      	ldrb	r3, [r3, #2]
 8000cfa:	461a      	mov	r2, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	4013      	ands	r3, r2
 8000d00:	697a      	ldr	r2, [r7, #20]
 8000d02:	4313      	orrs	r3, r2
 8000d04:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 8000d06:	697b      	ldr	r3, [r7, #20]
 8000d08:	011b      	lsls	r3, r3, #4
 8000d0a:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000d0c:	4a17      	ldr	r2, [pc, #92]	; (8000d6c <NVIC_Init+0xc0>)
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	6979      	ldr	r1, [r7, #20]
 8000d14:	b2c9      	uxtb	r1, r1
 8000d16:	4413      	add	r3, r2
 8000d18:	460a      	mov	r2, r1
 8000d1a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d1e:	4a13      	ldr	r2, [pc, #76]	; (8000d6c <NVIC_Init+0xc0>)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	095b      	lsrs	r3, r3, #5
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	f003 031f 	and.w	r3, r3, #31
 8000d32:	2101      	movs	r1, #1
 8000d34:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d38:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000d3c:	e00f      	b.n	8000d5e <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d3e:	490b      	ldr	r1, [pc, #44]	; (8000d6c <NVIC_Init+0xc0>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	095b      	lsrs	r3, r3, #5
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	f003 031f 	and.w	r3, r3, #31
 8000d52:	2201      	movs	r2, #1
 8000d54:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000d56:	f100 0320 	add.w	r3, r0, #32
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000d5e:	bf00      	nop
 8000d60:	371c      	adds	r7, #28
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr
 8000d68:	e000ed00 	.word	0xe000ed00
 8000d6c:	e000e100 	.word	0xe000e100

08000d70 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <EXTI_GetITStatus+0x44>)
 8000d82:	681a      	ldr	r2, [r3, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	4013      	ands	r3, r2
 8000d88:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 8000d8a:	4b0a      	ldr	r3, [pc, #40]	; (8000db4 <EXTI_GetITStatus+0x44>)
 8000d8c:	695a      	ldr	r2, [r3, #20]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d005      	beq.n	8000da2 <EXTI_GetITStatus+0x32>
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d002      	beq.n	8000da2 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	e001      	b.n	8000da6 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8000da2:	2300      	movs	r3, #0
 8000da4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da8:	4618      	mov	r0, r3
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bc80      	pop	{r7}
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop
 8000db4:	40010400 	.word	0x40010400

08000db8 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8000dc0:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <EXTI_ClearITPendingBit+0x18>)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	6153      	str	r3, [r2, #20]
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bc80      	pop	{r7}
 8000dce:	4770      	bx	lr
 8000dd0:	40010400 	.word	0x40010400

08000dd4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b089      	sub	sp, #36	; 0x24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000dde:	2300      	movs	r3, #0
 8000de0:	61fb      	str	r3, [r7, #28]
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
 8000de6:	2300      	movs	r3, #0
 8000de8:	61bb      	str	r3, [r7, #24]
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000dee:	2300      	movs	r3, #0
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	78db      	ldrb	r3, [r3, #3]
 8000dfa:	f003 030f 	and.w	r3, r3, #15
 8000dfe:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	78db      	ldrb	r3, [r3, #3]
 8000e04:	f003 0310 	and.w	r3, r3, #16
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d005      	beq.n	8000e18 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	789b      	ldrb	r3, [r3, #2]
 8000e10:	461a      	mov	r2, r3
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	4313      	orrs	r3, r2
 8000e16:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d044      	beq.n	8000eac <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61bb      	str	r3, [r7, #24]
 8000e2c:	e038      	b.n	8000ea0 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 8000e2e:	2201      	movs	r2, #1
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	881b      	ldrh	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000e44:	693a      	ldr	r2, [r7, #16]
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d126      	bne.n	8000e9a <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 8000e4c:	69bb      	ldr	r3, [r7, #24]
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000e52:	220f      	movs	r2, #15
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	4013      	ands	r3, r2
 8000e64:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000e66:	69fa      	ldr	r2, [r7, #28]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	78db      	ldrb	r3, [r3, #3]
 8000e78:	2b28      	cmp	r3, #40	; 0x28
 8000e7a:	d105      	bne.n	8000e88 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	69bb      	ldr	r3, [r7, #24]
 8000e80:	409a      	lsls	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	615a      	str	r2, [r3, #20]
 8000e86:	e008      	b.n	8000e9a <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	78db      	ldrb	r3, [r3, #3]
 8000e8c:	2b48      	cmp	r3, #72	; 0x48
 8000e8e:	d104      	bne.n	8000e9a <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000e90:	2201      	movs	r2, #1
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	409a      	lsls	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	61bb      	str	r3, [r7, #24]
 8000ea0:	69bb      	ldr	r3, [r7, #24]
 8000ea2:	2b07      	cmp	r3, #7
 8000ea4:	d9c3      	bls.n	8000e2e <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	881b      	ldrh	r3, [r3, #0]
 8000eb0:	2bff      	cmp	r3, #255	; 0xff
 8000eb2:	d946      	bls.n	8000f42 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61bb      	str	r3, [r7, #24]
 8000ebe:	e03a      	b.n	8000f36 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	3308      	adds	r3, #8
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	881b      	ldrh	r3, [r3, #0]
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d127      	bne.n	8000f30 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	009b      	lsls	r3, r3, #2
 8000ee4:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8000ee6:	220f      	movs	r2, #15
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	43db      	mvns	r3, r3
 8000ef4:	697a      	ldr	r2, [r7, #20]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000efa:	69fa      	ldr	r2, [r7, #28]
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	78db      	ldrb	r3, [r3, #3]
 8000f0c:	2b28      	cmp	r3, #40	; 0x28
 8000f0e:	d105      	bne.n	8000f1c <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000f10:	69bb      	ldr	r3, [r7, #24]
 8000f12:	3308      	adds	r3, #8
 8000f14:	2201      	movs	r2, #1
 8000f16:	409a      	lsls	r2, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	78db      	ldrb	r3, [r3, #3]
 8000f20:	2b48      	cmp	r3, #72	; 0x48
 8000f22:	d105      	bne.n	8000f30 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000f24:	69bb      	ldr	r3, [r7, #24]
 8000f26:	3308      	adds	r3, #8
 8000f28:	2201      	movs	r2, #1
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	3301      	adds	r3, #1
 8000f34:	61bb      	str	r3, [r7, #24]
 8000f36:	69bb      	ldr	r3, [r7, #24]
 8000f38:	2b07      	cmp	r3, #7
 8000f3a:	d9c1      	bls.n	8000ec0 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	697a      	ldr	r2, [r7, #20]
 8000f40:	605a      	str	r2, [r3, #4]
  }
}
 8000f42:	bf00      	nop
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr

08000f4c <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	8a1b      	ldrh	r3, [r3, #16]
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	b2db      	uxtb	r3, r3
}
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr

08000f66 <I2C_GetLastEvent>:
  *    I2C_Events in stm32f10x_i2c.h file.
  *    
  * @retval The last event
  */
uint32_t I2C_GetLastEvent(I2C_TypeDef* I2Cx)
{
 8000f66:	b480      	push	{r7}
 8000f68:	b087      	sub	sp, #28
 8000f6a:	af00      	add	r7, sp, #0
 8000f6c:	6078      	str	r0, [r7, #4]
  uint32_t lastevent = 0;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  uint32_t flag1 = 0, flag2 = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	613b      	str	r3, [r7, #16]
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	8a9b      	ldrh	r3, [r3, #20]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	613b      	str	r3, [r7, #16]
  flag2 = I2Cx->SR2;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	8b1b      	ldrh	r3, [r3, #24]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	60fb      	str	r3, [r7, #12]
  flag2 = flag2 << 16;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	041b      	lsls	r3, r3, #16
 8000f8e:	60fb      	str	r3, [r7, #12]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000f9a:	617b      	str	r3, [r7, #20]

  /* Return status */
  return lastevent;
 8000f9c:	697b      	ldr	r3, [r7, #20]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	371c      	adds	r7, #28
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr

08000fa8 <I2C_GetITStatus>:
  *                       Address matched flag (Slave mode)"ENDAD"
  *     @arg I2C_IT_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_IT (SET or RESET).
  */
ITStatus I2C_GetITStatus(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	6039      	str	r1, [r7, #0]
  ITStatus bitstatus = RESET;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_IT(I2C_IT));

  /* Check if the interrupt source is enabled or not */
  enablestatus = (uint32_t)(((I2C_IT & ITEN_Mask) >> 16) & (I2Cx->CR2)) ;
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	0c1b      	lsrs	r3, r3, #16
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	8892      	ldrh	r2, [r2, #4]
 8000fc2:	b292      	uxth	r2, r2
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000fca:	60bb      	str	r3, [r7, #8]
  
  /* Get bit[23:0] of the flag */
  I2C_IT &= FLAG_Mask;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000fd2:	603b      	str	r3, [r7, #0]

  /* Check the status of the specified I2C flag */
  if (((I2Cx->SR1 & I2C_IT) != (uint32_t)RESET) && enablestatus)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	8a9b      	ldrh	r3, [r3, #20]
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	461a      	mov	r2, r3
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d005      	beq.n	8000ff0 <I2C_GetITStatus+0x48>
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d002      	beq.n	8000ff0 <I2C_GetITStatus+0x48>
  {
    /* I2C_IT is set */
    bitstatus = SET;
 8000fea:	2301      	movs	r3, #1
 8000fec:	73fb      	strb	r3, [r7, #15]
 8000fee:	e001      	b.n	8000ff4 <I2C_GetITStatus+0x4c>
  }
  else
  {
    /* I2C_IT is reset */
    bitstatus = RESET;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the I2C_IT status */
  return  bitstatus;
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3714      	adds	r7, #20
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bc80      	pop	{r7}
 8000ffe:	4770      	bx	lr

08001000 <I2C_ClearITPendingBit>:
  *     I2C_SR1 register (I2C_GetITStatus()) followed by a write operation to 
  *     I2C_DR register (I2C_SendData()).
  * @retval None
  */
void I2C_ClearITPendingBit(I2C_TypeDef* I2Cx, uint32_t I2C_IT)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
 8001008:	6039      	str	r1, [r7, #0]
  uint32_t flagpos = 0;
 800100a:	2300      	movs	r3, #0
 800100c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_CLEAR_IT(I2C_IT));
  /* Get the I2C flag position */
  flagpos = I2C_IT & FLAG_Mask;
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001014:	60fb      	str	r3, [r7, #12]
  /* Clear the selected I2C flag */
  I2Cx->SR1 = (uint16_t)~flagpos;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	b29b      	uxth	r3, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	b29a      	uxth	r2, r3
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	829a      	strh	r2, [r3, #20]
}
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	bc80      	pop	{r7}
 800102a:	4770      	bx	lr

0800102c <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800102c:	b480      	push	{r7}
 800102e:	b087      	sub	sp, #28
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8001034:	2300      	movs	r3, #0
 8001036:	617b      	str	r3, [r7, #20]
 8001038:	2300      	movs	r3, #0
 800103a:	613b      	str	r3, [r7, #16]
 800103c:	2300      	movs	r3, #0
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001044:	4b4c      	ldr	r3, [pc, #304]	; (8001178 <RCC_GetClocksFreq+0x14c>)
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 030c 	and.w	r3, r3, #12
 800104c:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	2b04      	cmp	r3, #4
 8001052:	d007      	beq.n	8001064 <RCC_GetClocksFreq+0x38>
 8001054:	2b08      	cmp	r3, #8
 8001056:	d009      	beq.n	800106c <RCC_GetClocksFreq+0x40>
 8001058:	2b00      	cmp	r3, #0
 800105a:	d133      	bne.n	80010c4 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a47      	ldr	r2, [pc, #284]	; (800117c <RCC_GetClocksFreq+0x150>)
 8001060:	601a      	str	r2, [r3, #0]
      break;
 8001062:	e033      	b.n	80010cc <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a45      	ldr	r2, [pc, #276]	; (800117c <RCC_GetClocksFreq+0x150>)
 8001068:	601a      	str	r2, [r3, #0]
      break;
 800106a:	e02f      	b.n	80010cc <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 800106c:	4b42      	ldr	r3, [pc, #264]	; (8001178 <RCC_GetClocksFreq+0x14c>)
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001074:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 8001076:	4b40      	ldr	r3, [pc, #256]	; (8001178 <RCC_GetClocksFreq+0x14c>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800107e:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	0c9b      	lsrs	r3, r3, #18
 8001084:	3302      	adds	r3, #2
 8001086:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d106      	bne.n	800109c <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4a3b      	ldr	r2, [pc, #236]	; (8001180 <RCC_GetClocksFreq+0x154>)
 8001092:	fb02 f203 	mul.w	r2, r2, r3
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 800109a:	e017      	b.n	80010cc <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 800109c:	4b36      	ldr	r3, [pc, #216]	; (8001178 <RCC_GetClocksFreq+0x14c>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d006      	beq.n	80010b6 <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4a35      	ldr	r2, [pc, #212]	; (8001180 <RCC_GetClocksFreq+0x154>)
 80010ac:	fb02 f203 	mul.w	r2, r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	601a      	str	r2, [r3, #0]
      break;
 80010b4:	e00a      	b.n	80010cc <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	4a30      	ldr	r2, [pc, #192]	; (800117c <RCC_GetClocksFreq+0x150>)
 80010ba:	fb02 f203 	mul.w	r2, r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	601a      	str	r2, [r3, #0]
      break;
 80010c2:	e003      	b.n	80010cc <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a2d      	ldr	r2, [pc, #180]	; (800117c <RCC_GetClocksFreq+0x150>)
 80010c8:	601a      	str	r2, [r3, #0]
      break;
 80010ca:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 80010cc:	4b2a      	ldr	r3, [pc, #168]	; (8001178 <RCC_GetClocksFreq+0x14c>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010d4:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	091b      	lsrs	r3, r3, #4
 80010da:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 80010dc:	4a29      	ldr	r2, [pc, #164]	; (8001184 <RCC_GetClocksFreq+0x158>)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	4413      	add	r3, r2
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	40da      	lsrs	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 80010f4:	4b20      	ldr	r3, [pc, #128]	; (8001178 <RCC_GetClocksFreq+0x14c>)
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80010fc:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	0a1b      	lsrs	r3, r3, #8
 8001102:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001104:	4a1f      	ldr	r2, [pc, #124]	; (8001184 <RCC_GetClocksFreq+0x158>)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	4413      	add	r3, r2
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685a      	ldr	r2, [r3, #4]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	40da      	lsrs	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 800111c:	4b16      	ldr	r3, [pc, #88]	; (8001178 <RCC_GetClocksFreq+0x14c>)
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001124:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	0adb      	lsrs	r3, r3, #11
 800112a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800112c:	4a15      	ldr	r2, [pc, #84]	; (8001184 <RCC_GetClocksFreq+0x158>)
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	4413      	add	r3, r2
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685a      	ldr	r2, [r3, #4]
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	40da      	lsrs	r2, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <RCC_GetClocksFreq+0x14c>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800114c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	0b9b      	lsrs	r3, r3, #14
 8001152:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 8001154:	4a0c      	ldr	r2, [pc, #48]	; (8001188 <RCC_GetClocksFreq+0x15c>)
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	4413      	add	r3, r2
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68da      	ldr	r2, [r3, #12]
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	fbb2 f2f3 	udiv	r2, r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	611a      	str	r2, [r3, #16]
}
 800116e:	bf00      	nop
 8001170:	371c      	adds	r7, #28
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	40021000 	.word	0x40021000
 800117c:	007a1200 	.word	0x007a1200
 8001180:	003d0900 	.word	0x003d0900
 8001184:	20000004 	.word	0x20000004
 8001188:	20000014 	.word	0x20000014

0800118c <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	460b      	mov	r3, r1
 8001196:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001198:	78fb      	ldrb	r3, [r7, #3]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d006      	beq.n	80011ac <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800119e:	4909      	ldr	r1, [pc, #36]	; (80011c4 <RCC_APB2PeriphClockCmd+0x38>)
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <RCC_APB2PeriphClockCmd+0x38>)
 80011a2:	699a      	ldr	r2, [r3, #24]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80011aa:	e006      	b.n	80011ba <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80011ac:	4905      	ldr	r1, [pc, #20]	; (80011c4 <RCC_APB2PeriphClockCmd+0x38>)
 80011ae:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <RCC_APB2PeriphClockCmd+0x38>)
 80011b0:	699a      	ldr	r2, [r3, #24]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	43db      	mvns	r3, r3
 80011b6:	4013      	ands	r3, r2
 80011b8:	618b      	str	r3, [r1, #24]
}
 80011ba:	bf00      	nop
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr
 80011c4:	40021000 	.word	0x40021000

080011c8 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d006      	beq.n	80011e8 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80011da:	4909      	ldr	r1, [pc, #36]	; (8001200 <RCC_APB1PeriphClockCmd+0x38>)
 80011dc:	4b08      	ldr	r3, [pc, #32]	; (8001200 <RCC_APB1PeriphClockCmd+0x38>)
 80011de:	69da      	ldr	r2, [r3, #28]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80011e6:	e006      	b.n	80011f6 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80011e8:	4905      	ldr	r1, [pc, #20]	; (8001200 <RCC_APB1PeriphClockCmd+0x38>)
 80011ea:	4b05      	ldr	r3, [pc, #20]	; (8001200 <RCC_APB1PeriphClockCmd+0x38>)
 80011ec:	69da      	ldr	r2, [r3, #28]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	4013      	ands	r3, r2
 80011f4:	61cb      	str	r3, [r1, #28]
}
 80011f6:	bf00      	nop
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bc80      	pop	{r7}
 80011fe:	4770      	bx	lr
 8001200:	40021000 	.word	0x40021000

08001204 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800120e:	2300      	movs	r3, #0
 8001210:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	881b      	ldrh	r3, [r3, #0]
 8001216:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_Mask;
 8001218:	89fb      	ldrh	r3, [r7, #14]
 800121a:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 800121e:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	881a      	ldrh	r2, [r3, #0]
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	885b      	ldrh	r3, [r3, #2]
 8001228:	4313      	orrs	r3, r2
 800122a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	889b      	ldrh	r3, [r3, #4]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001230:	4313      	orrs	r3, r2
 8001232:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	88db      	ldrh	r3, [r3, #6]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001238:	4313      	orrs	r3, r2
 800123a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	891b      	ldrh	r3, [r3, #8]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001240:	4313      	orrs	r3, r2
 8001242:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001248:	4313      	orrs	r3, r2
 800124a:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	899b      	ldrh	r3, [r3, #12]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001250:	4313      	orrs	r3, r2
 8001252:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	89db      	ldrh	r3, [r3, #14]
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8001258:	4313      	orrs	r3, r2
 800125a:	b29a      	uxth	r2, r3
 800125c:	89fb      	ldrh	r3, [r7, #14]
 800125e:	4313      	orrs	r3, r2
 8001260:	81fb      	strh	r3, [r7, #14]
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	89fa      	ldrh	r2, [r7, #14]
 8001266:	801a      	strh	r2, [r3, #0]
  
  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= SPI_Mode_Select;		
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	8b9b      	ldrh	r3, [r3, #28]
 800126c:	b29b      	uxth	r3, r3
 800126e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001272:	b29a      	uxth	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	839a      	strh	r2, [r3, #28]

/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	8a1a      	ldrh	r2, [r3, #16]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	821a      	strh	r2, [r3, #16]
}
 8001280:	bf00      	nop
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	bc80      	pop	{r7}
 8001288:	4770      	bx	lr

0800128a <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 800128a:	b480      	push	{r7}
 800128c:	b083      	sub	sp, #12
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
 8001292:	460b      	mov	r3, r1
 8001294:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001296:	78fb      	ldrb	r3, [r7, #3]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d008      	beq.n	80012ae <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= CR1_SPE_Set;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012a6:	b29a      	uxth	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= CR1_SPE_Reset;
  }
}
 80012ac:	e007      	b.n	80012be <SPI_Cmd+0x34>
    SPIx->CR1 &= CR1_SPE_Reset;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	881b      	ldrh	r3, [r3, #0]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	801a      	strh	r2, [r3, #0]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <SPI_I2S_ReceiveData>:
  *   - 1, 2 or 3 in SPI mode 
  *   - 2 or 3 in I2S mode
  * @retval The value of the received data.
  */
uint16_t SPI_I2S_ReceiveData(SPI_TypeDef* SPIx)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  
  /* Return the data in the DR register */
  return SPIx->DR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	899b      	ldrh	r3, [r3, #12]
 80012d4:	b29b      	uxth	r3, r3
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	bc80      	pop	{r7}
 80012de:	4770      	bx	lr

080012e0 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80012ec:	2300      	movs	r3, #0
 80012ee:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  /* Check the status of the specified SPI/I2S flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	891b      	ldrh	r3, [r3, #8]
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	887b      	ldrh	r3, [r7, #2]
 80012f8:	4013      	ands	r3, r2
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d002      	beq.n	8001306 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8001300:	2301      	movs	r3, #1
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	e001      	b.n	800130a <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 800130a:	7bfb      	ldrb	r3, [r7, #15]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr

08001316 <SPI_I2S_GetITStatus>:
  *     @arg SPI_IT_CRCERR: CRC Error interrupt.
  *     @arg I2S_IT_UDR: Underrun Error interrupt.
  * @retval The new state of SPI_I2S_IT (SET or RESET).
  */
ITStatus SPI_I2S_GetITStatus(SPI_TypeDef* SPIx, uint8_t SPI_I2S_IT)
{
 8001316:	b480      	push	{r7}
 8001318:	b085      	sub	sp, #20
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
 800131e:	460b      	mov	r3, r1
 8001320:	70fb      	strb	r3, [r7, #3]
  ITStatus bitstatus = RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	73fb      	strb	r3, [r7, #15]
  uint16_t itpos = 0, itmask = 0, enablestatus = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	81bb      	strh	r3, [r7, #12]
 800132a:	2300      	movs	r3, #0
 800132c:	817b      	strh	r3, [r7, #10]
 800132e:	2300      	movs	r3, #0
 8001330:	813b      	strh	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_IT(SPI_I2S_IT));

  /* Get the SPI/I2S IT index */
  itpos = 0x01 << (SPI_I2S_IT & 0x0F);
 8001332:	78fb      	ldrb	r3, [r7, #3]
 8001334:	f003 030f 	and.w	r3, r3, #15
 8001338:	2201      	movs	r2, #1
 800133a:	fa02 f303 	lsl.w	r3, r2, r3
 800133e:	81bb      	strh	r3, [r7, #12]

  /* Get the SPI/I2S IT mask */
  itmask = SPI_I2S_IT >> 4;
 8001340:	78fb      	ldrb	r3, [r7, #3]
 8001342:	091b      	lsrs	r3, r3, #4
 8001344:	b2db      	uxtb	r3, r3
 8001346:	817b      	strh	r3, [r7, #10]

  /* Set the IT mask */
  itmask = 0x01 << itmask;
 8001348:	897b      	ldrh	r3, [r7, #10]
 800134a:	2201      	movs	r2, #1
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	817b      	strh	r3, [r7, #10]

  /* Get the SPI_I2S_IT enable bit status */
  enablestatus = (SPIx->CR2 & itmask) ;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	889b      	ldrh	r3, [r3, #4]
 8001356:	b29a      	uxth	r2, r3
 8001358:	897b      	ldrh	r3, [r7, #10]
 800135a:	4013      	ands	r3, r2
 800135c:	813b      	strh	r3, [r7, #8]

  /* Check the status of the specified SPI/I2S interrupt */
  if (((SPIx->SR & itpos) != (uint16_t)RESET) && enablestatus)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	891b      	ldrh	r3, [r3, #8]
 8001362:	b29a      	uxth	r2, r3
 8001364:	89bb      	ldrh	r3, [r7, #12]
 8001366:	4013      	ands	r3, r2
 8001368:	b29b      	uxth	r3, r3
 800136a:	2b00      	cmp	r3, #0
 800136c:	d005      	beq.n	800137a <SPI_I2S_GetITStatus+0x64>
 800136e:	893b      	ldrh	r3, [r7, #8]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d002      	beq.n	800137a <SPI_I2S_GetITStatus+0x64>
  {
    /* SPI_I2S_IT is set */
    bitstatus = SET;
 8001374:	2301      	movs	r3, #1
 8001376:	73fb      	strb	r3, [r7, #15]
 8001378:	e001      	b.n	800137e <SPI_I2S_GetITStatus+0x68>
  }
  else
  {
    /* SPI_I2S_IT is reset */
    bitstatus = RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_IT status */
  return bitstatus;
 800137e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	bc80      	pop	{r7}
 8001388:	4770      	bx	lr
	...

0800138c <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b08c      	sub	sp, #48	; 0x30
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001396:	2300      	movs	r3, #0
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 800139e:	2300      	movs	r3, #0
 80013a0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 80013a2:	2300      	movs	r3, #0
 80013a4:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	8a1b      	ldrh	r3, [r3, #16]
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 80013b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013b8:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 80013bc:	4013      	ands	r3, r2
 80013be:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	88db      	ldrh	r3, [r3, #6]
 80013c4:	461a      	mov	r2, r3
 80013c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013c8:	4313      	orrs	r3, r2
 80013ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 80013cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	899b      	ldrh	r3, [r3, #12]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80013dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013de:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 80013e2:	4013      	ands	r3, r2
 80013e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	889a      	ldrh	r2, [r3, #4]
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	891b      	ldrh	r3, [r3, #8]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80013f6:	4313      	orrs	r3, r2
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	461a      	mov	r2, r3
 80013fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013fe:	4313      	orrs	r3, r2
 8001400:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8001402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001404:	b29a      	uxth	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	8a9b      	ldrh	r3, [r3, #20]
 800140e:	b29b      	uxth	r3, r3
 8001410:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 8001412:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001414:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8001418:	4013      	ands	r3, r2
 800141a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	899b      	ldrh	r3, [r3, #12]
 8001420:	461a      	mov	r2, r3
 8001422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001424:	4313      	orrs	r3, r2
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8001428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142a:	b29a      	uxth	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8001430:	f107 0308 	add.w	r3, r7, #8
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fdf9 	bl	800102c <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 800143a:	69fb      	ldr	r3, [r7, #28]
 800143c:	4a2e      	ldr	r2, [pc, #184]	; (80014f8 <USART_Init+0x16c>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d102      	bne.n	8001448 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	62bb      	str	r3, [r7, #40]	; 0x28
 8001446:	e001      	b.n	800144c <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	899b      	ldrh	r3, [r3, #12]
 8001450:	b29b      	uxth	r3, r3
 8001452:	b21b      	sxth	r3, r3
 8001454:	2b00      	cmp	r3, #0
 8001456:	da0c      	bge.n	8001472 <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001458:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	009a      	lsls	r2, r3, #2
 8001462:	441a      	add	r2, r3
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	fbb2 f3f3 	udiv	r3, r2, r3
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
 8001470:	e00b      	b.n	800148a <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8001472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001474:	4613      	mov	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	009a      	lsls	r2, r3, #2
 800147c:	441a      	add	r2, r3
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	fbb2 f3f3 	udiv	r3, r2, r3
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	4a1b      	ldr	r2, [pc, #108]	; (80014fc <USART_Init+0x170>)
 800148e:	fba2 2303 	umull	r2, r3, r2, r3
 8001492:	095b      	lsrs	r3, r3, #5
 8001494:	011b      	lsls	r3, r3, #4
 8001496:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149a:	091b      	lsrs	r3, r3, #4
 800149c:	2264      	movs	r2, #100	; 0x64
 800149e:	fb02 f303 	mul.w	r3, r2, r3
 80014a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	899b      	ldrh	r3, [r3, #12]
 80014ac:	b29b      	uxth	r3, r3
 80014ae:	b21b      	sxth	r3, r3
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	da0c      	bge.n	80014ce <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 80014b4:	6a3b      	ldr	r3, [r7, #32]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	3332      	adds	r3, #50	; 0x32
 80014ba:	4a10      	ldr	r2, [pc, #64]	; (80014fc <USART_Init+0x170>)
 80014bc:	fba2 2303 	umull	r2, r3, r2, r3
 80014c0:	095b      	lsrs	r3, r3, #5
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014c8:	4313      	orrs	r3, r2
 80014ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014cc:	e00b      	b.n	80014e6 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 80014ce:	6a3b      	ldr	r3, [r7, #32]
 80014d0:	011b      	lsls	r3, r3, #4
 80014d2:	3332      	adds	r3, #50	; 0x32
 80014d4:	4a09      	ldr	r2, [pc, #36]	; (80014fc <USART_Init+0x170>)
 80014d6:	fba2 2303 	umull	r2, r3, r2, r3
 80014da:	095b      	lsrs	r3, r3, #5
 80014dc:	f003 030f 	and.w	r3, r3, #15
 80014e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014e2:	4313      	orrs	r3, r2
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80014e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	811a      	strh	r2, [r3, #8]
}
 80014ee:	bf00      	nop
 80014f0:	3730      	adds	r7, #48	; 0x30
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40013800 	.word	0x40013800
 80014fc:	51eb851f 	.word	0x51eb851f

08001500 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	460b      	mov	r3, r1
 800150a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800150c:	78fb      	ldrb	r3, [r7, #3]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d008      	beq.n	8001524 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	899b      	ldrh	r3, [r3, #12]
 8001516:	b29b      	uxth	r3, r3
 8001518:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800151c:	b29a      	uxth	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 8001522:	e007      	b.n	8001534 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	899b      	ldrh	r3, [r3, #12]
 8001528:	b29b      	uxth	r3, r3
 800152a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800152e:	b29a      	uxth	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	819a      	strh	r2, [r3, #12]
}
 8001534:	bf00      	nop
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	bc80      	pop	{r7}
 800153c:	4770      	bx	lr

0800153e <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800153e:	b480      	push	{r7}
 8001540:	b087      	sub	sp, #28
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	460b      	mov	r3, r1
 8001548:	807b      	strh	r3, [r7, #2]
 800154a:	4613      	mov	r3, r2
 800154c:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]
 8001556:	2300      	movs	r3, #0
 8001558:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 800155a:	2300      	movs	r3, #0
 800155c:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001562:	887b      	ldrh	r3, [r7, #2]
 8001564:	b2db      	uxtb	r3, r3
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	b2db      	uxtb	r3, r3
 800156a:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 800156c:	887b      	ldrh	r3, [r7, #2]
 800156e:	f003 031f 	and.w	r3, r3, #31
 8001572:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001574:	2201      	movs	r2, #1
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d103      	bne.n	800158c <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	330c      	adds	r3, #12
 8001588:	617b      	str	r3, [r7, #20]
 800158a:	e009      	b.n	80015a0 <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	2b02      	cmp	r3, #2
 8001590:	d103      	bne.n	800159a <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	3310      	adds	r3, #16
 8001596:	617b      	str	r3, [r7, #20]
 8001598:	e002      	b.n	80015a0 <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3314      	adds	r3, #20
 800159e:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 80015a0:	787b      	ldrb	r3, [r7, #1]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d006      	beq.n	80015b4 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	6811      	ldr	r1, [r2, #0]
 80015ac:	68ba      	ldr	r2, [r7, #8]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 80015b2:	e006      	b.n	80015c2 <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	697a      	ldr	r2, [r7, #20]
 80015b8:	6811      	ldr	r1, [r2, #0]
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	43d2      	mvns	r2, r2
 80015be:	400a      	ands	r2, r1
 80015c0:	601a      	str	r2, [r3, #0]
}
 80015c2:	bf00      	nop
 80015c4:	371c      	adds	r7, #28
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr

080015cc <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	889b      	ldrh	r3, [r3, #4]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015de:	b29b      	uxth	r3, r3
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr

080015ea <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80015ea:	b480      	push	{r7}
 80015ec:	b085      	sub	sp, #20
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	6078      	str	r0, [r7, #4]
 80015f2:	460b      	mov	r3, r1
 80015f4:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80015f6:	2300      	movs	r3, #0
 80015f8:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	881b      	ldrh	r3, [r3, #0]
 80015fe:	b29a      	uxth	r2, r3
 8001600:	887b      	ldrh	r3, [r7, #2]
 8001602:	4013      	ands	r3, r2
 8001604:	b29b      	uxth	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d002      	beq.n	8001610 <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 800160a:	2301      	movs	r3, #1
 800160c:	73fb      	strb	r3, [r7, #15]
 800160e:	e001      	b.n	8001614 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8001610:	2300      	movs	r3, #0
 8001612:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001614:	7bfb      	ldrb	r3, [r7, #15]
}
 8001616:	4618      	mov	r0, r3
 8001618:	3714      	adds	r7, #20
 800161a:	46bd      	mov	sp, r7
 800161c:	bc80      	pop	{r7}
 800161e:	4770      	bx	lr

08001620 <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	460b      	mov	r3, r1
 800162a:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 800162c:	887b      	ldrh	r3, [r7, #2]
 800162e:	43db      	mvns	r3, r3
 8001630:	b29a      	uxth	r2, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	801a      	strh	r2, [r3, #0]
}
 8001636:	bf00      	nop
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001640:	b480      	push	{r7}
 8001642:	b087      	sub	sp, #28
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 800164c:	2300      	movs	r3, #0
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
 8001654:	2300      	movs	r3, #0
 8001656:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001658:	2300      	movs	r3, #0
 800165a:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800165c:	887b      	ldrh	r3, [r7, #2]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	095b      	lsrs	r3, r3, #5
 8001662:	b2db      	uxtb	r3, r3
 8001664:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 8001666:	887b      	ldrh	r3, [r7, #2]
 8001668:	f003 031f 	and.w	r3, r3, #31
 800166c:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 800166e:	2201      	movs	r2, #1
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	fa02 f303 	lsl.w	r3, r2, r3
 8001676:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d107      	bne.n	800168e <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	899b      	ldrh	r3, [r3, #12]
 8001682:	b29b      	uxth	r3, r3
 8001684:	461a      	mov	r2, r3
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	4013      	ands	r3, r2
 800168a:	617b      	str	r3, [r7, #20]
 800168c:	e011      	b.n	80016b2 <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	2b02      	cmp	r3, #2
 8001692:	d107      	bne.n	80016a4 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	8a1b      	ldrh	r3, [r3, #16]
 8001698:	b29b      	uxth	r3, r3
 800169a:	461a      	mov	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	4013      	ands	r3, r2
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	e006      	b.n	80016b2 <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	8a9b      	ldrh	r3, [r3, #20]
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	461a      	mov	r2, r3
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	4013      	ands	r3, r2
 80016b0:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 80016b2:	887b      	ldrh	r3, [r7, #2]
 80016b4:	0a1b      	lsrs	r3, r3, #8
 80016b6:	b29b      	uxth	r3, r3
 80016b8:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 80016ba:	2201      	movs	r2, #1
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	881b      	ldrh	r3, [r3, #0]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	461a      	mov	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	4013      	ands	r3, r2
 80016d0:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <USART_GetITStatus+0xa4>
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d002      	beq.n	80016e4 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 80016de:	2301      	movs	r3, #1
 80016e0:	74fb      	strb	r3, [r7, #19]
 80016e2:	e001      	b.n	80016e8 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 80016e4:	2300      	movs	r3, #0
 80016e6:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 80016e8:	7cfb      	ldrb	r3, [r7, #19]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	371c      	adds	r7, #28
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <getDigitalGPIO>:
 * get GPIO function
 * return GPIO_TypeDef from GPIO_PINx
 * GPIO_PINx: A0-C15
 */
GPIO_TypeDef *getDigitalGPIO(uint8_t GPIO_PINx)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	4603      	mov	r3, r0
 80016fc:	71fb      	strb	r3, [r7, #7]
	return (GPIO_TypeDef *)((GPIO_PINx / 16)*0x0400 + 0x40010800);
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	091b      	lsrs	r3, r3, #4
 8001702:	b2db      	uxtb	r3, r3
 8001704:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8001708:	3342      	adds	r3, #66	; 0x42
 800170a:	029b      	lsls	r3, r3, #10
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <getDigitalPin>:
 * get GPIO function
 * return Pin number from GPIO_PINx
 * GPIO_PINx: A0-C15
 */
uint8_t getDigitalPin(uint8_t GPIO_PINx)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	71fb      	strb	r3, [r7, #7]
	return GPIO_PINx % 16;
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	f003 030f 	and.w	r3, r3, #15
 8001726:	b2db      	uxtb	r3, r3
}
 8001728:	4618      	mov	r0, r3
 800172a:	370c      	adds	r7, #12
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
	...

08001734 <pinMode>:
 * pin configuration function
 * mode: INPUT, OUT_PUT, INPUT_PULLUP, INPUT_PULLDOWN
 * GPIO_PINx: A0 - C15
 */
void pinMode(uint8_t GPIO_PINx, uint8_t mode)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	460a      	mov	r2, r1
 800173e:	71fb      	strb	r3, [r7, #7]
 8001740:	4613      	mov	r3, r2
 8001742:	71bb      	strb	r3, [r7, #6]
	GPIO_TypeDef* GPIOx = getDigitalGPIO(GPIO_PINx);
 8001744:	79fb      	ldrb	r3, [r7, #7]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff ffd4 	bl	80016f4 <getDigitalGPIO>
 800174c:	6178      	str	r0, [r7, #20]
	uint8_t PINx = getDigitalPin(GPIO_PINx);
 800174e:	79fb      	ldrb	r3, [r7, #7]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff ffe0 	bl	8001716 <getDigitalPin>
 8001756:	4603      	mov	r3, r0
 8001758:	74fb      	strb	r3, [r7, #19]

	GPIO_InitTypeDef  GPIO_InitStructure;

	/* Enable the GPIO_AHPclock Clock */
	if(GPIOx == GPIOA)	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	4a23      	ldr	r2, [pc, #140]	; (80017ec <pinMode+0xb8>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d104      	bne.n	800176c <pinMode+0x38>
 8001762:	2101      	movs	r1, #1
 8001764:	2004      	movs	r0, #4
 8001766:	f7ff fd11 	bl	800118c <RCC_APB2PeriphClockCmd>
 800176a:	e02b      	b.n	80017c4 <pinMode+0x90>
	else if(GPIOx == GPIOB)	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	4a20      	ldr	r2, [pc, #128]	; (80017f0 <pinMode+0xbc>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d104      	bne.n	800177e <pinMode+0x4a>
 8001774:	2101      	movs	r1, #1
 8001776:	2008      	movs	r0, #8
 8001778:	f7ff fd08 	bl	800118c <RCC_APB2PeriphClockCmd>
 800177c:	e022      	b.n	80017c4 <pinMode+0x90>
	else if(GPIOx == GPIOC)	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	4a1c      	ldr	r2, [pc, #112]	; (80017f4 <pinMode+0xc0>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d104      	bne.n	8001790 <pinMode+0x5c>
 8001786:	2101      	movs	r1, #1
 8001788:	2010      	movs	r0, #16
 800178a:	f7ff fcff 	bl	800118c <RCC_APB2PeriphClockCmd>
 800178e:	e019      	b.n	80017c4 <pinMode+0x90>
	else if(GPIOx == GPIOD)	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	4a19      	ldr	r2, [pc, #100]	; (80017f8 <pinMode+0xc4>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d104      	bne.n	80017a2 <pinMode+0x6e>
 8001798:	2101      	movs	r1, #1
 800179a:	2020      	movs	r0, #32
 800179c:	f7ff fcf6 	bl	800118c <RCC_APB2PeriphClockCmd>
 80017a0:	e010      	b.n	80017c4 <pinMode+0x90>
	else if(GPIOx == GPIOE)	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE, ENABLE);
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	4a15      	ldr	r2, [pc, #84]	; (80017fc <pinMode+0xc8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d104      	bne.n	80017b4 <pinMode+0x80>
 80017aa:	2101      	movs	r1, #1
 80017ac:	2040      	movs	r0, #64	; 0x40
 80017ae:	f7ff fced 	bl	800118c <RCC_APB2PeriphClockCmd>
 80017b2:	e007      	b.n	80017c4 <pinMode+0x90>
	else if(GPIOx == GPIOF)	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOF, ENABLE);
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	4a12      	ldr	r2, [pc, #72]	; (8001800 <pinMode+0xcc>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d103      	bne.n	80017c4 <pinMode+0x90>
 80017bc:	2101      	movs	r1, #1
 80017be:	2080      	movs	r0, #128	; 0x80
 80017c0:	f7ff fce4 	bl	800118c <RCC_APB2PeriphClockCmd>

	/* Configure the GPIO PINx */
	GPIO_InitStructure.GPIO_Mode = (GPIOMode_TypeDef)mode;
 80017c4:	79bb      	ldrb	r3, [r7, #6]
 80017c6:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80017c8:	2303      	movs	r3, #3
 80017ca:	73bb      	strb	r3, [r7, #14]

	GPIO_InitStructure.GPIO_Pin = (1<<PINx);
 80017cc:	7cfb      	ldrb	r3, [r7, #19]
 80017ce:	2201      	movs	r2, #1
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	81bb      	strh	r3, [r7, #12]
	GPIO_Init(GPIOx, &GPIO_InitStructure);
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	4619      	mov	r1, r3
 80017de:	6978      	ldr	r0, [r7, #20]
 80017e0:	f7ff faf8 	bl	8000dd4 <GPIO_Init>
}// end pinMode function
 80017e4:	bf00      	nop
 80017e6:	3718      	adds	r7, #24
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40010800 	.word	0x40010800
 80017f0:	40010c00 	.word	0x40010c00
 80017f4:	40011000 	.word	0x40011000
 80017f8:	40011400 	.word	0x40011400
 80017fc:	40011800 	.word	0x40011800
 8001800:	40011c00 	.word	0x40011c00

08001804 <digitalWrite>:
 * write state on pin function
 * GPIO_PINx: A0 - C15
 * val = HIGH(1), LOW(0)
 */
void digitalWrite(uint8_t GPIO_PINx, uint8_t val)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	460a      	mov	r2, r1
 800180e:	71fb      	strb	r3, [r7, #7]
 8001810:	4613      	mov	r3, r2
 8001812:	71bb      	strb	r3, [r7, #6]
	GPIO_TypeDef* GPIOx = getDigitalGPIO(GPIO_PINx);
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ff6c 	bl	80016f4 <getDigitalGPIO>
 800181c:	60f8      	str	r0, [r7, #12]
	uint8_t PINx = getDigitalPin(GPIO_PINx);
 800181e:	79fb      	ldrb	r3, [r7, #7]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff ff78 	bl	8001716 <getDigitalPin>
 8001826:	4603      	mov	r3, r0
 8001828:	72fb      	strb	r3, [r7, #11]

	if (val == HIGH)	GPIOx->BSRR = (1<<PINx);
 800182a:	79bb      	ldrb	r3, [r7, #6]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d107      	bne.n	8001840 <digitalWrite+0x3c>
 8001830:	7afb      	ldrb	r3, [r7, #11]
 8001832:	2201      	movs	r2, #1
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	461a      	mov	r2, r3
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	611a      	str	r2, [r3, #16]
	else	GPIOx->BRR = (1<<PINx);
}
 800183e:	e006      	b.n	800184e <digitalWrite+0x4a>
	else	GPIOx->BRR = (1<<PINx);
 8001840:	7afb      	ldrb	r3, [r7, #11]
 8001842:	2201      	movs	r2, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	461a      	mov	r2, r3
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	615a      	str	r2, [r3, #20]
}
 800184e:	bf00      	nop
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <digitalToggle>:
 * digital toggle pin function
 * toggle a pin 0 to 1 or 1 to 0
 * GPIO_PINx: A0-C15
 */
void digitalToggle(uint8_t GPIO_PINx)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b084      	sub	sp, #16
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef* GPIOx = getDigitalGPIO(GPIO_PINx);
 8001860:	79fb      	ldrb	r3, [r7, #7]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff ff46 	bl	80016f4 <getDigitalGPIO>
 8001868:	60f8      	str	r0, [r7, #12]
	uint8_t PINx = getDigitalPin(GPIO_PINx);
 800186a:	79fb      	ldrb	r3, [r7, #7]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff52 	bl	8001716 <getDigitalPin>
 8001872:	4603      	mov	r3, r0
 8001874:	72fb      	strb	r3, [r7, #11]
	GPIOx->ODR ^= (1<<PINx);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	7afa      	ldrb	r2, [r7, #11]
 800187c:	2101      	movs	r1, #1
 800187e:	fa01 f202 	lsl.w	r2, r1, r2
 8001882:	405a      	eors	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	60da      	str	r2, [r3, #12]
}
 8001888:	bf00      	nop
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <EXTI0_IRQHandler>:
  * @brief  This function handles EXTI0 interrupt.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line0) != RESET)
 8001894:	2001      	movs	r0, #1
 8001896:	f7ff fa6b 	bl	8000d70 <EXTI_GetITStatus>
 800189a:	4603      	mov	r3, r0
 800189c:	2b00      	cmp	r3, #0
 800189e:	d005      	beq.n	80018ac <EXTI0_IRQHandler+0x1c>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line0);
 80018a0:	2001      	movs	r0, #1
 80018a2:	f7ff fa89 	bl	8000db8 <EXTI_ClearITPendingBit>
		intFunc[0]();
 80018a6:	4b02      	ldr	r3, [pc, #8]	; (80018b0 <EXTI0_IRQHandler+0x20>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4798      	blx	r3
	}
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	200000a4 	.word	0x200000a4

080018b4 <EXTI1_IRQHandler>:
  * @brief  This function handles EXTI1 interrupt.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line1) != RESET)
 80018b8:	2002      	movs	r0, #2
 80018ba:	f7ff fa59 	bl	8000d70 <EXTI_GetITStatus>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d005      	beq.n	80018d0 <EXTI1_IRQHandler+0x1c>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line1);
 80018c4:	2002      	movs	r0, #2
 80018c6:	f7ff fa77 	bl	8000db8 <EXTI_ClearITPendingBit>
		intFunc[1]();
 80018ca:	4b02      	ldr	r3, [pc, #8]	; (80018d4 <EXTI1_IRQHandler+0x20>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4798      	blx	r3
	}
}
 80018d0:	bf00      	nop
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200000a4 	.word	0x200000a4

080018d8 <EXTI2_IRQHandler>:
  * @brief  This function handles EXTI2 interrupt.
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line2) != RESET)
 80018dc:	2004      	movs	r0, #4
 80018de:	f7ff fa47 	bl	8000d70 <EXTI_GetITStatus>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d005      	beq.n	80018f4 <EXTI2_IRQHandler+0x1c>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line2);
 80018e8:	2004      	movs	r0, #4
 80018ea:	f7ff fa65 	bl	8000db8 <EXTI_ClearITPendingBit>
		intFunc[2]();
 80018ee:	4b02      	ldr	r3, [pc, #8]	; (80018f8 <EXTI2_IRQHandler+0x20>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	4798      	blx	r3
	}
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200000a4 	.word	0x200000a4

080018fc <EXTI3_IRQHandler>:
  * @brief  This function handles EXTI3 interrupt.
  * @param  None
  * @retval None
  */
void EXTI3_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line3) != RESET)
 8001900:	2008      	movs	r0, #8
 8001902:	f7ff fa35 	bl	8000d70 <EXTI_GetITStatus>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d005      	beq.n	8001918 <EXTI3_IRQHandler+0x1c>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line3);
 800190c:	2008      	movs	r0, #8
 800190e:	f7ff fa53 	bl	8000db8 <EXTI_ClearITPendingBit>
		intFunc[3]();
 8001912:	4b02      	ldr	r3, [pc, #8]	; (800191c <EXTI3_IRQHandler+0x20>)
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	4798      	blx	r3
	}
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200000a4 	.word	0x200000a4

08001920 <EXTI4_IRQHandler>:
  * @brief  This function handles EXTI4 interrupt.
  * @param  None
  * @retval None
  */
void EXTI4_IRQHandler(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line4) != RESET)
 8001924:	2010      	movs	r0, #16
 8001926:	f7ff fa23 	bl	8000d70 <EXTI_GetITStatus>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <EXTI4_IRQHandler+0x1c>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line4);
 8001930:	2010      	movs	r0, #16
 8001932:	f7ff fa41 	bl	8000db8 <EXTI_ClearITPendingBit>
		intFunc[4]();
 8001936:	4b02      	ldr	r3, [pc, #8]	; (8001940 <EXTI4_IRQHandler+0x20>)
 8001938:	691b      	ldr	r3, [r3, #16]
 800193a:	4798      	blx	r3
	}
}
 800193c:	bf00      	nop
 800193e:	bd80      	pop	{r7, pc}
 8001940:	200000a4 	.word	0x200000a4

08001944 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI4 interrupt.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line10) != RESET)
 8001948:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800194c:	f7ff fa10 	bl	8000d70 <EXTI_GetITStatus>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d006      	beq.n	8001964 <EXTI15_10_IRQHandler+0x20>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line10);
 8001956:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800195a:	f7ff fa2d 	bl	8000db8 <EXTI_ClearITPendingBit>
		intFunc[10]();
 800195e:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <EXTI15_10_IRQHandler+0xb0>)
 8001960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001962:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line11) != RESET)
 8001964:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001968:	f7ff fa02 	bl	8000d70 <EXTI_GetITStatus>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d006      	beq.n	8001980 <EXTI15_10_IRQHandler+0x3c>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line11);
 8001972:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001976:	f7ff fa1f 	bl	8000db8 <EXTI_ClearITPendingBit>
		intFunc[11]();
 800197a:	4b1e      	ldr	r3, [pc, #120]	; (80019f4 <EXTI15_10_IRQHandler+0xb0>)
 800197c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197e:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line12) != RESET)
 8001980:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001984:	f7ff f9f4 	bl	8000d70 <EXTI_GetITStatus>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d006      	beq.n	800199c <EXTI15_10_IRQHandler+0x58>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line12);
 800198e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001992:	f7ff fa11 	bl	8000db8 <EXTI_ClearITPendingBit>
		intFunc[12]();
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <EXTI15_10_IRQHandler+0xb0>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line13) != RESET)
 800199c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019a0:	f7ff f9e6 	bl	8000d70 <EXTI_GetITStatus>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d006      	beq.n	80019b8 <EXTI15_10_IRQHandler+0x74>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line13);
 80019aa:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80019ae:	f7ff fa03 	bl	8000db8 <EXTI_ClearITPendingBit>
		intFunc[13]();
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <EXTI15_10_IRQHandler+0xb0>)
 80019b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b6:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line14) != RESET)
 80019b8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80019bc:	f7ff f9d8 	bl	8000d70 <EXTI_GetITStatus>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d006      	beq.n	80019d4 <EXTI15_10_IRQHandler+0x90>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line14);
 80019c6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80019ca:	f7ff f9f5 	bl	8000db8 <EXTI_ClearITPendingBit>
		intFunc[14]();
 80019ce:	4b09      	ldr	r3, [pc, #36]	; (80019f4 <EXTI15_10_IRQHandler+0xb0>)
 80019d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d2:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line15) != RESET)
 80019d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80019d8:	f7ff f9ca 	bl	8000d70 <EXTI_GetITStatus>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d006      	beq.n	80019f0 <EXTI15_10_IRQHandler+0xac>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line15);
 80019e2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80019e6:	f7ff f9e7 	bl	8000db8 <EXTI_ClearITPendingBit>
		intFunc[15]();
 80019ea:	4b02      	ldr	r3, [pc, #8]	; (80019f4 <EXTI15_10_IRQHandler+0xb0>)
 80019ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019ee:	4798      	blx	r3
	}
}
 80019f0:	bf00      	nop
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	200000a4 	.word	0x200000a4

080019f8 <EXTI9_5_IRQHandler>:
  * @param  None
  * @retval None
  */

void EXTI9_5_IRQHandler(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line5) != RESET)
 80019fc:	2020      	movs	r0, #32
 80019fe:	f7ff f9b7 	bl	8000d70 <EXTI_GetITStatus>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d005      	beq.n	8001a14 <EXTI9_5_IRQHandler+0x1c>
	{
		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(EXTI_Line5);
 8001a08:	2020      	movs	r0, #32
 8001a0a:	f7ff f9d5 	bl	8000db8 <EXTI_ClearITPendingBit>
		intFunc[5]();
 8001a0e:	4b1c      	ldr	r3, [pc, #112]	; (8001a80 <EXTI9_5_IRQHandler+0x88>)
 8001a10:	695b      	ldr	r3, [r3, #20]
 8001a12:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line6) != RESET)
 8001a14:	2040      	movs	r0, #64	; 0x40
 8001a16:	f7ff f9ab 	bl	8000d70 <EXTI_GetITStatus>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <EXTI9_5_IRQHandler+0x34>
	{
		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(EXTI_Line6);
 8001a20:	2040      	movs	r0, #64	; 0x40
 8001a22:	f7ff f9c9 	bl	8000db8 <EXTI_ClearITPendingBit>
		intFunc[6]();
 8001a26:	4b16      	ldr	r3, [pc, #88]	; (8001a80 <EXTI9_5_IRQHandler+0x88>)
 8001a28:	699b      	ldr	r3, [r3, #24]
 8001a2a:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line7) != RESET)
 8001a2c:	2080      	movs	r0, #128	; 0x80
 8001a2e:	f7ff f99f 	bl	8000d70 <EXTI_GetITStatus>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d005      	beq.n	8001a44 <EXTI9_5_IRQHandler+0x4c>
	{
		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(EXTI_Line7);
 8001a38:	2080      	movs	r0, #128	; 0x80
 8001a3a:	f7ff f9bd 	bl	8000db8 <EXTI_ClearITPendingBit>
		intFunc[7]();
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <EXTI9_5_IRQHandler+0x88>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line8) != RESET)
 8001a44:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a48:	f7ff f992 	bl	8000d70 <EXTI_GetITStatus>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d006      	beq.n	8001a60 <EXTI9_5_IRQHandler+0x68>
	{
		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(EXTI_Line8);
 8001a52:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001a56:	f7ff f9af 	bl	8000db8 <EXTI_ClearITPendingBit>
		intFunc[8]();
 8001a5a:	4b09      	ldr	r3, [pc, #36]	; (8001a80 <EXTI9_5_IRQHandler+0x88>)
 8001a5c:	6a1b      	ldr	r3, [r3, #32]
 8001a5e:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line9) != RESET)
 8001a60:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a64:	f7ff f984 	bl	8000d70 <EXTI_GetITStatus>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d006      	beq.n	8001a7c <EXTI9_5_IRQHandler+0x84>
	{
		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(EXTI_Line9);
 8001a6e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a72:	f7ff f9a1 	bl	8000db8 <EXTI_ClearITPendingBit>
		intFunc[9]();
 8001a76:	4b02      	ldr	r3, [pc, #8]	; (8001a80 <EXTI9_5_IRQHandler+0x88>)
 8001a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7a:	4798      	blx	r3
	}
}
 8001a7c:	bf00      	nop
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	200000a4 	.word	0x200000a4

08001a84 <_ZN5PrintC1Ev>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	4a05      	ldr	r2, [pc, #20]	; (8001aa4 <_ZN5PrintC1Ev+0x20>)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	601a      	str	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	605a      	str	r2, [r3, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	370c      	adds	r7, #12
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	08005a88 	.word	0x08005a88

08001aa8 <_ZN5Print17availableForWriteEv>:
      return write((const uint8_t *)buffer, size);
    }

    // default to zero, meaning "a single write may block"
    // should be overriden by subclasses with buffering
    virtual int availableForWrite() { return 0; }
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr

08001abc <_ZN5Print5flushEv>:
    size_t println(long, int = DEC);
    size_t println(unsigned long, int = DEC);
    size_t println(double, int = 2);
    size_t println(void);

    virtual void flush() { /* Empty implementation for backward compatibility */ }
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bc80      	pop	{r7}
 8001acc:	4770      	bx	lr

08001ace <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
 8001ace:	b590      	push	{r4, r7, lr}
 8001ad0:	b083      	sub	sp, #12
 8001ad2:	af00      	add	r7, sp, #0
 8001ad4:	6078      	str	r0, [r7, #4]
 8001ad6:	6039      	str	r1, [r7, #0]
      if (str == NULL) return 0;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <_ZN5Print5writeEPKc+0x14>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	e00c      	b.n	8001afc <_ZN5Print5writeEPKc+0x2e>
      return write((const uint8_t *)str, strlen(str));
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	681c      	ldr	r4, [r3, #0]
 8001aea:	6838      	ldr	r0, [r7, #0]
 8001aec:	f7fe fb2e 	bl	800014c <strlen>
 8001af0:	4603      	mov	r3, r0
 8001af2:	461a      	mov	r2, r3
 8001af4:	6839      	ldr	r1, [r7, #0]
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	47a0      	blx	r4
 8001afa:	4603      	mov	r3, r0
    }
 8001afc:	4618      	mov	r0, r3
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd90      	pop	{r4, r7, pc}

08001b04 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  size_t n = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	617b      	str	r3, [r7, #20]
  while (size--) {
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	1e5a      	subs	r2, r3, #1
 8001b18:	607a      	str	r2, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	bf14      	ite	ne
 8001b1e:	2301      	movne	r3, #1
 8001b20:	2300      	moveq	r3, #0
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d016      	beq.n	8001b56 <_ZN5Print5writeEPKhj+0x52>
    if (write(*buffer++)) n++;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	1c59      	adds	r1, r3, #1
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	4619      	mov	r1, r3
 8001b38:	68f8      	ldr	r0, [r7, #12]
 8001b3a:	4790      	blx	r2
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	bf14      	ite	ne
 8001b42:	2301      	movne	r3, #1
 8001b44:	2300      	moveq	r3, #0
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <_ZN5Print5writeEPKhj+0x50>
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	617b      	str	r3, [r7, #20]
  while (size--) {
 8001b52:	e7df      	b.n	8001b14 <_ZN5Print5writeEPKhj+0x10>
    else break;
 8001b54:	bf00      	nop
  }
  return n;
 8001b56:	697b      	ldr	r3, [r7, #20]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3718      	adds	r7, #24
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <_ZN5Print5printEPKc>:


size_t Print::print(const char str[])
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  return write(str);
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f7ff ffae 	bl	8001ace <_ZN5Print5writeEPKc>
 8001b72:	4603      	mov	r3, r0
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <_ZN5Print5printEc>:

size_t Print::print(char c)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
 8001b84:	460b      	mov	r3, r1
 8001b86:	70fb      	strb	r3, [r7, #3]
  return write(c);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	78fa      	ldrb	r2, [r7, #3]
 8001b90:	4611      	mov	r1, r2
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	4798      	blx	r3
 8001b96:	4603      	mov	r3, r0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3708      	adds	r7, #8
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <_ZN5Print5printEhi>:

size_t Print::print(unsigned char b, int base)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	607a      	str	r2, [r7, #4]
 8001bac:	72fb      	strb	r3, [r7, #11]
  return print((unsigned long) b, base);
 8001bae:	7afb      	ldrb	r3, [r7, #11]
 8001bb0:	687a      	ldr	r2, [r7, #4]
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	68f8      	ldr	r0, [r7, #12]
 8001bb6:	f000 f865 	bl	8001c84 <_ZN5Print5printEmi>
 8001bba:	4603      	mov	r3, r0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}

08001bc4 <_ZN5Print5printEii>:

size_t Print::print(int n, int base)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b084      	sub	sp, #16
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
  return print((long) n, base);
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	68b9      	ldr	r1, [r7, #8]
 8001bd4:	68f8      	ldr	r0, [r7, #12]
 8001bd6:	f000 f815 	bl	8001c04 <_ZN5Print5printEli>
 8001bda:	4603      	mov	r3, r0
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <_ZN5Print5printEji>:

size_t Print::print(unsigned int n, int base)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b084      	sub	sp, #16
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	60f8      	str	r0, [r7, #12]
 8001bec:	60b9      	str	r1, [r7, #8]
 8001bee:	607a      	str	r2, [r7, #4]
  return print((unsigned long) n, base);
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	68b9      	ldr	r1, [r7, #8]
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	f000 f845 	bl	8001c84 <_ZN5Print5printEmi>
 8001bfa:	4603      	mov	r3, r0
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3710      	adds	r7, #16
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <_ZN5Print5printEli>:

size_t Print::print(long n, int base)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b086      	sub	sp, #24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  if (base == 0) {
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d109      	bne.n	8001c2a <_ZN5Print5printEli+0x26>
    return write(n);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	68ba      	ldr	r2, [r7, #8]
 8001c1e:	b2d2      	uxtb	r2, r2
 8001c20:	4611      	mov	r1, r2
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	4798      	blx	r3
 8001c26:	4603      	mov	r3, r0
 8001c28:	e028      	b.n	8001c7c <_ZN5Print5printEli+0x78>
  } else if (base == 10) {
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2b0a      	cmp	r3, #10
 8001c2e:	d11d      	bne.n	8001c6c <_ZN5Print5printEli+0x68>
    if (n < 0) {
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	da12      	bge.n	8001c5c <_ZN5Print5printEli+0x58>
      int t = print('-');
 8001c36:	212d      	movs	r1, #45	; 0x2d
 8001c38:	68f8      	ldr	r0, [r7, #12]
 8001c3a:	f7ff ff9f 	bl	8001b7c <_ZN5Print5printEc>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	617b      	str	r3, [r7, #20]
      n = -n;
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	425b      	negs	r3, r3
 8001c46:	60bb      	str	r3, [r7, #8]
      return printNumber(n, 10) + t;
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	220a      	movs	r2, #10
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f000 f8bc 	bl	8001dcc <_ZN5Print11printNumberEmh>
 8001c54:	4602      	mov	r2, r0
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	4413      	add	r3, r2
 8001c5a:	e00f      	b.n	8001c7c <_ZN5Print5printEli+0x78>
    }
    return printNumber(n, 10);
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	220a      	movs	r2, #10
 8001c60:	4619      	mov	r1, r3
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f000 f8b2 	bl	8001dcc <_ZN5Print11printNumberEmh>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	e007      	b.n	8001c7c <_ZN5Print5printEli+0x78>
  } else {
    return printNumber(n, base);
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	4619      	mov	r1, r3
 8001c74:	68f8      	ldr	r0, [r7, #12]
 8001c76:	f000 f8a9 	bl	8001dcc <_ZN5Print11printNumberEmh>
 8001c7a:	4603      	mov	r3, r0
  }
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}

08001c84 <_ZN5Print5printEmi>:

size_t Print::print(unsigned long n, int base)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	60f8      	str	r0, [r7, #12]
 8001c8c:	60b9      	str	r1, [r7, #8]
 8001c8e:	607a      	str	r2, [r7, #4]
  if (base == 0) return write(n);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d109      	bne.n	8001caa <_ZN5Print5printEmi+0x26>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68ba      	ldr	r2, [r7, #8]
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	68f8      	ldr	r0, [r7, #12]
 8001ca4:	4798      	blx	r3
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	e007      	b.n	8001cba <_ZN5Print5printEmi+0x36>
  else return printNumber(n, base);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f000 f88a 	bl	8001dcc <_ZN5Print11printNumberEmh>
 8001cb8:	4603      	mov	r3, r0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <_ZN5Print5printEdi>:

size_t Print::print(double n, int digits)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b086      	sub	sp, #24
 8001cc6:	af02      	add	r7, sp, #8
 8001cc8:	60f8      	str	r0, [r7, #12]
 8001cca:	e9c7 2300 	strd	r2, r3, [r7]
  return printFloat(n, digits);
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001cd8:	68f8      	ldr	r0, [r7, #12]
 8001cda:	f000 f8b7 	bl	8001e4c <_ZN5Print10printFloatEdh>
 8001cde:	4603      	mov	r3, r0
}
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	3710      	adds	r7, #16
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bd80      	pop	{r7, pc}

08001ce8 <_ZN5Print7printlnEv>:

size_t Print::println(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  return write("\r\n");
 8001cf0:	4904      	ldr	r1, [pc, #16]	; (8001d04 <_ZN5Print7printlnEv+0x1c>)
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff feeb 	bl	8001ace <_ZN5Print5writeEPKc>
 8001cf8:	4603      	mov	r3, r0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	08005844 	.word	0x08005844

08001d08 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b084      	sub	sp, #16
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  size_t n = print(c);
 8001d12:	6839      	ldr	r1, [r7, #0]
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f7ff ff23 	bl	8001b60 <_ZN5Print5printEPKc>
 8001d1a:	60f8      	str	r0, [r7, #12]
  n += println();
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f7ff ffe3 	bl	8001ce8 <_ZN5Print7printlnEv>
 8001d22:	4602      	mov	r2, r0
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4413      	add	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]
  return n;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3710      	adds	r7, #16
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}

08001d34 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	460b      	mov	r3, r1
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	72fb      	strb	r3, [r7, #11]
  size_t n = print(b, base);
 8001d42:	7afb      	ldrb	r3, [r7, #11]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	4619      	mov	r1, r3
 8001d48:	68f8      	ldr	r0, [r7, #12]
 8001d4a:	f7ff ff29 	bl	8001ba0 <_ZN5Print5printEhi>
 8001d4e:	6178      	str	r0, [r7, #20]
  n += println();
 8001d50:	68f8      	ldr	r0, [r7, #12]
 8001d52:	f7ff ffc9 	bl	8001ce8 <_ZN5Print7printlnEv>
 8001d56:	4602      	mov	r2, r0
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	617b      	str	r3, [r7, #20]
  return n;
 8001d5e:	697b      	ldr	r3, [r7, #20]
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3718      	adds	r7, #24
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}

08001d68 <_ZN5Print7printlnEmi>:
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  size_t n = print(num, base);
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	68b9      	ldr	r1, [r7, #8]
 8001d78:	68f8      	ldr	r0, [r7, #12]
 8001d7a:	f7ff ff83 	bl	8001c84 <_ZN5Print5printEmi>
 8001d7e:	6178      	str	r0, [r7, #20]
  n += println();
 8001d80:	68f8      	ldr	r0, [r7, #12]
 8001d82:	f7ff ffb1 	bl	8001ce8 <_ZN5Print7printlnEv>
 8001d86:	4602      	mov	r2, r0
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	617b      	str	r3, [r7, #20]
  return n;
 8001d8e:	697b      	ldr	r3, [r7, #20]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <_ZN5Print7printlnEdi>:

size_t Print::println(double num, int digits)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af02      	add	r7, sp, #8
 8001d9e:	60f8      	str	r0, [r7, #12]
 8001da0:	e9c7 2300 	strd	r2, r3, [r7]
  size_t n = print(num, digits);
 8001da4:	6a3b      	ldr	r3, [r7, #32]
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	f7ff ff88 	bl	8001cc2 <_ZN5Print5printEdi>
 8001db2:	6178      	str	r0, [r7, #20]
  n += println();
 8001db4:	68f8      	ldr	r0, [r7, #12]
 8001db6:	f7ff ff97 	bl	8001ce8 <_ZN5Print7printlnEv>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	4413      	add	r3, r2
 8001dc0:	617b      	str	r3, [r7, #20]
  return n;
 8001dc2:	697b      	ldr	r3, [r7, #20]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <_ZN5Print11printNumberEmh>:

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b08e      	sub	sp, #56	; 0x38
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	71fb      	strb	r3, [r7, #7]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];
 8001dda:	f107 0310 	add.w	r3, r7, #16
 8001dde:	3320      	adds	r3, #32
 8001de0:	637b      	str	r3, [r7, #52]	; 0x34

  *str = '\0';
 8001de2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001de4:	2200      	movs	r2, #0
 8001de6:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	dc01      	bgt.n	8001df2 <_ZN5Print11printNumberEmh+0x26>
 8001dee:	230a      	movs	r3, #10
 8001df0:	71fb      	strb	r3, [r7, #7]

  do {
    char c = n % base;
 8001df2:	79fa      	ldrb	r2, [r7, #7]
 8001df4:	68bb      	ldr	r3, [r7, #8]
 8001df6:	fbb3 f1f2 	udiv	r1, r3, r2
 8001dfa:	fb02 f201 	mul.w	r2, r2, r1
 8001dfe:	1a9b      	subs	r3, r3, r2
 8001e00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    n /= base;
 8001e04:	79fb      	ldrb	r3, [r7, #7]
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e0c:	60bb      	str	r3, [r7, #8]

    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8001e0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e10:	3b01      	subs	r3, #1
 8001e12:	637b      	str	r3, [r7, #52]	; 0x34
 8001e14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e18:	2b09      	cmp	r3, #9
 8001e1a:	dc04      	bgt.n	8001e26 <_ZN5Print11printNumberEmh+0x5a>
 8001e1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e20:	3330      	adds	r3, #48	; 0x30
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	e003      	b.n	8001e2e <_ZN5Print11printNumberEmh+0x62>
 8001e26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001e2a:	3337      	adds	r3, #55	; 0x37
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e30:	7013      	strb	r3, [r2, #0]
  } while(n);
 8001e32:	68bb      	ldr	r3, [r7, #8]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d000      	beq.n	8001e3a <_ZN5Print11printNumberEmh+0x6e>
  do {
 8001e38:	e7db      	b.n	8001df2 <_ZN5Print11printNumberEmh+0x26>

  return write(str);
 8001e3a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f7ff fe46 	bl	8001ace <_ZN5Print5writeEPKc>
 8001e42:	4603      	mov	r3, r0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3738      	adds	r7, #56	; 0x38
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <_ZN5Print10printFloatEdh>:

size_t Print::printFloat(double number, uint8_t digits) 
{ 
 8001e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e4e:	b08f      	sub	sp, #60	; 0x3c
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	e9c7 2300 	strd	r2, r3, [r7]
  size_t n = 0;
 8001e58:	2300      	movs	r3, #0
 8001e5a:	637b      	str	r3, [r7, #52]	; 0x34
  
  if (isnan(number)) return print("nan");
 8001e5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001e64:	f7fe fdcc 	bl	8000a00 <__aeabi_dcmpun>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <_ZN5Print10printFloatEdh+0x26>
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e000      	b.n	8001e74 <_ZN5Print10printFloatEdh+0x28>
 8001e72:	2300      	movs	r3, #0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d005      	beq.n	8001e84 <_ZN5Print10printFloatEdh+0x38>
 8001e78:	497b      	ldr	r1, [pc, #492]	; (8002068 <_ZN5Print10printFloatEdh+0x21c>)
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f7ff fe70 	bl	8001b60 <_ZN5Print5printEPKc>
 8001e80:	4603      	mov	r3, r0
 8001e82:	e0ed      	b.n	8002060 <_ZN5Print10printFloatEdh+0x214>
  if (isinf(number)) return print("inf");
 8001e84:	683c      	ldr	r4, [r7, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	461e      	mov	r6, r3
 8001e90:	f04f 32ff 	mov.w	r2, #4294967295
 8001e94:	4b75      	ldr	r3, [pc, #468]	; (800206c <_ZN5Print10printFloatEdh+0x220>)
 8001e96:	4620      	mov	r0, r4
 8001e98:	4629      	mov	r1, r5
 8001e9a:	f7fe fdb1 	bl	8000a00 <__aeabi_dcmpun>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10b      	bne.n	8001ebc <_ZN5Print10printFloatEdh+0x70>
 8001ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ea8:	4b70      	ldr	r3, [pc, #448]	; (800206c <_ZN5Print10printFloatEdh+0x220>)
 8001eaa:	4620      	mov	r0, r4
 8001eac:	4629      	mov	r1, r5
 8001eae:	f7fe fd89 	bl	80009c4 <__aeabi_dcmple>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <_ZN5Print10printFloatEdh+0x70>
 8001eb8:	2300      	movs	r3, #0
 8001eba:	461e      	mov	r6, r3
 8001ebc:	b2f3      	uxtb	r3, r6
 8001ebe:	f083 0301 	eor.w	r3, r3, #1
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	f003 0301 	and.w	r3, r3, #1
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d005      	beq.n	8001eda <_ZN5Print10printFloatEdh+0x8e>
 8001ece:	4968      	ldr	r1, [pc, #416]	; (8002070 <_ZN5Print10printFloatEdh+0x224>)
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f7ff fe45 	bl	8001b60 <_ZN5Print5printEPKc>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	e0c2      	b.n	8002060 <_ZN5Print10printFloatEdh+0x214>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 8001eda:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001ede:	4b65      	ldr	r3, [pc, #404]	; (8002074 <_ZN5Print10printFloatEdh+0x228>)
 8001ee0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ee4:	f7fe fd82 	bl	80009ec <__aeabi_dcmpgt>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d005      	beq.n	8001efa <_ZN5Print10printFloatEdh+0xae>
 8001eee:	4962      	ldr	r1, [pc, #392]	; (8002078 <_ZN5Print10printFloatEdh+0x22c>)
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f7ff fe35 	bl	8001b60 <_ZN5Print5printEPKc>
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	e0b2      	b.n	8002060 <_ZN5Print10printFloatEdh+0x214>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 8001efa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8001efe:	4b5f      	ldr	r3, [pc, #380]	; (800207c <_ZN5Print10printFloatEdh+0x230>)
 8001f00:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f04:	f7fe fd54 	bl	80009b0 <__aeabi_dcmplt>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d005      	beq.n	8001f1a <_ZN5Print10printFloatEdh+0xce>
 8001f0e:	495a      	ldr	r1, [pc, #360]	; (8002078 <_ZN5Print10printFloatEdh+0x22c>)
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f7ff fe25 	bl	8001b60 <_ZN5Print5printEPKc>
 8001f16:	4603      	mov	r3, r0
 8001f18:	e0a2      	b.n	8002060 <_ZN5Print10printFloatEdh+0x214>
  
  // Handle negative numbers
  if (number < 0.0)
 8001f1a:	f04f 0200 	mov.w	r2, #0
 8001f1e:	f04f 0300 	mov.w	r3, #0
 8001f22:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f26:	f7fe fd43 	bl	80009b0 <__aeabi_dcmplt>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00d      	beq.n	8001f4c <_ZN5Print10printFloatEdh+0x100>
  {
     n += print('-');
 8001f30:	212d      	movs	r1, #45	; 0x2d
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	f7ff fe22 	bl	8001b7c <_ZN5Print5printEc>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f3c:	4413      	add	r3, r2
 8001f3e:	637b      	str	r3, [r7, #52]	; 0x34
     number = -number;
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	603b      	str	r3, [r7, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001f4a:	607b      	str	r3, [r7, #4]
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 8001f4c:	f04f 0300 	mov.w	r3, #0
 8001f50:	4c4b      	ldr	r4, [pc, #300]	; (8002080 <_ZN5Print10printFloatEdh+0x234>)
 8001f52:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  for (uint8_t i=0; i<digits; ++i)
 8001f56:	2300      	movs	r3, #0
 8001f58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f5c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001f60:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001f64:	429a      	cmp	r2, r3
 8001f66:	da10      	bge.n	8001f8a <_ZN5Print10printFloatEdh+0x13e>
    rounding /= 10.0;
 8001f68:	f04f 0200 	mov.w	r2, #0
 8001f6c:	4b45      	ldr	r3, [pc, #276]	; (8002084 <_ZN5Print10printFloatEdh+0x238>)
 8001f6e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001f72:	f7fe fbd5 	bl	8000720 <__aeabi_ddiv>
 8001f76:	4603      	mov	r3, r0
 8001f78:	460c      	mov	r4, r1
 8001f7a:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  for (uint8_t i=0; i<digits; ++i)
 8001f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f82:	3301      	adds	r3, #1
 8001f84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f88:	e7e8      	b.n	8001f5c <_ZN5Print10printFloatEdh+0x110>
  
  number += rounding;
 8001f8a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001f8e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001f92:	f7fe f8e9 	bl	8000168 <__adddf3>
 8001f96:	4603      	mov	r3, r0
 8001f98:	460c      	mov	r4, r1
 8001f9a:	e887 0018 	stmia.w	r7, {r3, r4}

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 8001f9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fa2:	f7fe fd43 	bl	8000a2c <__aeabi_d2uiz>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	617b      	str	r3, [r7, #20]
  double remainder = number - (double)int_part;
 8001faa:	6978      	ldr	r0, [r7, #20]
 8001fac:	f7fe fa18 	bl	80003e0 <__aeabi_ui2d>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	460c      	mov	r4, r1
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4623      	mov	r3, r4
 8001fb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001fbc:	f7fe f8d2 	bl	8000164 <__aeabi_dsub>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	460c      	mov	r4, r1
 8001fc4:	e9c7 3406 	strd	r3, r4, [r7, #24]
  n += print(int_part);
 8001fc8:	220a      	movs	r2, #10
 8001fca:	6979      	ldr	r1, [r7, #20]
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f7ff fe59 	bl	8001c84 <_ZN5Print5printEmi>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd6:	4413      	add	r3, r2
 8001fd8:	637b      	str	r3, [r7, #52]	; 0x34

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 8001fda:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	dd07      	ble.n	8001ff2 <_ZN5Print10printFloatEdh+0x1a6>
    n += print('.'); 
 8001fe2:	212e      	movs	r1, #46	; 0x2e
 8001fe4:	68f8      	ldr	r0, [r7, #12]
 8001fe6:	f7ff fdc9 	bl	8001b7c <_ZN5Print5printEc>
 8001fea:	4602      	mov	r2, r0
 8001fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fee:	4413      	add	r3, r2
 8001ff0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 8001ff2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8001ff6:	1e5a      	subs	r2, r3, #1
 8001ff8:	f887 2050 	strb.w	r2, [r7, #80]	; 0x50
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	bfcc      	ite	gt
 8002000:	2301      	movgt	r3, #1
 8002002:	2300      	movle	r3, #0
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d029      	beq.n	800205e <_ZN5Print10printFloatEdh+0x212>
  {
    remainder *= 10.0;
 800200a:	f04f 0200 	mov.w	r2, #0
 800200e:	4b1d      	ldr	r3, [pc, #116]	; (8002084 <_ZN5Print10printFloatEdh+0x238>)
 8002010:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002014:	f7fe fa5a 	bl	80004cc <__aeabi_dmul>
 8002018:	4603      	mov	r3, r0
 800201a:	460c      	mov	r4, r1
 800201c:	e9c7 3406 	strd	r3, r4, [r7, #24]
    unsigned int toPrint = (unsigned int)(remainder);
 8002020:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002024:	f7fe fd02 	bl	8000a2c <__aeabi_d2uiz>
 8002028:	4603      	mov	r3, r0
 800202a:	613b      	str	r3, [r7, #16]
    n += print(toPrint);
 800202c:	220a      	movs	r2, #10
 800202e:	6939      	ldr	r1, [r7, #16]
 8002030:	68f8      	ldr	r0, [r7, #12]
 8002032:	f7ff fdd7 	bl	8001be4 <_ZN5Print5printEji>
 8002036:	4602      	mov	r2, r0
 8002038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800203a:	4413      	add	r3, r2
 800203c:	637b      	str	r3, [r7, #52]	; 0x34
    remainder -= toPrint; 
 800203e:	6938      	ldr	r0, [r7, #16]
 8002040:	f7fe f9ce 	bl	80003e0 <__aeabi_ui2d>
 8002044:	4603      	mov	r3, r0
 8002046:	460c      	mov	r4, r1
 8002048:	461a      	mov	r2, r3
 800204a:	4623      	mov	r3, r4
 800204c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002050:	f7fe f888 	bl	8000164 <__aeabi_dsub>
 8002054:	4603      	mov	r3, r0
 8002056:	460c      	mov	r4, r1
 8002058:	e9c7 3406 	strd	r3, r4, [r7, #24]
  while (digits-- > 0)
 800205c:	e7c9      	b.n	8001ff2 <_ZN5Print10printFloatEdh+0x1a6>
  } 
  
  return n;
 800205e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002060:	4618      	mov	r0, r3
 8002062:	373c      	adds	r7, #60	; 0x3c
 8002064:	46bd      	mov	sp, r7
 8002066:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002068:	08005848 	.word	0x08005848
 800206c:	7fefffff 	.word	0x7fefffff
 8002070:	0800584c 	.word	0x0800584c
 8002074:	41efffff 	.word	0x41efffff
 8002078:	08005850 	.word	0x08005850
 800207c:	c1efffff 	.word	0xc1efffff
 8002080:	3fe00000 	.word	0x3fe00000
 8002084:	40240000 	.word	0x40240000

08002088 <_ZN5Print13setWriteErrorEi>:
    void setWriteError(int err = 1) { write_error = err; }
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	6039      	str	r1, [r7, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	bf00      	nop
 800209a:	370c      	adds	r7, #12
 800209c:	46bd      	mov	sp, r7
 800209e:	bc80      	pop	{r7}
 80020a0:	4770      	bx	lr

080020a2 <_ZN5Print13getWriteErrorEv>:
    int getWriteError() { return write_error; }
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	4618      	mov	r0, r3
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <_ZN5Print15clearWriteErrorEv>:
    void clearWriteError() { setWriteError(0); }
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	2100      	movs	r1, #0
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7ff ffe0 	bl	8002088 <_ZN5Print13setWriteErrorEi>
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <_ZNK6SdFile11curPositionEv>:
  uint8_t createContiguous(SdFile* dirFile,
          const char* fileName, uint32_t size);
  /** \return The current cluster number for a file or directory. */
  uint32_t curCluster(void) const {return curCluster_;}
  /** \return The current position for a file or directory. */
  uint32_t curPosition(void) const {return curPosition_;}
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	4618      	mov	r0, r3
 80020de:	370c      	adds	r7, #12
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr

080020e6 <_ZNK6SdFile8fileSizeEv>:
  uint8_t dirEntry(dir_t* dir);
  /** \return Index of this file's directory in the block dirBlock. */
  uint8_t dirIndex(void) const {return dirIndex_;}
  static void dirName(const dir_t& dir, char* name);
  /** \return The total number of bytes in a file or directory. */
  uint32_t fileSize(void) const {return fileSize_;}
 80020e6:	b480      	push	{r7}
 80020e8:	b083      	sub	sp, #12
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	4618      	mov	r0, r3
 80020f4:	370c      	adds	r7, #12
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bc80      	pop	{r7}
 80020fa:	4770      	bx	lr

080020fc <_ZNK6SdFile5isDirEv>:
  /** \return The first cluster number for a file or directory. */
  uint32_t firstCluster(void) const {return firstCluster_;}
  /** \return True if this is a SdFile for a directory else false. */
  uint8_t isDir(void) const {return type_ >= FAT_FILE_TYPE_MIN_DIR;}
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	7a5b      	ldrb	r3, [r3, #9]
 8002108:	2b01      	cmp	r3, #1
 800210a:	bfcc      	ite	gt
 800210c:	2301      	movgt	r3, #1
 800210e:	2300      	movle	r3, #0
 8002110:	b2db      	uxtb	r3, r3
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <_ZNK6SdFile6isOpenEv>:
  /** \return True if this is a SdFile for a file else false. */
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
  /** \return True if this is a SdFile for an open file/directory else false. */
  uint8_t isOpen(void) const {return type_ != FAT_FILE_TYPE_CLOSED;}
 800211c:	b480      	push	{r7}
 800211e:	b083      	sub	sp, #12
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	7a5b      	ldrb	r3, [r3, #9]
 8002128:	2b00      	cmp	r3, #0
 800212a:	bf14      	ite	ne
 800212c:	2301      	movne	r3, #1
 800212e:	2300      	moveq	r3, #0
 8002130:	b2db      	uxtb	r3, r3
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <_ZN6SdFile4readEv>:
   * Read the next byte from a file.
   *
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int16_t read(void) {
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8002144:	f107 030f 	add.w	r3, r7, #15
 8002148:	2201      	movs	r2, #1
 800214a:	4619      	mov	r1, r3
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f001 fa79 	bl	8003644 <_ZN6SdFile4readEPvt>
 8002152:	4603      	mov	r3, r0
 8002154:	2b01      	cmp	r3, #1
 8002156:	d102      	bne.n	800215e <_ZN6SdFile4readEv+0x22>
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	b21b      	sxth	r3, r3
 800215c:	e001      	b.n	8002162 <_ZN6SdFile4readEv+0x26>
 800215e:	f04f 33ff 	mov.w	r3, #4294967295
  }
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <_ZN6SdFile7seekCurEm>:
    curPosition_ = curCluster_ = 0;
  }
  uint8_t rmDir(void);
  uint8_t rmRfStar(void);
  /** Set the files position to current position + \a pos. See seekSet(). */
  uint8_t seekCur(uint32_t pos) {
 800216a:	b580      	push	{r7, lr}
 800216c:	b082      	sub	sp, #8
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
 8002172:	6039      	str	r1, [r7, #0]
    return seekSet(curPosition_ + pos);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	691a      	ldr	r2, [r3, #16]
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4413      	add	r3, r2
 800217c:	4619      	mov	r1, r3
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f001 fb8a 	bl	8003898 <_ZN6SdFile7seekSetEm>
 8002184:	4603      	mov	r3, r0
  }
 8002186:	4618      	mov	r0, r3
 8002188:	3708      	adds	r7, #8
 800218a:	46bd      	mov	sp, r7
 800218c:	bd80      	pop	{r7, pc}
	...

08002190 <_ZN6StreamC1Ev>:
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
 8002190:	b580      	push	{r7, lr}
 8002192:	b082      	sub	sp, #8
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4618      	mov	r0, r3
 800219c:	f7ff fc72 	bl	8001a84 <_ZN5PrintC1Ev>
 80021a0:	4a05      	ldr	r2, [pc, #20]	; (80021b8 <_ZN6StreamC1Ev+0x28>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	601a      	str	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80021ac:	609a      	str	r2, [r3, #8]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	08005ac4 	.word	0x08005ac4

080021bc <_ZN5SDLib4FileC1Ev>:
       Serial.println(nfilecount, DEC);
    */
  }
}

File::File(void) {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff ffe2 	bl	8002190 <_ZN6StreamC1Ev>
 80021cc:	4a06      	ldr	r2, [pc, #24]	; (80021e8 <_ZN5SDLib4FileC1Ev+0x2c>)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	601a      	str	r2, [r3, #0]
  _file = 0;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	621a      	str	r2, [r3, #32]
  _name[0] = 0;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	741a      	strb	r2, [r3, #16]
  //Serial.print("Created empty file object");
}
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4618      	mov	r0, r3
 80021e2:	3708      	adds	r7, #8
 80021e4:	46bd      	mov	sp, r7
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	08005aa0 	.word	0x08005aa0

080021ec <_ZN5SDLib4File5writeEh>:
boolean File::isDirectory(void) {
  return (_file && _file->isDir());
}


size_t File::write(uint8_t val) {
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
 80021f4:	460b      	mov	r3, r1
 80021f6:	70fb      	strb	r3, [r7, #3]
  return write(&val, 1);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	3304      	adds	r3, #4
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	1cf9      	adds	r1, r7, #3
 8002202:	2201      	movs	r2, #1
 8002204:	6878      	ldr	r0, [r7, #4]
 8002206:	4798      	blx	r3
 8002208:	4603      	mov	r3, r0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}

08002212 <_ZN5SDLib4File5writeEPKhj>:

size_t File::write(const uint8_t *buf, size_t size) {
 8002212:	b580      	push	{r7, lr}
 8002214:	b086      	sub	sp, #24
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
  size_t t;
  if (!_file) {
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d106      	bne.n	8002234 <_ZN5SDLib4File5writeEPKhj+0x22>
    setWriteError();
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	2101      	movs	r1, #1
 800222a:	4618      	mov	r0, r3
 800222c:	f7ff ff2c 	bl	8002088 <_ZN5Print13setWriteErrorEi>
    return 0;
 8002230:	2300      	movs	r3, #0
 8002232:	e022      	b.n	800227a <_ZN5SDLib4File5writeEPKhj+0x68>
  }
  _file->clearWriteError();
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a1b      	ldr	r3, [r3, #32]
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff ff3d 	bl	80020b8 <_ZN5Print15clearWriteErrorEv>
  t = _file->write(buf, size);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	687a      	ldr	r2, [r7, #4]
 8002244:	b292      	uxth	r2, r2
 8002246:	68b9      	ldr	r1, [r7, #8]
 8002248:	4618      	mov	r0, r3
 800224a:	f001 fcb1 	bl	8003bb0 <_ZN6SdFile5writeEPKvt>
 800224e:	6178      	str	r0, [r7, #20]
  if (_file->getWriteError()) {
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff ff24 	bl	80020a2 <_ZN5Print13getWriteErrorEv>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	bf14      	ite	ne
 8002260:	2301      	movne	r3, #1
 8002262:	2300      	moveq	r3, #0
 8002264:	b2db      	uxtb	r3, r3
 8002266:	2b00      	cmp	r3, #0
 8002268:	d006      	beq.n	8002278 <_ZN5SDLib4File5writeEPKhj+0x66>
    setWriteError();
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2101      	movs	r1, #1
 800226e:	4618      	mov	r0, r3
 8002270:	f7ff ff0a 	bl	8002088 <_ZN5Print13setWriteErrorEi>
    return 0;
 8002274:	2300      	movs	r3, #0
 8002276:	e000      	b.n	800227a <_ZN5SDLib4File5writeEPKhj+0x68>
  }
  return t;
 8002278:	697b      	ldr	r3, [r7, #20]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3718      	adds	r7, #24
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}

08002282 <_ZN5SDLib4File4peekEv>:

int File::peek() {
 8002282:	b580      	push	{r7, lr}
 8002284:	b084      	sub	sp, #16
 8002286:	af00      	add	r7, sp, #0
 8002288:	6078      	str	r0, [r7, #4]
  if (! _file) 
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <_ZN5SDLib4File4peekEv+0x14>
    return 0;
 8002292:	2300      	movs	r3, #0
 8002294:	e012      	b.n	80022bc <_ZN5SDLib4File4peekEv+0x3a>

  int c = _file->read();
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff ff4e 	bl	800213c <_ZN6SdFile4readEv>
 80022a0:	4603      	mov	r3, r0
 80022a2:	60fb      	str	r3, [r7, #12]
  if (c != -1) _file->seekCur(-1);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022aa:	d006      	beq.n	80022ba <_ZN5SDLib4File4peekEv+0x38>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	6a1b      	ldr	r3, [r3, #32]
 80022b0:	f04f 31ff 	mov.w	r1, #4294967295
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff ff58 	bl	800216a <_ZN6SdFile7seekCurEm>
  return c;
 80022ba:	68fb      	ldr	r3, [r7, #12]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <_ZN5SDLib4File4readEv>:

int File::read() {
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if (_file) 
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d006      	beq.n	80022e2 <_ZN5SDLib4File4readEv+0x1e>
    return _file->read();
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	4618      	mov	r0, r3
 80022da:	f7ff ff2f 	bl	800213c <_ZN6SdFile4readEv>
 80022de:	4603      	mov	r3, r0
 80022e0:	e001      	b.n	80022e6 <_ZN5SDLib4File4readEv+0x22>
  return -1;
 80022e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3708      	adds	r7, #8
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <_ZN5SDLib4File9availableEv>:
  if (_file) 
    return _file->read(buf, nbyte);
  return 0;
}

int File::available() {
 80022ee:	b590      	push	{r4, r7, lr}
 80022f0:	b085      	sub	sp, #20
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  if (! _file) return 0;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <_ZN5SDLib4File9availableEv+0x14>
 80022fe:	2300      	movs	r3, #0
 8002300:	e00f      	b.n	8002322 <_ZN5SDLib4File9availableEv+0x34>

  uint32_t n = size() - position();
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f000 f837 	bl	8002376 <_ZN5SDLib4File4sizeEv>
 8002308:	4604      	mov	r4, r0
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f000 f81e 	bl	800234c <_ZN5SDLib4File8positionEv>
 8002310:	4603      	mov	r3, r0
 8002312:	1ae3      	subs	r3, r4, r3
 8002314:	60fb      	str	r3, [r7, #12]

  return n > 0X7FFF ? 0X7FFF : n;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800231c:	4293      	cmp	r3, r2
 800231e:	bf28      	it	cs
 8002320:	4613      	movcs	r3, r2
}
 8002322:	4618      	mov	r0, r3
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	bd90      	pop	{r4, r7, pc}

0800232a <_ZN5SDLib4File5flushEv>:

void File::flush() {
 800232a:	b580      	push	{r7, lr}
 800232c:	b082      	sub	sp, #8
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
  if (_file)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a1b      	ldr	r3, [r3, #32]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d004      	beq.n	8002344 <_ZN5SDLib4File5flushEv+0x1a>
    _file->sync();
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	4618      	mov	r0, r3
 8002340:	f001 fb1e 	bl	8003980 <_ZN6SdFile4syncEv>
}
 8002344:	bf00      	nop
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <_ZN5SDLib4File8positionEv>:
  if (! _file) return false;

  return _file->seekSet(pos);
}

uint32_t File::position() {
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if (! _file) return -1;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a1b      	ldr	r3, [r3, #32]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d102      	bne.n	8002362 <_ZN5SDLib4File8positionEv+0x16>
 800235c:	f04f 33ff 	mov.w	r3, #4294967295
 8002360:	e005      	b.n	800236e <_ZN5SDLib4File8positionEv+0x22>
  return _file->curPosition();
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	4618      	mov	r0, r3
 8002368:	f7ff feb2 	bl	80020d0 <_ZNK6SdFile11curPositionEv>
 800236c:	4603      	mov	r3, r0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <_ZN5SDLib4File4sizeEv>:

uint32_t File::size() {
 8002376:	b580      	push	{r7, lr}
 8002378:	b082      	sub	sp, #8
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  if (! _file) return 0;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d101      	bne.n	800238a <_ZN5SDLib4File4sizeEv+0x14>
 8002386:	2300      	movs	r3, #0
 8002388:	e005      	b.n	8002396 <_ZN5SDLib4File4sizeEv+0x20>
  return _file->fileSize();
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fea9 	bl	80020e6 <_ZNK6SdFile8fileSizeEv>
 8002394:	4603      	mov	r3, r0
}
 8002396:	4618      	mov	r0, r3
 8002398:	3708      	adds	r7, #8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}

0800239e <_ZN7Sd2CardC1Ev>:
 * \brief Raw access to SD and SDHC flash memory cards.
 */
class Sd2Card {
 public:
  /** Construct an instance of Sd2Card. */
  Sd2Card(void) : errorCode_(0), inBlock_(0), partialBlockRead_(0), type_(0) {}
 800239e:	b480      	push	{r7}
 80023a0:	b083      	sub	sp, #12
 80023a2:	af00      	add	r7, sp, #0
 80023a4:	6078      	str	r0, [r7, #4]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	715a      	strb	r2, [r3, #5]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	719a      	strb	r2, [r3, #6]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	729a      	strb	r2, [r3, #10]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	731a      	strb	r2, [r3, #12]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr
	...

080023cc <_ZN6SdFileC1Ev>:
  SdFile(void) : type_(FAT_FILE_TYPE_CLOSED) {}
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7ff fb54 	bl	8001a84 <_ZN5PrintC1Ev>
 80023dc:	4a05      	ldr	r2, [pc, #20]	; (80023f4 <_ZN6SdFileC1Ev+0x28>)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	725a      	strb	r2, [r3, #9]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	08005ae8 	.word	0x08005ae8

080023f8 <_ZN6SdFile6rewindEv>:
  void rewind(void) {
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
    curPosition_ = curCluster_ = 0;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	611a      	str	r2, [r3, #16]
  }
 800240e:	bf00      	nop
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	bc80      	pop	{r7}
 8002416:	4770      	bx	lr

08002418 <_ZN6SdFile8openRootER8SdVolume>:
   */
  uint8_t open(SdFile& dirFile, uint16_t index, uint8_t oflag) {  // NOLINT
    return open(&dirFile, index, oflag);
  }
  /** \deprecated Use: uint8_t SdFile::openRoot(SdVolume* vol); */
  uint8_t openRoot(SdVolume& vol) {return openRoot(&vol);}  // NOLINT
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
 8002422:	6839      	ldr	r1, [r7, #0]
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 ffcd 	bl	80033c4 <_ZN6SdFile8openRootEP8SdVolume>
 800242a:	4603      	mov	r3, r0
 800242c:	4618      	mov	r0, r3
 800242e:	3708      	adds	r7, #8
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <_ZN8SdVolumeC1Ev>:
 * \brief Access FAT16 and FAT32 volumes on SD and SDHC cards.
 */
class SdVolume {
 public:
  /** Create an instance of SdVolume */
  SdVolume(void) :allocSearchStart_(2), fatType_(0) {}
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	601a      	str	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	f883 2020 	strb.w	r2, [r3, #32]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4618      	mov	r0, r3
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	bc80      	pop	{r7}
 8002454:	4770      	bx	lr

08002456 <_ZN8SdVolume4initEP7Sd2Card>:
   * \return The value one, true, is returned for success and
   * the value zero, false, is returned for failure.  Reasons for
   * failure include not finding a valid partition, not finding a valid
   * FAT file system or an I/O error.
   */
  uint8_t init(Sd2Card* dev) { return init(dev, 1) ? true : init(dev, 0);}
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
 800245e:	6039      	str	r1, [r7, #0]
 8002460:	2201      	movs	r2, #1
 8002462:	6839      	ldr	r1, [r7, #0]
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f001 ff6d 	bl	8004344 <_ZN8SdVolume4initEP7Sd2Cardh>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d106      	bne.n	800247e <_ZN8SdVolume4initEP7Sd2Card+0x28>
 8002470:	2200      	movs	r2, #0
 8002472:	6839      	ldr	r1, [r7, #0]
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f001 ff65 	bl	8004344 <_ZN8SdVolume4initEP7Sd2Cardh>
 800247a:	4603      	mov	r3, r0
 800247c:	e000      	b.n	8002480 <_ZN8SdVolume4initEP7Sd2Card+0x2a>
 800247e:	2301      	movs	r3, #1
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <_ZN8SdVolume4initER7Sd2Card>:
  static Sd2Card* sdCard(void) {return sdCard_;}
//------------------------------------------------------------------------------
#if ALLOW_DEPRECATED_FUNCTIONS
  // Deprecated functions  - suppress cpplint warnings with NOLINT comment
  /** \deprecated Use: uint8_t SdVolume::init(Sd2Card* dev); */
  uint8_t init(Sd2Card& dev) {return init(&dev);}  // NOLINT
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
 8002490:	6039      	str	r1, [r7, #0]
 8002492:	6839      	ldr	r1, [r7, #0]
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f7ff ffde 	bl	8002456 <_ZN8SdVolume4initEP7Sd2Card>
 800249a:	4603      	mov	r3, r0
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <_ZN5SDLib7SDClassC1Ev>:
  void rewindDirectory(void);
  
  using Print::write;
};

class SDClass {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f7ff ff75 	bl	800239e <_ZN7Sd2CardC1Ev>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	3310      	adds	r3, #16
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ffbb 	bl	8002434 <_ZN8SdVolumeC1Ev>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3338      	adds	r3, #56	; 0x38
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff ff82 	bl	80023cc <_ZN6SdFileC1Ev>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
	...

080024d4 <_Z41__static_initialization_and_destruction_0ii>:
    _file->rewind();
}

SDClass SD;

};
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b01      	cmp	r3, #1
 80024e2:	d107      	bne.n	80024f4 <_Z41__static_initialization_and_destruction_0ii+0x20>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d102      	bne.n	80024f4 <_Z41__static_initialization_and_destruction_0ii+0x20>
SDClass SD;
 80024ee:	4803      	ldr	r0, [pc, #12]	; (80024fc <_Z41__static_initialization_and_destruction_0ii+0x28>)
 80024f0:	f7ff ffd8 	bl	80024a4 <_ZN5SDLib7SDClassC1Ev>
};
 80024f4:	bf00      	nop
 80024f6:	3708      	adds	r7, #8
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	200000e4 	.word	0x200000e4

08002500 <_GLOBAL__sub_I__ZN5SDLib20getNextPathComponentEPKcPjPc>:
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
 8002504:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002508:	2001      	movs	r0, #1
 800250a:	f7ff ffe3 	bl	80024d4 <_Z41__static_initialization_and_destruction_0ii>
 800250e:	bd80      	pop	{r7, pc}

08002510 <_ZNK7Sd2Card4typeEv>:
  uint8_t setSckRate(uint8_t sckRateID);
#ifdef USE_SPI_LIB
  uint8_t setSpiClock(uint32_t clock);
#endif
  /** Return the card type: SD V1, SD V2 or SDHC */
  uint8_t type(void) const {return type_;}
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	7b1b      	ldrb	r3, [r3, #12]
 800251c:	4618      	mov	r0, r3
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr

08002526 <_ZN7Sd2Card8cardAcmdEhm>:
  uint16_t offset_;
  uint8_t partialBlockRead_;
  uint8_t status_;
  uint8_t type_;
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
 8002526:	b580      	push	{r7, lr}
 8002528:	b084      	sub	sp, #16
 800252a:	af00      	add	r7, sp, #0
 800252c:	60f8      	str	r0, [r7, #12]
 800252e:	460b      	mov	r3, r1
 8002530:	607a      	str	r2, [r7, #4]
 8002532:	72fb      	strb	r3, [r7, #11]
    cardCommand(CMD55, 0);
 8002534:	2200      	movs	r2, #0
 8002536:	2137      	movs	r1, #55	; 0x37
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 f843 	bl	80025c4 <_ZN7Sd2Card11cardCommandEhm>
    return cardCommand(cmd, arg);
 800253e:	7afb      	ldrb	r3, [r7, #11]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	4619      	mov	r1, r3
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 f83d 	bl	80025c4 <_ZN7Sd2Card11cardCommandEhm>
 800254a:	4603      	mov	r3, r0
  }
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <_ZN7Sd2Card5errorEh>:
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  void error(uint8_t code) {errorCode_ = code;}
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	460b      	mov	r3, r1
 800255e:	70fb      	strb	r3, [r7, #3]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	78fa      	ldrb	r2, [r7, #3]
 8002564:	715a      	strb	r2, [r3, #5]
 8002566:	bf00      	nop
 8002568:	370c      	adds	r7, #12
 800256a:	46bd      	mov	sp, r7
 800256c:	bc80      	pop	{r7}
 800256e:	4770      	bx	lr

08002570 <_ZN7Sd2Card4typeEh>:
  uint8_t readRegister(uint8_t cmd, void* buf);
  uint8_t sendWriteCommand(uint32_t blockNumber, uint32_t eraseCount);
  void chipSelectHigh(void);
  void chipSelectLow(void);
  void type(uint8_t value) {type_ = value;}
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	70fb      	strb	r3, [r7, #3]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	731a      	strb	r2, [r3, #12]
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr

0800258c <_ZL7spiSendh>:
#include <SPI/SPIClass.h>
//static SPISettings settings;
#endif
// functions for hardware SPI
/** Send a byte to the card */
static void spiSend(uint8_t b) {
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	4603      	mov	r3, r0
 8002594:	71fb      	strb	r3, [r7, #7]
#ifndef USE_SPI_LIB
  SPDR = b;
  while (!(SPSR & (1 << SPIF)))
    ;
#else
  SDCARD_SPI.transfer(b);
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	4619      	mov	r1, r3
 800259a:	4803      	ldr	r0, [pc, #12]	; (80025a8 <_ZL7spiSendh+0x1c>)
 800259c:	f002 f96a 	bl	8004874 <_ZN8SPIClass8transferEh>
#endif
}
 80025a0:	bf00      	nop
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	20000364 	.word	0x20000364

080025ac <_ZL6spiRecv>:
/** Receive a byte from the card */
static  uint8_t spiRec(void) {
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
#ifndef USE_SPI_LIB
  spiSend(0XFF);
  return SPDR;
#else
  return SDCARD_SPI.transfer(0xFF);
 80025b0:	21ff      	movs	r1, #255	; 0xff
 80025b2:	4803      	ldr	r0, [pc, #12]	; (80025c0 <_ZL6spiRecv+0x14>)
 80025b4:	f002 f95e 	bl	8004874 <_ZN8SPIClass8transferEh>
 80025b8:	4603      	mov	r3, r0
#endif
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	20000364 	.word	0x20000364

080025c4 <_ZN7Sd2Card11cardCommandEhm>:
  sei();
}
#endif  // SOFTWARE_SPI
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t Sd2Card::cardCommand(uint8_t cmd, uint32_t arg) {
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	460b      	mov	r3, r1
 80025ce:	607a      	str	r2, [r7, #4]
 80025d0:	72fb      	strb	r3, [r7, #11]
  // end read if in partialBlockRead mode
  readEnd();
 80025d2:	68f8      	ldr	r0, [r7, #12]
 80025d4:	f000 fa44 	bl	8002a60 <_ZN7Sd2Card7readEndEv>

  // select card
  chipSelectLow();
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 f86b 	bl	80026b4 <_ZN7Sd2Card13chipSelectLowEv>

  // wait up to 300 ms if busy
  waitNotBusy(300);
 80025de:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 fa75 	bl	8002ad2 <_ZN7Sd2Card11waitNotBusyEj>

  // send command
  spiSend(cmd | 0x40);
 80025e8:	7afb      	ldrb	r3, [r7, #11]
 80025ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7ff ffcb 	bl	800258c <_ZL7spiSendh>

  // send argument
  for (int8_t s = 24; s >= 0; s -= 8) spiSend(arg >> s);
 80025f6:	2318      	movs	r3, #24
 80025f8:	75fb      	strb	r3, [r7, #23]
 80025fa:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	db0d      	blt.n	800261e <_ZN7Sd2Card11cardCommandEhm+0x5a>
 8002602:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
 800260c:	b2db      	uxtb	r3, r3
 800260e:	4618      	mov	r0, r3
 8002610:	f7ff ffbc 	bl	800258c <_ZL7spiSendh>
 8002614:	7dfb      	ldrb	r3, [r7, #23]
 8002616:	3b08      	subs	r3, #8
 8002618:	b2db      	uxtb	r3, r3
 800261a:	75fb      	strb	r3, [r7, #23]
 800261c:	e7ed      	b.n	80025fa <_ZN7Sd2Card11cardCommandEhm+0x36>

  // send CRC
  uint8_t crc = 0XFF;
 800261e:	23ff      	movs	r3, #255	; 0xff
 8002620:	75bb      	strb	r3, [r7, #22]
  if (cmd == CMD0) crc = 0X95;  // correct crc for CMD0 with arg 0
 8002622:	7afb      	ldrb	r3, [r7, #11]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <_ZN7Sd2Card11cardCommandEhm+0x68>
 8002628:	2395      	movs	r3, #149	; 0x95
 800262a:	75bb      	strb	r3, [r7, #22]
  if (cmd == CMD8) crc = 0X87;  // correct crc for CMD8 with arg 0X1AA
 800262c:	7afb      	ldrb	r3, [r7, #11]
 800262e:	2b08      	cmp	r3, #8
 8002630:	d101      	bne.n	8002636 <_ZN7Sd2Card11cardCommandEhm+0x72>
 8002632:	2387      	movs	r3, #135	; 0x87
 8002634:	75bb      	strb	r3, [r7, #22]
  spiSend(crc);
 8002636:	7dbb      	ldrb	r3, [r7, #22]
 8002638:	4618      	mov	r0, r3
 800263a:	f7ff ffa7 	bl	800258c <_ZL7spiSendh>

  // wait for response
  for (uint8_t i = 0; ((status_ = spiRec()) & 0X80) && i != 0XFF; i++)
 800263e:	2300      	movs	r3, #0
 8002640:	757b      	strb	r3, [r7, #21]
 8002642:	f7ff ffb3 	bl	80025ac <_ZL6spiRecv>
 8002646:	4603      	mov	r3, r0
 8002648:	461a      	mov	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	72da      	strb	r2, [r3, #11]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	7adb      	ldrb	r3, [r3, #11]
 8002652:	b25b      	sxtb	r3, r3
 8002654:	2b00      	cmp	r3, #0
 8002656:	da04      	bge.n	8002662 <_ZN7Sd2Card11cardCommandEhm+0x9e>
 8002658:	7d7b      	ldrb	r3, [r7, #21]
 800265a:	2bff      	cmp	r3, #255	; 0xff
 800265c:	d001      	beq.n	8002662 <_ZN7Sd2Card11cardCommandEhm+0x9e>
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <_ZN7Sd2Card11cardCommandEhm+0xa0>
 8002662:	2300      	movs	r3, #0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <_ZN7Sd2Card11cardCommandEhm+0xac>
 8002668:	7d7b      	ldrb	r3, [r7, #21]
 800266a:	3301      	adds	r3, #1
 800266c:	757b      	strb	r3, [r7, #21]
 800266e:	e7e8      	b.n	8002642 <_ZN7Sd2Card11cardCommandEhm+0x7e>
    ;
  return status_;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	7adb      	ldrb	r3, [r3, #11]
}
 8002674:	4618      	mov	r0, r3
 8002676:	3718      	adds	r7, #24
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <_ZN7Sd2Card14chipSelectHighEv>:
  }
}
//------------------------------------------------------------------------------
static uint8_t chip_select_asserted = 0;

void Sd2Card::chipSelectHigh(void) {
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  digitalWrite(chipSelectPin_, HIGH);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	791b      	ldrb	r3, [r3, #4]
 8002688:	2101      	movs	r1, #1
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff f8ba 	bl	8001804 <digitalWrite>
#ifdef USE_SPI_LIB
  if (chip_select_asserted) {
 8002690:	4b06      	ldr	r3, [pc, #24]	; (80026ac <_ZN7Sd2Card14chipSelectHighEv+0x30>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <_ZN7Sd2Card14chipSelectHighEv+0x28>
    chip_select_asserted = 0;
 8002698:	4b04      	ldr	r3, [pc, #16]	; (80026ac <_ZN7Sd2Card14chipSelectHighEv+0x30>)
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]
    SDCARD_SPI.endTransaction();
 800269e:	4804      	ldr	r0, [pc, #16]	; (80026b0 <_ZN7Sd2Card14chipSelectHighEv+0x34>)
 80026a0:	f002 f802 	bl	80046a8 <_ZN8SPIClass14endTransactionEv>
  }
#endif
}
 80026a4:	bf00      	nop
 80026a6:	3708      	adds	r7, #8
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20000148 	.word	0x20000148
 80026b0:	20000364 	.word	0x20000364

080026b4 <_ZN7Sd2Card13chipSelectLowEv>:
//------------------------------------------------------------------------------
void Sd2Card::chipSelectLow(void) {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b082      	sub	sp, #8
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
#ifdef USE_SPI_LIB
  if (!chip_select_asserted) {
 80026bc:	4b09      	ldr	r3, [pc, #36]	; (80026e4 <_ZN7Sd2Card13chipSelectLowEv+0x30>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d105      	bne.n	80026d0 <_ZN7Sd2Card13chipSelectLowEv+0x1c>
    chip_select_asserted = 1;
 80026c4:	4b07      	ldr	r3, [pc, #28]	; (80026e4 <_ZN7Sd2Card13chipSelectLowEv+0x30>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	701a      	strb	r2, [r3, #0]
    SDCARD_SPI.beginTransaction();
 80026ca:	4807      	ldr	r0, [pc, #28]	; (80026e8 <_ZN7Sd2Card13chipSelectLowEv+0x34>)
 80026cc:	f001 ffe3 	bl	8004696 <_ZN8SPIClass16beginTransactionEv>
  }
#endif
  digitalWrite(chipSelectPin_, LOW);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	791b      	ldrb	r3, [r3, #4]
 80026d4:	2100      	movs	r1, #0
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff f894 	bl	8001804 <digitalWrite>
}
 80026dc:	bf00      	nop
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000148 	.word	0x20000148
 80026e8:	20000364 	.word	0x20000364

080026ec <_ZN7Sd2Card4initEhh>:
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  The reason for failure
 * can be determined by calling errorCode() and errorData().
 */
uint8_t Sd2Card::init(uint8_t sckRateID, uint8_t chipSelectPin) {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	70fb      	strb	r3, [r7, #3]
 80026f8:	4613      	mov	r3, r2
 80026fa:	70bb      	strb	r3, [r7, #2]
  errorCode_ = inBlock_ = partialBlockRead_ = type_ = 0;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	731a      	strb	r2, [r3, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	7b1a      	ldrb	r2, [r3, #12]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	729a      	strb	r2, [r3, #10]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	7a9a      	ldrb	r2, [r3, #10]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	719a      	strb	r2, [r3, #6]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	799a      	ldrb	r2, [r3, #6]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	715a      	strb	r2, [r3, #5]
  chipSelectPin_ = chipSelectPin;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	78ba      	ldrb	r2, [r7, #2]
 800271e:	711a      	strb	r2, [r3, #4]
  // 16-bit init start time allows over a minute
  unsigned int t0 = millis();
 8002720:	f002 fcda 	bl	80050d8 <millis>
 8002724:	61b8      	str	r0, [r7, #24]
  uint32_t arg;

  // set pin modes
  pinMode(chipSelectPin_, OUTPUT);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	791b      	ldrb	r3, [r3, #4]
 800272a:	2110      	movs	r1, #16
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff f801 	bl	8001734 <pinMode>
  digitalWrite(chipSelectPin_, HIGH);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	791b      	ldrb	r3, [r3, #4]
 8002736:	2101      	movs	r1, #1
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff f863 	bl	8001804 <digitalWrite>
  // Enable SPI, Master, clock rate f_osc/128
  SPCR = (1 << SPE) | (1 << MSTR) | (1 << SPR1) | (1 << SPR0);
  // clear double speed
  SPSR &= ~(1 << SPI2X);
#else // USE_SPI_LIB
  SDCARD_SPI.begin(SPI_Mode_Master);
 800273e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002742:	4870      	ldr	r0, [pc, #448]	; (8002904 <_ZN7Sd2Card4initEhh+0x218>)
 8002744:	f001 ffba 	bl	80046bc <_ZN8SPIClass5beginEt>
#endif // USE_SPI_LIB
#endif // SOFTWARE_SPI

  // must supply min of 74 clock cycles with CS high.
#ifdef USE_SPI_LIB
  SDCARD_SPI.beginTransaction();
 8002748:	486e      	ldr	r0, [pc, #440]	; (8002904 <_ZN7Sd2Card4initEhh+0x218>)
 800274a:	f001 ffa4 	bl	8004696 <_ZN8SPIClass16beginTransactionEv>
#endif
  for (uint8_t i = 0; i < 10; i++) spiSend(0XFF);
 800274e:	2300      	movs	r3, #0
 8002750:	77fb      	strb	r3, [r7, #31]
 8002752:	7ffb      	ldrb	r3, [r7, #31]
 8002754:	2b09      	cmp	r3, #9
 8002756:	dc06      	bgt.n	8002766 <_ZN7Sd2Card4initEhh+0x7a>
 8002758:	20ff      	movs	r0, #255	; 0xff
 800275a:	f7ff ff17 	bl	800258c <_ZL7spiSendh>
 800275e:	7ffb      	ldrb	r3, [r7, #31]
 8002760:	3301      	adds	r3, #1
 8002762:	77fb      	strb	r3, [r7, #31]
 8002764:	e7f5      	b.n	8002752 <_ZN7Sd2Card4initEhh+0x66>
#ifdef USE_SPI_LIB
  SDCARD_SPI.endTransaction();
 8002766:	4867      	ldr	r0, [pc, #412]	; (8002904 <_ZN7Sd2Card4initEhh+0x218>)
 8002768:	f001 ff9e 	bl	80046a8 <_ZN8SPIClass14endTransactionEv>
#endif

  chipSelectLow();
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff ffa1 	bl	80026b4 <_ZN7Sd2Card13chipSelectLowEv>

  // command to go idle in SPI mode
  while ((status_ = cardCommand(CMD0, 0)) != R1_IDLE_STATE) {
 8002772:	2200      	movs	r2, #0
 8002774:	2100      	movs	r1, #0
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f7ff ff24 	bl	80025c4 <_ZN7Sd2Card11cardCommandEhm>
 800277c:	4603      	mov	r3, r0
 800277e:	461a      	mov	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	72da      	strb	r2, [r3, #11]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	7adb      	ldrb	r3, [r3, #11]
 8002788:	2b01      	cmp	r3, #1
 800278a:	bf14      	ite	ne
 800278c:	2301      	movne	r3, #1
 800278e:	2300      	moveq	r3, #0
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00e      	beq.n	80027b4 <_ZN7Sd2Card4initEhh+0xc8>
    unsigned int d = millis() - t0;
 8002796:	f002 fc9f 	bl	80050d8 <millis>
 800279a:	4602      	mov	r2, r0
 800279c:	69bb      	ldr	r3, [r7, #24]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	617b      	str	r3, [r7, #20]
    if (d > SD_INIT_TIMEOUT) {
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80027a8:	d9e3      	bls.n	8002772 <_ZN7Sd2Card4initEhh+0x86>
      error(SD_CARD_ERROR_CMD0);
 80027aa:	2101      	movs	r1, #1
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f7ff fed1 	bl	8002554 <_ZN7Sd2Card5errorEh>
      goto fail;
 80027b2:	e09e      	b.n	80028f2 <_ZN7Sd2Card4initEhh+0x206>
    }
  }
  // check SD version
  if ((cardCommand(CMD8, 0x1AA) & R1_ILLEGAL_COMMAND)) {
 80027b4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80027b8:	2108      	movs	r1, #8
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7ff ff02 	bl	80025c4 <_ZN7Sd2Card11cardCommandEhm>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f003 0304 	and.w	r3, r3, #4
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	bf14      	ite	ne
 80027ca:	2301      	movne	r3, #1
 80027cc:	2300      	moveq	r3, #0
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d004      	beq.n	80027de <_ZN7Sd2Card4initEhh+0xf2>
    type(SD_CARD_TYPE_SD1);
 80027d4:	2101      	movs	r1, #1
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff feca 	bl	8002570 <_ZN7Sd2Card4typeEh>
 80027dc:	e01b      	b.n	8002816 <_ZN7Sd2Card4initEhh+0x12a>
  } else {
    // only need last byte of r7 response
    for (uint8_t i = 0; i < 4; i++) status_ = spiRec();
 80027de:	2300      	movs	r3, #0
 80027e0:	77bb      	strb	r3, [r7, #30]
 80027e2:	7fbb      	ldrb	r3, [r7, #30]
 80027e4:	2b03      	cmp	r3, #3
 80027e6:	dc09      	bgt.n	80027fc <_ZN7Sd2Card4initEhh+0x110>
 80027e8:	f7ff fee0 	bl	80025ac <_ZL6spiRecv>
 80027ec:	4603      	mov	r3, r0
 80027ee:	461a      	mov	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	72da      	strb	r2, [r3, #11]
 80027f4:	7fbb      	ldrb	r3, [r7, #30]
 80027f6:	3301      	adds	r3, #1
 80027f8:	77bb      	strb	r3, [r7, #30]
 80027fa:	e7f2      	b.n	80027e2 <_ZN7Sd2Card4initEhh+0xf6>
    if (status_ != 0XAA) {
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	7adb      	ldrb	r3, [r3, #11]
 8002800:	2baa      	cmp	r3, #170	; 0xaa
 8002802:	d004      	beq.n	800280e <_ZN7Sd2Card4initEhh+0x122>
      error(SD_CARD_ERROR_CMD8);
 8002804:	2102      	movs	r1, #2
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f7ff fea4 	bl	8002554 <_ZN7Sd2Card5errorEh>
      goto fail;
 800280c:	e071      	b.n	80028f2 <_ZN7Sd2Card4initEhh+0x206>
    }
    type(SD_CARD_TYPE_SD2);
 800280e:	2102      	movs	r1, #2
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f7ff fead 	bl	8002570 <_ZN7Sd2Card4typeEh>
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f7ff fe7a 	bl	8002510 <_ZNK7Sd2Card4typeEv>
 800281c:	4603      	mov	r3, r0
 800281e:	2b02      	cmp	r3, #2
 8002820:	d102      	bne.n	8002828 <_ZN7Sd2Card4initEhh+0x13c>
 8002822:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002826:	e000      	b.n	800282a <_ZN7Sd2Card4initEhh+0x13e>
 8002828:	2300      	movs	r3, #0
 800282a:	613b      	str	r3, [r7, #16]

  while ((status_ = cardAcmd(ACMD41, arg)) != R1_READY_STATE) {
 800282c:	693a      	ldr	r2, [r7, #16]
 800282e:	2129      	movs	r1, #41	; 0x29
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7ff fe78 	bl	8002526 <_ZN7Sd2Card8cardAcmdEhm>
 8002836:	4603      	mov	r3, r0
 8002838:	461a      	mov	r2, r3
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	72da      	strb	r2, [r3, #11]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	7adb      	ldrb	r3, [r3, #11]
 8002842:	2b00      	cmp	r3, #0
 8002844:	bf14      	ite	ne
 8002846:	2301      	movne	r3, #1
 8002848:	2300      	moveq	r3, #0
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00e      	beq.n	800286e <_ZN7Sd2Card4initEhh+0x182>
    // check for timeout
    unsigned int d = millis() - t0;
 8002850:	f002 fc42 	bl	80050d8 <millis>
 8002854:	4602      	mov	r2, r0
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	60fb      	str	r3, [r7, #12]
    if (d > SD_INIT_TIMEOUT) {
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002862:	d9e3      	bls.n	800282c <_ZN7Sd2Card4initEhh+0x140>
      error(SD_CARD_ERROR_ACMD41);
 8002864:	2108      	movs	r1, #8
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff fe74 	bl	8002554 <_ZN7Sd2Card5errorEh>
      goto fail;
 800286c:	e041      	b.n	80028f2 <_ZN7Sd2Card4initEhh+0x206>
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f7ff fe4e 	bl	8002510 <_ZNK7Sd2Card4typeEv>
 8002874:	4603      	mov	r3, r0
 8002876:	2b02      	cmp	r3, #2
 8002878:	bf0c      	ite	eq
 800287a:	2301      	moveq	r3, #1
 800287c:	2300      	movne	r3, #0
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d02c      	beq.n	80028de <_ZN7Sd2Card4initEhh+0x1f2>
    if (cardCommand(CMD58, 0)) {
 8002884:	2200      	movs	r2, #0
 8002886:	213a      	movs	r1, #58	; 0x3a
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f7ff fe9b 	bl	80025c4 <_ZN7Sd2Card11cardCommandEhm>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	bf14      	ite	ne
 8002894:	2301      	movne	r3, #1
 8002896:	2300      	moveq	r3, #0
 8002898:	b2db      	uxtb	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d004      	beq.n	80028a8 <_ZN7Sd2Card4initEhh+0x1bc>
      error(SD_CARD_ERROR_CMD58);
 800289e:	2106      	movs	r1, #6
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f7ff fe57 	bl	8002554 <_ZN7Sd2Card5errorEh>
      goto fail;
 80028a6:	e024      	b.n	80028f2 <_ZN7Sd2Card4initEhh+0x206>
    }
    if ((spiRec() & 0XC0) == 0XC0) type(SD_CARD_TYPE_SDHC);
 80028a8:	f7ff fe80 	bl	80025ac <_ZL6spiRecv>
 80028ac:	4603      	mov	r3, r0
 80028ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80028b2:	2bc0      	cmp	r3, #192	; 0xc0
 80028b4:	bf0c      	ite	eq
 80028b6:	2301      	moveq	r3, #1
 80028b8:	2300      	movne	r3, #0
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <_ZN7Sd2Card4initEhh+0x1dc>
 80028c0:	2103      	movs	r1, #3
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7ff fe54 	bl	8002570 <_ZN7Sd2Card4typeEh>
    // discard rest of ocr - contains allowed voltage range
    for (uint8_t i = 0; i < 3; i++) spiRec();
 80028c8:	2300      	movs	r3, #0
 80028ca:	777b      	strb	r3, [r7, #29]
 80028cc:	7f7b      	ldrb	r3, [r7, #29]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	dc05      	bgt.n	80028de <_ZN7Sd2Card4initEhh+0x1f2>
 80028d2:	f7ff fe6b 	bl	80025ac <_ZL6spiRecv>
 80028d6:	7f7b      	ldrb	r3, [r7, #29]
 80028d8:	3301      	adds	r3, #1
 80028da:	777b      	strb	r3, [r7, #29]
 80028dc:	e7f6      	b.n	80028cc <_ZN7Sd2Card4initEhh+0x1e0>
  }
  chipSelectHigh();
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff fecc 	bl	800267c <_ZN7Sd2Card14chipSelectHighEv>

#ifndef SOFTWARE_SPI
  return setSckRate(sckRateID);
 80028e4:	78fb      	ldrb	r3, [r7, #3]
 80028e6:	4619      	mov	r1, r3
 80028e8:	6878      	ldr	r0, [r7, #4]
 80028ea:	f000 f8de 	bl	8002aaa <_ZN7Sd2Card10setSckRateEh>
 80028ee:	4603      	mov	r3, r0
 80028f0:	e003      	b.n	80028fa <_ZN7Sd2Card4initEhh+0x20e>
#else  // SOFTWARE_SPI
  return true;
#endif  // SOFTWARE_SPI

 fail:
  chipSelectHigh();
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7ff fec2 	bl	800267c <_ZN7Sd2Card14chipSelectHighEv>
  return false;
 80028f8:	2300      	movs	r3, #0
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	3720      	adds	r7, #32
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	20000364 	.word	0x20000364

08002908 <_ZN7Sd2Card9readBlockEmPh>:
 * \param[out] dst Pointer to the location that will receive the data.

 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readBlock(uint32_t block, uint8_t* dst) {
 8002908:	b580      	push	{r7, lr}
 800290a:	b086      	sub	sp, #24
 800290c:	af02      	add	r7, sp, #8
 800290e:	60f8      	str	r0, [r7, #12]
 8002910:	60b9      	str	r1, [r7, #8]
 8002912:	607a      	str	r2, [r7, #4]
  return readData(block, 0, 512, dst);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	f44f 7300 	mov.w	r3, #512	; 0x200
 800291c:	2200      	movs	r2, #0
 800291e:	68b9      	ldr	r1, [r7, #8]
 8002920:	68f8      	ldr	r0, [r7, #12]
 8002922:	f000 f805 	bl	8002930 <_ZN7Sd2Card8readDataEmttPh>
 8002926:	4603      	mov	r3, r0
}
 8002928:	4618      	mov	r0, r3
 800292a:	3710      	adds	r7, #16
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <_ZN7Sd2Card8readDataEmttPh>:
 * \param[in] count Number of bytes to read
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::readData(uint32_t block,
        uint16_t offset, uint16_t count, uint8_t* dst) {
 8002930:	b590      	push	{r4, r7, lr}
 8002932:	b087      	sub	sp, #28
 8002934:	af00      	add	r7, sp, #0
 8002936:	60f8      	str	r0, [r7, #12]
 8002938:	60b9      	str	r1, [r7, #8]
 800293a:	4611      	mov	r1, r2
 800293c:	461a      	mov	r2, r3
 800293e:	460b      	mov	r3, r1
 8002940:	80fb      	strh	r3, [r7, #6]
 8002942:	4613      	mov	r3, r2
 8002944:	80bb      	strh	r3, [r7, #4]
  if (count == 0) return true;
 8002946:	88bb      	ldrh	r3, [r7, #4]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d101      	bne.n	8002950 <_ZN7Sd2Card8readDataEmttPh+0x20>
 800294c:	2301      	movs	r3, #1
 800294e:	e083      	b.n	8002a58 <_ZN7Sd2Card8readDataEmttPh+0x128>
  if ((count + offset) > 512) {
 8002950:	88ba      	ldrh	r2, [r7, #4]
 8002952:	88fb      	ldrh	r3, [r7, #6]
 8002954:	4413      	add	r3, r2
 8002956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800295a:	dc76      	bgt.n	8002a4a <_ZN7Sd2Card8readDataEmttPh+0x11a>
    goto fail;
  }
  if (!inBlock_ || block != block_ || offset < offset_) {
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	799b      	ldrb	r3, [r3, #6]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d009      	beq.n	8002978 <_ZN7Sd2Card8readDataEmttPh+0x48>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	429a      	cmp	r2, r3
 800296c:	d104      	bne.n	8002978 <_ZN7Sd2Card8readDataEmttPh+0x48>
 800296e:	88fb      	ldrh	r3, [r7, #6]
 8002970:	68fa      	ldr	r2, [r7, #12]
 8002972:	8912      	ldrh	r2, [r2, #8]
 8002974:	4293      	cmp	r3, r2
 8002976:	da33      	bge.n	80029e0 <_ZN7Sd2Card8readDataEmttPh+0xb0>
    block_ = block;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	601a      	str	r2, [r3, #0]
    // use address if not SDHC card
    if (type()!= SD_CARD_TYPE_SDHC) block <<= 9;
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f7ff fdc6 	bl	8002510 <_ZNK7Sd2Card4typeEv>
 8002984:	4603      	mov	r3, r0
 8002986:	2b03      	cmp	r3, #3
 8002988:	bf14      	ite	ne
 800298a:	2301      	movne	r3, #1
 800298c:	2300      	moveq	r3, #0
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b00      	cmp	r3, #0
 8002992:	d002      	beq.n	800299a <_ZN7Sd2Card8readDataEmttPh+0x6a>
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	025b      	lsls	r3, r3, #9
 8002998:	60bb      	str	r3, [r7, #8]
    if (cardCommand(CMD17, block)) {
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	2111      	movs	r1, #17
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f7ff fe10 	bl	80025c4 <_ZN7Sd2Card11cardCommandEhm>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	bf14      	ite	ne
 80029aa:	2301      	movne	r3, #1
 80029ac:	2300      	moveq	r3, #0
 80029ae:	b2db      	uxtb	r3, r3
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d004      	beq.n	80029be <_ZN7Sd2Card8readDataEmttPh+0x8e>
      error(SD_CARD_ERROR_CMD17);
 80029b4:	2103      	movs	r1, #3
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f7ff fdcc 	bl	8002554 <_ZN7Sd2Card5errorEh>
      goto fail;
 80029bc:	e048      	b.n	8002a50 <_ZN7Sd2Card8readDataEmttPh+0x120>
    }
    if (!waitStartBlock()) {
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 f8ab 	bl	8002b1a <_ZN7Sd2Card14waitStartBlockEv>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	bf0c      	ite	eq
 80029ca:	2301      	moveq	r3, #1
 80029cc:	2300      	movne	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d13c      	bne.n	8002a4e <_ZN7Sd2Card8readDataEmttPh+0x11e>
      goto fail;
    }
    offset_ = 0;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	811a      	strh	r2, [r3, #8]
    inBlock_ = 1;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	719a      	strb	r2, [r3, #6]
  dst[n] = SPDR;

#else  // OPTIMIZE_HARDWARE_SPI

  // skip data before offset
  for (;offset_ < offset; offset_++) {
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	891b      	ldrh	r3, [r3, #8]
 80029e4:	461a      	mov	r2, r3
 80029e6:	88fb      	ldrh	r3, [r7, #6]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	da08      	bge.n	80029fe <_ZN7Sd2Card8readDataEmttPh+0xce>
    spiRec();
 80029ec:	f7ff fdde 	bl	80025ac <_ZL6spiRecv>
  for (;offset_ < offset; offset_++) {
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	891b      	ldrh	r3, [r3, #8]
 80029f4:	3301      	adds	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	811a      	strh	r2, [r3, #8]
 80029fc:	e7f0      	b.n	80029e0 <_ZN7Sd2Card8readDataEmttPh+0xb0>
  }
  // transfer data
  for (uint16_t i = 0; i < count; i++) {
 80029fe:	2300      	movs	r3, #0
 8002a00:	82fb      	strh	r3, [r7, #22]
 8002a02:	8afa      	ldrh	r2, [r7, #22]
 8002a04:	88bb      	ldrh	r3, [r7, #4]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	da0a      	bge.n	8002a20 <_ZN7Sd2Card8readDataEmttPh+0xf0>
    dst[i] = spiRec();
 8002a0a:	8afb      	ldrh	r3, [r7, #22]
 8002a0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a0e:	18d4      	adds	r4, r2, r3
 8002a10:	f7ff fdcc 	bl	80025ac <_ZL6spiRecv>
 8002a14:	4603      	mov	r3, r0
 8002a16:	7023      	strb	r3, [r4, #0]
  for (uint16_t i = 0; i < count; i++) {
 8002a18:	8afb      	ldrh	r3, [r7, #22]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	82fb      	strh	r3, [r7, #22]
 8002a1e:	e7f0      	b.n	8002a02 <_ZN7Sd2Card8readDataEmttPh+0xd2>
  }
#endif  // OPTIMIZE_HARDWARE_SPI

  offset_ += count;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	891a      	ldrh	r2, [r3, #8]
 8002a24:	88bb      	ldrh	r3, [r7, #4]
 8002a26:	4413      	add	r3, r2
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	811a      	strh	r2, [r3, #8]
  if (!partialBlockRead_ || offset_ >= 512) {
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	7a9b      	ldrb	r3, [r3, #10]
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d004      	beq.n	8002a40 <_ZN7Sd2Card8readDataEmttPh+0x110>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	891b      	ldrh	r3, [r3, #8]
 8002a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a3e:	db02      	blt.n	8002a46 <_ZN7Sd2Card8readDataEmttPh+0x116>
    // read rest of data, checksum and set chip select high
    readEnd();
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	f000 f80d 	bl	8002a60 <_ZN7Sd2Card7readEndEv>
  }
  return true;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e006      	b.n	8002a58 <_ZN7Sd2Card8readDataEmttPh+0x128>
    goto fail;
 8002a4a:	bf00      	nop
 8002a4c:	e000      	b.n	8002a50 <_ZN7Sd2Card8readDataEmttPh+0x120>
      goto fail;
 8002a4e:	bf00      	nop

 fail:
  chipSelectHigh();
 8002a50:	68f8      	ldr	r0, [r7, #12]
 8002a52:	f7ff fe13 	bl	800267c <_ZN7Sd2Card14chipSelectHighEv>
  return false;
 8002a56:	2300      	movs	r3, #0
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	371c      	adds	r7, #28
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd90      	pop	{r4, r7, pc}

08002a60 <_ZN7Sd2Card7readEndEv>:
//------------------------------------------------------------------------------
/** Skip remaining data in a block when in partial block read mode. */
void Sd2Card::readEnd(void) {
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  if (inBlock_) {
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	799b      	ldrb	r3, [r3, #6]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d018      	beq.n	8002aa2 <_ZN7Sd2Card7readEndEv+0x42>
    }
    // wait for last crc byte
    while (!(SPSR & (1 << SPIF)))
      ;
#else  // OPTIMIZE_HARDWARE_SPI
    while (offset_++ < 514) spiRec();
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	891b      	ldrh	r3, [r3, #8]
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	b291      	uxth	r1, r2
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	8111      	strh	r1, [r2, #8]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	f240 2301 	movw	r3, #513	; 0x201
 8002a82:	429a      	cmp	r2, r3
 8002a84:	bfd4      	ite	le
 8002a86:	2301      	movle	r3, #1
 8002a88:	2300      	movgt	r3, #0
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d002      	beq.n	8002a96 <_ZN7Sd2Card7readEndEv+0x36>
 8002a90:	f7ff fd8c 	bl	80025ac <_ZL6spiRecv>
 8002a94:	e7ec      	b.n	8002a70 <_ZN7Sd2Card7readEndEv+0x10>
#endif  // OPTIMIZE_HARDWARE_SPI
    chipSelectHigh();
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f7ff fdf0 	bl	800267c <_ZN7Sd2Card14chipSelectHighEv>
    inBlock_ = 0;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	719a      	strb	r2, [r3, #6]
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <_ZN7Sd2Card10setSckRateEh>:
 * for \a scsRateID = 6.
 *
 * \return The value one, true, is returned for success and the value zero,
 * false, is returned for an invalid value of \a sckRateID.
 */
uint8_t Sd2Card::setSckRate(uint8_t sckRateID) {
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	6078      	str	r0, [r7, #4]
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	70fb      	strb	r3, [r7, #3]
  if (sckRateID > 6) {
 8002ab6:	78fb      	ldrb	r3, [r7, #3]
 8002ab8:	2b06      	cmp	r3, #6
 8002aba:	dd05      	ble.n	8002ac8 <_ZN7Sd2Card10setSckRateEh+0x1e>
    error(SD_CARD_ERROR_SCK_RATE);
 8002abc:	2116      	movs	r1, #22
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f7ff fd48 	bl	8002554 <_ZN7Sd2Card5errorEh>
    return false;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	e000      	b.n	8002aca <_ZN7Sd2Card10setSckRateEh+0x20>
    case 4:  settings = SPISettings(500000, MSBFIRST, SPI_MODE0); break;
    case 5:  settings = SPISettings(250000, MSBFIRST, SPI_MODE0); break;
    default: settings = SPISettings(125000, MSBFIRST, SPI_MODE0);*/
  }
#endif // USE_SPI_LIB
  return true;
 8002ac8:	2301      	movs	r3, #1
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <_ZN7Sd2Card11waitNotBusyEj>:
  return true;
}
#endif
//------------------------------------------------------------------------------
// wait for card to go not busy
uint8_t Sd2Card::waitNotBusy(unsigned int timeoutMillis) {
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b084      	sub	sp, #16
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
 8002ada:	6039      	str	r1, [r7, #0]
  unsigned int t0 = millis();
 8002adc:	f002 fafc 	bl	80050d8 <millis>
 8002ae0:	60f8      	str	r0, [r7, #12]
  unsigned int d;
  do {
    if (spiRec() == 0XFF) return true;
 8002ae2:	f7ff fd63 	bl	80025ac <_ZL6spiRecv>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2bff      	cmp	r3, #255	; 0xff
 8002aea:	bf0c      	ite	eq
 8002aec:	2301      	moveq	r3, #1
 8002aee:	2300      	movne	r3, #0
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d001      	beq.n	8002afa <_ZN7Sd2Card11waitNotBusyEj+0x28>
 8002af6:	2301      	movs	r3, #1
 8002af8:	e00b      	b.n	8002b12 <_ZN7Sd2Card11waitNotBusyEj+0x40>
    d = millis() - t0;
 8002afa:	f002 faed 	bl	80050d8 <millis>
 8002afe:	4602      	mov	r2, r0
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	1ad3      	subs	r3, r2, r3
 8002b04:	60bb      	str	r3, [r7, #8]
  }
  while (d < timeoutMillis);
 8002b06:	68ba      	ldr	r2, [r7, #8]
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d200      	bcs.n	8002b10 <_ZN7Sd2Card11waitNotBusyEj+0x3e>
  do {
 8002b0e:	e7e8      	b.n	8002ae2 <_ZN7Sd2Card11waitNotBusyEj+0x10>
  return false;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}

08002b1a <_ZN7Sd2Card14waitStartBlockEv>:
//------------------------------------------------------------------------------
/** Wait for start block token */
uint8_t Sd2Card::waitStartBlock(void) {
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b084      	sub	sp, #16
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  unsigned int t0 = millis();
 8002b22:	f002 fad9 	bl	80050d8 <millis>
 8002b26:	60f8      	str	r0, [r7, #12]
  while ((status_ = spiRec()) == 0XFF) {
 8002b28:	f7ff fd40 	bl	80025ac <_ZL6spiRecv>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	461a      	mov	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	72da      	strb	r2, [r3, #11]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	7adb      	ldrb	r3, [r3, #11]
 8002b38:	2bff      	cmp	r3, #255	; 0xff
 8002b3a:	bf0c      	ite	eq
 8002b3c:	2301      	moveq	r3, #1
 8002b3e:	2300      	movne	r3, #0
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00e      	beq.n	8002b64 <_ZN7Sd2Card14waitStartBlockEv+0x4a>
    unsigned int d = millis() - t0;
 8002b46:	f002 fac7 	bl	80050d8 <millis>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	60bb      	str	r3, [r7, #8]
    if (d > SD_READ_TIMEOUT) {
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002b58:	d9e6      	bls.n	8002b28 <_ZN7Sd2Card14waitStartBlockEv+0xe>
      error(SD_CARD_ERROR_READ_TIMEOUT);
 8002b5a:	210f      	movs	r1, #15
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff fcf9 	bl	8002554 <_ZN7Sd2Card5errorEh>
      goto fail;
 8002b62:	e00a      	b.n	8002b7a <_ZN7Sd2Card14waitStartBlockEv+0x60>
    }
  }
  if (status_ != DATA_START_BLOCK) {
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	7adb      	ldrb	r3, [r3, #11]
 8002b68:	2bfe      	cmp	r3, #254	; 0xfe
 8002b6a:	d004      	beq.n	8002b76 <_ZN7Sd2Card14waitStartBlockEv+0x5c>
    error(SD_CARD_ERROR_READ);
 8002b6c:	210d      	movs	r1, #13
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff fcf0 	bl	8002554 <_ZN7Sd2Card5errorEh>
    goto fail;
 8002b74:	e001      	b.n	8002b7a <_ZN7Sd2Card14waitStartBlockEv+0x60>
  }
  return true;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e003      	b.n	8002b82 <_ZN7Sd2Card14waitStartBlockEv+0x68>

 fail:
  chipSelectHigh();
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff fd7e 	bl	800267c <_ZN7Sd2Card14chipSelectHighEv>
  return false;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <_ZN7Sd2Card10writeBlockEmPKh>:
 * \param[in] blockNumber Logical block to be written.
 * \param[in] src Pointer to the location of the data to be written.
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t Sd2Card::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	607a      	str	r2, [r7, #4]
#if SD_PROTECT_BLOCK_ZERO
  // don't allow write to first block
  if (blockNumber == 0) {
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d104      	bne.n	8002ba6 <_ZN7Sd2Card10writeBlockEmPKh+0x1c>
    error(SD_CARD_ERROR_WRITE_BLOCK_ZERO);
 8002b9c:	2112      	movs	r1, #18
 8002b9e:	68f8      	ldr	r0, [r7, #12]
 8002ba0:	f7ff fcd8 	bl	8002554 <_ZN7Sd2Card5errorEh>
    goto fail;
 8002ba4:	e05b      	b.n	8002c5e <_ZN7Sd2Card10writeBlockEmPKh+0xd4>
  }
#endif  // SD_PROTECT_BLOCK_ZERO

  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) blockNumber <<= 9;
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f7ff fcb2 	bl	8002510 <_ZNK7Sd2Card4typeEv>
 8002bac:	4603      	mov	r3, r0
 8002bae:	2b03      	cmp	r3, #3
 8002bb0:	bf14      	ite	ne
 8002bb2:	2301      	movne	r3, #1
 8002bb4:	2300      	moveq	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d002      	beq.n	8002bc2 <_ZN7Sd2Card10writeBlockEmPKh+0x38>
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	025b      	lsls	r3, r3, #9
 8002bc0:	60bb      	str	r3, [r7, #8]
  if (cardCommand(CMD24, blockNumber)) {
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	2118      	movs	r1, #24
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	f7ff fcfc 	bl	80025c4 <_ZN7Sd2Card11cardCommandEhm>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	bf14      	ite	ne
 8002bd2:	2301      	movne	r3, #1
 8002bd4:	2300      	moveq	r3, #0
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d004      	beq.n	8002be6 <_ZN7Sd2Card10writeBlockEmPKh+0x5c>
    error(SD_CARD_ERROR_CMD24);
 8002bdc:	2104      	movs	r1, #4
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f7ff fcb8 	bl	8002554 <_ZN7Sd2Card5errorEh>
    goto fail;
 8002be4:	e03b      	b.n	8002c5e <_ZN7Sd2Card10writeBlockEmPKh+0xd4>
  }
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	21fe      	movs	r1, #254	; 0xfe
 8002bea:	68f8      	ldr	r0, [r7, #12]
 8002bec:	f000 f83f 	bl	8002c6e <_ZN7Sd2Card9writeDataEhPKh>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	bf0c      	ite	eq
 8002bf6:	2301      	moveq	r3, #1
 8002bf8:	2300      	movne	r3, #0
 8002bfa:	b2db      	uxtb	r3, r3
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d12d      	bne.n	8002c5c <_ZN7Sd2Card10writeBlockEmPKh+0xd2>

  // wait for flash programming to complete
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8002c00:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002c04:	68f8      	ldr	r0, [r7, #12]
 8002c06:	f7ff ff64 	bl	8002ad2 <_ZN7Sd2Card11waitNotBusyEj>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	bf0c      	ite	eq
 8002c10:	2301      	moveq	r3, #1
 8002c12:	2300      	movne	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d004      	beq.n	8002c24 <_ZN7Sd2Card10writeBlockEmPKh+0x9a>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
 8002c1a:	2115      	movs	r1, #21
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f7ff fc99 	bl	8002554 <_ZN7Sd2Card5errorEh>
    goto fail;
 8002c22:	e01c      	b.n	8002c5e <_ZN7Sd2Card10writeBlockEmPKh+0xd4>
  }
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiRec()) {
 8002c24:	2200      	movs	r2, #0
 8002c26:	210d      	movs	r1, #13
 8002c28:	68f8      	ldr	r0, [r7, #12]
 8002c2a:	f7ff fccb 	bl	80025c4 <_ZN7Sd2Card11cardCommandEhm>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d104      	bne.n	8002c3e <_ZN7Sd2Card10writeBlockEmPKh+0xb4>
 8002c34:	f7ff fcba 	bl	80025ac <_ZL6spiRecv>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <_ZN7Sd2Card10writeBlockEmPKh+0xb8>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e000      	b.n	8002c44 <_ZN7Sd2Card10writeBlockEmPKh+0xba>
 8002c42:	2300      	movs	r3, #0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d004      	beq.n	8002c52 <_ZN7Sd2Card10writeBlockEmPKh+0xc8>
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
 8002c48:	2114      	movs	r1, #20
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f7ff fc82 	bl	8002554 <_ZN7Sd2Card5errorEh>
    goto fail;
 8002c50:	e005      	b.n	8002c5e <_ZN7Sd2Card10writeBlockEmPKh+0xd4>
  }
  chipSelectHigh();
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f7ff fd12 	bl	800267c <_ZN7Sd2Card14chipSelectHighEv>
  return true;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e004      	b.n	8002c66 <_ZN7Sd2Card10writeBlockEmPKh+0xdc>
  if (!writeData(DATA_START_BLOCK, src)) goto fail;
 8002c5c:	bf00      	nop

 fail:
  chipSelectHigh();
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f7ff fd0c 	bl	800267c <_ZN7Sd2Card14chipSelectHighEv>
  return false;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3710      	adds	r7, #16
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <_ZN7Sd2Card9writeDataEhPKh>:
  }
  return writeData(WRITE_MULTIPLE_TOKEN, src);
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
uint8_t Sd2Card::writeData(uint8_t token, const uint8_t* src) {
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	b086      	sub	sp, #24
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	60f8      	str	r0, [r7, #12]
 8002c76:	460b      	mov	r3, r1
 8002c78:	607a      	str	r2, [r7, #4]
 8002c7a:	72fb      	strb	r3, [r7, #11]
  // wait for last data byte
  while (!(SPSR & (1 << SPIF)))
    ;

#else  // OPTIMIZE_HARDWARE_SPI
  spiSend(token);
 8002c7c:	7afb      	ldrb	r3, [r7, #11]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7ff fc84 	bl	800258c <_ZL7spiSendh>
  for (uint16_t i = 0; i < 512; i++) {
 8002c84:	2300      	movs	r3, #0
 8002c86:	82fb      	strh	r3, [r7, #22]
 8002c88:	8afb      	ldrh	r3, [r7, #22]
 8002c8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c8e:	da0a      	bge.n	8002ca6 <_ZN7Sd2Card9writeDataEhPKh+0x38>
    spiSend(src[i]);
 8002c90:	8afb      	ldrh	r3, [r7, #22]
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	4413      	add	r3, r2
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7ff fc77 	bl	800258c <_ZL7spiSendh>
  for (uint16_t i = 0; i < 512; i++) {
 8002c9e:	8afb      	ldrh	r3, [r7, #22]
 8002ca0:	3301      	adds	r3, #1
 8002ca2:	82fb      	strh	r3, [r7, #22]
 8002ca4:	e7f0      	b.n	8002c88 <_ZN7Sd2Card9writeDataEhPKh+0x1a>
  }
#endif  // OPTIMIZE_HARDWARE_SPI
  spiSend(0xff);  // dummy crc
 8002ca6:	20ff      	movs	r0, #255	; 0xff
 8002ca8:	f7ff fc70 	bl	800258c <_ZL7spiSendh>
  spiSend(0xff);  // dummy crc
 8002cac:	20ff      	movs	r0, #255	; 0xff
 8002cae:	f7ff fc6d 	bl	800258c <_ZL7spiSendh>

  status_ = spiRec();
 8002cb2:	f7ff fc7b 	bl	80025ac <_ZL6spiRecv>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	461a      	mov	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	72da      	strb	r2, [r3, #11]
  if ((status_ & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	7adb      	ldrb	r3, [r3, #11]
 8002cc2:	f003 031f 	and.w	r3, r3, #31
 8002cc6:	2b05      	cmp	r3, #5
 8002cc8:	d008      	beq.n	8002cdc <_ZN7Sd2Card9writeDataEhPKh+0x6e>
    error(SD_CARD_ERROR_WRITE);
 8002cca:	2111      	movs	r1, #17
 8002ccc:	68f8      	ldr	r0, [r7, #12]
 8002cce:	f7ff fc41 	bl	8002554 <_ZN7Sd2Card5errorEh>
    chipSelectHigh();
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f7ff fcd2 	bl	800267c <_ZN7Sd2Card14chipSelectHighEv>
    return false;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	e000      	b.n	8002cde <_ZN7Sd2Card9writeDataEhPKh+0x70>
  }
  return true;
 8002cdc:	2301      	movs	r3, #1
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3718      	adds	r7, #24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <_ZL11DIR_IS_FILEPK14directoryEntry>:
  return (dir->attributes & DIR_ATT_LONG_NAME_MASK) == DIR_ATT_LONG_NAME;
}
/** Mask for file/subdirectory tests */
uint8_t const DIR_ATT_FILE_TYPE_MASK = (DIR_ATT_VOLUME_ID | DIR_ATT_DIRECTORY);
/** Directory entry is for a file */
static inline uint8_t DIR_IS_FILE(const dir_t* dir) {
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == 0;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	7adb      	ldrb	r3, [r3, #11]
 8002cf2:	f003 0318 	and.w	r3, r3, #24
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	bf0c      	ite	eq
 8002cfa:	2301      	moveq	r3, #1
 8002cfc:	2300      	movne	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr

08002d0a <_ZL13DIR_IS_SUBDIRPK14directoryEntry>:
/** Directory entry is for a subdirectory */
static inline uint8_t DIR_IS_SUBDIR(const dir_t* dir) {
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  return (dir->attributes & DIR_ATT_FILE_TYPE_MASK) == DIR_ATT_DIRECTORY;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	7adb      	ldrb	r3, [r3, #11]
 8002d16:	f003 0318 	and.w	r3, r3, #24
 8002d1a:	2b10      	cmp	r3, #16
 8002d1c:	bf0c      	ite	eq
 8002d1e:	2301      	moveq	r3, #1
 8002d20:	2300      	movne	r3, #0
 8002d22:	b2db      	uxtb	r3, r3
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr

08002d2e <_ZL21DIR_IS_FILE_OR_SUBDIRPK14directoryEntry>:
/** Directory entry is for a file or subdirectory */
static inline uint8_t DIR_IS_FILE_OR_SUBDIR(const dir_t* dir) {
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  return (dir->attributes & DIR_ATT_VOLUME_ID) == 0;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	7adb      	ldrb	r3, [r3, #11]
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	bf0c      	ite	eq
 8002d42:	2301      	moveq	r3, #1
 8002d44:	2300      	movne	r3, #0
 8002d46:	b2db      	uxtb	r3, r3
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc80      	pop	{r7}
 8002d50:	4770      	bx	lr

08002d52 <_ZL8FAT_YEARt>:
static inline uint16_t FAT_YEAR(uint16_t fatDate) {
 8002d52:	b480      	push	{r7}
 8002d54:	b083      	sub	sp, #12
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	4603      	mov	r3, r0
 8002d5a:	80fb      	strh	r3, [r7, #6]
  return 1980 + (fatDate >> 9);
 8002d5c:	88fb      	ldrh	r3, [r7, #6]
 8002d5e:	125b      	asrs	r3, r3, #9
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	f203 73bc 	addw	r3, r3, #1980	; 0x7bc
 8002d66:	b29b      	uxth	r3, r3
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr

08002d72 <_ZL9FAT_MONTHt>:
static inline uint8_t FAT_MONTH(uint16_t fatDate) {
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	4603      	mov	r3, r0
 8002d7a:	80fb      	strh	r3, [r7, #6]
  return (fatDate >> 5) & 0XF;
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	115b      	asrs	r3, r3, #5
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	b2db      	uxtb	r3, r3
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bc80      	pop	{r7}
 8002d90:	4770      	bx	lr

08002d92 <_ZL7FAT_DAYt>:
static inline uint8_t FAT_DAY(uint16_t fatDate) {
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	4603      	mov	r3, r0
 8002d9a:	80fb      	strh	r3, [r7, #6]
  return fatDate & 0X1F;
 8002d9c:	88fb      	ldrh	r3, [r7, #6]
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	b2db      	uxtb	r3, r3
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <_ZL8FAT_HOURt>:
static inline uint8_t FAT_HOUR(uint16_t fatTime) {
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	80fb      	strh	r3, [r7, #6]
  return fatTime >> 11;
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	12db      	asrs	r3, r3, #11
 8002dbe:	b2db      	uxtb	r3, r3
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bc80      	pop	{r7}
 8002dc8:	4770      	bx	lr

08002dca <_ZL10FAT_MINUTEt>:
static inline uint8_t FAT_MINUTE(uint16_t fatTime) {
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	4603      	mov	r3, r0
 8002dd2:	80fb      	strh	r3, [r7, #6]
  return(fatTime >> 5) & 0X3F;
 8002dd4:	88fb      	ldrh	r3, [r7, #6]
 8002dd6:	115b      	asrs	r3, r3, #5
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002dde:	b2db      	uxtb	r3, r3
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bc80      	pop	{r7}
 8002de8:	4770      	bx	lr

08002dea <_ZL10FAT_SECONDt>:
static inline uint8_t FAT_SECOND(uint16_t fatTime) {
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	4603      	mov	r3, r0
 8002df2:	80fb      	strh	r3, [r7, #6]
  return 2*(fatTime & 0X1F);
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	f003 031f 	and.w	r3, r3, #31
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	b2db      	uxtb	r3, r3
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bc80      	pop	{r7}
 8002e0a:	4770      	bx	lr

08002e0c <_ZNK6SdFile6isFileEv>:
  uint8_t isFile(void) const {return type_ == FAT_FILE_TYPE_NORMAL;}
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	7a5b      	ldrb	r3, [r3, #9]
 8002e18:	2b01      	cmp	r3, #1
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	4618      	mov	r0, r3
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr

08002e2c <_ZN6SdFile7seekEndEv>:
  uint8_t seekEnd(void) {return seekSet(fileSize_);}
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	69db      	ldr	r3, [r3, #28]
 8002e38:	4619      	mov	r1, r3
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fd2c 	bl	8003898 <_ZN6SdFile7seekSetEm>
 8002e40:	4603      	mov	r3, r0
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <_ZNK6SdFile14unbufferedReadEv>:
  uint8_t unbufferedRead(void) const {
 8002e4a:	b480      	push	{r7}
 8002e4c:	b083      	sub	sp, #12
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]
    return flags_ & F_FILE_UNBUFFERED_READ;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	7a1b      	ldrb	r3, [r3, #8]
 8002e56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5a:	b2db      	uxtb	r3, r3
  }
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr

08002e66 <_ZNK8SdVolume7fatTypeEv>:
  uint8_t fatType(void) const {return fatType_;}
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e74:	4618      	mov	r0, r3
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bc80      	pop	{r7}
 8002e7c:	4770      	bx	lr

08002e7e <_ZNK8SdVolume17rootDirEntryCountEv>:
  uint32_t rootDirEntryCount(void) const {return rootDirEntryCount_;}
 8002e7e:	b480      	push	{r7}
 8002e80:	b083      	sub	sp, #12
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	6078      	str	r0, [r7, #4]
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bc80      	pop	{r7}
 8002e92:	4770      	bx	lr

08002e94 <_ZNK8SdVolume12rootDirStartEv>:
  uint32_t rootDirStart(void) const {return rootDirStart_;}
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <_ZNK8SdVolume14blockOfClusterEm>:
  uint8_t fatType_;             // volume type (12, 16, OR 32)
  uint16_t rootDirEntryCount_;  // number of entries in FAT16 root dir
  uint32_t rootDirStart_;       // root start block for FAT16, cluster for FAT32
  //----------------------------------------------------------------------------
  uint8_t allocContiguous(uint32_t count, uint32_t* curCluster);
  uint8_t blockOfCluster(uint32_t position) const {
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	6039      	str	r1, [r7, #0]
          return (position >> 9) & (blocksPerCluster_ - 1);}
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	0a5b      	lsrs	r3, r3, #9
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	791b      	ldrb	r3, [r3, #4]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <_ZNK8SdVolume17clusterStartBlockEm>:
  uint32_t clusterStartBlock(uint32_t cluster) const {
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
           return dataStartBlock_ + ((cluster - 2) << clusterSizeShift_);}
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695a      	ldr	r2, [r3, #20]
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	3b02      	subs	r3, #2
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	7c09      	ldrb	r1, [r1, #16]
 8002ee6:	408b      	lsls	r3, r1
 8002ee8:	4413      	add	r3, r2
 8002eea:	4618      	mov	r0, r3
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <_ZN8SdVolume13cacheSetDirtyEv>:
  uint32_t blockNumber(uint32_t cluster, uint32_t position) const {
           return clusterStartBlock(cluster) + blockOfCluster(position);}
  static uint8_t cacheFlush(void);
  static uint8_t cacheRawBlock(uint32_t blockNumber, uint8_t action);
  static void cacheSetDirty(void) {cacheDirty_ |= CACHE_FOR_WRITE;}
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <_ZN8SdVolume13cacheSetDirtyEv+0x1c>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	f043 0301 	orr.w	r3, r3, #1
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	4b03      	ldr	r3, [pc, #12]	; (8002f10 <_ZN8SdVolume13cacheSetDirtyEv+0x1c>)
 8002f04:	701a      	strb	r2, [r3, #0]
 8002f06:	bf00      	nop
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	20000354 	.word	0x20000354

08002f14 <_ZN8SdVolume9fatPutEOCEm>:
  static uint8_t cacheZeroBlock(uint32_t blockNumber);
  uint8_t chainSize(uint32_t beginCluster, uint32_t* size) const;
  uint8_t fatGet(uint32_t cluster, uint32_t* value) const;
  uint8_t fatPut(uint32_t cluster, uint32_t value);
  uint8_t fatPutEOC(uint32_t cluster) {
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
 8002f1c:	6039      	str	r1, [r7, #0]
    return fatPut(cluster, 0x0FFFFFFF);
 8002f1e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8002f22:	6839      	ldr	r1, [r7, #0]
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f001 f96f 	bl	8004208 <_ZN8SdVolume6fatPutEmm>
 8002f2a:	4603      	mov	r3, r0
  }
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}

08002f34 <_ZNK8SdVolume5isEOCEm>:
  uint8_t freeChain(uint32_t cluster);
  uint8_t isEOC(uint32_t cluster) const {
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
    return  cluster >= (fatType_ == 16 ? FAT16EOC_MIN : FAT32EOC_MIN);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f44:	2b10      	cmp	r3, #16
 8002f46:	d102      	bne.n	8002f4e <_ZNK8SdVolume5isEOCEm+0x1a>
 8002f48:	f64f 72f8 	movw	r2, #65528	; 0xfff8
 8002f4c:	e000      	b.n	8002f50 <_ZNK8SdVolume5isEOCEm+0x1c>
 8002f4e:	4a06      	ldr	r2, [pc, #24]	; (8002f68 <_ZNK8SdVolume5isEOCEm+0x34>)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	429a      	cmp	r2, r3
 8002f54:	bf94      	ite	ls
 8002f56:	2301      	movls	r3, #1
 8002f58:	2300      	movhi	r3, #0
 8002f5a:	b2db      	uxtb	r3, r3
  }
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bc80      	pop	{r7}
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	0ffffff8 	.word	0x0ffffff8

08002f6c <_ZN8SdVolume8readDataEmttPh>:
  uint8_t readBlock(uint32_t block, uint8_t* dst) {
    return sdCard_->readBlock(block, dst);}
  uint8_t readData(uint32_t block, uint16_t offset,
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b086      	sub	sp, #24
 8002f70:	af02      	add	r7, sp, #8
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	4611      	mov	r1, r2
 8002f78:	461a      	mov	r2, r3
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	80fb      	strh	r3, [r7, #6]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	80bb      	strh	r3, [r7, #4]
    uint16_t count, uint8_t* dst) {
      return sdCard_->readData(block, offset, count, dst);
 8002f82:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <_ZN8SdVolume8readDataEmttPh+0x34>)
 8002f84:	6818      	ldr	r0, [r3, #0]
 8002f86:	88b9      	ldrh	r1, [r7, #4]
 8002f88:	88fa      	ldrh	r2, [r7, #6]
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	460b      	mov	r3, r1
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	f7ff fccd 	bl	8002930 <_ZN7Sd2Card8readDataEmttPh>
 8002f96:	4603      	mov	r3, r0
  }
 8002f98:	4618      	mov	r0, r3
 8002f9a:	3710      	adds	r7, #16
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bd80      	pop	{r7, pc}
 8002fa0:	20000350 	.word	0x20000350

08002fa4 <_ZN8SdVolume10writeBlockEmPKh>:
  uint8_t writeBlock(uint32_t block, const uint8_t* dst) {
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
    return sdCard_->writeBlock(block, dst);
 8002fb0:	4b05      	ldr	r3, [pc, #20]	; (8002fc8 <_ZN8SdVolume10writeBlockEmPKh+0x24>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	68b9      	ldr	r1, [r7, #8]
 8002fb8:	4618      	mov	r0, r3
 8002fba:	f7ff fde6 	bl	8002b8a <_ZN7Sd2Card10writeBlockEmPKh>
 8002fbe:	4603      	mov	r3, r0
  }
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3710      	adds	r7, #16
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}
 8002fc8:	20000350 	.word	0x20000350

08002fcc <_ZN6SdFile10addClusterEv>:
// suppress cpplint warnings with NOLINT comment
void (*SdFile::oldDateTime_)(uint16_t& date, uint16_t& time) = NULL;  // NOLINT
#endif  // ALLOW_DEPRECATED_FUNCTIONS
//------------------------------------------------------------------------------
// add a cluster to a file
uint8_t SdFile::addCluster() {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  if (!vol_->allocContiguous(1, &curCluster_)) return false;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	330c      	adds	r3, #12
 8002fdc:	461a      	mov	r2, r3
 8002fde:	2101      	movs	r1, #1
 8002fe0:	f000 ff5f 	bl	8003ea2 <_ZN8SdVolume15allocContiguousEmPm>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	bf0c      	ite	eq
 8002fea:	2301      	moveq	r3, #1
 8002fec:	2300      	movne	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d001      	beq.n	8002ff8 <_ZN6SdFile10addClusterEv+0x2c>
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	e00f      	b.n	8003018 <_ZN6SdFile10addClusterEv+0x4c>

  // if first cluster of file link to directory entry
  if (firstCluster_ == 0) {
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10a      	bne.n	8003016 <_ZN6SdFile10addClusterEv+0x4a>
    firstCluster_ = curCluster_;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	68da      	ldr	r2, [r3, #12]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	621a      	str	r2, [r3, #32]
    flags_ |= F_FILE_DIR_DIRTY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	7a1b      	ldrb	r3, [r3, #8]
 800300c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003010:	b2da      	uxtb	r2, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	721a      	strb	r2, [r3, #8]
  }
  return true;
 8003016:	2301      	movs	r3, #1
}
 8003018:	4618      	mov	r0, r3
 800301a:	3708      	adds	r7, #8
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <_ZN6SdFile13cacheDirEntryEh>:
  return true;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* SdFile::cacheDirEntry(uint8_t action) {
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	70fb      	strb	r3, [r7, #3]
  if (!SdVolume::cacheRawBlock(dirBlock_, action)) return NULL;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	695b      	ldr	r3, [r3, #20]
 8003030:	78fa      	ldrb	r2, [r7, #3]
 8003032:	4611      	mov	r1, r2
 8003034:	4618      	mov	r0, r3
 8003036:	f001 f81d 	bl	8004074 <_ZN8SdVolume13cacheRawBlockEmh>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf0c      	ite	eq
 8003040:	2301      	moveq	r3, #1
 8003042:	2300      	movne	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <_ZN6SdFile13cacheDirEntryEh+0x2e>
 800304a:	2300      	movs	r3, #0
 800304c:	e004      	b.n	8003058 <_ZN6SdFile13cacheDirEntryEh+0x38>
  return SdVolume::cacheBuffer_.dir + dirIndex_;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	7e1b      	ldrb	r3, [r3, #24]
 8003052:	015b      	lsls	r3, r3, #5
 8003054:	4a02      	ldr	r2, [pc, #8]	; (8003060 <_ZN6SdFile13cacheDirEntryEh+0x40>)
 8003056:	4413      	add	r3, r2
}
 8003058:	4618      	mov	r0, r3
 800305a:	3708      	adds	r7, #8
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}
 8003060:	20000150 	.word	0x20000150

08003064 <_ZN6SdFile2lsEhh>:
 * LS_R - Recursive list of subdirectories.
 *
 * \param[in] indent Amount of space before file name. Used for recursive
 * list to indicate subdirectory level.
 */
void SdFile::ls(uint8_t flags, uint8_t indent) {
 8003064:	b580      	push	{r7, lr}
 8003066:	b090      	sub	sp, #64	; 0x40
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
 800306c:	460b      	mov	r3, r1
 800306e:	70fb      	strb	r3, [r7, #3]
 8003070:	4613      	mov	r3, r2
 8003072:	70bb      	strb	r3, [r7, #2]
  dir_t* p;

  rewind();
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff f9bf 	bl	80023f8 <_ZN6SdFile6rewindEv>
  while ((p = readDirCache())) {
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 fbd8 	bl	8003830 <_ZN6SdFile12readDirCacheEv>
 8003080:	63b8      	str	r0, [r7, #56]	; 0x38
 8003082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003084:	2b00      	cmp	r3, #0
 8003086:	bf14      	ite	ne
 8003088:	2301      	movne	r3, #1
 800308a:	2300      	moveq	r3, #0
 800308c:	b2db      	uxtb	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	f000 80b1 	beq.w	80031f6 <_ZN6SdFile2lsEhh+0x192>
    // done if past last used entry
    if (p->name[0] == DIR_NAME_FREE) break;
 8003094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 80ab 	beq.w	80031f4 <_ZN6SdFile2lsEhh+0x190>

    // skip deleted entry and entries for . and  ..
    if (p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') continue;
 800309e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2be5      	cmp	r3, #229	; 0xe5
 80030a4:	f000 80a2 	beq.w	80031ec <_ZN6SdFile2lsEhh+0x188>
 80030a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030aa:	781b      	ldrb	r3, [r3, #0]
 80030ac:	2b2e      	cmp	r3, #46	; 0x2e
 80030ae:	f000 809d 	beq.w	80031ec <_ZN6SdFile2lsEhh+0x188>

    // only list subdirectories and files
    if (!DIR_IS_FILE_OR_SUBDIR(p)) continue;
 80030b2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80030b4:	f7ff fe3b 	bl	8002d2e <_ZL21DIR_IS_FILE_OR_SUBDIRPK14directoryEntry>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	bf0c      	ite	eq
 80030be:	2301      	moveq	r3, #1
 80030c0:	2300      	movne	r3, #0
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f040 8093 	bne.w	80031f0 <_ZN6SdFile2lsEhh+0x18c>

    // print any indent spaces
    for (int8_t i = 0; i < indent; i++) Serial.print(' ');
 80030ca:	2300      	movs	r3, #0
 80030cc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80030d0:	f997 203f 	ldrsb.w	r2, [r7, #63]	; 0x3f
 80030d4:	78bb      	ldrb	r3, [r7, #2]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	da0b      	bge.n	80030f2 <_ZN6SdFile2lsEhh+0x8e>
 80030da:	2120      	movs	r1, #32
 80030dc:	4848      	ldr	r0, [pc, #288]	; (8003200 <_ZN6SdFile2lsEhh+0x19c>)
 80030de:	f7fe fd4d 	bl	8001b7c <_ZN5Print5printEc>
 80030e2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	3301      	adds	r3, #1
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80030f0:	e7ee      	b.n	80030d0 <_ZN6SdFile2lsEhh+0x6c>

    // print file name with possible blank fill
    printDirName(*p, flags & (LS_DATE | LS_SIZE) ? 14 : 0);
 80030f2:	78fb      	ldrb	r3, [r7, #3]
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <_ZN6SdFile2lsEhh+0x9c>
 80030fc:	230e      	movs	r3, #14
 80030fe:	e000      	b.n	8003102 <_ZN6SdFile2lsEhh+0x9e>
 8003100:	2300      	movs	r3, #0
 8003102:	4619      	mov	r1, r3
 8003104:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003106:	f000 f9c7 	bl	8003498 <_ZN6SdFile12printDirNameERK14directoryEntryh>

    // print modify date/time if requested
    if (flags & LS_DATE) {
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00f      	beq.n	8003134 <_ZN6SdFile2lsEhh+0xd0>
       printFatDate(p->lastWriteDate);
 8003114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003116:	8b1b      	ldrh	r3, [r3, #24]
 8003118:	b29b      	uxth	r3, r3
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fa0c 	bl	8003538 <_ZN6SdFile12printFatDateEt>
       Serial.print(' ');
 8003120:	2120      	movs	r1, #32
 8003122:	4837      	ldr	r0, [pc, #220]	; (8003200 <_ZN6SdFile2lsEhh+0x19c>)
 8003124:	f7fe fd2a 	bl	8001b7c <_ZN5Print5printEc>
       printFatTime(p->lastWriteTime);
 8003128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312a:	8adb      	ldrh	r3, [r3, #22]
 800312c:	b29b      	uxth	r3, r3
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fa30 	bl	8003594 <_ZN6SdFile12printFatTimeEt>
    }
    // print size if requested
    if (!DIR_IS_SUBDIR(p) && (flags & LS_SIZE)) {
 8003134:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003136:	f7ff fde8 	bl	8002d0a <_ZL13DIR_IS_SUBDIRPK14directoryEntry>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d106      	bne.n	800314e <_ZN6SdFile2lsEhh+0xea>
 8003140:	78fb      	ldrb	r3, [r7, #3]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d001      	beq.n	800314e <_ZN6SdFile2lsEhh+0xea>
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <_ZN6SdFile2lsEhh+0xec>
 800314e:	2300      	movs	r3, #0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d00a      	beq.n	800316a <_ZN6SdFile2lsEhh+0x106>
      Serial.print(' ');
 8003154:	2120      	movs	r1, #32
 8003156:	482a      	ldr	r0, [pc, #168]	; (8003200 <_ZN6SdFile2lsEhh+0x19c>)
 8003158:	f7fe fd10 	bl	8001b7c <_ZN5Print5printEc>
      Serial.print(p->fileSize);
 800315c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800315e:	69db      	ldr	r3, [r3, #28]
 8003160:	220a      	movs	r2, #10
 8003162:	4619      	mov	r1, r3
 8003164:	4826      	ldr	r0, [pc, #152]	; (8003200 <_ZN6SdFile2lsEhh+0x19c>)
 8003166:	f7fe fd8d 	bl	8001c84 <_ZN5Print5printEmi>
    }
    Serial.println();
 800316a:	4825      	ldr	r0, [pc, #148]	; (8003200 <_ZN6SdFile2lsEhh+0x19c>)
 800316c:	f7fe fdbc 	bl	8001ce8 <_ZN5Print7printlnEv>

    // list subdirectory content if requested
    if ((flags & LS_R) && DIR_IS_SUBDIR(p)) {
 8003170:	78fb      	ldrb	r3, [r7, #3]
 8003172:	f003 0304 	and.w	r3, r3, #4
 8003176:	2b00      	cmp	r3, #0
 8003178:	d007      	beq.n	800318a <_ZN6SdFile2lsEhh+0x126>
 800317a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800317c:	f7ff fdc5 	bl	8002d0a <_ZL13DIR_IS_SUBDIRPK14directoryEntry>
 8003180:	4603      	mov	r3, r0
 8003182:	2b00      	cmp	r3, #0
 8003184:	d001      	beq.n	800318a <_ZN6SdFile2lsEhh+0x126>
 8003186:	2301      	movs	r3, #1
 8003188:	e000      	b.n	800318c <_ZN6SdFile2lsEhh+0x128>
 800318a:	2300      	movs	r3, #0
 800318c:	2b00      	cmp	r3, #0
 800318e:	f43f af74 	beq.w	800307a <_ZN6SdFile2lsEhh+0x16>
      uint16_t index = curPosition()/32 - 1;
 8003192:	6878      	ldr	r0, [r7, #4]
 8003194:	f7fe ff9c 	bl	80020d0 <_ZNK6SdFile11curPositionEv>
 8003198:	4603      	mov	r3, r0
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	b29b      	uxth	r3, r3
 800319e:	3b01      	subs	r3, #1
 80031a0:	86fb      	strh	r3, [r7, #54]	; 0x36
      SdFile s;
 80031a2:	f107 030c 	add.w	r3, r7, #12
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7ff f910 	bl	80023cc <_ZN6SdFileC1Ev>
      if (s.open(this, index, O_READ)) s.ls(flags, indent + 2);
 80031ac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80031ae:	f107 000c 	add.w	r0, r7, #12
 80031b2:	2301      	movs	r3, #1
 80031b4:	6879      	ldr	r1, [r7, #4]
 80031b6:	f000 f825 	bl	8003204 <_ZN6SdFile4openEPS_th>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bf14      	ite	ne
 80031c0:	2301      	movne	r3, #1
 80031c2:	2300      	moveq	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d008      	beq.n	80031dc <_ZN6SdFile2lsEhh+0x178>
 80031ca:	78bb      	ldrb	r3, [r7, #2]
 80031cc:	3302      	adds	r3, #2
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	78f9      	ldrb	r1, [r7, #3]
 80031d2:	f107 030c 	add.w	r3, r7, #12
 80031d6:	4618      	mov	r0, r3
 80031d8:	f7ff ff44 	bl	8003064 <_ZN6SdFile2lsEhh>
      seekSet(32 * (index + 1));
 80031dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80031de:	3301      	adds	r3, #1
 80031e0:	015b      	lsls	r3, r3, #5
 80031e2:	4619      	mov	r1, r3
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 fb57 	bl	8003898 <_ZN6SdFile7seekSetEm>
 80031ea:	e746      	b.n	800307a <_ZN6SdFile2lsEhh+0x16>
    if (p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') continue;
 80031ec:	bf00      	nop
 80031ee:	e744      	b.n	800307a <_ZN6SdFile2lsEhh+0x16>
    if (!DIR_IS_FILE_OR_SUBDIR(p)) continue;
 80031f0:	bf00      	nop
  while ((p = readDirCache())) {
 80031f2:	e742      	b.n	800307a <_ZN6SdFile2lsEhh+0x16>
    if (p->name[0] == DIR_NAME_FREE) break;
 80031f4:	bf00      	nop
    }
  }
}
 80031f6:	bf00      	nop
 80031f8:	3740      	adds	r7, #64	; 0x40
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	20000394 	.word	0x20000394

08003204 <_ZN6SdFile4openEPS_th>:
 * OR of flags O_READ, O_WRITE, O_TRUNC, and O_SYNC.
 *
 * See open() by fileName for definition of flags and return values.
 *
 */
uint8_t SdFile::open(SdFile* dirFile, uint16_t index, uint8_t oflag) {
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	4611      	mov	r1, r2
 8003210:	461a      	mov	r2, r3
 8003212:	460b      	mov	r3, r1
 8003214:	80fb      	strh	r3, [r7, #6]
 8003216:	4613      	mov	r3, r2
 8003218:	717b      	strb	r3, [r7, #5]
  // error if already open
  if (isOpen())return false;
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f7fe ff7e 	bl	800211c <_ZNK6SdFile6isOpenEv>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	bf14      	ite	ne
 8003226:	2301      	movne	r3, #1
 8003228:	2300      	moveq	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <_ZN6SdFile4openEPS_th+0x30>
 8003230:	2300      	movs	r3, #0
 8003232:	e03c      	b.n	80032ae <_ZN6SdFile4openEPS_th+0xaa>

  // don't open existing file if O_CREAT and O_EXCL - user call error
  if ((oflag & (O_CREAT | O_EXCL)) == (O_CREAT | O_EXCL)) return false;
 8003234:	797b      	ldrb	r3, [r7, #5]
 8003236:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800323a:	2b30      	cmp	r3, #48	; 0x30
 800323c:	d101      	bne.n	8003242 <_ZN6SdFile4openEPS_th+0x3e>
 800323e:	2300      	movs	r3, #0
 8003240:	e035      	b.n	80032ae <_ZN6SdFile4openEPS_th+0xaa>

  vol_ = dirFile->vol_;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	625a      	str	r2, [r3, #36]	; 0x24

  // seek to location of entry
  if (!dirFile->seekSet(32 * index)) return false;
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	015b      	lsls	r3, r3, #5
 800324e:	4619      	mov	r1, r3
 8003250:	68b8      	ldr	r0, [r7, #8]
 8003252:	f000 fb21 	bl	8003898 <_ZN6SdFile7seekSetEm>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	bf0c      	ite	eq
 800325c:	2301      	moveq	r3, #1
 800325e:	2300      	movne	r3, #0
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <_ZN6SdFile4openEPS_th+0x66>
 8003266:	2300      	movs	r3, #0
 8003268:	e021      	b.n	80032ae <_ZN6SdFile4openEPS_th+0xaa>

  // read entry into cache
  dir_t* p = dirFile->readDirCache();
 800326a:	68b8      	ldr	r0, [r7, #8]
 800326c:	f000 fae0 	bl	8003830 <_ZN6SdFile12readDirCacheEv>
 8003270:	6178      	str	r0, [r7, #20]
  if (p == NULL) return false;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <_ZN6SdFile4openEPS_th+0x78>
 8003278:	2300      	movs	r3, #0
 800327a:	e018      	b.n	80032ae <_ZN6SdFile4openEPS_th+0xaa>

  // error if empty slot or '.' or '..'
  if (p->name[0] == DIR_NAME_FREE ||
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d007      	beq.n	8003294 <_ZN6SdFile4openEPS_th+0x90>
      p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') {
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	781b      	ldrb	r3, [r3, #0]
  if (p->name[0] == DIR_NAME_FREE ||
 8003288:	2be5      	cmp	r3, #229	; 0xe5
 800328a:	d003      	beq.n	8003294 <_ZN6SdFile4openEPS_th+0x90>
      p->name[0] == DIR_NAME_DELETED || p->name[0] == '.') {
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b2e      	cmp	r3, #46	; 0x2e
 8003292:	d101      	bne.n	8003298 <_ZN6SdFile4openEPS_th+0x94>
    return false;
 8003294:	2300      	movs	r3, #0
 8003296:	e00a      	b.n	80032ae <_ZN6SdFile4openEPS_th+0xaa>
  }
  // open cached entry
  return openCachedEntry(index & 0XF, oflag);
 8003298:	88fb      	ldrh	r3, [r7, #6]
 800329a:	b2db      	uxtb	r3, r3
 800329c:	f003 030f 	and.w	r3, r3, #15
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	797a      	ldrb	r2, [r7, #5]
 80032a4:	4619      	mov	r1, r3
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f806 	bl	80032b8 <_ZN6SdFile15openCachedEntryEhh>
 80032ac:	4603      	mov	r3, r0
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3718      	adds	r7, #24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}
	...

080032b8 <_ZN6SdFile15openCachedEntryEhh>:
//------------------------------------------------------------------------------
// open a cached directory entry. Assumes vol_ is initializes
uint8_t SdFile::openCachedEntry(uint8_t dirIndex, uint8_t oflag) {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	70fb      	strb	r3, [r7, #3]
 80032c4:	4613      	mov	r3, r2
 80032c6:	70bb      	strb	r3, [r7, #2]
  // location of entry in cache
  dir_t* p = SdVolume::cacheBuffer_.dir + dirIndex;
 80032c8:	78fb      	ldrb	r3, [r7, #3]
 80032ca:	015b      	lsls	r3, r3, #5
 80032cc:	4a3b      	ldr	r2, [pc, #236]	; (80033bc <_ZN6SdFile15openCachedEntryEhh+0x104>)
 80032ce:	4413      	add	r3, r2
 80032d0:	60fb      	str	r3, [r7, #12]

  // write or truncate is an error for a directory or read-only file
  if (p->attributes & (DIR_ATT_READ_ONLY | DIR_ATT_DIRECTORY)) {
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	7adb      	ldrb	r3, [r3, #11]
 80032d6:	f003 0311 	and.w	r3, r3, #17
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d006      	beq.n	80032ec <_ZN6SdFile15openCachedEntryEhh+0x34>
    if (oflag & (O_WRITE | O_TRUNC)) return false;
 80032de:	78bb      	ldrb	r3, [r7, #2]
 80032e0:	f003 0342 	and.w	r3, r3, #66	; 0x42
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d001      	beq.n	80032ec <_ZN6SdFile15openCachedEntryEhh+0x34>
 80032e8:	2300      	movs	r3, #0
 80032ea:	e063      	b.n	80033b4 <_ZN6SdFile15openCachedEntryEhh+0xfc>
  }
  // remember location of directory entry on SD
  dirIndex_ = dirIndex;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	761a      	strb	r2, [r3, #24]
  dirBlock_ = SdVolume::cacheBlockNumber_;
 80032f2:	4b33      	ldr	r3, [pc, #204]	; (80033c0 <_ZN6SdFile15openCachedEntryEhh+0x108>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	615a      	str	r2, [r3, #20]

  // copy first cluster number for directory fields
  firstCluster_ = (uint32_t)p->firstClusterHigh << 16;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8a9b      	ldrh	r3, [r3, #20]
 80032fe:	b29b      	uxth	r3, r3
 8003300:	041a      	lsls	r2, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	621a      	str	r2, [r3, #32]
  firstCluster_ |= p->firstClusterLow;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a1b      	ldr	r3, [r3, #32]
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	8b52      	ldrh	r2, [r2, #26]
 800330e:	b292      	uxth	r2, r2
 8003310:	431a      	orrs	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	621a      	str	r2, [r3, #32]

  // make sure it is a normal file or subdirectory
  if (DIR_IS_FILE(p)) {
 8003316:	68f8      	ldr	r0, [r7, #12]
 8003318:	f7ff fce5 	bl	8002ce6 <_ZL11DIR_IS_FILEPK14directoryEntry>
 800331c:	4603      	mov	r3, r0
 800331e:	2b00      	cmp	r3, #0
 8003320:	bf14      	ite	ne
 8003322:	2301      	movne	r3, #1
 8003324:	2300      	moveq	r3, #0
 8003326:	b2db      	uxtb	r3, r3
 8003328:	2b00      	cmp	r3, #0
 800332a:	d007      	beq.n	800333c <_ZN6SdFile15openCachedEntryEhh+0x84>
    fileSize_ = p->fileSize;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	69da      	ldr	r2, [r3, #28]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	61da      	str	r2, [r3, #28]
    type_ = FAT_FILE_TYPE_NORMAL;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	725a      	strb	r2, [r3, #9]
 800333a:	e023      	b.n	8003384 <_ZN6SdFile15openCachedEntryEhh+0xcc>
  } else if (DIR_IS_SUBDIR(p)) {
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f7ff fce4 	bl	8002d0a <_ZL13DIR_IS_SUBDIRPK14directoryEntry>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	bf14      	ite	ne
 8003348:	2301      	movne	r3, #1
 800334a:	2300      	moveq	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d016      	beq.n	8003380 <_ZN6SdFile15openCachedEntryEhh+0xc8>
    if (!vol_->chainSize(firstCluster_, &fileSize_)) return false;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a19      	ldr	r1, [r3, #32]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	331c      	adds	r3, #28
 800335e:	461a      	mov	r2, r3
 8003360:	f000 fec8 	bl	80040f4 <_ZNK8SdVolume9chainSizeEmPm>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	bf0c      	ite	eq
 800336a:	2301      	moveq	r3, #1
 800336c:	2300      	movne	r3, #0
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d001      	beq.n	8003378 <_ZN6SdFile15openCachedEntryEhh+0xc0>
 8003374:	2300      	movs	r3, #0
 8003376:	e01d      	b.n	80033b4 <_ZN6SdFile15openCachedEntryEhh+0xfc>
    type_ = FAT_FILE_TYPE_SUBDIR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2204      	movs	r2, #4
 800337c:	725a      	strb	r2, [r3, #9]
 800337e:	e001      	b.n	8003384 <_ZN6SdFile15openCachedEntryEhh+0xcc>
  } else {
    return false;
 8003380:	2300      	movs	r3, #0
 8003382:	e017      	b.n	80033b4 <_ZN6SdFile15openCachedEntryEhh+0xfc>
  }
  // save open flags for read/write
  flags_ = oflag & (O_ACCMODE | O_SYNC | O_APPEND);
 8003384:	78bb      	ldrb	r3, [r7, #2]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	b2da      	uxtb	r2, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	721a      	strb	r2, [r3, #8]

  // set to start of file
  curCluster_ = 0;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	60da      	str	r2, [r3, #12]
  curPosition_ = 0;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2200      	movs	r2, #0
 800339a:	611a      	str	r2, [r3, #16]

  // truncate file to zero length if requested
  if (oflag & O_TRUNC) return truncate(0);
 800339c:	78bb      	ldrb	r3, [r7, #2]
 800339e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d005      	beq.n	80033b2 <_ZN6SdFile15openCachedEntryEhh+0xfa>
 80033a6:	2100      	movs	r1, #0
 80033a8:	6878      	ldr	r0, [r7, #4]
 80033aa:	f000 fb45 	bl	8003a38 <_ZN6SdFile8truncateEm>
 80033ae:	4603      	mov	r3, r0
 80033b0:	e000      	b.n	80033b4 <_ZN6SdFile15openCachedEntryEhh+0xfc>
  return true;
 80033b2:	2301      	movs	r3, #1
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000150 	.word	0x20000150
 80033c0:	20000018 	.word	0x20000018

080033c4 <_ZN6SdFile8openRootEP8SdVolume>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include the FAT volume has not been initialized
 * or it a FAT12 volume.
 */
uint8_t SdFile::openRoot(SdVolume* vol) {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b082      	sub	sp, #8
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  // error if file is already open
  if (isOpen()) return false;
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f7fe fea4 	bl	800211c <_ZNK6SdFile6isOpenEv>
 80033d4:	4603      	mov	r3, r0
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	bf14      	ite	ne
 80033da:	2301      	movne	r3, #1
 80033dc:	2300      	moveq	r3, #0
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d001      	beq.n	80033e8 <_ZN6SdFile8openRootEP8SdVolume+0x24>
 80033e4:	2300      	movs	r3, #0
 80033e6:	e053      	b.n	8003490 <_ZN6SdFile8openRootEP8SdVolume+0xcc>

  if (vol->fatType() == 16) {
 80033e8:	6838      	ldr	r0, [r7, #0]
 80033ea:	f7ff fd3c 	bl	8002e66 <_ZNK8SdVolume7fatTypeEv>
 80033ee:	4603      	mov	r3, r0
 80033f0:	2b10      	cmp	r3, #16
 80033f2:	bf0c      	ite	eq
 80033f4:	2301      	moveq	r3, #1
 80033f6:	2300      	movne	r3, #0
 80033f8:	b2db      	uxtb	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00d      	beq.n	800341a <_ZN6SdFile8openRootEP8SdVolume+0x56>
    type_ = FAT_FILE_TYPE_ROOT16;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2202      	movs	r2, #2
 8003402:	725a      	strb	r2, [r3, #9]
    firstCluster_ = 0;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2200      	movs	r2, #0
 8003408:	621a      	str	r2, [r3, #32]
    fileSize_ = 32 * vol->rootDirEntryCount();
 800340a:	6838      	ldr	r0, [r7, #0]
 800340c:	f7ff fd37 	bl	8002e7e <_ZNK8SdVolume17rootDirEntryCountEv>
 8003410:	4603      	mov	r3, r0
 8003412:	015a      	lsls	r2, r3, #5
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	61da      	str	r2, [r3, #28]
 8003418:	e027      	b.n	800346a <_ZN6SdFile8openRootEP8SdVolume+0xa6>
  } else if (vol->fatType() == 32) {
 800341a:	6838      	ldr	r0, [r7, #0]
 800341c:	f7ff fd23 	bl	8002e66 <_ZNK8SdVolume7fatTypeEv>
 8003420:	4603      	mov	r3, r0
 8003422:	2b20      	cmp	r3, #32
 8003424:	bf0c      	ite	eq
 8003426:	2301      	moveq	r3, #1
 8003428:	2300      	movne	r3, #0
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d01a      	beq.n	8003466 <_ZN6SdFile8openRootEP8SdVolume+0xa2>
    type_ = FAT_FILE_TYPE_ROOT32;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2203      	movs	r2, #3
 8003434:	725a      	strb	r2, [r3, #9]
    firstCluster_ = vol->rootDirStart();
 8003436:	6838      	ldr	r0, [r7, #0]
 8003438:	f7ff fd2c 	bl	8002e94 <_ZNK8SdVolume12rootDirStartEv>
 800343c:	4602      	mov	r2, r0
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	621a      	str	r2, [r3, #32]
    if (!vol->chainSize(firstCluster_, &fileSize_)) return false;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a19      	ldr	r1, [r3, #32]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	331c      	adds	r3, #28
 800344a:	461a      	mov	r2, r3
 800344c:	6838      	ldr	r0, [r7, #0]
 800344e:	f000 fe51 	bl	80040f4 <_ZNK8SdVolume9chainSizeEmPm>
 8003452:	4603      	mov	r3, r0
 8003454:	2b00      	cmp	r3, #0
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d003      	beq.n	800346a <_ZN6SdFile8openRootEP8SdVolume+0xa6>
 8003462:	2300      	movs	r3, #0
 8003464:	e014      	b.n	8003490 <_ZN6SdFile8openRootEP8SdVolume+0xcc>
  } else {
    // volume is not initialized or FAT12
    return false;
 8003466:	2300      	movs	r3, #0
 8003468:	e012      	b.n	8003490 <_ZN6SdFile8openRootEP8SdVolume+0xcc>
  }
  vol_ = vol;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	683a      	ldr	r2, [r7, #0]
 800346e:	625a      	str	r2, [r3, #36]	; 0x24
  // read only
  flags_ = O_READ;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	721a      	strb	r2, [r3, #8]

  // set to start of file
  curCluster_ = 0;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	60da      	str	r2, [r3, #12]
  curPosition_ = 0;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2200      	movs	r2, #0
 8003480:	611a      	str	r2, [r3, #16]

  // root has no directory entry
  dirBlock_ = 0;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	615a      	str	r2, [r3, #20]
  dirIndex_ = 0;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	761a      	strb	r2, [r3, #24]
  return true;
 800348e:	2301      	movs	r3, #1
}
 8003490:	4618      	mov	r0, r3
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <_ZN6SdFile12printDirNameERK14directoryEntryh>:
/** %Print the name field of a directory entry in 8.3 format to Serial.
 *
 * \param[in] dir The directory structure containing the name.
 * \param[in] width Blank fill name if length is less than \a width.
 */
void SdFile::printDirName(const dir_t& dir, uint8_t width) {
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
 80034a0:	460b      	mov	r3, r1
 80034a2:	70fb      	strb	r3, [r7, #3]
  uint8_t w = 0;
 80034a4:	2300      	movs	r3, #0
 80034a6:	73fb      	strb	r3, [r7, #15]
  for (uint8_t i = 0; i < 11; i++) {
 80034a8:	2300      	movs	r3, #0
 80034aa:	73bb      	strb	r3, [r7, #14]
 80034ac:	7bbb      	ldrb	r3, [r7, #14]
 80034ae:	2b0a      	cmp	r3, #10
 80034b0:	dc1e      	bgt.n	80034f0 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x58>
    if (dir.name[i] == ' ')continue;
 80034b2:	7bbb      	ldrb	r3, [r7, #14]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	5cd3      	ldrb	r3, [r2, r3]
 80034b8:	2b20      	cmp	r3, #32
 80034ba:	d014      	beq.n	80034e6 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x4e>
    if (i == 8) {
 80034bc:	7bbb      	ldrb	r3, [r7, #14]
 80034be:	2b08      	cmp	r3, #8
 80034c0:	d106      	bne.n	80034d0 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x38>
      Serial.print('.');
 80034c2:	212e      	movs	r1, #46	; 0x2e
 80034c4:	481b      	ldr	r0, [pc, #108]	; (8003534 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x9c>)
 80034c6:	f7fe fb59 	bl	8001b7c <_ZN5Print5printEc>
      w++;
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	3301      	adds	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
    }
    Serial.write(dir.name[i]);
 80034d0:	7bbb      	ldrb	r3, [r7, #14]
 80034d2:	687a      	ldr	r2, [r7, #4]
 80034d4:	5cd3      	ldrb	r3, [r2, r3]
 80034d6:	4619      	mov	r1, r3
 80034d8:	4816      	ldr	r0, [pc, #88]	; (8003534 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x9c>)
 80034da:	f001 fbcf 	bl	8004c7c <_ZN14HardwareSerial5writeEh>
    w++;
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	3301      	adds	r3, #1
 80034e2:	73fb      	strb	r3, [r7, #15]
 80034e4:	e000      	b.n	80034e8 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x50>
    if (dir.name[i] == ' ')continue;
 80034e6:	bf00      	nop
  for (uint8_t i = 0; i < 11; i++) {
 80034e8:	7bbb      	ldrb	r3, [r7, #14]
 80034ea:	3301      	adds	r3, #1
 80034ec:	73bb      	strb	r3, [r7, #14]
 80034ee:	e7dd      	b.n	80034ac <_ZN6SdFile12printDirNameERK14directoryEntryh+0x14>
  }
  if (DIR_IS_SUBDIR(&dir)) {
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f7ff fc0a 	bl	8002d0a <_ZL13DIR_IS_SUBDIRPK14directoryEntry>
 80034f6:	4603      	mov	r3, r0
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	bf14      	ite	ne
 80034fc:	2301      	movne	r3, #1
 80034fe:	2300      	moveq	r3, #0
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d006      	beq.n	8003514 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x7c>
    Serial.print('/');
 8003506:	212f      	movs	r1, #47	; 0x2f
 8003508:	480a      	ldr	r0, [pc, #40]	; (8003534 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x9c>)
 800350a:	f7fe fb37 	bl	8001b7c <_ZN5Print5printEc>
    w++;
 800350e:	7bfb      	ldrb	r3, [r7, #15]
 8003510:	3301      	adds	r3, #1
 8003512:	73fb      	strb	r3, [r7, #15]
  }
  while (w < width) {
 8003514:	7bfa      	ldrb	r2, [r7, #15]
 8003516:	78fb      	ldrb	r3, [r7, #3]
 8003518:	429a      	cmp	r2, r3
 800351a:	da07      	bge.n	800352c <_ZN6SdFile12printDirNameERK14directoryEntryh+0x94>
    Serial.print(' ');
 800351c:	2120      	movs	r1, #32
 800351e:	4805      	ldr	r0, [pc, #20]	; (8003534 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x9c>)
 8003520:	f7fe fb2c 	bl	8001b7c <_ZN5Print5printEc>
    w++;
 8003524:	7bfb      	ldrb	r3, [r7, #15]
 8003526:	3301      	adds	r3, #1
 8003528:	73fb      	strb	r3, [r7, #15]
  while (w < width) {
 800352a:	e7f3      	b.n	8003514 <_ZN6SdFile12printDirNameERK14directoryEntryh+0x7c>
  }
}
 800352c:	bf00      	nop
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	20000394 	.word	0x20000394

08003538 <_ZN6SdFile12printFatDateEt>:
 *
 *  Format is yyyy-mm-dd.
 *
 * \param[in] fatDate The date field from a directory entry.
 */
void SdFile::printFatDate(uint16_t fatDate) {
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	80fb      	strh	r3, [r7, #6]
  Serial.print(FAT_YEAR(fatDate));
 8003542:	88fb      	ldrh	r3, [r7, #6]
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff fc04 	bl	8002d52 <_ZL8FAT_YEARt>
 800354a:	4603      	mov	r3, r0
 800354c:	220a      	movs	r2, #10
 800354e:	4619      	mov	r1, r3
 8003550:	480f      	ldr	r0, [pc, #60]	; (8003590 <_ZN6SdFile12printFatDateEt+0x58>)
 8003552:	f7fe fb37 	bl	8001bc4 <_ZN5Print5printEii>
  Serial.print('-');
 8003556:	212d      	movs	r1, #45	; 0x2d
 8003558:	480d      	ldr	r0, [pc, #52]	; (8003590 <_ZN6SdFile12printFatDateEt+0x58>)
 800355a:	f7fe fb0f 	bl	8001b7c <_ZN5Print5printEc>
  printTwoDigits(FAT_MONTH(fatDate));
 800355e:	88fb      	ldrh	r3, [r7, #6]
 8003560:	4618      	mov	r0, r3
 8003562:	f7ff fc06 	bl	8002d72 <_ZL9FAT_MONTHt>
 8003566:	4603      	mov	r3, r0
 8003568:	4618      	mov	r0, r3
 800356a:	f000 f83f 	bl	80035ec <_ZN6SdFile14printTwoDigitsEh>
  Serial.print('-');
 800356e:	212d      	movs	r1, #45	; 0x2d
 8003570:	4807      	ldr	r0, [pc, #28]	; (8003590 <_ZN6SdFile12printFatDateEt+0x58>)
 8003572:	f7fe fb03 	bl	8001b7c <_ZN5Print5printEc>
  printTwoDigits(FAT_DAY(fatDate));
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff fc0a 	bl	8002d92 <_ZL7FAT_DAYt>
 800357e:	4603      	mov	r3, r0
 8003580:	4618      	mov	r0, r3
 8003582:	f000 f833 	bl	80035ec <_ZN6SdFile14printTwoDigitsEh>
}
 8003586:	bf00      	nop
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	20000394 	.word	0x20000394

08003594 <_ZN6SdFile12printFatTimeEt>:
 *
 * Format is hh:mm:ss.
 *
 * \param[in] fatTime The time field from a directory entry.
 */
void SdFile::printFatTime(uint16_t fatTime) {
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	4603      	mov	r3, r0
 800359c:	80fb      	strh	r3, [r7, #6]
  printTwoDigits(FAT_HOUR(fatTime));
 800359e:	88fb      	ldrh	r3, [r7, #6]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fc05 	bl	8002db0 <_ZL8FAT_HOURt>
 80035a6:	4603      	mov	r3, r0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 f81f 	bl	80035ec <_ZN6SdFile14printTwoDigitsEh>
  Serial.print(':');
 80035ae:	213a      	movs	r1, #58	; 0x3a
 80035b0:	480d      	ldr	r0, [pc, #52]	; (80035e8 <_ZN6SdFile12printFatTimeEt+0x54>)
 80035b2:	f7fe fae3 	bl	8001b7c <_ZN5Print5printEc>
  printTwoDigits(FAT_MINUTE(fatTime));
 80035b6:	88fb      	ldrh	r3, [r7, #6]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f7ff fc06 	bl	8002dca <_ZL10FAT_MINUTEt>
 80035be:	4603      	mov	r3, r0
 80035c0:	4618      	mov	r0, r3
 80035c2:	f000 f813 	bl	80035ec <_ZN6SdFile14printTwoDigitsEh>
  Serial.print(':');
 80035c6:	213a      	movs	r1, #58	; 0x3a
 80035c8:	4807      	ldr	r0, [pc, #28]	; (80035e8 <_ZN6SdFile12printFatTimeEt+0x54>)
 80035ca:	f7fe fad7 	bl	8001b7c <_ZN5Print5printEc>
  printTwoDigits(FAT_SECOND(fatTime));
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fc0a 	bl	8002dea <_ZL10FAT_SECONDt>
 80035d6:	4603      	mov	r3, r0
 80035d8:	4618      	mov	r0, r3
 80035da:	f000 f807 	bl	80035ec <_ZN6SdFile14printTwoDigitsEh>
}
 80035de:	bf00      	nop
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	20000394 	.word	0x20000394

080035ec <_ZN6SdFile14printTwoDigitsEh>:
//------------------------------------------------------------------------------
/** %Print a value as two digits to Serial.
 *
 * \param[in] v Value to be printed, 0 <= \a v <= 99
 */
void SdFile::printTwoDigits(uint8_t v) {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	4603      	mov	r3, r0
 80035f4:	71fb      	strb	r3, [r7, #7]
  char str[3];
  str[0] = '0' + v/10;
 80035f6:	79fb      	ldrb	r3, [r7, #7]
 80035f8:	4a10      	ldr	r2, [pc, #64]	; (800363c <_ZN6SdFile14printTwoDigitsEh+0x50>)
 80035fa:	fba2 2303 	umull	r2, r3, r2, r3
 80035fe:	08db      	lsrs	r3, r3, #3
 8003600:	b2db      	uxtb	r3, r3
 8003602:	3330      	adds	r3, #48	; 0x30
 8003604:	b2db      	uxtb	r3, r3
 8003606:	733b      	strb	r3, [r7, #12]
  str[1] = '0' + v % 10;
 8003608:	79fa      	ldrb	r2, [r7, #7]
 800360a:	4b0c      	ldr	r3, [pc, #48]	; (800363c <_ZN6SdFile14printTwoDigitsEh+0x50>)
 800360c:	fba3 1302 	umull	r1, r3, r3, r2
 8003610:	08d9      	lsrs	r1, r3, #3
 8003612:	460b      	mov	r3, r1
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	b2db      	uxtb	r3, r3
 800361e:	3330      	adds	r3, #48	; 0x30
 8003620:	b2db      	uxtb	r3, r3
 8003622:	737b      	strb	r3, [r7, #13]
  str[2] = 0;
 8003624:	2300      	movs	r3, #0
 8003626:	73bb      	strb	r3, [r7, #14]
  Serial.print(str);
 8003628:	f107 030c 	add.w	r3, r7, #12
 800362c:	4619      	mov	r1, r3
 800362e:	4804      	ldr	r0, [pc, #16]	; (8003640 <_ZN6SdFile14printTwoDigitsEh+0x54>)
 8003630:	f7fe fa96 	bl	8001b60 <_ZN5Print5printEPKc>
}
 8003634:	bf00      	nop
 8003636:	3710      	adds	r7, #16
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	cccccccd 	.word	0xcccccccd
 8003640:	20000394 	.word	0x20000394

08003644 <_ZN6SdFile4readEPvt>:
 * if end of file is reached.
 * If an error occurs, read() returns -1.  Possible errors include
 * read() called before a file has been opened, corrupt file system
 * or an I/O error occurred.
 */
int16_t SdFile::read(void* buf, uint16_t nbyte) {
 8003644:	b580      	push	{r7, lr}
 8003646:	b08e      	sub	sp, #56	; 0x38
 8003648:	af02      	add	r7, sp, #8
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	4613      	mov	r3, r2
 8003650:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	62fb      	str	r3, [r7, #44]	; 0x2c

  // error if not open or write only
  if (!isOpen() || !(flags_ & O_READ)) return -1;
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f7fe fd60 	bl	800211c <_ZNK6SdFile6isOpenEv>
 800365c:	4603      	mov	r3, r0
 800365e:	2b00      	cmp	r3, #0
 8003660:	d005      	beq.n	800366e <_ZN6SdFile4readEPvt+0x2a>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	7a1b      	ldrb	r3, [r3, #8]
 8003666:	f003 0301 	and.w	r3, r3, #1
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <_ZN6SdFile4readEPvt+0x2e>
 800366e:	2301      	movs	r3, #1
 8003670:	e000      	b.n	8003674 <_ZN6SdFile4readEPvt+0x30>
 8003672:	2300      	movs	r3, #0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <_ZN6SdFile4readEPvt+0x3a>
 8003678:	f04f 33ff 	mov.w	r3, #4294967295
 800367c:	e0cf      	b.n	800381e <_ZN6SdFile4readEPvt+0x1da>

  // max bytes left in file
  if (nbyte > (fileSize_ - curPosition_)) nbyte = fileSize_ - curPosition_;
 800367e:	88fa      	ldrh	r2, [r7, #6]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	69d9      	ldr	r1, [r3, #28]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	1acb      	subs	r3, r1, r3
 800368a:	429a      	cmp	r2, r3
 800368c:	d907      	bls.n	800369e <_ZN6SdFile4readEPvt+0x5a>
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	69db      	ldr	r3, [r3, #28]
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	b29b      	uxth	r3, r3
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	80fb      	strh	r3, [r7, #6]

  // amount left to read
  uint16_t toRead = nbyte;
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	857b      	strh	r3, [r7, #42]	; 0x2a
  while (toRead > 0) {
 80036a2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	f340 80b8 	ble.w	800381a <_ZN6SdFile4readEPvt+0x1d6>
    uint32_t block;  // raw device block number
    uint16_t offset = curPosition_ & 0X1FF;  // offset in block
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	691b      	ldr	r3, [r3, #16]
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036b4:	837b      	strh	r3, [r7, #26]
    if (type_ == FAT_FILE_TYPE_ROOT16) {
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	7a5b      	ldrb	r3, [r3, #9]
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d10b      	bne.n	80036d6 <_ZN6SdFile4readEPvt+0x92>
      block = vol_->rootDirStart() + (curPosition_ >> 9);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7ff fbe6 	bl	8002e94 <_ZNK8SdVolume12rootDirStartEv>
 80036c8:	4602      	mov	r2, r0
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	0a5b      	lsrs	r3, r3, #9
 80036d0:	4413      	add	r3, r2
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
 80036d4:	e038      	b.n	8003748 <_ZN6SdFile4readEPvt+0x104>
    } else {
      uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	4619      	mov	r1, r3
 80036e0:	4610      	mov	r0, r2
 80036e2:	f7ff fbe2 	bl	8002eaa <_ZNK8SdVolume14blockOfClusterEm>
 80036e6:	4603      	mov	r3, r0
 80036e8:	74fb      	strb	r3, [r7, #19]
      if (offset == 0 && blockOfCluster == 0) {
 80036ea:	8b7b      	ldrh	r3, [r7, #26]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d11f      	bne.n	8003730 <_ZN6SdFile4readEPvt+0xec>
 80036f0:	7cfb      	ldrb	r3, [r7, #19]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d11c      	bne.n	8003730 <_ZN6SdFile4readEPvt+0xec>
        // start of new cluster
        if (curPosition_ == 0) {
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d104      	bne.n	8003708 <_ZN6SdFile4readEPvt+0xc4>
          // use first cluster in file
          curCluster_ = firstCluster_;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6a1a      	ldr	r2, [r3, #32]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	60da      	str	r2, [r3, #12]
 8003706:	e013      	b.n	8003730 <_ZN6SdFile4readEPvt+0xec>
        } else {
          // get next cluster from FAT
          if (!vol_->fatGet(curCluster_, &curCluster_)) return -1;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	68d9      	ldr	r1, [r3, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	330c      	adds	r3, #12
 8003714:	461a      	mov	r2, r3
 8003716:	f000 fd25 	bl	8004164 <_ZNK8SdVolume6fatGetEmPm>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	bf0c      	ite	eq
 8003720:	2301      	moveq	r3, #1
 8003722:	2300      	movne	r3, #0
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d002      	beq.n	8003730 <_ZN6SdFile4readEPvt+0xec>
 800372a:	f04f 33ff 	mov.w	r3, #4294967295
 800372e:	e076      	b.n	800381e <_ZN6SdFile4readEPvt+0x1da>
        }
      }
      block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4619      	mov	r1, r3
 800373a:	4610      	mov	r0, r2
 800373c:	f7ff fbc8 	bl	8002ed0 <_ZNK8SdVolume17clusterStartBlockEm>
 8003740:	4602      	mov	r2, r0
 8003742:	7cfb      	ldrb	r3, [r7, #19]
 8003744:	4413      	add	r3, r2
 8003746:	627b      	str	r3, [r7, #36]	; 0x24
    }
    uint16_t n = toRead;
 8003748:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800374a:	847b      	strh	r3, [r7, #34]	; 0x22

    // amount to be read from current block
    if (n > (512 - offset)) n = 512 - offset;
 800374c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800374e:	8b7b      	ldrh	r3, [r7, #26]
 8003750:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003754:	429a      	cmp	r2, r3
 8003756:	dd03      	ble.n	8003760 <_ZN6SdFile4readEPvt+0x11c>
 8003758:	8b7b      	ldrh	r3, [r7, #26]
 800375a:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800375e:	847b      	strh	r3, [r7, #34]	; 0x22

    // no buffering needed if n == 512 or user requests no buffering
    if ((unbufferedRead() || n == 512) &&
 8003760:	68f8      	ldr	r0, [r7, #12]
 8003762:	f7ff fb72 	bl	8002e4a <_ZNK6SdFile14unbufferedReadEv>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d103      	bne.n	8003774 <_ZN6SdFile4readEPvt+0x130>
 800376c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800376e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003772:	d106      	bne.n	8003782 <_ZN6SdFile4readEPvt+0x13e>
      block != SdVolume::cacheBlockNumber_) {
 8003774:	4b2c      	ldr	r3, [pc, #176]	; (8003828 <_ZN6SdFile4readEPvt+0x1e4>)
 8003776:	681b      	ldr	r3, [r3, #0]
    if ((unbufferedRead() || n == 512) &&
 8003778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800377a:	429a      	cmp	r2, r3
 800377c:	d001      	beq.n	8003782 <_ZN6SdFile4readEPvt+0x13e>
 800377e:	2301      	movs	r3, #1
 8003780:	e000      	b.n	8003784 <_ZN6SdFile4readEPvt+0x140>
 8003782:	2300      	movs	r3, #0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d019      	beq.n	80037bc <_ZN6SdFile4readEPvt+0x178>
      if (!vol_->readData(block, offset, n, dst)) return -1;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800378c:	8c79      	ldrh	r1, [r7, #34]	; 0x22
 800378e:	8b7a      	ldrh	r2, [r7, #26]
 8003790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	460b      	mov	r3, r1
 8003796:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003798:	f7ff fbe8 	bl	8002f6c <_ZN8SdVolume8readDataEmttPh>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	bf0c      	ite	eq
 80037a2:	2301      	moveq	r3, #1
 80037a4:	2300      	movne	r3, #0
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d002      	beq.n	80037b2 <_ZN6SdFile4readEPvt+0x16e>
 80037ac:	f04f 33ff 	mov.w	r3, #4294967295
 80037b0:	e035      	b.n	800381e <_ZN6SdFile4readEPvt+0x1da>
      dst += n;
 80037b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80037b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037b6:	4413      	add	r3, r2
 80037b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037ba:	e023      	b.n	8003804 <_ZN6SdFile4readEPvt+0x1c0>
    } else {
      // read block to cache and copy data to caller
      if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_READ)) return -1;
 80037bc:	2100      	movs	r1, #0
 80037be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80037c0:	f000 fc58 	bl	8004074 <_ZN8SdVolume13cacheRawBlockEmh>
 80037c4:	4603      	mov	r3, r0
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	bf0c      	ite	eq
 80037ca:	2301      	moveq	r3, #1
 80037cc:	2300      	movne	r3, #0
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d002      	beq.n	80037da <_ZN6SdFile4readEPvt+0x196>
 80037d4:	f04f 33ff 	mov.w	r3, #4294967295
 80037d8:	e021      	b.n	800381e <_ZN6SdFile4readEPvt+0x1da>
      uint8_t* src = SdVolume::cacheBuffer_.data + offset;
 80037da:	8b7b      	ldrh	r3, [r7, #26]
 80037dc:	4a13      	ldr	r2, [pc, #76]	; (800382c <_ZN6SdFile4readEPvt+0x1e8>)
 80037de:	4413      	add	r3, r2
 80037e0:	61fb      	str	r3, [r7, #28]
      uint8_t* end = src + n;
 80037e2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80037e4:	69fa      	ldr	r2, [r7, #28]
 80037e6:	4413      	add	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]
      while (src != end) *dst++ = *src++;
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d008      	beq.n	8003804 <_ZN6SdFile4readEPvt+0x1c0>
 80037f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037f8:	69fa      	ldr	r2, [r7, #28]
 80037fa:	1c51      	adds	r1, r2, #1
 80037fc:	61f9      	str	r1, [r7, #28]
 80037fe:	7812      	ldrb	r2, [r2, #0]
 8003800:	701a      	strb	r2, [r3, #0]
 8003802:	e7f2      	b.n	80037ea <_ZN6SdFile4readEPvt+0x1a6>
    }
    curPosition_ += n;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800380a:	441a      	add	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	611a      	str	r2, [r3, #16]
    toRead -= n;
 8003810:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003812:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	857b      	strh	r3, [r7, #42]	; 0x2a
  while (toRead > 0) {
 8003818:	e743      	b.n	80036a2 <_ZN6SdFile4readEPvt+0x5e>
  }
  return nbyte;
 800381a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3730      	adds	r7, #48	; 0x30
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000018 	.word	0x20000018
 800382c:	20000150 	.word	0x20000150

08003830 <_ZN6SdFile12readDirCacheEv>:
  return n < 0 ? -1 : 0;
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* SdFile::readDirCache(void) {
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  // error if not directory
  if (!isDir()) return NULL;
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7fe fc5f 	bl	80020fc <_ZNK6SdFile5isDirEv>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	bf0c      	ite	eq
 8003844:	2301      	moveq	r3, #1
 8003846:	2300      	movne	r3, #0
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <_ZN6SdFile12readDirCacheEv+0x22>
 800384e:	2300      	movs	r3, #0
 8003850:	e01b      	b.n	800388a <_ZN6SdFile12readDirCacheEv+0x5a>

  // index of entry in cache
  uint8_t i = (curPosition_ >> 5) & 0XF;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	b2db      	uxtb	r3, r3
 800385a:	f003 030f 	and.w	r3, r3, #15
 800385e:	73fb      	strb	r3, [r7, #15]

  // use read to locate and cache block
  if (read() < 0) return NULL;
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f7fe fc6b 	bl	800213c <_ZN6SdFile4readEv>
 8003866:	4603      	mov	r3, r0
 8003868:	b29b      	uxth	r3, r3
 800386a:	0bdb      	lsrs	r3, r3, #15
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d001      	beq.n	8003876 <_ZN6SdFile12readDirCacheEv+0x46>
 8003872:	2300      	movs	r3, #0
 8003874:	e009      	b.n	800388a <_ZN6SdFile12readDirCacheEv+0x5a>

  // advance to next entry
  curPosition_ += 31;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	691b      	ldr	r3, [r3, #16]
 800387a:	f103 021f 	add.w	r2, r3, #31
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	611a      	str	r2, [r3, #16]

  // return pointer to entry
  return (SdVolume::cacheBuffer_.dir + i);
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	015b      	lsls	r3, r3, #5
 8003886:	4a03      	ldr	r2, [pc, #12]	; (8003894 <_ZN6SdFile12readDirCacheEv+0x64>)
 8003888:	4413      	add	r3, r2
}
 800388a:	4618      	mov	r0, r3
 800388c:	3710      	adds	r7, #16
 800388e:	46bd      	mov	sp, r7
 8003890:	bd80      	pop	{r7, pc}
 8003892:	bf00      	nop
 8003894:	20000150 	.word	0x20000150

08003898 <_ZN6SdFile7seekSetEm>:
 * \param[in] pos The new position in bytes from the beginning of the file.
 *
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 */
uint8_t SdFile::seekSet(uint32_t pos) {
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  // error if file not open or seek past end of file
  if (!isOpen() || pos > fileSize_) return false;
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7fe fc3a 	bl	800211c <_ZNK6SdFile6isOpenEv>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d004      	beq.n	80038b8 <_ZN6SdFile7seekSetEm+0x20>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69da      	ldr	r2, [r3, #28]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d201      	bcs.n	80038bc <_ZN6SdFile7seekSetEm+0x24>
 80038b8:	2301      	movs	r3, #1
 80038ba:	e000      	b.n	80038be <_ZN6SdFile7seekSetEm+0x26>
 80038bc:	2300      	movs	r3, #0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <_ZN6SdFile7seekSetEm+0x2e>
 80038c2:	2300      	movs	r3, #0
 80038c4:	e058      	b.n	8003978 <_ZN6SdFile7seekSetEm+0xe0>

  if (type_ == FAT_FILE_TYPE_ROOT16) {
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	7a5b      	ldrb	r3, [r3, #9]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d104      	bne.n	80038d8 <_ZN6SdFile7seekSetEm+0x40>
    curPosition_ = pos;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	611a      	str	r2, [r3, #16]
    return true;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e04f      	b.n	8003978 <_ZN6SdFile7seekSetEm+0xe0>
  }
  if (pos == 0) {
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d107      	bne.n	80038ee <_ZN6SdFile7seekSetEm+0x56>
    // set position to start of file
    curCluster_ = 0;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	60da      	str	r2, [r3, #12]
    curPosition_ = 0;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	611a      	str	r2, [r3, #16]
    return true;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e044      	b.n	8003978 <_ZN6SdFile7seekSetEm+0xe0>
  }
  // calculate cluster index for cur and new position
  uint32_t nCur = (curPosition_ - 1) >> (vol_->clusterSizeShift_ + 9);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	1e5a      	subs	r2, r3, #1
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f8:	7c1b      	ldrb	r3, [r3, #16]
 80038fa:	3309      	adds	r3, #9
 80038fc:	fa22 f303 	lsr.w	r3, r2, r3
 8003900:	60bb      	str	r3, [r7, #8]
  uint32_t nNew = (pos - 1) >> (vol_->clusterSizeShift_ + 9);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	1e5a      	subs	r2, r3, #1
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800390a:	7c1b      	ldrb	r3, [r3, #16]
 800390c:	3309      	adds	r3, #9
 800390e:	fa22 f303 	lsr.w	r3, r2, r3
 8003912:	60fb      	str	r3, [r7, #12]

  if (nNew < nCur || curPosition_ == 0) {
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	429a      	cmp	r2, r3
 800391a:	d303      	bcc.n	8003924 <_ZN6SdFile7seekSetEm+0x8c>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d104      	bne.n	800392e <_ZN6SdFile7seekSetEm+0x96>
    // must follow chain from first cluster
    curCluster_ = firstCluster_;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6a1a      	ldr	r2, [r3, #32]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	60da      	str	r2, [r3, #12]
 800392c:	e003      	b.n	8003936 <_ZN6SdFile7seekSetEm+0x9e>
  } else {
    // advance from curPosition
    nNew -= nCur;
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	60fb      	str	r3, [r7, #12]
  }
  while (nNew--) {
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	1e5a      	subs	r2, r3, #1
 800393a:	60fa      	str	r2, [r7, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	bf14      	ite	ne
 8003940:	2301      	movne	r3, #1
 8003942:	2300      	moveq	r3, #0
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d012      	beq.n	8003970 <_ZN6SdFile7seekSetEm+0xd8>
    if (!vol_->fatGet(curCluster_, &curCluster_)) return false;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68d9      	ldr	r1, [r3, #12]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	330c      	adds	r3, #12
 8003956:	461a      	mov	r2, r3
 8003958:	f000 fc04 	bl	8004164 <_ZNK8SdVolume6fatGetEmPm>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	bf0c      	ite	eq
 8003962:	2301      	moveq	r3, #1
 8003964:	2300      	movne	r3, #0
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0e4      	beq.n	8003936 <_ZN6SdFile7seekSetEm+0x9e>
 800396c:	2300      	movs	r3, #0
 800396e:	e003      	b.n	8003978 <_ZN6SdFile7seekSetEm+0xe0>
  }
  curPosition_ = pos;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	611a      	str	r2, [r3, #16]
  return true;
 8003976:	2301      	movs	r3, #1
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}

08003980 <_ZN6SdFile4syncEv>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include a call to sync() before a file has been
 * opened or an I/O error.
 */
uint8_t SdFile::sync(void) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  // only allow open files and directories
  if (!isOpen()) return false;
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f7fe fbc7 	bl	800211c <_ZNK6SdFile6isOpenEv>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	bf0c      	ite	eq
 8003994:	2301      	moveq	r3, #1
 8003996:	2300      	movne	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <_ZN6SdFile4syncEv+0x22>
 800399e:	2300      	movs	r3, #0
 80039a0:	e044      	b.n	8003a2c <_ZN6SdFile4syncEv+0xac>

  if (flags_ & F_FILE_DIR_DIRTY) {
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	7a1b      	ldrb	r3, [r3, #8]
 80039a6:	b25b      	sxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	da3c      	bge.n	8003a26 <_ZN6SdFile4syncEv+0xa6>
    dir_t* d = cacheDirEntry(SdVolume::CACHE_FOR_WRITE);
 80039ac:	2101      	movs	r1, #1
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7ff fb36 	bl	8003020 <_ZN6SdFile13cacheDirEntryEh>
 80039b4:	60f8      	str	r0, [r7, #12]
    if (!d) return false;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d101      	bne.n	80039c0 <_ZN6SdFile4syncEv+0x40>
 80039bc:	2300      	movs	r3, #0
 80039be:	e035      	b.n	8003a2c <_ZN6SdFile4syncEv+0xac>

    // do not set filesize for dir files
    if (!isDir()) d->fileSize = fileSize_;
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f7fe fb9b 	bl	80020fc <_ZNK6SdFile5isDirEv>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	bf0c      	ite	eq
 80039cc:	2301      	moveq	r3, #1
 80039ce:	2300      	movne	r3, #0
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <_ZN6SdFile4syncEv+0x5e>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69da      	ldr	r2, [r3, #28]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	61da      	str	r2, [r3, #28]

    // update first cluster fields
    d->firstClusterLow = firstCluster_ & 0XFFFF;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a1b      	ldr	r3, [r3, #32]
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	835a      	strh	r2, [r3, #26]
    d->firstClusterHigh = firstCluster_ >> 16;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	0c1b      	lsrs	r3, r3, #16
 80039ee:	b29a      	uxth	r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	829a      	strh	r2, [r3, #20]

    // set modify time if user supplied a callback date/time function
    if (dateTime_) {
 80039f4:	4b0f      	ldr	r3, [pc, #60]	; (8003a34 <_ZN6SdFile4syncEv+0xb4>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00d      	beq.n	8003a18 <_ZN6SdFile4syncEv+0x98>
      dateTime_(&d->lastWriteDate, &d->lastWriteTime);
 80039fc:	4b0d      	ldr	r3, [pc, #52]	; (8003a34 <_ZN6SdFile4syncEv+0xb4>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	f102 0018 	add.w	r0, r2, #24
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	3216      	adds	r2, #22
 8003a0a:	4611      	mov	r1, r2
 8003a0c:	4798      	blx	r3
      d->lastAccessDate = d->lastWriteDate;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	8b1b      	ldrh	r3, [r3, #24]
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	825a      	strh	r2, [r3, #18]
    }
    // clear directory dirty
    flags_ &= ~F_FILE_DIR_DIRTY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	7a1b      	ldrb	r3, [r3, #8]
 8003a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003a20:	b2da      	uxtb	r2, r3
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	721a      	strb	r2, [r3, #8]
  }
  return SdVolume::cacheFlush();
 8003a26:	f000 fae3 	bl	8003ff0 <_ZN8SdVolume10cacheFlushEv>
 8003a2a:	4603      	mov	r3, r0
}
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	3710      	adds	r7, #16
 8003a30:	46bd      	mov	sp, r7
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	2000014c 	.word	0x2000014c

08003a38 <_ZN6SdFile8truncateEm>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.
 * Reasons for failure include file is read only, file is a directory,
 * \a length is greater than the current file size or an I/O error occurs.
 */
uint8_t SdFile::truncate(uint32_t length) {
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b084      	sub	sp, #16
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
// error if not a normal file or read-only
  if (!isFile() || !(flags_ & O_WRITE)) return false;
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff f9e2 	bl	8002e0c <_ZNK6SdFile6isFileEv>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <_ZN6SdFile8truncateEm+0x22>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	7a1b      	ldrb	r3, [r3, #8]
 8003a52:	f003 0302 	and.w	r3, r3, #2
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <_ZN6SdFile8truncateEm+0x26>
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e000      	b.n	8003a60 <_ZN6SdFile8truncateEm+0x28>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <_ZN6SdFile8truncateEm+0x30>
 8003a64:	2300      	movs	r3, #0
 8003a66:	e09e      	b.n	8003ba6 <_ZN6SdFile8truncateEm+0x16e>

  // error if length is greater than current size
  if (length > fileSize_) return false;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	69da      	ldr	r2, [r3, #28]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d201      	bcs.n	8003a76 <_ZN6SdFile8truncateEm+0x3e>
 8003a72:	2300      	movs	r3, #0
 8003a74:	e097      	b.n	8003ba6 <_ZN6SdFile8truncateEm+0x16e>

  // fileSize and length are zero - nothing to do
  if (fileSize_ == 0) return true;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	69db      	ldr	r3, [r3, #28]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <_ZN6SdFile8truncateEm+0x4a>
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e091      	b.n	8003ba6 <_ZN6SdFile8truncateEm+0x16e>

  // remember position for seek after truncation
  uint32_t newPos = curPosition_ > length ? length : curPosition_;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	429a      	cmp	r2, r3
 8003a8a:	d802      	bhi.n	8003a92 <_ZN6SdFile8truncateEm+0x5a>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	e000      	b.n	8003a94 <_ZN6SdFile8truncateEm+0x5c>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	60fb      	str	r3, [r7, #12]

  // position to last cluster in truncated file
  if (!seekSet(length)) return false;
 8003a96:	6839      	ldr	r1, [r7, #0]
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f7ff fefd 	bl	8003898 <_ZN6SdFile7seekSetEm>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	bf0c      	ite	eq
 8003aa4:	2301      	moveq	r3, #1
 8003aa6:	2300      	movne	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <_ZN6SdFile8truncateEm+0x7a>
 8003aae:	2300      	movs	r3, #0
 8003ab0:	e079      	b.n	8003ba6 <_ZN6SdFile8truncateEm+0x16e>

  if (length == 0) {
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d115      	bne.n	8003ae4 <_ZN6SdFile8truncateEm+0xac>
    // free all clusters
    if (!vol_->freeChain(firstCluster_)) return false;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	f000 fc02 	bl	80042cc <_ZN8SdVolume9freeChainEm>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	bf0c      	ite	eq
 8003ace:	2301      	moveq	r3, #1
 8003ad0:	2300      	movne	r3, #0
 8003ad2:	b2db      	uxtb	r3, r3
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d001      	beq.n	8003adc <_ZN6SdFile8truncateEm+0xa4>
 8003ad8:	2300      	movs	r3, #0
 8003ada:	e064      	b.n	8003ba6 <_ZN6SdFile8truncateEm+0x16e>
    firstCluster_ = 0;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	621a      	str	r2, [r3, #32]
 8003ae2:	e044      	b.n	8003b6e <_ZN6SdFile8truncateEm+0x136>
  } else {
    uint32_t toFree;
    if (!vol_->fatGet(curCluster_, &toFree)) return false;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	f107 0208 	add.w	r2, r7, #8
 8003af0:	4619      	mov	r1, r3
 8003af2:	f000 fb37 	bl	8004164 <_ZNK8SdVolume6fatGetEmPm>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	bf0c      	ite	eq
 8003afc:	2301      	moveq	r3, #1
 8003afe:	2300      	movne	r3, #0
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <_ZN6SdFile8truncateEm+0xd2>
 8003b06:	2300      	movs	r3, #0
 8003b08:	e04d      	b.n	8003ba6 <_ZN6SdFile8truncateEm+0x16e>

    if (!vol_->isEOC(toFree)) {
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	4611      	mov	r1, r2
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff fa0e 	bl	8002f34 <_ZNK8SdVolume5isEOCEm>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	bf0c      	ite	eq
 8003b1e:	2301      	moveq	r3, #1
 8003b20:	2300      	movne	r3, #0
 8003b22:	b2db      	uxtb	r3, r3
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d022      	beq.n	8003b6e <_ZN6SdFile8truncateEm+0x136>
      // free extra clusters
      if (!vol_->freeChain(toFree)) return false;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	4611      	mov	r1, r2
 8003b30:	4618      	mov	r0, r3
 8003b32:	f000 fbcb 	bl	80042cc <_ZN8SdVolume9freeChainEm>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	bf0c      	ite	eq
 8003b3c:	2301      	moveq	r3, #1
 8003b3e:	2300      	movne	r3, #0
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <_ZN6SdFile8truncateEm+0x112>
 8003b46:	2300      	movs	r3, #0
 8003b48:	e02d      	b.n	8003ba6 <_ZN6SdFile8truncateEm+0x16e>

      // current cluster is end of chain
      if (!vol_->fatPutEOC(curCluster_)) return false;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	4619      	mov	r1, r3
 8003b54:	4610      	mov	r0, r2
 8003b56:	f7ff f9dd 	bl	8002f14 <_ZN8SdVolume9fatPutEOCEm>
 8003b5a:	4603      	mov	r3, r0
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	bf0c      	ite	eq
 8003b60:	2301      	moveq	r3, #1
 8003b62:	2300      	movne	r3, #0
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d001      	beq.n	8003b6e <_ZN6SdFile8truncateEm+0x136>
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	e01b      	b.n	8003ba6 <_ZN6SdFile8truncateEm+0x16e>
    }
  }
  fileSize_ = length;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	683a      	ldr	r2, [r7, #0]
 8003b72:	61da      	str	r2, [r3, #28]

  // need to update directory entry
  flags_ |= F_FILE_DIR_DIRTY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	7a1b      	ldrb	r3, [r3, #8]
 8003b78:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b7c:	b2da      	uxtb	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	721a      	strb	r2, [r3, #8]

  if (!sync()) return false;
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7ff fefc 	bl	8003980 <_ZN6SdFile4syncEv>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	bf0c      	ite	eq
 8003b8e:	2301      	moveq	r3, #1
 8003b90:	2300      	movne	r3, #0
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <_ZN6SdFile8truncateEm+0x164>
 8003b98:	2300      	movs	r3, #0
 8003b9a:	e004      	b.n	8003ba6 <_ZN6SdFile8truncateEm+0x16e>

  // set file to correct position
  return seekSet(newPos);
 8003b9c:	68f9      	ldr	r1, [r7, #12]
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff fe7a 	bl	8003898 <_ZN6SdFile7seekSetEm>
 8003ba4:	4603      	mov	r3, r0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
	...

08003bb0 <_ZN6SdFile5writeEPKvt>:
 * \a nbyte.  If an error occurs, write() returns 0.  Possible errors
 * include write() is called before a file has been opened, write is called
 * for a read-only file, device is full, a corrupt file system or an I/O error.
 *
 */
size_t SdFile::write(const void* buf, uint16_t nbyte) {
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b08c      	sub	sp, #48	; 0x30
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	4613      	mov	r3, r2
 8003bbc:	80fb      	strh	r3, [r7, #6]
  // convert void* to uint8_t*  -  must be before goto statements
  const uint8_t* src = reinterpret_cast<const uint8_t*>(buf);
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	62fb      	str	r3, [r7, #44]	; 0x2c

  // number of bytes left to write  -  must be before goto statements
  uint16_t nToWrite = nbyte;
 8003bc2:	88fb      	ldrh	r3, [r7, #6]
 8003bc4:	857b      	strh	r3, [r7, #42]	; 0x2a

  // error if not a normal file or is read-only
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
 8003bc6:	68f8      	ldr	r0, [r7, #12]
 8003bc8:	f7ff f920 	bl	8002e0c <_ZNK6SdFile6isFileEv>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <_ZN6SdFile5writeEPKvt+0x2e>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	7a1b      	ldrb	r3, [r3, #8]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <_ZN6SdFile5writeEPKvt+0x32>
 8003bde:	2301      	movs	r3, #1
 8003be0:	e000      	b.n	8003be4 <_ZN6SdFile5writeEPKvt+0x34>
 8003be2:	2300      	movs	r3, #0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f040 812f 	bne.w	8003e48 <_ZN6SdFile5writeEPKvt+0x298>

  // seek to end of file if append flag
  if ((flags_ & O_APPEND) && curPosition_ != fileSize_) {
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	7a1b      	ldrb	r3, [r3, #8]
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d011      	beq.n	8003c1a <_ZN6SdFile5writeEPKvt+0x6a>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	691a      	ldr	r2, [r3, #16]
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d00b      	beq.n	8003c1a <_ZN6SdFile5writeEPKvt+0x6a>
    if (!seekEnd()) goto writeErrorReturn;
 8003c02:	68f8      	ldr	r0, [r7, #12]
 8003c04:	f7ff f912 	bl	8002e2c <_ZN6SdFile7seekEndEv>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	bf0c      	ite	eq
 8003c0e:	2301      	moveq	r3, #1
 8003c10:	2300      	movne	r3, #0
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	f040 8119 	bne.w	8003e4c <_ZN6SdFile5writeEPKvt+0x29c>
  }

  while (nToWrite > 0) {
 8003c1a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f340 80e0 	ble.w	8003de2 <_ZN6SdFile5writeEPKvt+0x232>
    uint8_t blockOfCluster = vol_->blockOfCluster(curPosition_);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	f7ff f93c 	bl	8002eaa <_ZNK8SdVolume14blockOfClusterEm>
 8003c32:	4603      	mov	r3, r0
 8003c34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    uint16_t blockOffset = curPosition_ & 0X1FF;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c42:	843b      	strh	r3, [r7, #32]
    if (blockOfCluster == 0 && blockOffset == 0) {
 8003c44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d14c      	bne.n	8003ce6 <_ZN6SdFile5writeEPKvt+0x136>
 8003c4c:	8c3b      	ldrh	r3, [r7, #32]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d149      	bne.n	8003ce6 <_ZN6SdFile5writeEPKvt+0x136>
      // start of new cluster
      if (curCluster_ == 0) {
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d114      	bne.n	8003c84 <_ZN6SdFile5writeEPKvt+0xd4>
        if (firstCluster_ == 0) {
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6a1b      	ldr	r3, [r3, #32]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d10b      	bne.n	8003c7a <_ZN6SdFile5writeEPKvt+0xca>
          // allocate first cluster of file
          if (!addCluster()) goto writeErrorReturn;
 8003c62:	68f8      	ldr	r0, [r7, #12]
 8003c64:	f7ff f9b2 	bl	8002fcc <_ZN6SdFile10addClusterEv>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	bf0c      	ite	eq
 8003c6e:	2301      	moveq	r3, #1
 8003c70:	2300      	movne	r3, #0
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d036      	beq.n	8003ce6 <_ZN6SdFile5writeEPKvt+0x136>
 8003c78:	e0f1      	b.n	8003e5e <_ZN6SdFile5writeEPKvt+0x2ae>
        } else {
          curCluster_ = firstCluster_;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	6a1a      	ldr	r2, [r3, #32]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	60da      	str	r2, [r3, #12]
 8003c82:	e030      	b.n	8003ce6 <_ZN6SdFile5writeEPKvt+0x136>
        }
      } else {
        uint32_t next;
        if (!vol_->fatGet(curCluster_, &next)) return false;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	f107 0214 	add.w	r2, r7, #20
 8003c90:	4619      	mov	r1, r3
 8003c92:	f000 fa67 	bl	8004164 <_ZNK8SdVolume6fatGetEmPm>
 8003c96:	4603      	mov	r3, r0
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	bf0c      	ite	eq
 8003c9c:	2301      	moveq	r3, #1
 8003c9e:	2300      	movne	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <_ZN6SdFile5writeEPKvt+0xfa>
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	e0df      	b.n	8003e6a <_ZN6SdFile5writeEPKvt+0x2ba>
        if (vol_->isEOC(next)) {
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	4611      	mov	r1, r2
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff f93e 	bl	8002f34 <_ZNK8SdVolume5isEOCEm>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	bf14      	ite	ne
 8003cbe:	2301      	movne	r3, #1
 8003cc0:	2300      	moveq	r3, #0
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d00b      	beq.n	8003ce0 <_ZN6SdFile5writeEPKvt+0x130>
          // add cluster if at end of chain
          if (!addCluster()) goto writeErrorReturn;
 8003cc8:	68f8      	ldr	r0, [r7, #12]
 8003cca:	f7ff f97f 	bl	8002fcc <_ZN6SdFile10addClusterEv>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	bf0c      	ite	eq
 8003cd4:	2301      	moveq	r3, #1
 8003cd6:	2300      	movne	r3, #0
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d003      	beq.n	8003ce6 <_ZN6SdFile5writeEPKvt+0x136>
 8003cde:	e0be      	b.n	8003e5e <_ZN6SdFile5writeEPKvt+0x2ae>
        } else {
          curCluster_ = next;
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	60da      	str	r2, [r3, #12]
        }
      }
    }
    // max space in block
    uint16_t n = 512 - blockOffset;
 8003ce6:	8c3b      	ldrh	r3, [r7, #32]
 8003ce8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003cec:	853b      	strh	r3, [r7, #40]	; 0x28

    // lesser of space and amount to write
    if (n > nToWrite) n = nToWrite;
 8003cee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003cf0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	dd01      	ble.n	8003cfa <_ZN6SdFile5writeEPKvt+0x14a>
 8003cf6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003cf8:	853b      	strh	r3, [r7, #40]	; 0x28

    // block for data write
    uint32_t block = vol_->clusterStartBlock(curCluster_) + blockOfCluster;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	68db      	ldr	r3, [r3, #12]
 8003d02:	4619      	mov	r1, r3
 8003d04:	4610      	mov	r0, r2
 8003d06:	f7ff f8e3 	bl	8002ed0 <_ZNK8SdVolume17clusterStartBlockEm>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d10:	4413      	add	r3, r2
 8003d12:	61fb      	str	r3, [r7, #28]
    if (n == 512) {
 8003d14:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003d16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d1a:	d11d      	bne.n	8003d58 <_ZN6SdFile5writeEPKvt+0x1a8>
      // full block - don't need to use cache
      // invalidate cache if block is in cache
      if (SdVolume::cacheBlockNumber_ == block) {
 8003d1c:	4b55      	ldr	r3, [pc, #340]	; (8003e74 <_ZN6SdFile5writeEPKvt+0x2c4>)
 8003d1e:	681a      	ldr	r2, [r3, #0]
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d103      	bne.n	8003d2e <_ZN6SdFile5writeEPKvt+0x17e>
        SdVolume::cacheBlockNumber_ = 0XFFFFFFFF;
 8003d26:	4b53      	ldr	r3, [pc, #332]	; (8003e74 <_ZN6SdFile5writeEPKvt+0x2c4>)
 8003d28:	f04f 32ff 	mov.w	r2, #4294967295
 8003d2c:	601a      	str	r2, [r3, #0]
      }
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d34:	69f9      	ldr	r1, [r7, #28]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7ff f934 	bl	8002fa4 <_ZN8SdVolume10writeBlockEmPKh>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	bf0c      	ite	eq
 8003d42:	2301      	moveq	r3, #1
 8003d44:	2300      	movne	r3, #0
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f040 8081 	bne.w	8003e50 <_ZN6SdFile5writeEPKvt+0x2a0>
      src += 512;
 8003d4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d50:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8003d54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d56:	e039      	b.n	8003dcc <_ZN6SdFile5writeEPKvt+0x21c>
    } else {
      if (blockOffset == 0 && curPosition_ >= fileSize_) {
 8003d58:	8c3b      	ldrh	r3, [r7, #32]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d115      	bne.n	8003d8a <_ZN6SdFile5writeEPKvt+0x1da>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	691a      	ldr	r2, [r3, #16]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	69db      	ldr	r3, [r3, #28]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d30f      	bcc.n	8003d8a <_ZN6SdFile5writeEPKvt+0x1da>
        // start of new block don't need to read into cache
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
 8003d6a:	f000 f941 	bl	8003ff0 <_ZN8SdVolume10cacheFlushEv>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bf0c      	ite	eq
 8003d74:	2301      	moveq	r3, #1
 8003d76:	2300      	movne	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d16a      	bne.n	8003e54 <_ZN6SdFile5writeEPKvt+0x2a4>
        SdVolume::cacheBlockNumber_ = block;
 8003d7e:	4a3d      	ldr	r2, [pc, #244]	; (8003e74 <_ZN6SdFile5writeEPKvt+0x2c4>)
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	6013      	str	r3, [r2, #0]
        SdVolume::cacheSetDirty();
 8003d84:	f7ff f8b6 	bl	8002ef4 <_ZN8SdVolume13cacheSetDirtyEv>
 8003d88:	e00b      	b.n	8003da2 <_ZN6SdFile5writeEPKvt+0x1f2>
      } else {
        // rewrite part of block
        if (!SdVolume::cacheRawBlock(block, SdVolume::CACHE_FOR_WRITE)) {
 8003d8a:	2101      	movs	r1, #1
 8003d8c:	69f8      	ldr	r0, [r7, #28]
 8003d8e:	f000 f971 	bl	8004074 <_ZN8SdVolume13cacheRawBlockEmh>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	bf0c      	ite	eq
 8003d98:	2301      	moveq	r3, #1
 8003d9a:	2300      	movne	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d15a      	bne.n	8003e58 <_ZN6SdFile5writeEPKvt+0x2a8>
          goto writeErrorReturn;
        }
      }
      uint8_t* dst = SdVolume::cacheBuffer_.data + blockOffset;
 8003da2:	8c3b      	ldrh	r3, [r7, #32]
 8003da4:	4a34      	ldr	r2, [pc, #208]	; (8003e78 <_ZN6SdFile5writeEPKvt+0x2c8>)
 8003da6:	4413      	add	r3, r2
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24
      uint8_t* end = dst + n;
 8003daa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003dac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dae:	4413      	add	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
      while (dst != end) *dst++ = *src++;
 8003db2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003db4:	69bb      	ldr	r3, [r7, #24]
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d008      	beq.n	8003dcc <_ZN6SdFile5writeEPKvt+0x21c>
 8003dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dbc:	1c5a      	adds	r2, r3, #1
 8003dbe:	627a      	str	r2, [r7, #36]	; 0x24
 8003dc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dc2:	1c51      	adds	r1, r2, #1
 8003dc4:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003dc6:	7812      	ldrb	r2, [r2, #0]
 8003dc8:	701a      	strb	r2, [r3, #0]
 8003dca:	e7f2      	b.n	8003db2 <_ZN6SdFile5writeEPKvt+0x202>
    }
    nToWrite -= n;
 8003dcc:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8003dce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	857b      	strh	r3, [r7, #42]	; 0x2a
    curPosition_ += n;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003dda:	441a      	add	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	611a      	str	r2, [r3, #16]
  while (nToWrite > 0) {
 8003de0:	e71b      	b.n	8003c1a <_ZN6SdFile5writeEPKvt+0x6a>
  }
  if (curPosition_ > fileSize_) {
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	691a      	ldr	r2, [r3, #16]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	69db      	ldr	r3, [r3, #28]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d90b      	bls.n	8003e06 <_ZN6SdFile5writeEPKvt+0x256>
    // update fileSize and insure sync will update dir entry
    fileSize_ = curPosition_;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	691a      	ldr	r2, [r3, #16]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	61da      	str	r2, [r3, #28]
    flags_ |= F_FILE_DIR_DIRTY;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	7a1b      	ldrb	r3, [r3, #8]
 8003dfa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003dfe:	b2da      	uxtb	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	721a      	strb	r2, [r3, #8]
 8003e04:	e00d      	b.n	8003e22 <_ZN6SdFile5writeEPKvt+0x272>
  } else if (dateTime_ && nbyte) {
 8003e06:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <_ZN6SdFile5writeEPKvt+0x2cc>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d009      	beq.n	8003e22 <_ZN6SdFile5writeEPKvt+0x272>
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d006      	beq.n	8003e22 <_ZN6SdFile5writeEPKvt+0x272>
    // insure sync will update modified date and time
    flags_ |= F_FILE_DIR_DIRTY;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	7a1b      	ldrb	r3, [r3, #8]
 8003e18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003e1c:	b2da      	uxtb	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	721a      	strb	r2, [r3, #8]
  }

  if (flags_ & O_SYNC) {
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	7a1b      	ldrb	r3, [r3, #8]
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <_ZN6SdFile5writeEPKvt+0x294>
    if (!sync()) goto writeErrorReturn;
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f7ff fda6 	bl	8003980 <_ZN6SdFile4syncEv>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	bf0c      	ite	eq
 8003e3a:	2301      	moveq	r3, #1
 8003e3c:	2300      	movne	r3, #0
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10b      	bne.n	8003e5c <_ZN6SdFile5writeEPKvt+0x2ac>
  }
  return nbyte;
 8003e44:	88fb      	ldrh	r3, [r7, #6]
 8003e46:	e010      	b.n	8003e6a <_ZN6SdFile5writeEPKvt+0x2ba>
  if (!isFile() || !(flags_ & O_WRITE)) goto writeErrorReturn;
 8003e48:	bf00      	nop
 8003e4a:	e008      	b.n	8003e5e <_ZN6SdFile5writeEPKvt+0x2ae>
    if (!seekEnd()) goto writeErrorReturn;
 8003e4c:	bf00      	nop
 8003e4e:	e006      	b.n	8003e5e <_ZN6SdFile5writeEPKvt+0x2ae>
      if (!vol_->writeBlock(block, src)) goto writeErrorReturn;
 8003e50:	bf00      	nop
 8003e52:	e004      	b.n	8003e5e <_ZN6SdFile5writeEPKvt+0x2ae>
        if (!SdVolume::cacheFlush()) goto writeErrorReturn;
 8003e54:	bf00      	nop
 8003e56:	e002      	b.n	8003e5e <_ZN6SdFile5writeEPKvt+0x2ae>
          goto writeErrorReturn;
 8003e58:	bf00      	nop
 8003e5a:	e000      	b.n	8003e5e <_ZN6SdFile5writeEPKvt+0x2ae>
    if (!sync()) goto writeErrorReturn;
 8003e5c:	bf00      	nop

 writeErrorReturn:
  // return for write error
  //writeError = true;
  setWriteError();
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2101      	movs	r1, #1
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fe f910 	bl	8002088 <_ZN5Print13setWriteErrorEi>
  return 0;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3730      	adds	r7, #48	; 0x30
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	20000018 	.word	0x20000018
 8003e78:	20000150 	.word	0x20000150
 8003e7c:	2000014c 	.word	0x2000014c

08003e80 <_ZN6SdFile5writeEh>:
/**
 * Write a byte to a file. Required by the Arduino Print class.
 *
 * Use SdFile::writeError to check for errors.
 */
size_t SdFile::write(uint8_t b) {
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	70fb      	strb	r3, [r7, #3]
  return write(&b, 1);
 8003e8c:	1cfb      	adds	r3, r7, #3
 8003e8e:	2201      	movs	r2, #1
 8003e90:	4619      	mov	r1, r3
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7ff fe8c 	bl	8003bb0 <_ZN6SdFile5writeEPKvt>
 8003e98:	4603      	mov	r3, r0
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3708      	adds	r7, #8
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}

08003ea2 <_ZN8SdVolume15allocContiguousEmPm>:
Sd2Card* SdVolume::sdCard_;          // pointer to SD card object
uint8_t  SdVolume::cacheDirty_ = 0;  // cacheFlush() will write block if true
uint32_t SdVolume::cacheMirrorBlock_ = 0;  // mirror  block for second FAT
//------------------------------------------------------------------------------
// find a contiguous group of clusters
uint8_t SdVolume::allocContiguous(uint32_t count, uint32_t* curCluster) {
 8003ea2:	b580      	push	{r7, lr}
 8003ea4:	b08a      	sub	sp, #40	; 0x28
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	60f8      	str	r0, [r7, #12]
 8003eaa:	60b9      	str	r1, [r7, #8]
 8003eac:	607a      	str	r2, [r7, #4]

  // flag to save place to start next search
  uint8_t setStart;

  // set search start cluster
  if (*curCluster) {
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d007      	beq.n	8003ec6 <_ZN8SdVolume15allocContiguousEmPm+0x24>
    // try to make file contiguous
    bgnCluster = *curCluster + 1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3301      	adds	r3, #1
 8003ebc:	627b      	str	r3, [r7, #36]	; 0x24

    // don't save new start location
    setStart = false;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ec4:	e00a      	b.n	8003edc <_ZN8SdVolume15allocContiguousEmPm+0x3a>
  } else {
    // start at likely place for free cluster
    bgnCluster = allocSearchStart_;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	627b      	str	r3, [r7, #36]	; 0x24

    // save next search start if one cluster
    setStart = 1 == count;
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	bf0c      	ite	eq
 8003ed2:	2301      	moveq	r3, #1
 8003ed4:	2300      	movne	r3, #0
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  }
  // end of group
  uint32_t endCluster = bgnCluster;
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	61fb      	str	r3, [r7, #28]

  // last cluster of FAT
  uint32_t fatEnd = clusterCount_ + 1;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	3301      	adds	r3, #1
 8003ee6:	617b      	str	r3, [r7, #20]

  // search the FAT for free clusters
  for (uint32_t n = 0;; n++, endCluster++) {
 8003ee8:	2300      	movs	r3, #0
 8003eea:	61bb      	str	r3, [r7, #24]
    // can't find space checked all clusters
    if (n >= clusterCount_) return false;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	68da      	ldr	r2, [r3, #12]
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	429a      	cmp	r2, r3
 8003ef4:	d801      	bhi.n	8003efa <_ZN8SdVolume15allocContiguousEmPm+0x58>
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	e076      	b.n	8003fe8 <_ZN8SdVolume15allocContiguousEmPm+0x146>

    // past end - start from beginning of FAT
    if (endCluster > fatEnd) {
 8003efa:	69fa      	ldr	r2, [r7, #28]
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d903      	bls.n	8003f0a <_ZN8SdVolume15allocContiguousEmPm+0x68>
      bgnCluster = endCluster = 2;
 8003f02:	2302      	movs	r3, #2
 8003f04:	61fb      	str	r3, [r7, #28]
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
    }
    uint32_t f;
    if (!fatGet(endCluster, &f)) return false;
 8003f0a:	f107 0310 	add.w	r3, r7, #16
 8003f0e:	461a      	mov	r2, r3
 8003f10:	69f9      	ldr	r1, [r7, #28]
 8003f12:	68f8      	ldr	r0, [r7, #12]
 8003f14:	f000 f926 	bl	8004164 <_ZNK8SdVolume6fatGetEmPm>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	bf0c      	ite	eq
 8003f1e:	2301      	moveq	r3, #1
 8003f20:	2300      	movne	r3, #0
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <_ZN8SdVolume15allocContiguousEmPm+0x8a>
 8003f28:	2300      	movs	r3, #0
 8003f2a:	e05d      	b.n	8003fe8 <_ZN8SdVolume15allocContiguousEmPm+0x146>

    if (f != 0) {
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <_ZN8SdVolume15allocContiguousEmPm+0x98>
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	3301      	adds	r3, #1
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24
 8003f38:	e013      	b.n	8003f62 <_ZN8SdVolume15allocContiguousEmPm+0xc0>
    } else if ((endCluster - bgnCluster + 1) == count) {
 8003f3a:	69fa      	ldr	r2, [r7, #28]
 8003f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d10c      	bne.n	8003f62 <_ZN8SdVolume15allocContiguousEmPm+0xc0>
      // done - found space
      break;
    }
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) return false;
 8003f48:	69f9      	ldr	r1, [r7, #28]
 8003f4a:	68f8      	ldr	r0, [r7, #12]
 8003f4c:	f7fe ffe2 	bl	8002f14 <_ZN8SdVolume9fatPutEOCEm>
 8003f50:	4603      	mov	r3, r0
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	bf0c      	ite	eq
 8003f56:	2301      	moveq	r3, #1
 8003f58:	2300      	movne	r3, #0
 8003f5a:	b2db      	uxtb	r3, r3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d107      	bne.n	8003f70 <_ZN8SdVolume15allocContiguousEmPm+0xce>
 8003f60:	e008      	b.n	8003f74 <_ZN8SdVolume15allocContiguousEmPm+0xd2>
  for (uint32_t n = 0;; n++, endCluster++) {
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	3301      	adds	r3, #1
 8003f66:	61bb      	str	r3, [r7, #24]
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	61fb      	str	r3, [r7, #28]
  }
 8003f6e:	e7bd      	b.n	8003eec <_ZN8SdVolume15allocContiguousEmPm+0x4a>
  if (!fatPutEOC(endCluster)) return false;
 8003f70:	2300      	movs	r3, #0
 8003f72:	e039      	b.n	8003fe8 <_ZN8SdVolume15allocContiguousEmPm+0x146>

  // link clusters
  while (endCluster > bgnCluster) {
 8003f74:	69fa      	ldr	r2, [r7, #28]
 8003f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d914      	bls.n	8003fa6 <_ZN8SdVolume15allocContiguousEmPm+0x104>
    if (!fatPut(endCluster - 1, endCluster)) return false;
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	3b01      	subs	r3, #1
 8003f80:	69fa      	ldr	r2, [r7, #28]
 8003f82:	4619      	mov	r1, r3
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 f93f 	bl	8004208 <_ZN8SdVolume6fatPutEmm>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bf0c      	ite	eq
 8003f90:	2301      	moveq	r3, #1
 8003f92:	2300      	movne	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d001      	beq.n	8003f9e <_ZN8SdVolume15allocContiguousEmPm+0xfc>
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	e024      	b.n	8003fe8 <_ZN8SdVolume15allocContiguousEmPm+0x146>
    endCluster--;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3b01      	subs	r3, #1
 8003fa2:	61fb      	str	r3, [r7, #28]
  while (endCluster > bgnCluster) {
 8003fa4:	e7e6      	b.n	8003f74 <_ZN8SdVolume15allocContiguousEmPm+0xd2>
  }
  if (*curCluster != 0) {
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d010      	beq.n	8003fd0 <_ZN8SdVolume15allocContiguousEmPm+0x12e>
    // connect chains
    if (!fatPut(*curCluster, bgnCluster)) return false;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fb4:	4619      	mov	r1, r3
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	f000 f926 	bl	8004208 <_ZN8SdVolume6fatPutEmm>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	bf0c      	ite	eq
 8003fc2:	2301      	moveq	r3, #1
 8003fc4:	2300      	movne	r3, #0
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d001      	beq.n	8003fd0 <_ZN8SdVolume15allocContiguousEmPm+0x12e>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	e00b      	b.n	8003fe8 <_ZN8SdVolume15allocContiguousEmPm+0x146>
  }
  // return first cluster number to caller
  *curCluster = bgnCluster;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fd4:	601a      	str	r2, [r3, #0]

  // remember possible next free cluster
  if (setStart) allocSearchStart_ = bgnCluster + 1;
 8003fd6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <_ZN8SdVolume15allocContiguousEmPm+0x144>
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	1c5a      	adds	r2, r3, #1
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	601a      	str	r2, [r3, #0]

  return true;
 8003fe6:	2301      	movs	r3, #1
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3728      	adds	r7, #40	; 0x28
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <_ZN8SdVolume10cacheFlushEv>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheFlush(void) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  if (cacheDirty_) {
 8003ff4:	4b1a      	ldr	r3, [pc, #104]	; (8004060 <_ZN8SdVolume10cacheFlushEv+0x70>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d02d      	beq.n	8004058 <_ZN8SdVolume10cacheFlushEv+0x68>
    if (!sdCard_->writeBlock(cacheBlockNumber_, cacheBuffer_.data)) {
 8003ffc:	4b19      	ldr	r3, [pc, #100]	; (8004064 <_ZN8SdVolume10cacheFlushEv+0x74>)
 8003ffe:	6818      	ldr	r0, [r3, #0]
 8004000:	4b19      	ldr	r3, [pc, #100]	; (8004068 <_ZN8SdVolume10cacheFlushEv+0x78>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a19      	ldr	r2, [pc, #100]	; (800406c <_ZN8SdVolume10cacheFlushEv+0x7c>)
 8004006:	4619      	mov	r1, r3
 8004008:	f7fe fdbf 	bl	8002b8a <_ZN7Sd2Card10writeBlockEmPKh>
 800400c:	4603      	mov	r3, r0
 800400e:	2b00      	cmp	r3, #0
 8004010:	bf0c      	ite	eq
 8004012:	2301      	moveq	r3, #1
 8004014:	2300      	movne	r3, #0
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	d001      	beq.n	8004020 <_ZN8SdVolume10cacheFlushEv+0x30>
      return false;
 800401c:	2300      	movs	r3, #0
 800401e:	e01c      	b.n	800405a <_ZN8SdVolume10cacheFlushEv+0x6a>
    }
    // mirror FAT tables
    if (cacheMirrorBlock_) {
 8004020:	4b13      	ldr	r3, [pc, #76]	; (8004070 <_ZN8SdVolume10cacheFlushEv+0x80>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d014      	beq.n	8004052 <_ZN8SdVolume10cacheFlushEv+0x62>
      if (!sdCard_->writeBlock(cacheMirrorBlock_, cacheBuffer_.data)) {
 8004028:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <_ZN8SdVolume10cacheFlushEv+0x74>)
 800402a:	6818      	ldr	r0, [r3, #0]
 800402c:	4b10      	ldr	r3, [pc, #64]	; (8004070 <_ZN8SdVolume10cacheFlushEv+0x80>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a0e      	ldr	r2, [pc, #56]	; (800406c <_ZN8SdVolume10cacheFlushEv+0x7c>)
 8004032:	4619      	mov	r1, r3
 8004034:	f7fe fda9 	bl	8002b8a <_ZN7Sd2Card10writeBlockEmPKh>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	bf0c      	ite	eq
 800403e:	2301      	moveq	r3, #1
 8004040:	2300      	movne	r3, #0
 8004042:	b2db      	uxtb	r3, r3
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <_ZN8SdVolume10cacheFlushEv+0x5c>
        return false;
 8004048:	2300      	movs	r3, #0
 800404a:	e006      	b.n	800405a <_ZN8SdVolume10cacheFlushEv+0x6a>
      }
      cacheMirrorBlock_ = 0;
 800404c:	4b08      	ldr	r3, [pc, #32]	; (8004070 <_ZN8SdVolume10cacheFlushEv+0x80>)
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]
    }
    cacheDirty_ = 0;
 8004052:	4b03      	ldr	r3, [pc, #12]	; (8004060 <_ZN8SdVolume10cacheFlushEv+0x70>)
 8004054:	2200      	movs	r2, #0
 8004056:	701a      	strb	r2, [r3, #0]
  }
  return true;
 8004058:	2301      	movs	r3, #1
}
 800405a:	4618      	mov	r0, r3
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	20000354 	.word	0x20000354
 8004064:	20000350 	.word	0x20000350
 8004068:	20000018 	.word	0x20000018
 800406c:	20000150 	.word	0x20000150
 8004070:	20000358 	.word	0x20000358

08004074 <_ZN8SdVolume13cacheRawBlockEmh>:
//------------------------------------------------------------------------------
uint8_t SdVolume::cacheRawBlock(uint32_t blockNumber, uint8_t action) {
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	70fb      	strb	r3, [r7, #3]
  if (cacheBlockNumber_ != blockNumber) {
 8004080:	4b18      	ldr	r3, [pc, #96]	; (80040e4 <_ZN8SdVolume13cacheRawBlockEmh+0x70>)
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	429a      	cmp	r2, r3
 8004088:	d01f      	beq.n	80040ca <_ZN8SdVolume13cacheRawBlockEmh+0x56>
    if (!cacheFlush()) return false;
 800408a:	f7ff ffb1 	bl	8003ff0 <_ZN8SdVolume10cacheFlushEv>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	bf0c      	ite	eq
 8004094:	2301      	moveq	r3, #1
 8004096:	2300      	movne	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <_ZN8SdVolume13cacheRawBlockEmh+0x2e>
 800409e:	2300      	movs	r3, #0
 80040a0:	e01b      	b.n	80040da <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    if (!sdCard_->readBlock(blockNumber, cacheBuffer_.data)) return false;
 80040a2:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <_ZN8SdVolume13cacheRawBlockEmh+0x74>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a11      	ldr	r2, [pc, #68]	; (80040ec <_ZN8SdVolume13cacheRawBlockEmh+0x78>)
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f7fe fc2c 	bl	8002908 <_ZN7Sd2Card9readBlockEmPh>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	bf0c      	ite	eq
 80040b6:	2301      	moveq	r3, #1
 80040b8:	2300      	movne	r3, #0
 80040ba:	b2db      	uxtb	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <_ZN8SdVolume13cacheRawBlockEmh+0x50>
 80040c0:	2300      	movs	r3, #0
 80040c2:	e00a      	b.n	80040da <_ZN8SdVolume13cacheRawBlockEmh+0x66>
    cacheBlockNumber_ = blockNumber;
 80040c4:	4a07      	ldr	r2, [pc, #28]	; (80040e4 <_ZN8SdVolume13cacheRawBlockEmh+0x70>)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6013      	str	r3, [r2, #0]
  }
  cacheDirty_ |= action;
 80040ca:	4b09      	ldr	r3, [pc, #36]	; (80040f0 <_ZN8SdVolume13cacheRawBlockEmh+0x7c>)
 80040cc:	781a      	ldrb	r2, [r3, #0]
 80040ce:	78fb      	ldrb	r3, [r7, #3]
 80040d0:	4313      	orrs	r3, r2
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	4b06      	ldr	r3, [pc, #24]	; (80040f0 <_ZN8SdVolume13cacheRawBlockEmh+0x7c>)
 80040d6:	701a      	strb	r2, [r3, #0]
  return true;
 80040d8:	2301      	movs	r3, #1
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	20000018 	.word	0x20000018
 80040e8:	20000350 	.word	0x20000350
 80040ec:	20000150 	.word	0x20000150
 80040f0:	20000354 	.word	0x20000354

080040f4 <_ZNK8SdVolume9chainSizeEmPm>:
  cacheSetDirty();
  return true;
}
//------------------------------------------------------------------------------
// return the size in bytes of a cluster chain
uint8_t SdVolume::chainSize(uint32_t cluster, uint32_t* size) const {
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	607a      	str	r2, [r7, #4]
  uint32_t s = 0;
 8004100:	2300      	movs	r3, #0
 8004102:	617b      	str	r3, [r7, #20]
  do {
    if (!fatGet(cluster, &cluster)) return false;
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	f107 0208 	add.w	r2, r7, #8
 800410a:	4619      	mov	r1, r3
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 f829 	bl	8004164 <_ZNK8SdVolume6fatGetEmPm>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	bf0c      	ite	eq
 8004118:	2301      	moveq	r3, #1
 800411a:	2300      	movne	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <_ZNK8SdVolume9chainSizeEmPm+0x32>
 8004122:	2300      	movs	r3, #0
 8004124:	e01a      	b.n	800415c <_ZNK8SdVolume9chainSizeEmPm+0x68>
    s += 512UL << clusterSizeShift_;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	7c1b      	ldrb	r3, [r3, #16]
 800412a:	461a      	mov	r2, r3
 800412c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004130:	4093      	lsls	r3, r2
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4413      	add	r3, r2
 8004136:	617b      	str	r3, [r7, #20]
  } while (!isEOC(cluster));
 8004138:	68bb      	ldr	r3, [r7, #8]
 800413a:	4619      	mov	r1, r3
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f7fe fef9 	bl	8002f34 <_ZNK8SdVolume5isEOCEm>
 8004142:	4603      	mov	r3, r0
  do {
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf0c      	ite	eq
 8004148:	2301      	moveq	r3, #1
 800414a:	2300      	movne	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d000      	beq.n	8004154 <_ZNK8SdVolume9chainSizeEmPm+0x60>
 8004152:	e7d7      	b.n	8004104 <_ZNK8SdVolume9chainSizeEmPm+0x10>
  *size = s;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	601a      	str	r2, [r3, #0]
  return true;
 800415a:	2301      	movs	r3, #1
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <_ZNK8SdVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry
uint8_t SdVolume::fatGet(uint32_t cluster, uint32_t* value) const {
 8004164:	b580      	push	{r7, lr}
 8004166:	b086      	sub	sp, #24
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  if (cluster > (clusterCount_ + 1)) return false;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	1c5a      	adds	r2, r3, #1
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	429a      	cmp	r2, r3
 800417a:	d201      	bcs.n	8004180 <_ZNK8SdVolume6fatGetEmPm+0x1c>
 800417c:	2300      	movs	r3, #0
 800417e:	e03b      	b.n	80041f8 <_ZNK8SdVolume6fatGetEmPm+0x94>
  uint32_t lba = fatStartBlock_;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	69db      	ldr	r3, [r3, #28]
 8004184:	617b      	str	r3, [r7, #20]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f893 3020 	ldrb.w	r3, [r3, #32]
 800418c:	2b10      	cmp	r3, #16
 800418e:	d102      	bne.n	8004196 <_ZNK8SdVolume6fatGetEmPm+0x32>
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	0a1b      	lsrs	r3, r3, #8
 8004194:	e001      	b.n	800419a <_ZNK8SdVolume6fatGetEmPm+0x36>
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	09db      	lsrs	r3, r3, #7
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4413      	add	r3, r2
 800419e:	617b      	str	r3, [r7, #20]
  if (lba != cacheBlockNumber_) {
 80041a0:	4b17      	ldr	r3, [pc, #92]	; (8004200 <_ZNK8SdVolume6fatGetEmPm+0x9c>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d00d      	beq.n	80041c6 <_ZNK8SdVolume6fatGetEmPm+0x62>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
 80041aa:	2100      	movs	r1, #0
 80041ac:	6978      	ldr	r0, [r7, #20]
 80041ae:	f7ff ff61 	bl	8004074 <_ZN8SdVolume13cacheRawBlockEmh>
 80041b2:	4603      	mov	r3, r0
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bf0c      	ite	eq
 80041b8:	2301      	moveq	r3, #1
 80041ba:	2300      	movne	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <_ZNK8SdVolume6fatGetEmPm+0x62>
 80041c2:	2300      	movs	r3, #0
 80041c4:	e018      	b.n	80041f8 <_ZNK8SdVolume6fatGetEmPm+0x94>
  }
  if (fatType_ == 16) {
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041cc:	2b10      	cmp	r3, #16
 80041ce:	d108      	bne.n	80041e2 <_ZNK8SdVolume6fatGetEmPm+0x7e>
    *value = cacheBuffer_.fat16[cluster & 0XFF];
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	b2db      	uxtb	r3, r3
 80041d4:	4a0b      	ldr	r2, [pc, #44]	; (8004204 <_ZNK8SdVolume6fatGetEmPm+0xa0>)
 80041d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041da:	461a      	mov	r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	e009      	b.n	80041f6 <_ZNK8SdVolume6fatGetEmPm+0x92>
  } else {
    *value = cacheBuffer_.fat32[cluster & 0X7F] & FAT32MASK;
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041e8:	4a06      	ldr	r2, [pc, #24]	; (8004204 <_ZNK8SdVolume6fatGetEmPm+0xa0>)
 80041ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041ee:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	601a      	str	r2, [r3, #0]
  }
  return true;
 80041f6:	2301      	movs	r3, #1
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20000018 	.word	0x20000018
 8004204:	20000150 	.word	0x20000150

08004208 <_ZN8SdVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
uint8_t SdVolume::fatPut(uint32_t cluster, uint32_t value) {
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
  // error if reserved cluster
  if (cluster < 2) return false;
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d801      	bhi.n	800421e <_ZN8SdVolume6fatPutEmm+0x16>
 800421a:	2300      	movs	r3, #0
 800421c:	e04b      	b.n	80042b6 <_ZN8SdVolume6fatPutEmm+0xae>

  // error if not in FAT
  if (cluster > (clusterCount_ + 1)) return false;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	429a      	cmp	r2, r3
 8004228:	d201      	bcs.n	800422e <_ZN8SdVolume6fatPutEmm+0x26>
 800422a:	2300      	movs	r3, #0
 800422c:	e043      	b.n	80042b6 <_ZN8SdVolume6fatPutEmm+0xae>

  // calculate block address for entry
  uint32_t lba = fatStartBlock_;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	69db      	ldr	r3, [r3, #28]
 8004232:	617b      	str	r3, [r7, #20]
  lba += fatType_ == 16 ? cluster >> 8 : cluster >> 7;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f893 3020 	ldrb.w	r3, [r3, #32]
 800423a:	2b10      	cmp	r3, #16
 800423c:	d102      	bne.n	8004244 <_ZN8SdVolume6fatPutEmm+0x3c>
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	0a1b      	lsrs	r3, r3, #8
 8004242:	e001      	b.n	8004248 <_ZN8SdVolume6fatPutEmm+0x40>
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	09db      	lsrs	r3, r3, #7
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4413      	add	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  if (lba != cacheBlockNumber_) {
 800424e:	4b1c      	ldr	r3, [pc, #112]	; (80042c0 <_ZN8SdVolume6fatPutEmm+0xb8>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	429a      	cmp	r2, r3
 8004256:	d00d      	beq.n	8004274 <_ZN8SdVolume6fatPutEmm+0x6c>
    if (!cacheRawBlock(lba, CACHE_FOR_READ)) return false;
 8004258:	2100      	movs	r1, #0
 800425a:	6978      	ldr	r0, [r7, #20]
 800425c:	f7ff ff0a 	bl	8004074 <_ZN8SdVolume13cacheRawBlockEmh>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	bf0c      	ite	eq
 8004266:	2301      	moveq	r3, #1
 8004268:	2300      	movne	r3, #0
 800426a:	b2db      	uxtb	r3, r3
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <_ZN8SdVolume6fatPutEmm+0x6c>
 8004270:	2300      	movs	r3, #0
 8004272:	e020      	b.n	80042b6 <_ZN8SdVolume6fatPutEmm+0xae>
  }
  // store entry
  if (fatType_ == 16) {
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f893 3020 	ldrb.w	r3, [r3, #32]
 800427a:	2b10      	cmp	r3, #16
 800427c:	d107      	bne.n	800428e <_ZN8SdVolume6fatPutEmm+0x86>
    cacheBuffer_.fat16[cluster & 0XFF] = value;
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	b2db      	uxtb	r3, r3
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	b291      	uxth	r1, r2
 8004286:	4a0f      	ldr	r2, [pc, #60]	; (80042c4 <_ZN8SdVolume6fatPutEmm+0xbc>)
 8004288:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800428c:	e006      	b.n	800429c <_ZN8SdVolume6fatPutEmm+0x94>
  } else {
    cacheBuffer_.fat32[cluster & 0X7F] = value;
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004294:	490b      	ldr	r1, [pc, #44]	; (80042c4 <_ZN8SdVolume6fatPutEmm+0xbc>)
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
  cacheSetDirty();
 800429c:	f7fe fe2a 	bl	8002ef4 <_ZN8SdVolume13cacheSetDirtyEv>

  // mirror second FAT
  if (fatCount_ > 1) cacheMirrorBlock_ = lba + blocksPerFat_;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	7e1b      	ldrb	r3, [r3, #24]
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	dd05      	ble.n	80042b4 <_ZN8SdVolume6fatPutEmm+0xac>
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	689a      	ldr	r2, [r3, #8]
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	4413      	add	r3, r2
 80042b0:	4a05      	ldr	r2, [pc, #20]	; (80042c8 <_ZN8SdVolume6fatPutEmm+0xc0>)
 80042b2:	6013      	str	r3, [r2, #0]
  return true;
 80042b4:	2301      	movs	r3, #1
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3718      	adds	r7, #24
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20000018 	.word	0x20000018
 80042c4:	20000150 	.word	0x20000150
 80042c8:	20000358 	.word	0x20000358

080042cc <_ZN8SdVolume9freeChainEm>:
//------------------------------------------------------------------------------
// free a cluster chain
uint8_t SdVolume::freeChain(uint32_t cluster) {
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  // clear free cluster location
  allocSearchStart_ = 2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2202      	movs	r2, #2
 80042da:	601a      	str	r2, [r3, #0]

  do {
    uint32_t next;
    if (!fatGet(cluster, &next)) return false;
 80042dc:	f107 030c 	add.w	r3, r7, #12
 80042e0:	461a      	mov	r2, r3
 80042e2:	6839      	ldr	r1, [r7, #0]
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff ff3d 	bl	8004164 <_ZNK8SdVolume6fatGetEmPm>
 80042ea:	4603      	mov	r3, r0
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	bf0c      	ite	eq
 80042f0:	2301      	moveq	r3, #1
 80042f2:	2300      	movne	r3, #0
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <_ZN8SdVolume9freeChainEm+0x32>
 80042fa:	2300      	movs	r3, #0
 80042fc:	e01e      	b.n	800433c <_ZN8SdVolume9freeChainEm+0x70>

    // free cluster
    if (!fatPut(cluster, 0)) return false;
 80042fe:	2200      	movs	r2, #0
 8004300:	6839      	ldr	r1, [r7, #0]
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f7ff ff80 	bl	8004208 <_ZN8SdVolume6fatPutEmm>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	bf0c      	ite	eq
 800430e:	2301      	moveq	r3, #1
 8004310:	2300      	movne	r3, #0
 8004312:	b2db      	uxtb	r3, r3
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <_ZN8SdVolume9freeChainEm+0x50>
 8004318:	2300      	movs	r3, #0
 800431a:	e00f      	b.n	800433c <_ZN8SdVolume9freeChainEm+0x70>

    cluster = next;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	603b      	str	r3, [r7, #0]
  } while (!isEOC(cluster));
 8004320:	6839      	ldr	r1, [r7, #0]
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fe fe06 	bl	8002f34 <_ZNK8SdVolume5isEOCEm>
 8004328:	4603      	mov	r3, r0
  do {
 800432a:	2b00      	cmp	r3, #0
 800432c:	bf0c      	ite	eq
 800432e:	2301      	moveq	r3, #1
 8004330:	2300      	movne	r3, #0
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b00      	cmp	r3, #0
 8004336:	d000      	beq.n	800433a <_ZN8SdVolume9freeChainEm+0x6e>
 8004338:	e7d0      	b.n	80042dc <_ZN8SdVolume9freeChainEm+0x10>

  return true;
 800433a:	2301      	movs	r3, #1
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <_ZN8SdVolume4initEP7Sd2Cardh>:
 * \return The value one, true, is returned for success and
 * the value zero, false, is returned for failure.  Reasons for
 * failure include not finding a valid partition, not finding a valid
 * FAT file system in the specified partition or an I/O error.
 */
uint8_t SdVolume::init(Sd2Card* dev, uint8_t part) {
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af00      	add	r7, sp, #0
 800434a:	60f8      	str	r0, [r7, #12]
 800434c:	60b9      	str	r1, [r7, #8]
 800434e:	4613      	mov	r3, r2
 8004350:	71fb      	strb	r3, [r7, #7]
  uint32_t volumeStartBlock = 0;
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
  sdCard_ = dev;
 8004356:	4a7d      	ldr	r2, [pc, #500]	; (800454c <_ZN8SdVolume4initEP7Sd2Cardh+0x208>)
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	6013      	str	r3, [r2, #0]
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 800435c:	79fb      	ldrb	r3, [r7, #7]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d02e      	beq.n	80043c0 <_ZN8SdVolume4initEP7Sd2Cardh+0x7c>
    if (part > 4)return false;
 8004362:	79fb      	ldrb	r3, [r7, #7]
 8004364:	2b04      	cmp	r3, #4
 8004366:	dd01      	ble.n	800436c <_ZN8SdVolume4initEP7Sd2Cardh+0x28>
 8004368:	2300      	movs	r3, #0
 800436a:	e0ea      	b.n	8004542 <_ZN8SdVolume4initEP7Sd2Cardh+0x1fe>
    if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
 800436c:	2100      	movs	r1, #0
 800436e:	69f8      	ldr	r0, [r7, #28]
 8004370:	f7ff fe80 	bl	8004074 <_ZN8SdVolume13cacheRawBlockEmh>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	bf0c      	ite	eq
 800437a:	2301      	moveq	r3, #1
 800437c:	2300      	movne	r3, #0
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d001      	beq.n	8004388 <_ZN8SdVolume4initEP7Sd2Cardh+0x44>
 8004384:	2300      	movs	r3, #0
 8004386:	e0dc      	b.n	8004542 <_ZN8SdVolume4initEP7Sd2Cardh+0x1fe>
    part_t* p = &cacheBuffer_.mbr.part[part-1];
 8004388:	79fb      	ldrb	r3, [r7, #7]
 800438a:	3b01      	subs	r3, #1
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8004392:	4a6f      	ldr	r2, [pc, #444]	; (8004550 <_ZN8SdVolume4initEP7Sd2Cardh+0x20c>)
 8004394:	4413      	add	r3, r2
 8004396:	3306      	adds	r3, #6
 8004398:	61bb      	str	r3, [r7, #24]
    if ((p->boot & 0X7F) !=0  ||
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d107      	bne.n	80043b6 <_ZN8SdVolume4initEP7Sd2Cardh+0x72>
      p->totalSectors < 100 ||
 80043a6:	69bb      	ldr	r3, [r7, #24]
 80043a8:	68db      	ldr	r3, [r3, #12]
    if ((p->boot & 0X7F) !=0  ||
 80043aa:	2b63      	cmp	r3, #99	; 0x63
 80043ac:	d903      	bls.n	80043b6 <_ZN8SdVolume4initEP7Sd2Cardh+0x72>
      p->firstSector == 0) {
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	689b      	ldr	r3, [r3, #8]
      p->totalSectors < 100 ||
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <_ZN8SdVolume4initEP7Sd2Cardh+0x76>
      // not a valid partition
      return false;
 80043b6:	2300      	movs	r3, #0
 80043b8:	e0c3      	b.n	8004542 <_ZN8SdVolume4initEP7Sd2Cardh+0x1fe>
    }
    volumeStartBlock = p->firstSector;
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	61fb      	str	r3, [r7, #28]
  }
  if (!cacheRawBlock(volumeStartBlock, CACHE_FOR_READ)) return false;
 80043c0:	2100      	movs	r1, #0
 80043c2:	69f8      	ldr	r0, [r7, #28]
 80043c4:	f7ff fe56 	bl	8004074 <_ZN8SdVolume13cacheRawBlockEmh>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	bf0c      	ite	eq
 80043ce:	2301      	moveq	r3, #1
 80043d0:	2300      	movne	r3, #0
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <_ZN8SdVolume4initEP7Sd2Cardh+0x98>
 80043d8:	2300      	movs	r3, #0
 80043da:	e0b2      	b.n	8004542 <_ZN8SdVolume4initEP7Sd2Cardh+0x1fe>
  bpb_t* bpb = &cacheBuffer_.fbs.bpb;
 80043dc:	4b5d      	ldr	r3, [pc, #372]	; (8004554 <_ZN8SdVolume4initEP7Sd2Cardh+0x210>)
 80043de:	617b      	str	r3, [r7, #20]
  if (bpb->bytesPerSector != 512 ||
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	881b      	ldrh	r3, [r3, #0]
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ea:	d10d      	bne.n	8004408 <_ZN8SdVolume4initEP7Sd2Cardh+0xc4>
    bpb->fatCount == 0 ||
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	795b      	ldrb	r3, [r3, #5]
  if (bpb->bytesPerSector != 512 ||
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d009      	beq.n	8004408 <_ZN8SdVolume4initEP7Sd2Cardh+0xc4>
    bpb->reservedSectorCount == 0 ||
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 80043fa:	b29b      	uxth	r3, r3
    bpb->fatCount == 0 ||
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d003      	beq.n	8004408 <_ZN8SdVolume4initEP7Sd2Cardh+0xc4>
    bpb->sectorsPerCluster == 0) {
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	789b      	ldrb	r3, [r3, #2]
    bpb->reservedSectorCount == 0 ||
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <_ZN8SdVolume4initEP7Sd2Cardh+0xc8>
       // not valid FAT volume
      return false;
 8004408:	2300      	movs	r3, #0
 800440a:	e09a      	b.n	8004542 <_ZN8SdVolume4initEP7Sd2Cardh+0x1fe>
  }
  fatCount_ = bpb->fatCount;
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	795a      	ldrb	r2, [r3, #5]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	761a      	strb	r2, [r3, #24]
  blocksPerCluster_ = bpb->sectorsPerCluster;
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	789a      	ldrb	r2, [r3, #2]
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	711a      	strb	r2, [r3, #4]

  // determine shift that is same as multiply by blocksPerCluster_
  clusterSizeShift_ = 0;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	741a      	strb	r2, [r3, #16]
  while (blocksPerCluster_ != (1 << clusterSizeShift_)) {
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	791b      	ldrb	r3, [r3, #4]
 8004426:	461a      	mov	r2, r3
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	7c1b      	ldrb	r3, [r3, #16]
 800442c:	4619      	mov	r1, r3
 800442e:	2301      	movs	r3, #1
 8004430:	408b      	lsls	r3, r1
 8004432:	429a      	cmp	r2, r3
 8004434:	d00e      	beq.n	8004454 <_ZN8SdVolume4initEP7Sd2Cardh+0x110>
    // error if not power of 2
    if (clusterSizeShift_++ > 7) return false;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	7c1b      	ldrb	r3, [r3, #16]
 800443a:	1c5a      	adds	r2, r3, #1
 800443c:	b2d1      	uxtb	r1, r2
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	7411      	strb	r1, [r2, #16]
 8004442:	2b07      	cmp	r3, #7
 8004444:	bfcc      	ite	gt
 8004446:	2301      	movgt	r3, #1
 8004448:	2300      	movle	r3, #0
 800444a:	b2db      	uxtb	r3, r3
 800444c:	2b00      	cmp	r3, #0
 800444e:	d0e8      	beq.n	8004422 <_ZN8SdVolume4initEP7Sd2Cardh+0xde>
 8004450:	2300      	movs	r3, #0
 8004452:	e076      	b.n	8004542 <_ZN8SdVolume4initEP7Sd2Cardh+0x1fe>
  }
  blocksPerFat_ = bpb->sectorsPerFat16 ?
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d004      	beq.n	800446a <_ZN8SdVolume4initEP7Sd2Cardh+0x126>
                    bpb->sectorsPerFat16 : bpb->sectorsPerFat32;
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8004466:	b29b      	uxth	r3, r3
 8004468:	e002      	b.n	8004470 <_ZN8SdVolume4initEP7Sd2Cardh+0x12c>
  blocksPerFat_ = bpb->sectorsPerFat16 ?
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f8d3 3019 	ldr.w	r3, [r3, #25]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	6093      	str	r3, [r2, #8]

  fatStartBlock_ = volumeStartBlock + bpb->reservedSectorCount;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f8b3 3003 	ldrh.w	r3, [r3, #3]
 800447a:	b29b      	uxth	r3, r3
 800447c:	461a      	mov	r2, r3
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	441a      	add	r2, r3
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	61da      	str	r2, [r3, #28]

  // count for FAT16 zero for FAT32
  rootDirEntryCount_ = bpb->rootDirEntryCount;
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	88db      	ldrh	r3, [r3, #6]
 800448a:	b29a      	uxth	r2, r3
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	845a      	strh	r2, [r3, #34]	; 0x22

  // directory start for FAT16 dataStart for FAT32
  rootDirStart_ = fatStartBlock_ + bpb->fatCount * blocksPerFat_;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	795b      	ldrb	r3, [r3, #5]
 8004498:	4619      	mov	r1, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	fb03 f301 	mul.w	r3, r3, r1
 80044a2:	441a      	add	r2, r3
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	625a      	str	r2, [r3, #36]	; 0x24

  // data start for FAT16 and FAT32
  dataStartBlock_ = rootDirStart_ + ((32 * bpb->rootDirEntryCount + 511)/512);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	88db      	ldrh	r3, [r3, #6]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	015b      	lsls	r3, r3, #5
 80044b4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	da01      	bge.n	80044c0 <_ZN8SdVolume4initEP7Sd2Cardh+0x17c>
 80044bc:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80044c0:	125b      	asrs	r3, r3, #9
 80044c2:	441a      	add	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	615a      	str	r2, [r3, #20]

  // total blocks for FAT16 or FAT32
  uint32_t totalBlocks = bpb->totalSectors16 ?
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	891b      	ldrh	r3, [r3, #8]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <_ZN8SdVolume4initEP7Sd2Cardh+0x196>
                           bpb->totalSectors16 : bpb->totalSectors32;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	891b      	ldrh	r3, [r3, #8]
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	e002      	b.n	80044e0 <_ZN8SdVolume4initEP7Sd2Cardh+0x19c>
  uint32_t totalBlocks = bpb->totalSectors16 ?
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	f8d3 3015 	ldr.w	r3, [r3, #21]
                           bpb->totalSectors16 : bpb->totalSectors32;
 80044e0:	613b      	str	r3, [r7, #16]
  // total data blocks
  clusterCount_ = totalBlocks - (dataStartBlock_ - volumeStartBlock);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	1ad2      	subs	r2, r2, r3
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	441a      	add	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	60da      	str	r2, [r3, #12]

  // divide by cluster size to get cluster count
  clusterCount_ >>= clusterSizeShift_;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	68fa      	ldr	r2, [r7, #12]
 80044f8:	7c12      	ldrb	r2, [r2, #16]
 80044fa:	fa23 f202 	lsr.w	r2, r3, r2
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	60da      	str	r2, [r3, #12]

  // FAT type is determined by cluster count
  if (clusterCount_ < 4085) {
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f640 72f4 	movw	r2, #4084	; 0xff4
 800450a:	4293      	cmp	r3, r2
 800450c:	d804      	bhi.n	8004518 <_ZN8SdVolume4initEP7Sd2Cardh+0x1d4>
    fatType_ = 12;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	220c      	movs	r2, #12
 8004512:	f883 2020 	strb.w	r2, [r3, #32]
 8004516:	e013      	b.n	8004540 <_ZN8SdVolume4initEP7Sd2Cardh+0x1fc>
  } else if (clusterCount_ < 65525) {
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f64f 72f4 	movw	r2, #65524	; 0xfff4
 8004520:	4293      	cmp	r3, r2
 8004522:	d804      	bhi.n	800452e <_ZN8SdVolume4initEP7Sd2Cardh+0x1ea>
    fatType_ = 16;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	2210      	movs	r2, #16
 8004528:	f883 2020 	strb.w	r2, [r3, #32]
 800452c:	e008      	b.n	8004540 <_ZN8SdVolume4initEP7Sd2Cardh+0x1fc>
  } else {
    rootDirStart_ = bpb->fat32RootCluster;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f8d3 2021 	ldr.w	r2, [r3, #33]	; 0x21
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	625a      	str	r2, [r3, #36]	; 0x24
    fatType_ = 32;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2220      	movs	r2, #32
 800453c:	f883 2020 	strb.w	r2, [r3, #32]
  }
  return true;
 8004540:	2301      	movs	r3, #1
}
 8004542:	4618      	mov	r0, r3
 8004544:	3720      	adds	r7, #32
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	bf00      	nop
 800454c:	20000350 	.word	0x20000350
 8004550:	20000150 	.word	0x20000150
 8004554:	2000015b 	.word	0x2000015b

08004558 <_ZN8SPIClassC1Ei>:
#include <GPIO/GPIO.h>
#include <SPI/SPIClass.h>

static volatile voidFuncPtr receiveEvent[2] = {NULL,NULL};

SPIClass::SPIClass(int SPI)
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
 8004560:	6039      	str	r1, [r7, #0]
 8004562:	4a38      	ldr	r2, [pc, #224]	; (8004644 <_ZN8SPIClassC1Ei+0xec>)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	601a      	str	r2, [r3, #0]
{
	switch (SPI)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2b01      	cmp	r3, #1
 800456c:	d002      	beq.n	8004574 <_ZN8SPIClassC1Ei+0x1c>
 800456e:	2b02      	cmp	r3, #2
 8004570:	d031      	beq.n	80045d6 <_ZN8SPIClassC1Ei+0x7e>
			SPI_Pin_MISO = getDigitalPin(SPI2_PIN_MISO);
			SPI_Pin_MOSI = getDigitalPin(SPI2_PIN_MOSI);
			break;

		default:
			break;
 8004572:	e061      	b.n	8004638 <_ZN8SPIClassC1Ei+0xe0>
			SPInum = SPI1;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	4a34      	ldr	r2, [pc, #208]	; (8004648 <_ZN8SPIClassC1Ei+0xf0>)
 8004578:	619a      	str	r2, [r3, #24]
			SPI_RCC_PER = RCC_APB2Periph_SPI1;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004580:	61da      	str	r2, [r3, #28]
			SPI_RCC_GPIO = SPI1_RCC_GPIO;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2204      	movs	r2, #4
 8004586:	621a      	str	r2, [r3, #32]
			SPI_RCC_AFIO = SPI1_RCC_AFIO;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	625a      	str	r2, [r3, #36]	; 0x24
			SPI_GPIO = SPI1_GPIO;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	4a2e      	ldr	r2, [pc, #184]	; (800464c <_ZN8SPIClassC1Ei+0xf4>)
 8004592:	629a      	str	r2, [r3, #40]	; 0x28
			SPI_Pin_NSS = getDigitalPin(SPI1_PIN_NSS);
 8004594:	2004      	movs	r0, #4
 8004596:	f7fd f8be 	bl	8001716 <getDigitalPin>
 800459a:	4603      	mov	r3, r0
 800459c:	461a      	mov	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			SPI_Pin_SCK = getDigitalPin(SPI1_PIN_SCK);
 80045a4:	2005      	movs	r0, #5
 80045a6:	f7fd f8b6 	bl	8001716 <getDigitalPin>
 80045aa:	4603      	mov	r3, r0
 80045ac:	461a      	mov	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			SPI_Pin_MISO = getDigitalPin(SPI1_PIN_MISO);
 80045b4:	2006      	movs	r0, #6
 80045b6:	f7fd f8ae 	bl	8001716 <getDigitalPin>
 80045ba:	4603      	mov	r3, r0
 80045bc:	461a      	mov	r2, r3
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			SPI_Pin_MOSI = getDigitalPin(SPI1_PIN_MOSI);
 80045c4:	2007      	movs	r0, #7
 80045c6:	f7fd f8a6 	bl	8001716 <getDigitalPin>
 80045ca:	4603      	mov	r3, r0
 80045cc:	461a      	mov	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
			break;
 80045d4:	e030      	b.n	8004638 <_ZN8SPIClassC1Ei+0xe0>
			SPInum = SPI2;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4a1d      	ldr	r2, [pc, #116]	; (8004650 <_ZN8SPIClassC1Ei+0xf8>)
 80045da:	619a      	str	r2, [r3, #24]
			SPI_RCC_PER = RCC_APB1Periph_SPI2;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80045e2:	61da      	str	r2, [r3, #28]
			SPI_RCC_GPIO = SPI2_RCC_GPIO;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2208      	movs	r2, #8
 80045e8:	621a      	str	r2, [r3, #32]
			SPI_RCC_AFIO = SPI2_RCC_AFIO;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	625a      	str	r2, [r3, #36]	; 0x24
			SPI_GPIO = SPI2_GPIO;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a18      	ldr	r2, [pc, #96]	; (8004654 <_ZN8SPIClassC1Ei+0xfc>)
 80045f4:	629a      	str	r2, [r3, #40]	; 0x28
			SPI_Pin_NSS = getDigitalPin(SPI2_PIN_NSS);
 80045f6:	201c      	movs	r0, #28
 80045f8:	f7fd f88d 	bl	8001716 <getDigitalPin>
 80045fc:	4603      	mov	r3, r0
 80045fe:	461a      	mov	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			SPI_Pin_SCK = getDigitalPin(SPI2_PIN_SCK);
 8004606:	201d      	movs	r0, #29
 8004608:	f7fd f885 	bl	8001716 <getDigitalPin>
 800460c:	4603      	mov	r3, r0
 800460e:	461a      	mov	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			SPI_Pin_MISO = getDigitalPin(SPI2_PIN_MISO);
 8004616:	201e      	movs	r0, #30
 8004618:	f7fd f87d 	bl	8001716 <getDigitalPin>
 800461c:	4603      	mov	r3, r0
 800461e:	461a      	mov	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			SPI_Pin_MOSI = getDigitalPin(SPI2_PIN_MOSI);
 8004626:	201f      	movs	r0, #31
 8004628:	f7fd f875 	bl	8001716 <getDigitalPin>
 800462c:	4603      	mov	r3, r0
 800462e:	461a      	mov	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
			break;
 8004636:	bf00      	nop
	}
}
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	08005b00 	.word	0x08005b00
 8004648:	40013000 	.word	0x40013000
 800464c:	40010800 	.word	0x40010800
 8004650:	40003800 	.word	0x40003800
 8004654:	40010c00 	.word	0x40010c00

08004658 <_ZN8SPIClassD1Ev>:

SPIClass::~SPIClass()
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	4a04      	ldr	r2, [pc, #16]	; (8004674 <_ZN8SPIClassD1Ev+0x1c>)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4618      	mov	r0, r3
 800466a:	370c      	adds	r7, #12
 800466c:	46bd      	mov	sp, r7
 800466e:	bc80      	pop	{r7}
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	08005b00 	.word	0x08005b00

08004678 <_ZN8SPIClassD0Ev>:
SPIClass::~SPIClass()
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
}
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f7ff ffe9 	bl	8004658 <_ZN8SPIClassD1Ev>
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	f000 ffd0 	bl	800562c <_ZdlPv>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <_ZN8SPIClass16beginTransactionEv>:
	this->SPI_InitStructure.SPI_CPOL = (SPI_DataMode >> 1) & 0x02;
	this->SPI_InitStructure.SPI_BaudRatePrescaler = clockDiv;
}

void SPIClass::beginTransaction()
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
	//SPI_Init(SPInum, &SPI_InitStructure);
}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bc80      	pop	{r7}
 80046a6:	4770      	bx	lr

080046a8 <_ZN8SPIClass14endTransactionEv>:

void SPIClass::endTransaction(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]

}
 80046b0:	bf00      	nop
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bc80      	pop	{r7}
 80046b8:	4770      	bx	lr
	...

080046bc <_ZN8SPIClass5beginEt>:
 * 	 A7---------MOSI--------11
 *
 * 	 mode: SPI_Mode_Master, SPI_Mode_Slave
 */
void SPIClass::begin(uint16_t mode)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b088      	sub	sp, #32
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	460b      	mov	r3, r1
 80046c6:	807b      	strh	r3, [r7, #2]
	SPI_InitTypeDef SPI_InitStructure;
	GPIO_InitTypeDef GPIO_InitStructure;

	// enable clock
	if (SPInum == SPI1)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	699b      	ldr	r3, [r3, #24]
 80046cc:	4a67      	ldr	r2, [pc, #412]	; (800486c <_ZN8SPIClass5beginEt+0x1b0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d106      	bne.n	80046e0 <_ZN8SPIClass5beginEt+0x24>
	{
		RCC_APB2PeriphClockCmd(SPI_RCC_PER, ENABLE);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	2101      	movs	r1, #1
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fc fd57 	bl	800118c <RCC_APB2PeriphClockCmd>
 80046de:	e00a      	b.n	80046f6 <_ZN8SPIClass5beginEt+0x3a>
	}
	else if (SPInum == SPI2)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	4a62      	ldr	r2, [pc, #392]	; (8004870 <_ZN8SPIClass5beginEt+0x1b4>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d105      	bne.n	80046f6 <_ZN8SPIClass5beginEt+0x3a>
	{
		RCC_APB1PeriphClockCmd(SPI_RCC_PER, ENABLE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	69db      	ldr	r3, [r3, #28]
 80046ee:	2101      	movs	r1, #1
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fc fd69 	bl	80011c8 <RCC_APB1PeriphClockCmd>
	}
	RCC_APB2PeriphClockCmd(SPI_RCC_GPIO | SPI_RCC_AFIO, ENABLE);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1a      	ldr	r2, [r3, #32]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	4313      	orrs	r3, r2
 8004700:	2101      	movs	r1, #1
 8004702:	4618      	mov	r0, r3
 8004704:	f7fc fd42 	bl	800118c <RCC_APB2PeriphClockCmd>

/* GPIO config */
// Master
	if (mode == SPI_Mode_Master)
 8004708:	887b      	ldrh	r3, [r7, #2]
 800470a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800470e:	d142      	bne.n	8004796 <_ZN8SPIClass5beginEt+0xda>
	{
		//GPIo pin MOSI SCK config
		GPIO_InitStructure.GPIO_Pin = (1<<SPI_Pin_MOSI) | (1<<SPI_Pin_SCK);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004716:	461a      	mov	r2, r3
 8004718:	2301      	movs	r3, #1
 800471a:	4093      	lsls	r3, r2
 800471c:	b21a      	sxth	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004724:	4619      	mov	r1, r3
 8004726:	2301      	movs	r3, #1
 8004728:	408b      	lsls	r3, r1
 800472a:	b21b      	sxth	r3, r3
 800472c:	4313      	orrs	r3, r2
 800472e:	b21b      	sxth	r3, r3
 8004730:	b29b      	uxth	r3, r3
 8004732:	813b      	strh	r3, [r7, #8]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8004734:	2318      	movs	r3, #24
 8004736:	72fb      	strb	r3, [r7, #11]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004738:	2303      	movs	r3, #3
 800473a:	72bb      	strb	r3, [r7, #10]
		GPIO_Init(SPI_GPIO, &GPIO_InitStructure);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004740:	f107 0208 	add.w	r2, r7, #8
 8004744:	4611      	mov	r1, r2
 8004746:	4618      	mov	r0, r3
 8004748:	f7fc fb44 	bl	8000dd4 <GPIO_Init>

		//GPIO pin SS config
		GPIO_InitStructure.GPIO_Pin = (1<<SPI_Pin_NSS);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004752:	461a      	mov	r2, r3
 8004754:	2301      	movs	r3, #1
 8004756:	4093      	lsls	r3, r2
 8004758:	b29b      	uxth	r3, r3
 800475a:	813b      	strh	r3, [r7, #8]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 800475c:	2310      	movs	r3, #16
 800475e:	72fb      	strb	r3, [r7, #11]
		GPIO_Init(SPI_GPIO, &GPIO_InitStructure);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004764:	f107 0208 	add.w	r2, r7, #8
 8004768:	4611      	mov	r1, r2
 800476a:	4618      	mov	r0, r3
 800476c:	f7fc fb32 	bl	8000dd4 <GPIO_Init>

		//GPIO pin MISO config
		GPIO_InitStructure.GPIO_Pin = (1<<SPI_Pin_MISO);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004776:	461a      	mov	r2, r3
 8004778:	2301      	movs	r3, #1
 800477a:	4093      	lsls	r3, r2
 800477c:	b29b      	uxth	r3, r3
 800477e:	813b      	strh	r3, [r7, #8]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8004780:	2304      	movs	r3, #4
 8004782:	72fb      	strb	r3, [r7, #11]
		GPIO_Init(SPI_GPIO, &GPIO_InitStructure);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004788:	f107 0208 	add.w	r2, r7, #8
 800478c:	4611      	mov	r1, r2
 800478e:	4618      	mov	r0, r3
 8004790:	f7fc fb20 	bl	8000dd4 <GPIO_Init>
 8004794:	e044      	b.n	8004820 <_ZN8SPIClass5beginEt+0x164>
	}
// Slaver
	else if(mode == SPI_Mode_Slave)
 8004796:	887b      	ldrh	r3, [r7, #2]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d141      	bne.n	8004820 <_ZN8SPIClass5beginEt+0x164>
	{
		//GPIo pin MOSI SCK config
		GPIO_InitStructure.GPIO_Pin = (1<<SPI_Pin_MOSI) | (1<<SPI_Pin_SCK);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80047a2:	461a      	mov	r2, r3
 80047a4:	2301      	movs	r3, #1
 80047a6:	4093      	lsls	r3, r2
 80047a8:	b21a      	sxth	r2, r3
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80047b0:	4619      	mov	r1, r3
 80047b2:	2301      	movs	r3, #1
 80047b4:	408b      	lsls	r3, r1
 80047b6:	b21b      	sxth	r3, r3
 80047b8:	4313      	orrs	r3, r2
 80047ba:	b21b      	sxth	r3, r3
 80047bc:	b29b      	uxth	r3, r3
 80047be:	813b      	strh	r3, [r7, #8]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 80047c0:	2304      	movs	r3, #4
 80047c2:	72fb      	strb	r3, [r7, #11]
		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80047c4:	2303      	movs	r3, #3
 80047c6:	72bb      	strb	r3, [r7, #10]
		GPIO_Init(SPI_GPIO, &GPIO_InitStructure);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047cc:	f107 0208 	add.w	r2, r7, #8
 80047d0:	4611      	mov	r1, r2
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fc fafe 	bl	8000dd4 <GPIO_Init>

		//GPIO pin SS config
		GPIO_InitStructure.GPIO_Pin = (1<<SPI_Pin_NSS);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80047de:	461a      	mov	r2, r3
 80047e0:	2301      	movs	r3, #1
 80047e2:	4093      	lsls	r3, r2
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	813b      	strh	r3, [r7, #8]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 80047e8:	2310      	movs	r3, #16
 80047ea:	72fb      	strb	r3, [r7, #11]
		GPIO_Init(SPI_GPIO, &GPIO_InitStructure);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f0:	f107 0208 	add.w	r2, r7, #8
 80047f4:	4611      	mov	r1, r2
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fc faec 	bl	8000dd4 <GPIO_Init>

		//GPIO pin MISO config
		GPIO_InitStructure.GPIO_Pin = (1<<SPI_Pin_MISO);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8004802:	461a      	mov	r2, r3
 8004804:	2301      	movs	r3, #1
 8004806:	4093      	lsls	r3, r2
 8004808:	b29b      	uxth	r3, r3
 800480a:	813b      	strh	r3, [r7, #8]
		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 800480c:	2318      	movs	r3, #24
 800480e:	72fb      	strb	r3, [r7, #11]
		GPIO_Init(SPI_GPIO, &GPIO_InitStructure);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004814:	f107 0208 	add.w	r2, r7, #8
 8004818:	4611      	mov	r1, r2
 800481a:	4618      	mov	r0, r3
 800481c:	f7fc fada 	bl	8000dd4 <GPIO_Init>
	}
/* end gpio config */
	//SPI config
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 8004820:	2300      	movs	r3, #0
 8004822:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_Mode = mode;
 8004824:	887b      	ldrh	r3, [r7, #2]
 8004826:	81fb      	strh	r3, [r7, #14]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 8004828:	2300      	movs	r3, #0
 800482a:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 800482c:	2300      	movs	r3, #0
 800482e:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 8004830:	2300      	movs	r3, #0
 8004832:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 8004834:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004838:	82fb      	strh	r3, [r7, #22]
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;
 800483a:	2338      	movs	r3, #56	; 0x38
 800483c:	833b      	strh	r3, [r7, #24]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 800483e:	2300      	movs	r3, #0
 8004840:	837b      	strh	r3, [r7, #26]
	SPI_InitStructure.SPI_CRCPolynomial = 7;
 8004842:	2307      	movs	r3, #7
 8004844:	83bb      	strh	r3, [r7, #28]
	SPI_Init(SPInum, &SPI_InitStructure);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	699b      	ldr	r3, [r3, #24]
 800484a:	f107 020c 	add.w	r2, r7, #12
 800484e:	4611      	mov	r1, r2
 8004850:	4618      	mov	r0, r3
 8004852:	f7fc fcd7 	bl	8001204 <SPI_Init>

	// enable SPI1
	SPI_Cmd(SPInum, ENABLE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	699b      	ldr	r3, [r3, #24]
 800485a:	2101      	movs	r1, #1
 800485c:	4618      	mov	r0, r3
 800485e:	f7fc fd14 	bl	800128a <SPI_Cmd>
}
 8004862:	bf00      	nop
 8004864:	3720      	adds	r7, #32
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	40013000 	.word	0x40013000
 8004870:	40003800 	.word	0x40003800

08004874 <_ZN8SPIClass8transferEh>:
 * SPi transfer function
 * use to tranfer 1 byte and receive 1 byte from slave
 * parameter: data - 1byte data to send
 */
uint8_t SPIClass::transfer(uint8_t data)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	460b      	mov	r3, r1
 800487e:	70fb      	strb	r3, [r7, #3]
	// wait for Transfer line is free
	while (SPI_I2S_GetFlagStatus(SPInum, SPI_I2S_FLAG_TXE) == RESET);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	699b      	ldr	r3, [r3, #24]
 8004884:	2102      	movs	r1, #2
 8004886:	4618      	mov	r0, r3
 8004888:	f7fc fd2a 	bl	80012e0 <SPI_I2S_GetFlagStatus>
 800488c:	4603      	mov	r3, r0
 800488e:	2b00      	cmp	r3, #0
 8004890:	bf0c      	ite	eq
 8004892:	2301      	moveq	r3, #1
 8004894:	2300      	movne	r3, #0
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d000      	beq.n	800489e <_ZN8SPIClass8transferEh+0x2a>
 800489c:	e7f0      	b.n	8004880 <_ZN8SPIClass8transferEh+0xc>

	/* Check the parameters */
	assert_param(IS_SPI_ALL_PERIPH(SPInum));

	/* Write in the DR register the data to be sent */
	SPInum->DR = data;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	78fa      	ldrb	r2, [r7, #3]
 80048a4:	b292      	uxth	r2, r2
 80048a6:	819a      	strh	r2, [r3, #12]

	// wait for receive line is free
	while (SPI_I2S_GetFlagStatus(SPInum, SPI_I2S_FLAG_RXNE) == RESET);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	699b      	ldr	r3, [r3, #24]
 80048ac:	2101      	movs	r1, #1
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fc fd16 	bl	80012e0 <SPI_I2S_GetFlagStatus>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	bf0c      	ite	eq
 80048ba:	2301      	moveq	r3, #1
 80048bc:	2300      	movne	r3, #0
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d000      	beq.n	80048c6 <_ZN8SPIClass8transferEh+0x52>
 80048c4:	e7f0      	b.n	80048a8 <_ZN8SPIClass8transferEh+0x34>

	/* Check the parameters */
	assert_param(IS_SPI_ALL_PERIPH(SPInum));

	/* Return the data in the DR register */
	return SPInum->DR;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	699b      	ldr	r3, [r3, #24]
 80048ca:	899b      	ldrh	r3, [r3, #12]
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	b2db      	uxtb	r3, r3
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3708      	adds	r7, #8
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}

080048d8 <SPI1_IRQHandler>:
{
	SPI_I2S_ITConfig(SPInum, SPI_I2S_IT_RXNE, DISABLE);
}

void SPI1_IRQHandler(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
	if (SPI_I2S_GetITStatus(SPI1, SPI_I2S_IT_RXNE) != RESET)
 80048dc:	2160      	movs	r1, #96	; 0x60
 80048de:	480e      	ldr	r0, [pc, #56]	; (8004918 <SPI1_IRQHandler+0x40>)
 80048e0:	f7fc fd19 	bl	8001316 <SPI_I2S_GetITStatus>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	bf14      	ite	ne
 80048ea:	2301      	movne	r3, #1
 80048ec:	2300      	moveq	r3, #0
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d00e      	beq.n	8004912 <SPI1_IRQHandler+0x3a>
	{
		SPI_I2S_ReceiveData(SPI1);
 80048f4:	4808      	ldr	r0, [pc, #32]	; (8004918 <SPI1_IRQHandler+0x40>)
 80048f6:	f7fc fce7 	bl	80012c8 <SPI_I2S_ReceiveData>
		if(receiveEvent[0] != NULL) receiveEvent[0]();
 80048fa:	4b08      	ldr	r3, [pc, #32]	; (800491c <SPI1_IRQHandler+0x44>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	bf14      	ite	ne
 8004902:	2301      	movne	r3, #1
 8004904:	2300      	moveq	r3, #0
 8004906:	b2db      	uxtb	r3, r3
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <SPI1_IRQHandler+0x3a>
 800490c:	4b03      	ldr	r3, [pc, #12]	; (800491c <SPI1_IRQHandler+0x44>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4798      	blx	r3
	}
}
 8004912:	bf00      	nop
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	40013000 	.word	0x40013000
 800491c:	2000035c 	.word	0x2000035c

08004920 <SPI2_IRQHandler>:

void SPI2_IRQHandler(void)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	af00      	add	r7, sp, #0
	if (SPI_I2S_GetITStatus(SPI2, SPI_I2S_IT_RXNE) != RESET)
 8004924:	2160      	movs	r1, #96	; 0x60
 8004926:	480e      	ldr	r0, [pc, #56]	; (8004960 <SPI2_IRQHandler+0x40>)
 8004928:	f7fc fcf5 	bl	8001316 <SPI_I2S_GetITStatus>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	bf14      	ite	ne
 8004932:	2301      	movne	r3, #1
 8004934:	2300      	moveq	r3, #0
 8004936:	b2db      	uxtb	r3, r3
 8004938:	2b00      	cmp	r3, #0
 800493a:	d00e      	beq.n	800495a <SPI2_IRQHandler+0x3a>
	{
		SPI_I2S_ReceiveData(SPI2);
 800493c:	4808      	ldr	r0, [pc, #32]	; (8004960 <SPI2_IRQHandler+0x40>)
 800493e:	f7fc fcc3 	bl	80012c8 <SPI_I2S_ReceiveData>
		if(receiveEvent[1] != NULL) receiveEvent[1]();
 8004942:	4b08      	ldr	r3, [pc, #32]	; (8004964 <SPI2_IRQHandler+0x44>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	bf14      	ite	ne
 800494a:	2301      	movne	r3, #1
 800494c:	2300      	moveq	r3, #0
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	d002      	beq.n	800495a <SPI2_IRQHandler+0x3a>
 8004954:	4b03      	ldr	r3, [pc, #12]	; (8004964 <SPI2_IRQHandler+0x44>)
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	4798      	blx	r3
	}
}
 800495a:	bf00      	nop
 800495c:	bd80      	pop	{r7, pc}
 800495e:	bf00      	nop
 8004960:	40003800 	.word	0x40003800
 8004964:	2000035c 	.word	0x2000035c

08004968 <_Z41__static_initialization_and_destruction_0ii>:

SPIClass SPI = SPIClass();
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d10d      	bne.n	8004994 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800497e:	4293      	cmp	r3, r2
 8004980:	d108      	bne.n	8004994 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8004982:	2101      	movs	r1, #1
 8004984:	4805      	ldr	r0, [pc, #20]	; (800499c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8004986:	f7ff fde7 	bl	8004558 <_ZN8SPIClassC1Ei>
 800498a:	4a05      	ldr	r2, [pc, #20]	; (80049a0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 800498c:	4905      	ldr	r1, [pc, #20]	; (80049a4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 800498e:	4803      	ldr	r0, [pc, #12]	; (800499c <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8004990:	f000 fe4e 	bl	8005630 <__aeabi_atexit>
 8004994:	bf00      	nop
 8004996:	3708      	adds	r7, #8
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}
 800499c:	20000364 	.word	0x20000364
 80049a0:	20000000 	.word	0x20000000
 80049a4:	08004659 	.word	0x08004659

080049a8 <_GLOBAL__sub_I__ZN8SPIClassC2Ei>:
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
 80049ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80049b0:	2001      	movs	r0, #1
 80049b2:	f7ff ffd9 	bl	8004968 <_Z41__static_initialization_and_destruction_0ii>
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <_ZN14HardwareSerialC1Ei>:
#include <stm32f1xx_it.h>
#include <Serial/Serial.h>

//USART_TypeDef *HardwareSerial::USARTnum;

HardwareSerial::HardwareSerial(int USART)
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fd f85d 	bl	8001a84 <_ZN5PrintC1Ev>
 80049ca:	4a36      	ldr	r2, [pc, #216]	; (8004aa4 <_ZN14HardwareSerialC1Ei+0xec>)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	601a      	str	r2, [r3, #0]
{
	switch (USART)
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d023      	beq.n	8004a1e <_ZN14HardwareSerialC1Ei+0x66>
 80049d6:	2b03      	cmp	r3, #3
 80049d8:	d040      	beq.n	8004a5c <_ZN14HardwareSerialC1Ei+0xa4>
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d000      	beq.n	80049e0 <_ZN14HardwareSerialC1Ei+0x28>
			USART_Pin_Tx = getDigitalPin(USART3_PIN_TX);
			USART_Pin_Rx = getDigitalPin(USART3_PIN_RX);
			break;

		default:
			break;
 80049de:	e05c      	b.n	8004a9a <_ZN14HardwareSerialC1Ei+0xe2>
			USARTnum = USART1;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a31      	ldr	r2, [pc, #196]	; (8004aa8 <_ZN14HardwareSerialC1Ei+0xf0>)
 80049e4:	609a      	str	r2, [r3, #8]
			USART_RCC_PER = RCC_APB2Periph_USART1;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80049ec:	60da      	str	r2, [r3, #12]
			USART_RCC_GPIO = USART1_RCC_GPIO;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2204      	movs	r2, #4
 80049f2:	611a      	str	r2, [r3, #16]
			USART_RCC_AFIO = USART1_RCC_AFIO;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	615a      	str	r2, [r3, #20]
			USART_GPIO = USART1_GPIO;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a2b      	ldr	r2, [pc, #172]	; (8004aac <_ZN14HardwareSerialC1Ei+0xf4>)
 80049fe:	619a      	str	r2, [r3, #24]
			USART_Pin_Tx = getDigitalPin(USART1_PIN_TX);
 8004a00:	2009      	movs	r0, #9
 8004a02:	f7fc fe88 	bl	8001716 <getDigitalPin>
 8004a06:	4603      	mov	r3, r0
 8004a08:	461a      	mov	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	771a      	strb	r2, [r3, #28]
			USART_Pin_Rx = getDigitalPin(USART1_PIN_RX);
 8004a0e:	200a      	movs	r0, #10
 8004a10:	f7fc fe81 	bl	8001716 <getDigitalPin>
 8004a14:	4603      	mov	r3, r0
 8004a16:	461a      	mov	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	775a      	strb	r2, [r3, #29]
			break;
 8004a1c:	e03d      	b.n	8004a9a <_ZN14HardwareSerialC1Ei+0xe2>
			USARTnum = USART2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a23      	ldr	r2, [pc, #140]	; (8004ab0 <_ZN14HardwareSerialC1Ei+0xf8>)
 8004a22:	609a      	str	r2, [r3, #8]
			USART_RCC_PER = RCC_APB1Periph_USART2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a2a:	60da      	str	r2, [r3, #12]
			USART_RCC_GPIO = USART2_RCC_GPIO;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2204      	movs	r2, #4
 8004a30:	611a      	str	r2, [r3, #16]
			USART_RCC_AFIO = USART2_RCC_AFIO;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	615a      	str	r2, [r3, #20]
			USART_GPIO = USART2_GPIO;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	4a1c      	ldr	r2, [pc, #112]	; (8004aac <_ZN14HardwareSerialC1Ei+0xf4>)
 8004a3c:	619a      	str	r2, [r3, #24]
			USART_Pin_Tx = getDigitalPin(USART2_PIN_TX);
 8004a3e:	2002      	movs	r0, #2
 8004a40:	f7fc fe69 	bl	8001716 <getDigitalPin>
 8004a44:	4603      	mov	r3, r0
 8004a46:	461a      	mov	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	771a      	strb	r2, [r3, #28]
			USART_Pin_Rx = getDigitalPin(USART2_PIN_RX);
 8004a4c:	2003      	movs	r0, #3
 8004a4e:	f7fc fe62 	bl	8001716 <getDigitalPin>
 8004a52:	4603      	mov	r3, r0
 8004a54:	461a      	mov	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	775a      	strb	r2, [r3, #29]
			break;
 8004a5a:	e01e      	b.n	8004a9a <_ZN14HardwareSerialC1Ei+0xe2>
			USARTnum = USART3;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a15      	ldr	r2, [pc, #84]	; (8004ab4 <_ZN14HardwareSerialC1Ei+0xfc>)
 8004a60:	609a      	str	r2, [r3, #8]
			USART_RCC_PER = RCC_APB1Periph_USART3;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8004a68:	60da      	str	r2, [r3, #12]
			USART_RCC_GPIO = USART3_RCC_GPIO;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2208      	movs	r2, #8
 8004a6e:	611a      	str	r2, [r3, #16]
			USART_RCC_AFIO = USART3_RCC_AFIO;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	615a      	str	r2, [r3, #20]
			USART_GPIO = USART3_GPIO;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	4a0f      	ldr	r2, [pc, #60]	; (8004ab8 <_ZN14HardwareSerialC1Ei+0x100>)
 8004a7a:	619a      	str	r2, [r3, #24]
			USART_Pin_Tx = getDigitalPin(USART3_PIN_TX);
 8004a7c:	201a      	movs	r0, #26
 8004a7e:	f7fc fe4a 	bl	8001716 <getDigitalPin>
 8004a82:	4603      	mov	r3, r0
 8004a84:	461a      	mov	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	771a      	strb	r2, [r3, #28]
			USART_Pin_Rx = getDigitalPin(USART3_PIN_RX);
 8004a8a:	201b      	movs	r0, #27
 8004a8c:	f7fc fe43 	bl	8001716 <getDigitalPin>
 8004a90:	4603      	mov	r3, r0
 8004a92:	461a      	mov	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	775a      	strb	r2, [r3, #29]
			break;
 8004a98:	bf00      	nop
	}
}
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	08005b10 	.word	0x08005b10
 8004aa8:	40013800 	.word	0x40013800
 8004aac:	40010800 	.word	0x40010800
 8004ab0:	40004400 	.word	0x40004400
 8004ab4:	40004800 	.word	0x40004800
 8004ab8:	40010c00 	.word	0x40010c00

08004abc <_ZN14HardwareSerialD1Ev>:

HardwareSerial::~HardwareSerial()
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	4a04      	ldr	r2, [pc, #16]	; (8004ad8 <_ZN14HardwareSerialD1Ev+0x1c>)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	4618      	mov	r0, r3
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bc80      	pop	{r7}
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	08005b10 	.word	0x08005b10

08004adc <_ZN14HardwareSerialD0Ev>:
HardwareSerial::~HardwareSerial()
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b082      	sub	sp, #8
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
}
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f7ff ffe9 	bl	8004abc <_ZN14HardwareSerialD1Ev>
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 fd9e 	bl	800562c <_ZdlPv>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <_ZN14HardwareSerial5beginEm>:
 * only for usart1
 * Rx - A10
 * Tx - A9
 */
void HardwareSerial::begin(uint32_t baud)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b088      	sub	sp, #32
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	6039      	str	r1, [r7, #0]

	// check USART is available
	assert_param(IS_USART_123_PERIPH(USARTnum));

	// set clock for GPIOA
	RCC_APB2PeriphClockCmd(USART_RCC_GPIO | USART_RCC_AFIO, ENABLE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691a      	ldr	r2, [r3, #16]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	695b      	ldr	r3, [r3, #20]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	2101      	movs	r1, #1
 8004b12:	4618      	mov	r0, r3
 8004b14:	f7fc fb3a 	bl	800118c <RCC_APB2PeriphClockCmd>
	// set clock for USART1
	if (USARTnum == USART1)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	689b      	ldr	r3, [r3, #8]
 8004b1c:	4a54      	ldr	r2, [pc, #336]	; (8004c70 <_ZN14HardwareSerial5beginEm+0x174>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d106      	bne.n	8004b30 <_ZN14HardwareSerial5beginEm+0x34>
	{
		RCC_APB2PeriphClockCmd(USART_RCC_PER, ENABLE);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	2101      	movs	r1, #1
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fc fb2f 	bl	800118c <RCC_APB2PeriphClockCmd>
 8004b2e:	e016      	b.n	8004b5e <_ZN14HardwareSerial5beginEm+0x62>
	}
	else if(USARTnum == USART2)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	4a4f      	ldr	r2, [pc, #316]	; (8004c74 <_ZN14HardwareSerial5beginEm+0x178>)
 8004b36:	4293      	cmp	r3, r2
 8004b38:	d106      	bne.n	8004b48 <_ZN14HardwareSerial5beginEm+0x4c>
	{
		RCC_APB1PeriphClockCmd(USART_RCC_PER, ENABLE);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	2101      	movs	r1, #1
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fc fb41 	bl	80011c8 <RCC_APB1PeriphClockCmd>
 8004b46:	e00a      	b.n	8004b5e <_ZN14HardwareSerial5beginEm+0x62>
	}
	else if(USARTnum == USART3)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	689b      	ldr	r3, [r3, #8]
 8004b4c:	4a4a      	ldr	r2, [pc, #296]	; (8004c78 <_ZN14HardwareSerial5beginEm+0x17c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d105      	bne.n	8004b5e <_ZN14HardwareSerial5beginEm+0x62>
	{
		RCC_APB1PeriphClockCmd(USART_RCC_PER, ENABLE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	2101      	movs	r1, #1
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f7fc fb35 	bl	80011c8 <RCC_APB1PeriphClockCmd>
	}

	// config A9 - Tx pin
	Gpio_InitStructure.GPIO_Pin = (1<<USART_Pin_Tx);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	7f1b      	ldrb	r3, [r3, #28]
 8004b62:	461a      	mov	r2, r3
 8004b64:	2301      	movs	r3, #1
 8004b66:	4093      	lsls	r3, r2
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	81bb      	strh	r3, [r7, #12]
	Gpio_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8004b6c:	2318      	movs	r3, #24
 8004b6e:	73fb      	strb	r3, [r7, #15]
	Gpio_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8004b70:	2303      	movs	r3, #3
 8004b72:	73bb      	strb	r3, [r7, #14]
	GPIO_Init(USART_GPIO, &Gpio_InitStructure);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	699b      	ldr	r3, [r3, #24]
 8004b78:	f107 020c 	add.w	r2, r7, #12
 8004b7c:	4611      	mov	r1, r2
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fc f928 	bl	8000dd4 <GPIO_Init>

	// config A10 Rx pin
	Gpio_InitStructure.GPIO_Pin = (1<<USART_Pin_Rx);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	7f5b      	ldrb	r3, [r3, #29]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	4093      	lsls	r3, r2
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	81bb      	strh	r3, [r7, #12]
	Gpio_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8004b92:	2304      	movs	r3, #4
 8004b94:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(USART_GPIO, &Gpio_InitStructure);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	699b      	ldr	r3, [r3, #24]
 8004b9a:	f107 020c 	add.w	r2, r7, #12
 8004b9e:	4611      	mov	r1, r2
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fc f917 	bl	8000dd4 <GPIO_Init>

	// set USART1 parameter
	Usart_InitStructure.USART_BaudRate = baud;
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	613b      	str	r3, [r7, #16]
	Usart_InitStructure.USART_HardwareFlowControl =	USART_HardwareFlowControl_None;
 8004baa:	2300      	movs	r3, #0
 8004bac:	83bb      	strh	r3, [r7, #28]
	Usart_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8004bae:	230c      	movs	r3, #12
 8004bb0:	837b      	strh	r3, [r7, #26]
	Usart_InitStructure.USART_Parity = USART_Parity_No;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	833b      	strh	r3, [r7, #24]
	Usart_InitStructure.USART_StopBits = USART_StopBits_1;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	82fb      	strh	r3, [r7, #22]
	Usart_InitStructure.USART_WordLength = USART_WordLength_8b;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	82bb      	strh	r3, [r7, #20]

	//Init USART1
	USART_Init(USARTnum, &Usart_InitStructure);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f107 0210 	add.w	r2, r7, #16
 8004bc6:	4611      	mov	r1, r2
 8004bc8:	4618      	mov	r0, r3
 8004bca:	f7fc fbdf 	bl	800138c <USART_Init>

	/* Enable the USARTx Interrupt */
	if (USARTnum == USART1)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	4a27      	ldr	r2, [pc, #156]	; (8004c70 <_ZN14HardwareSerial5beginEm+0x174>)
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d10d      	bne.n	8004bf4 <_ZN14HardwareSerial5beginEm+0xf8>
	{
		NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8004bd8:	2325      	movs	r3, #37	; 0x25
 8004bda:	723b      	strb	r3, [r7, #8]
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	727b      	strb	r3, [r7, #9]
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8004be0:	2300      	movs	r3, #0
 8004be2:	72bb      	strb	r3, [r7, #10]
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004be4:	2301      	movs	r3, #1
 8004be6:	72fb      	strb	r3, [r7, #11]
		NVIC_Init(&NVIC_InitStructure);
 8004be8:	f107 0308 	add.w	r3, r7, #8
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fc f85d 	bl	8000cac <NVIC_Init>
 8004bf2:	e024      	b.n	8004c3e <_ZN14HardwareSerial5beginEm+0x142>
	}
	else if (USARTnum == USART2)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	4a1e      	ldr	r2, [pc, #120]	; (8004c74 <_ZN14HardwareSerial5beginEm+0x178>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d10d      	bne.n	8004c1a <_ZN14HardwareSerial5beginEm+0x11e>
	{
		NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8004bfe:	2326      	movs	r3, #38	; 0x26
 8004c00:	723b      	strb	r3, [r7, #8]
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8004c02:	2300      	movs	r3, #0
 8004c04:	727b      	strb	r3, [r7, #9]
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8004c06:	2300      	movs	r3, #0
 8004c08:	72bb      	strb	r3, [r7, #10]
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	72fb      	strb	r3, [r7, #11]
		NVIC_Init(&NVIC_InitStructure);
 8004c0e:	f107 0308 	add.w	r3, r7, #8
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fc f84a 	bl	8000cac <NVIC_Init>
 8004c18:	e011      	b.n	8004c3e <_ZN14HardwareSerial5beginEm+0x142>
	}

	else if (USARTnum == USART3)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	4a16      	ldr	r2, [pc, #88]	; (8004c78 <_ZN14HardwareSerial5beginEm+0x17c>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d10c      	bne.n	8004c3e <_ZN14HardwareSerial5beginEm+0x142>
	{
		NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 8004c24:	2327      	movs	r3, #39	; 0x27
 8004c26:	723b      	strb	r3, [r7, #8]
		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	727b      	strb	r3, [r7, #9]
		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	72bb      	strb	r3, [r7, #10]
		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8004c30:	2301      	movs	r3, #1
 8004c32:	72fb      	strb	r3, [r7, #11]
		NVIC_Init(&NVIC_InitStructure);
 8004c34:	f107 0308 	add.w	r3, r7, #8
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f7fc f837 	bl	8000cac <NVIC_Init>
	}

	//clear flag for the first time
	USART_ClearFlag(USARTnum, USART_FLAG_RXNE);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	2120      	movs	r1, #32
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fc fceb 	bl	8001620 <USART_ClearFlag>

	// enable receive interrupt
	USART_ITConfig(USARTnum, USART_IT_RXNE, ENABLE);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f240 5125 	movw	r1, #1317	; 0x525
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fc fc72 	bl	800153e <USART_ITConfig>

	// enable USART 1
	USART_Cmd(USARTnum, ENABLE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2101      	movs	r1, #1
 8004c60:	4618      	mov	r0, r3
 8004c62:	f7fc fc4d 	bl	8001500 <USART_Cmd>
}
 8004c66:	bf00      	nop
 8004c68:	3720      	adds	r7, #32
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40013800 	.word	0x40013800
 8004c74:	40004400 	.word	0x40004400
 8004c78:	40004800 	.word	0x40004800

08004c7c <_ZN14HardwareSerial5writeEh>:
		RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART3, DISABLE);
	}
}

size_t HardwareSerial::write(uint8_t val)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
 8004c84:	460b      	mov	r3, r1
 8004c86:	70fb      	strb	r3, [r7, #3]
	while(USART_GetFlagStatus(USARTnum,USART_FLAG_TXE) == 0);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	689b      	ldr	r3, [r3, #8]
 8004c8c:	2180      	movs	r1, #128	; 0x80
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fc fcab 	bl	80015ea <USART_GetFlagStatus>
 8004c94:	4603      	mov	r3, r0
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	bf0c      	ite	eq
 8004c9a:	2301      	moveq	r3, #1
 8004c9c:	2300      	movne	r3, #0
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d000      	beq.n	8004ca6 <_ZN14HardwareSerial5writeEh+0x2a>
 8004ca4:	e7f0      	b.n	8004c88 <_ZN14HardwareSerial5writeEh+0xc>
	/* Check the parameters */
	assert_param(IS_USART_ALL_PERIPH(USARTnum));
	assert_param(IS_USART_DATA(val));

	/* Transmit Data */
	USARTnum->DR = (val & (uint16_t) 0x01FF);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	78fa      	ldrb	r2, [r7, #3]
 8004cac:	b292      	uxth	r2, r2
 8004cae:	809a      	strh	r2, [r3, #4]
	return 1;
 8004cb0:	2301      	movs	r3, #1
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <USART1_IRQHandler>:
	// return value
	return USARTnum->DR & 0xff;
}

void USART1_IRQHandler()
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	af00      	add	r7, sp, #0
	if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 8004cc0:	f240 5125 	movw	r1, #1317	; 0x525
 8004cc4:	480d      	ldr	r0, [pc, #52]	; (8004cfc <USART1_IRQHandler+0x40>)
 8004cc6:	f7fc fcbb 	bl	8001640 <USART_GetITStatus>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	bf14      	ite	ne
 8004cd0:	2301      	movne	r3, #1
 8004cd2:	2300      	moveq	r3, #0
 8004cd4:	b2db      	uxtb	r3, r3
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00e      	beq.n	8004cf8 <USART1_IRQHandler+0x3c>
	{
		if (USART_ReceiveData(USART1) == 13)// ki tu ket thuc
 8004cda:	4808      	ldr	r0, [pc, #32]	; (8004cfc <USART1_IRQHandler+0x40>)
 8004cdc:	f7fc fc76 	bl	80015cc <USART_ReceiveData>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b0d      	cmp	r3, #13
 8004ce4:	bf0c      	ite	eq
 8004ce6:	2301      	moveq	r3, #1
 8004ce8:	2300      	movne	r3, #0
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d102      	bne.n	8004cf6 <USART1_IRQHandler+0x3a>
		{
			return;
		}
		SerialEvent();
 8004cf0:	f3af 8000 	nop.w
 8004cf4:	e000      	b.n	8004cf8 <USART1_IRQHandler+0x3c>
			return;
 8004cf6:	bf00      	nop
	}
}
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	bf00      	nop
 8004cfc:	40013800 	.word	0x40013800

08004d00 <USART2_IRQHandler>:

void USART2_IRQHandler()
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	af00      	add	r7, sp, #0
	if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8004d04:	f240 5125 	movw	r1, #1317	; 0x525
 8004d08:	480d      	ldr	r0, [pc, #52]	; (8004d40 <USART2_IRQHandler+0x40>)
 8004d0a:	f7fc fc99 	bl	8001640 <USART_GetITStatus>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	bf14      	ite	ne
 8004d14:	2301      	movne	r3, #1
 8004d16:	2300      	moveq	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00e      	beq.n	8004d3c <USART2_IRQHandler+0x3c>
	{
		if (USART_ReceiveData(USART2) == 13)// ki tu ket thuc
 8004d1e:	4808      	ldr	r0, [pc, #32]	; (8004d40 <USART2_IRQHandler+0x40>)
 8004d20:	f7fc fc54 	bl	80015cc <USART_ReceiveData>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b0d      	cmp	r3, #13
 8004d28:	bf0c      	ite	eq
 8004d2a:	2301      	moveq	r3, #1
 8004d2c:	2300      	movne	r3, #0
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d102      	bne.n	8004d3a <USART2_IRQHandler+0x3a>
		{
			return;
		}
		Serial2Event();
 8004d34:	f3af 8000 	nop.w
 8004d38:	e000      	b.n	8004d3c <USART2_IRQHandler+0x3c>
			return;
 8004d3a:	bf00      	nop
	}
}
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40004400 	.word	0x40004400

08004d44 <USART3_IRQHandler>:

void USART3_IRQHandler()
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	af00      	add	r7, sp, #0
	if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)
 8004d48:	f240 5125 	movw	r1, #1317	; 0x525
 8004d4c:	480d      	ldr	r0, [pc, #52]	; (8004d84 <USART3_IRQHandler+0x40>)
 8004d4e:	f7fc fc77 	bl	8001640 <USART_GetITStatus>
 8004d52:	4603      	mov	r3, r0
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	bf14      	ite	ne
 8004d58:	2301      	movne	r3, #1
 8004d5a:	2300      	moveq	r3, #0
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00e      	beq.n	8004d80 <USART3_IRQHandler+0x3c>
	{
		if (USART_ReceiveData(USART3) == 13)// ki tu ket thuc
 8004d62:	4808      	ldr	r0, [pc, #32]	; (8004d84 <USART3_IRQHandler+0x40>)
 8004d64:	f7fc fc32 	bl	80015cc <USART_ReceiveData>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b0d      	cmp	r3, #13
 8004d6c:	bf0c      	ite	eq
 8004d6e:	2301      	moveq	r3, #1
 8004d70:	2300      	movne	r3, #0
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d102      	bne.n	8004d7e <USART3_IRQHandler+0x3a>
		{
			return;
		}
		Serial3Event();
 8004d78:	f3af 8000 	nop.w
 8004d7c:	e000      	b.n	8004d80 <USART3_IRQHandler+0x3c>
			return;
 8004d7e:	bf00      	nop
	}
}
 8004d80:	bd80      	pop	{r7, pc}
 8004d82:	bf00      	nop
 8004d84:	40004800 	.word	0x40004800

08004d88 <_Z41__static_initialization_and_destruction_0ii>:

HardwareSerial Serial = HardwareSerial();
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b082      	sub	sp, #8
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
 8004d90:	6039      	str	r1, [r7, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d10d      	bne.n	8004db4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d108      	bne.n	8004db4 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8004da2:	2101      	movs	r1, #1
 8004da4:	4805      	ldr	r0, [pc, #20]	; (8004dbc <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8004da6:	f7ff fe07 	bl	80049b8 <_ZN14HardwareSerialC1Ei>
 8004daa:	4a05      	ldr	r2, [pc, #20]	; (8004dc0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8004dac:	4905      	ldr	r1, [pc, #20]	; (8004dc4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8004dae:	4803      	ldr	r0, [pc, #12]	; (8004dbc <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8004db0:	f000 fc3e 	bl	8005630 <__aeabi_atexit>
 8004db4:	bf00      	nop
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	20000394 	.word	0x20000394
 8004dc0:	20000000 	.word	0x20000000
 8004dc4:	08004abd 	.word	0x08004abd

08004dc8 <_GLOBAL__sub_I__ZN14HardwareSerialC2Ei>:
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004dd0:	2001      	movs	r0, #1
 8004dd2:	f7ff ffd9 	bl	8004d88 <_Z41__static_initialization_and_destruction_0ii>
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);



TwoWire::TwoWire()
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
 8004de0:	4a04      	ldr	r2, [pc, #16]	; (8004df4 <_ZN7TwoWireC1Ev+0x1c>)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4618      	mov	r0, r3
 8004dea:	370c      	adds	r7, #12
 8004dec:	46bd      	mov	sp, r7
 8004dee:	bc80      	pop	{r7}
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	08005b30 	.word	0x08005b30

08004df8 <_ZN7TwoWireD1Ev>:

TwoWire::~TwoWire()
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	4a04      	ldr	r2, [pc, #16]	; (8004e14 <_ZN7TwoWireD1Ev+0x1c>)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4618      	mov	r0, r3
 8004e0a:	370c      	adds	r7, #12
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bc80      	pop	{r7}
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	08005b30 	.word	0x08005b30

08004e18 <_ZN7TwoWireD0Ev>:
TwoWire::~TwoWire()
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
}
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7ff ffe9 	bl	8004df8 <_ZN7TwoWireD1Ev>
 8004e26:	6878      	ldr	r0, [r7, #4]
 8004e28:	f000 fc00 	bl	800562c <_ZdlPv>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3708      	adds	r7, #8
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
	...

08004e38 <I2C1_EV_IRQHandler>:
    I2C_ITConfig(I2C1, I2C_IT_EVT, ENABLE); //Part of the STM32 I2C driver
    I2C_ITConfig(I2C1, I2C_IT_BUF, ENABLE); //Part of the STM32 I2C driver
}

void I2C1_EV_IRQHandler(void)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	af00      	add	r7, sp, #0
	//uint32_t event = I2C_GetLastEvent(I2C1);
	//Serial.println(event,HEX);
	switch ( I2C_GetLastEvent(I2C1))
 8004e3c:	4834      	ldr	r0, [pc, #208]	; (8004f10 <I2C1_EV_IRQHandler+0xd8>)
 8004e3e:	f7fc f892 	bl	8000f66 <I2C_GetLastEvent>
 8004e42:	4603      	mov	r3, r0
 8004e44:	4a33      	ldr	r2, [pc, #204]	; (8004f14 <I2C1_EV_IRQHandler+0xdc>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d018      	beq.n	8004e7c <I2C1_EV_IRQHandler+0x44>
 8004e4a:	4a32      	ldr	r2, [pc, #200]	; (8004f14 <I2C1_EV_IRQHandler+0xdc>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d807      	bhi.n	8004e60 <I2C1_EV_IRQHandler+0x28>
 8004e50:	2b40      	cmp	r3, #64	; 0x40
 8004e52:	d024      	beq.n	8004e9e <I2C1_EV_IRQHandler+0x66>
 8004e54:	f1b3 1f02 	cmp.w	r3, #131074	; 0x20002
 8004e58:	d00c      	beq.n	8004e74 <I2C1_EV_IRQHandler+0x3c>
 8004e5a:	2b10      	cmp	r3, #16
 8004e5c:	d040      	beq.n	8004ee0 <I2C1_EV_IRQHandler+0xa8>
			Twi_ClearFlag(I2C1, I2C_SR1_ADDR);
			Twi_ClearFlag(I2C1, I2C_SR1_STOPF);
			break;

		default:
			break;
 8004e5e:	e04d      	b.n	8004efc <I2C1_EV_IRQHandler+0xc4>
	switch ( I2C_GetLastEvent(I2C1))
 8004e60:	4a2d      	ldr	r2, [pc, #180]	; (8004f18 <I2C1_EV_IRQHandler+0xe0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d02c      	beq.n	8004ec0 <I2C1_EV_IRQHandler+0x88>
 8004e66:	4a2d      	ldr	r2, [pc, #180]	; (8004f1c <I2C1_EV_IRQHandler+0xe4>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d042      	beq.n	8004ef2 <I2C1_EV_IRQHandler+0xba>
 8004e6c:	4a2c      	ldr	r2, [pc, #176]	; (8004f20 <I2C1_EV_IRQHandler+0xe8>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d041      	beq.n	8004ef6 <I2C1_EV_IRQHandler+0xbe>
			break;
 8004e72:	e043      	b.n	8004efc <I2C1_EV_IRQHandler+0xc4>
			status = I2C_STT_SLAVE_RECEIVE;
 8004e74:	4b2b      	ldr	r3, [pc, #172]	; (8004f24 <I2C1_EV_IRQHandler+0xec>)
 8004e76:	2221      	movs	r2, #33	; 0x21
 8004e78:	701a      	strb	r2, [r3, #0]
			break;
 8004e7a:	e03f      	b.n	8004efc <I2C1_EV_IRQHandler+0xc4>
			if(onReceiveFunc != NULL)
 8004e7c:	4b2a      	ldr	r3, [pc, #168]	; (8004f28 <I2C1_EV_IRQHandler+0xf0>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	bf14      	ite	ne
 8004e84:	2301      	movne	r3, #1
 8004e86:	2300      	moveq	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <I2C1_EV_IRQHandler+0x5e>
				onReceiveFunc();
 8004e8e:	4b26      	ldr	r3, [pc, #152]	; (8004f28 <I2C1_EV_IRQHandler+0xf0>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4798      	blx	r3
			break;
 8004e94:	e032      	b.n	8004efc <I2C1_EV_IRQHandler+0xc4>
			else I2C_ReceiveData(I2C1);
 8004e96:	481e      	ldr	r0, [pc, #120]	; (8004f10 <I2C1_EV_IRQHandler+0xd8>)
 8004e98:	f7fc f858 	bl	8000f4c <I2C_ReceiveData>
			break;
 8004e9c:	e02e      	b.n	8004efc <I2C1_EV_IRQHandler+0xc4>
			if(onReceiveFunc != NULL)
 8004e9e:	4b22      	ldr	r3, [pc, #136]	; (8004f28 <I2C1_EV_IRQHandler+0xf0>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	bf14      	ite	ne
 8004ea6:	2301      	movne	r3, #1
 8004ea8:	2300      	moveq	r3, #0
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d003      	beq.n	8004eb8 <I2C1_EV_IRQHandler+0x80>
				onReceiveFunc();
 8004eb0:	4b1d      	ldr	r3, [pc, #116]	; (8004f28 <I2C1_EV_IRQHandler+0xf0>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4798      	blx	r3
			break;
 8004eb6:	e021      	b.n	8004efc <I2C1_EV_IRQHandler+0xc4>
			else I2C_ReceiveData(I2C1);
 8004eb8:	4815      	ldr	r0, [pc, #84]	; (8004f10 <I2C1_EV_IRQHandler+0xd8>)
 8004eba:	f7fc f847 	bl	8000f4c <I2C_ReceiveData>
			break;
 8004ebe:	e01d      	b.n	8004efc <I2C1_EV_IRQHandler+0xc4>
			status = I2C_STT_SLAVE_TRANSMIT;
 8004ec0:	4b18      	ldr	r3, [pc, #96]	; (8004f24 <I2C1_EV_IRQHandler+0xec>)
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	701a      	strb	r2, [r3, #0]
			if(onRequestFunc != NULL)
 8004ec6:	4b19      	ldr	r3, [pc, #100]	; (8004f2c <I2C1_EV_IRQHandler+0xf4>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	bf14      	ite	ne
 8004ece:	2301      	movne	r3, #1
 8004ed0:	2300      	moveq	r3, #0
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d010      	beq.n	8004efa <I2C1_EV_IRQHandler+0xc2>
				onRequestFunc();
 8004ed8:	4b14      	ldr	r3, [pc, #80]	; (8004f2c <I2C1_EV_IRQHandler+0xf4>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4798      	blx	r3
			break;
 8004ede:	e00c      	b.n	8004efa <I2C1_EV_IRQHandler+0xc2>
			Twi_ClearFlag(I2C1, I2C_SR1_ADDR);
 8004ee0:	2102      	movs	r1, #2
 8004ee2:	480b      	ldr	r0, [pc, #44]	; (8004f10 <I2C1_EV_IRQHandler+0xd8>)
 8004ee4:	f000 f864 	bl	8004fb0 <Twi_ClearFlag>
			Twi_ClearFlag(I2C1, I2C_SR1_STOPF);
 8004ee8:	2110      	movs	r1, #16
 8004eea:	4809      	ldr	r0, [pc, #36]	; (8004f10 <I2C1_EV_IRQHandler+0xd8>)
 8004eec:	f000 f860 	bl	8004fb0 <Twi_ClearFlag>
			break;
 8004ef0:	e004      	b.n	8004efc <I2C1_EV_IRQHandler+0xc4>
			break;
 8004ef2:	bf00      	nop
 8004ef4:	e002      	b.n	8004efc <I2C1_EV_IRQHandler+0xc4>
			break;
 8004ef6:	bf00      	nop
 8004ef8:	e000      	b.n	8004efc <I2C1_EV_IRQHandler+0xc4>
			break;
 8004efa:	bf00      	nop
	}

	//Serial.println((char)I2C_ReceiveData(I2C1));
	// Master has STOP sent
	Twi_ClearFlag(I2C1, I2C_SR1_ADDR);
 8004efc:	2102      	movs	r1, #2
 8004efe:	4804      	ldr	r0, [pc, #16]	; (8004f10 <I2C1_EV_IRQHandler+0xd8>)
 8004f00:	f000 f856 	bl	8004fb0 <Twi_ClearFlag>
	Twi_ClearFlag(I2C1, I2C_SR1_STOPF);
 8004f04:	2110      	movs	r1, #16
 8004f06:	4802      	ldr	r0, [pc, #8]	; (8004f10 <I2C1_EV_IRQHandler+0xd8>)
 8004f08:	f000 f852 	bl	8004fb0 <Twi_ClearFlag>
}
 8004f0c:	bf00      	nop
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	40005400 	.word	0x40005400
 8004f14:	00020044 	.word	0x00020044
 8004f18:	00060082 	.word	0x00060082
 8004f1c:	00060084 	.word	0x00060084
 8004f20:	00060080 	.word	0x00060080
 8004f24:	200003bc 	.word	0x200003bc
 8004f28:	200003b8 	.word	0x200003b8
 8004f2c:	200003b4 	.word	0x200003b4

08004f30 <I2C1_ER_IRQHandler>:

/*******************************************************************/
void I2C1_ER_IRQHandler(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
	if (I2C_GetITStatus(I2C1, I2C_IT_AF))
 8004f34:	4908      	ldr	r1, [pc, #32]	; (8004f58 <I2C1_ER_IRQHandler+0x28>)
 8004f36:	4809      	ldr	r0, [pc, #36]	; (8004f5c <I2C1_ER_IRQHandler+0x2c>)
 8004f38:	f7fc f836 	bl	8000fa8 <I2C_GetITStatus>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	bf14      	ite	ne
 8004f42:	2301      	movne	r3, #1
 8004f44:	2300      	moveq	r3, #0
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d003      	beq.n	8004f54 <I2C1_ER_IRQHandler+0x24>
	{
		I2C_ClearITPendingBit(I2C1, I2C_IT_AF);
 8004f4c:	4902      	ldr	r1, [pc, #8]	; (8004f58 <I2C1_ER_IRQHandler+0x28>)
 8004f4e:	4803      	ldr	r0, [pc, #12]	; (8004f5c <I2C1_ER_IRQHandler+0x2c>)
 8004f50:	f7fc f856 	bl	8001000 <I2C_ClearITPendingBit>
	}
}
 8004f54:	bf00      	nop
 8004f56:	bd80      	pop	{r7, pc}
 8004f58:	01000400 	.word	0x01000400
 8004f5c:	40005400 	.word	0x40005400

08004f60 <_Z41__static_initialization_and_destruction_0ii>:
/*******************************************************************/

TwoWire Wire;
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d10c      	bne.n	8004f8a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d107      	bne.n	8004f8a <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8004f7a:	4806      	ldr	r0, [pc, #24]	; (8004f94 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8004f7c:	f7ff ff2c 	bl	8004dd8 <_ZN7TwoWireC1Ev>
 8004f80:	4a05      	ldr	r2, [pc, #20]	; (8004f98 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8004f82:	4906      	ldr	r1, [pc, #24]	; (8004f9c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8004f84:	4803      	ldr	r0, [pc, #12]	; (8004f94 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8004f86:	f000 fb53 	bl	8005630 <__aeabi_atexit>
 8004f8a:	bf00      	nop
 8004f8c:	3708      	adds	r7, #8
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}
 8004f92:	bf00      	nop
 8004f94:	200003c0 	.word	0x200003c0
 8004f98:	20000000 	.word	0x20000000
 8004f9c:	08004df9 	.word	0x08004df9

08004fa0 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004fa8:	2001      	movs	r0, #1
 8004faa:	f7ff ffd9 	bl	8004f60 <_Z41__static_initialization_and_destruction_0ii>
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <Twi_ClearFlag>:
  /* Send the address */
  I2Cx->DR = Address;
}

void Twi_ClearFlag(I2C_TypeDef* I2Cx, uint32_t I2C_SR1)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
	while((I2Cx->SR1 & I2C_SR1) == I2C_SR1)
 8004fba:	e00f      	b.n	8004fdc <Twi_ClearFlag+0x2c>
	{
		I2Cx->SR1;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	8a9b      	ldrh	r3, [r3, #20]

		if(I2C_SR1 == I2C_SR1_STOPF) I2Cx->CR1 |= 0x1;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	2b10      	cmp	r3, #16
 8004fc4:	d108      	bne.n	8004fd8 <Twi_ClearFlag+0x28>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	881b      	ldrh	r3, [r3, #0]
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	f043 0301 	orr.w	r3, r3, #1
 8004fd0:	b29a      	uxth	r2, r3
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	801a      	strh	r2, [r3, #0]
 8004fd6:	e001      	b.n	8004fdc <Twi_ClearFlag+0x2c>
		else I2Cx->SR2;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	8b1b      	ldrh	r3, [r3, #24]
	while((I2Cx->SR1 & I2C_SR1) == I2C_SR1)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	8a9b      	ldrh	r3, [r3, #20]
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	401a      	ands	r2, r3
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d0e6      	beq.n	8004fbc <Twi_ClearFlag+0xc>
	}
}
 8004fee:	bf00      	nop
 8004ff0:	370c      	adds	r7, #12
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bc80      	pop	{r7}
 8004ff6:	4770      	bx	lr

08004ff8 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	4603      	mov	r3, r0
 8005000:	6039      	str	r1, [r7, #0]
 8005002:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8005004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005008:	2b00      	cmp	r3, #0
 800500a:	da0b      	bge.n	8005024 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 800500c:	490d      	ldr	r1, [pc, #52]	; (8005044 <NVIC_SetPriority+0x4c>)
 800500e:	79fb      	ldrb	r3, [r7, #7]
 8005010:	f003 030f 	and.w	r3, r3, #15
 8005014:	3b04      	subs	r3, #4
 8005016:	683a      	ldr	r2, [r7, #0]
 8005018:	b2d2      	uxtb	r2, r2
 800501a:	0112      	lsls	r2, r2, #4
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	440b      	add	r3, r1
 8005020:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8005022:	e009      	b.n	8005038 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8005024:	4908      	ldr	r1, [pc, #32]	; (8005048 <NVIC_SetPriority+0x50>)
 8005026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	0112      	lsls	r2, r2, #4
 8005030:	b2d2      	uxtb	r2, r2
 8005032:	440b      	add	r3, r1
 8005034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005038:	bf00      	nop
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	bc80      	pop	{r7}
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	e000ed00 	.word	0xe000ed00
 8005048:	e000e100 	.word	0xe000e100

0800504c <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800505a:	d301      	bcc.n	8005060 <SysTick_Config+0x14>
 800505c:	2301      	movs	r3, #1
 800505e:	e011      	b.n	8005084 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8005060:	4a0a      	ldr	r2, [pc, #40]	; (800508c <SysTick_Config+0x40>)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005068:	3b01      	subs	r3, #1
 800506a:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 800506c:	210f      	movs	r1, #15
 800506e:	f04f 30ff 	mov.w	r0, #4294967295
 8005072:	f7ff ffc1 	bl	8004ff8 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8005076:	4b05      	ldr	r3, [pc, #20]	; (800508c <SysTick_Config+0x40>)
 8005078:	2200      	movs	r2, #0
 800507a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800507c:	4b03      	ldr	r3, [pc, #12]	; (800508c <SysTick_Config+0x40>)
 800507e:	2207      	movs	r2, #7
 8005080:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	e000e010 	.word	0xe000e010

08005090 <SysTick_Init>:
uint32_t tim_cnt = 0;
uint32_t ticker;
volatile uint32_t us;

void SysTick_Init(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	af00      	add	r7, sp, #0
	if (SysTick_Config(SystemCoreClock / 1000)) //1ms per interrupt
 8005094:	4b0d      	ldr	r3, [pc, #52]	; (80050cc <SysTick_Init+0x3c>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a0d      	ldr	r2, [pc, #52]	; (80050d0 <SysTick_Init+0x40>)
 800509a:	fba2 2303 	umull	r2, r3, r2, r3
 800509e:	099b      	lsrs	r3, r3, #6
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7ff ffd3 	bl	800504c <SysTick_Config>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d000      	beq.n	80050ae <SysTick_Init+0x1e>
	{
		while(1);
 80050ac:	e7fe      	b.n	80050ac <SysTick_Init+0x1c>
	}
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 80050ae:	f44f 7040 	mov.w	r0, #768	; 0x300
 80050b2:	f7fb fde9 	bl	8000c88 <NVIC_PriorityGroupConfig>
	NVIC_SetPriority(SysTick_IRQn, 0);
 80050b6:	2100      	movs	r1, #0
 80050b8:	f04f 30ff 	mov.w	r0, #4294967295
 80050bc:	f7ff ff9c 	bl	8004ff8 <NVIC_SetPriority>
	ticker = 0;
 80050c0:	4b04      	ldr	r3, [pc, #16]	; (80050d4 <SysTick_Init+0x44>)
 80050c2:	2200      	movs	r2, #0
 80050c4:	601a      	str	r2, [r3, #0]
}
 80050c6:	bf00      	nop
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	2000001c 	.word	0x2000001c
 80050d0:	10624dd3 	.word	0x10624dd3
 80050d4:	2000044c 	.word	0x2000044c

080050d8 <millis>:

uint32_t millis(void)
{
 80050d8:	b480      	push	{r7}
 80050da:	af00      	add	r7, sp, #0
	return ticker;
 80050dc:	4b02      	ldr	r3, [pc, #8]	; (80050e8 <millis+0x10>)
 80050de:	681b      	ldr	r3, [r3, #0]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bc80      	pop	{r7}
 80050e6:	4770      	bx	lr
 80050e8:	2000044c 	.word	0x2000044c

080050ec <delay>:
	us = ticker * 1000 + 1000 - SysTick->VAL / 80;
	return us;
}

void delay(uint32_t nTime)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
	uint32_t curTime = ticker;
 80050f4:	4b08      	ldr	r3, [pc, #32]	; (8005118 <delay+0x2c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	60fb      	str	r3, [r7, #12]
	while ((nTime - (ticker - curTime)) > 0);
 80050fa:	bf00      	nop
 80050fc:	4b06      	ldr	r3, [pc, #24]	; (8005118 <delay+0x2c>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	1ad2      	subs	r2, r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	4413      	add	r3, r2
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1f7      	bne.n	80050fc <delay+0x10>
}
 800510c:	bf00      	nop
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	bc80      	pop	{r7}
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	2000044c 	.word	0x2000044c

0800511c <SysTick_Handler>:
	uint32_t curTime = micros();
	while((nTime-(micros()-curTime)) > 0);
}

void SysTick_Handler(void)
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
	ticker++;
 8005120:	4b04      	ldr	r3, [pc, #16]	; (8005134 <SysTick_Handler+0x18>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	3301      	adds	r3, #1
 8005126:	4a03      	ldr	r2, [pc, #12]	; (8005134 <SysTick_Handler+0x18>)
 8005128:	6013      	str	r3, [r2, #0]
}
 800512a:	bf00      	nop
 800512c:	46bd      	mov	sp, r7
 800512e:	bc80      	pop	{r7}
 8005130:	4770      	bx	lr
 8005132:	bf00      	nop
 8005134:	2000044c 	.word	0x2000044c

08005138 <_ZNK8SdVolume16blocksPerClusterEv>:
  uint8_t blocksPerCluster(void) const {return blocksPerCluster_;}
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	791b      	ldrb	r3, [r3, #4]
 8005144:	4618      	mov	r0, r3
 8005146:	370c      	adds	r7, #12
 8005148:	46bd      	mov	sp, r7
 800514a:	bc80      	pop	{r7}
 800514c:	4770      	bx	lr

0800514e <_ZNK8SdVolume12clusterCountEv>:
  uint32_t clusterCount(void) const {return clusterCount_;}
 800514e:	b480      	push	{r7}
 8005150:	b083      	sub	sp, #12
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	4618      	mov	r0, r3
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	bc80      	pop	{r7}
 8005162:	4770      	bx	lr

08005164 <main>:
const int chipSelect = A4;
/************************************************************/
/*                  MAIN FUNCTION							*/
/************************************************************/
int main(void)
{
 8005164:	b590      	push	{r4, r7, lr}
 8005166:	b085      	sub	sp, #20
 8005168:	af02      	add	r7, sp, #8
	SysTick_Init();
 800516a:	f7ff ff91 	bl	8005090 <SysTick_Init>
	pinMode(C13, OUTPUT);
 800516e:	2110      	movs	r1, #16
 8005170:	202d      	movs	r0, #45	; 0x2d
 8005172:	f7fc fadf 	bl	8001734 <pinMode>
	Serial.begin(115200);	// Initialize serial communications with the PC
 8005176:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 800517a:	4878      	ldr	r0, [pc, #480]	; (800535c <main+0x1f8>)
 800517c:	f7ff fcbe 	bl	8004afc <_ZN14HardwareSerial5beginEm>

	Serial.print("\nInitializing SD card...");
 8005180:	4977      	ldr	r1, [pc, #476]	; (8005360 <main+0x1fc>)
 8005182:	4876      	ldr	r0, [pc, #472]	; (800535c <main+0x1f8>)
 8005184:	f7fc fcec 	bl	8001b60 <_ZN5Print5printEPKc>

	// we'll use the initialization code from the utility libraries
	// since we're just testing if the card is working!
	if (!card.init(SPI_HALF_SPEED, chipSelect))
 8005188:	2204      	movs	r2, #4
 800518a:	2101      	movs	r1, #1
 800518c:	4875      	ldr	r0, [pc, #468]	; (8005364 <main+0x200>)
 800518e:	f7fd faad 	bl	80026ec <_ZN7Sd2Card4initEhh>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	bf0c      	ite	eq
 8005198:	2301      	moveq	r3, #1
 800519a:	2300      	movne	r3, #0
 800519c:	b2db      	uxtb	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d010      	beq.n	80051c4 <main+0x60>
	{
		Serial.println("initialization failed. Things to check:");
 80051a2:	4971      	ldr	r1, [pc, #452]	; (8005368 <main+0x204>)
 80051a4:	486d      	ldr	r0, [pc, #436]	; (800535c <main+0x1f8>)
 80051a6:	f7fc fdaf 	bl	8001d08 <_ZN5Print7printlnEPKc>
		Serial.println("* is a card inserted?");
 80051aa:	4970      	ldr	r1, [pc, #448]	; (800536c <main+0x208>)
 80051ac:	486b      	ldr	r0, [pc, #428]	; (800535c <main+0x1f8>)
 80051ae:	f7fc fdab 	bl	8001d08 <_ZN5Print7printlnEPKc>
		Serial.println("* is your wiring correct?");
 80051b2:	496f      	ldr	r1, [pc, #444]	; (8005370 <main+0x20c>)
 80051b4:	4869      	ldr	r0, [pc, #420]	; (800535c <main+0x1f8>)
 80051b6:	f7fc fda7 	bl	8001d08 <_ZN5Print7printlnEPKc>
		Serial.println(
				"* did you change the chipSelect pin to match your shield or module?");
 80051ba:	496e      	ldr	r1, [pc, #440]	; (8005374 <main+0x210>)
 80051bc:	4867      	ldr	r0, [pc, #412]	; (800535c <main+0x1f8>)
 80051be:	f7fc fda3 	bl	8001d08 <_ZN5Print7printlnEPKc>
		while (1);
 80051c2:	e7fe      	b.n	80051c2 <main+0x5e>
	}
	else
	{
		Serial.println("Wiring is correct and a card is present.");
 80051c4:	496c      	ldr	r1, [pc, #432]	; (8005378 <main+0x214>)
 80051c6:	4865      	ldr	r0, [pc, #404]	; (800535c <main+0x1f8>)
 80051c8:	f7fc fd9e 	bl	8001d08 <_ZN5Print7printlnEPKc>
	}

	// print the type of card
	Serial.println();
 80051cc:	4863      	ldr	r0, [pc, #396]	; (800535c <main+0x1f8>)
 80051ce:	f7fc fd8b 	bl	8001ce8 <_ZN5Print7printlnEv>
	Serial.print("Card type:         ");
 80051d2:	496a      	ldr	r1, [pc, #424]	; (800537c <main+0x218>)
 80051d4:	4861      	ldr	r0, [pc, #388]	; (800535c <main+0x1f8>)
 80051d6:	f7fc fcc3 	bl	8001b60 <_ZN5Print5printEPKc>
	switch (card.type()) {
 80051da:	4862      	ldr	r0, [pc, #392]	; (8005364 <main+0x200>)
 80051dc:	f7fd f998 	bl	8002510 <_ZNK7Sd2Card4typeEv>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	d008      	beq.n	80051f8 <main+0x94>
 80051e6:	2b03      	cmp	r3, #3
 80051e8:	d00b      	beq.n	8005202 <main+0x9e>
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d10e      	bne.n	800520c <main+0xa8>
	case SD_CARD_TYPE_SD1:
		Serial.println("SD1");
 80051ee:	4964      	ldr	r1, [pc, #400]	; (8005380 <main+0x21c>)
 80051f0:	485a      	ldr	r0, [pc, #360]	; (800535c <main+0x1f8>)
 80051f2:	f7fc fd89 	bl	8001d08 <_ZN5Print7printlnEPKc>
		break;
 80051f6:	e00d      	b.n	8005214 <main+0xb0>
	case SD_CARD_TYPE_SD2:
		Serial.println("SD2");
 80051f8:	4962      	ldr	r1, [pc, #392]	; (8005384 <main+0x220>)
 80051fa:	4858      	ldr	r0, [pc, #352]	; (800535c <main+0x1f8>)
 80051fc:	f7fc fd84 	bl	8001d08 <_ZN5Print7printlnEPKc>
		break;
 8005200:	e008      	b.n	8005214 <main+0xb0>
	case SD_CARD_TYPE_SDHC:
		Serial.println("SDHC");
 8005202:	4961      	ldr	r1, [pc, #388]	; (8005388 <main+0x224>)
 8005204:	4855      	ldr	r0, [pc, #340]	; (800535c <main+0x1f8>)
 8005206:	f7fc fd7f 	bl	8001d08 <_ZN5Print7printlnEPKc>
		break;
 800520a:	e003      	b.n	8005214 <main+0xb0>
	default:
		Serial.println("Unknown");
 800520c:	495f      	ldr	r1, [pc, #380]	; (800538c <main+0x228>)
 800520e:	4853      	ldr	r0, [pc, #332]	; (800535c <main+0x1f8>)
 8005210:	f7fc fd7a 	bl	8001d08 <_ZN5Print7printlnEPKc>
	}

	// Now we will try to open the 'volume'/'partition' - it should be FAT16 or FAT32
	if (!volume.init(card))
 8005214:	4953      	ldr	r1, [pc, #332]	; (8005364 <main+0x200>)
 8005216:	485e      	ldr	r0, [pc, #376]	; (8005390 <main+0x22c>)
 8005218:	f7fd f936 	bl	8002488 <_ZN8SdVolume4initER7Sd2Card>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	bf0c      	ite	eq
 8005222:	2301      	moveq	r3, #1
 8005224:	2300      	movne	r3, #0
 8005226:	b2db      	uxtb	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d004      	beq.n	8005236 <main+0xd2>
	{
		Serial.println("Could not find FAT16/FAT32 partition.\nMake sure you've formatted the card");
 800522c:	4959      	ldr	r1, [pc, #356]	; (8005394 <main+0x230>)
 800522e:	484b      	ldr	r0, [pc, #300]	; (800535c <main+0x1f8>)
 8005230:	f7fc fd6a 	bl	8001d08 <_ZN5Print7printlnEPKc>
		while (1);
 8005234:	e7fe      	b.n	8005234 <main+0xd0>
	}

	Serial.print("Clusters:          ");
 8005236:	4958      	ldr	r1, [pc, #352]	; (8005398 <main+0x234>)
 8005238:	4848      	ldr	r0, [pc, #288]	; (800535c <main+0x1f8>)
 800523a:	f7fc fc91 	bl	8001b60 <_ZN5Print5printEPKc>
	Serial.println(volume.clusterCount());
 800523e:	4854      	ldr	r0, [pc, #336]	; (8005390 <main+0x22c>)
 8005240:	f7ff ff85 	bl	800514e <_ZNK8SdVolume12clusterCountEv>
 8005244:	4603      	mov	r3, r0
 8005246:	220a      	movs	r2, #10
 8005248:	4619      	mov	r1, r3
 800524a:	4844      	ldr	r0, [pc, #272]	; (800535c <main+0x1f8>)
 800524c:	f7fc fd8c 	bl	8001d68 <_ZN5Print7printlnEmi>
	Serial.print("Blocks x Cluster:  ");
 8005250:	4952      	ldr	r1, [pc, #328]	; (800539c <main+0x238>)
 8005252:	4842      	ldr	r0, [pc, #264]	; (800535c <main+0x1f8>)
 8005254:	f7fc fc84 	bl	8001b60 <_ZN5Print5printEPKc>
	Serial.println(volume.blocksPerCluster());
 8005258:	484d      	ldr	r0, [pc, #308]	; (8005390 <main+0x22c>)
 800525a:	f7ff ff6d 	bl	8005138 <_ZNK8SdVolume16blocksPerClusterEv>
 800525e:	4603      	mov	r3, r0
 8005260:	220a      	movs	r2, #10
 8005262:	4619      	mov	r1, r3
 8005264:	483d      	ldr	r0, [pc, #244]	; (800535c <main+0x1f8>)
 8005266:	f7fc fd65 	bl	8001d34 <_ZN5Print7printlnEhi>

	Serial.print("Total Blocks:      ");
 800526a:	494d      	ldr	r1, [pc, #308]	; (80053a0 <main+0x23c>)
 800526c:	483b      	ldr	r0, [pc, #236]	; (800535c <main+0x1f8>)
 800526e:	f7fc fc77 	bl	8001b60 <_ZN5Print5printEPKc>
	Serial.println(volume.blocksPerCluster() * volume.clusterCount());
 8005272:	4847      	ldr	r0, [pc, #284]	; (8005390 <main+0x22c>)
 8005274:	f7ff ff60 	bl	8005138 <_ZNK8SdVolume16blocksPerClusterEv>
 8005278:	4603      	mov	r3, r0
 800527a:	461c      	mov	r4, r3
 800527c:	4844      	ldr	r0, [pc, #272]	; (8005390 <main+0x22c>)
 800527e:	f7ff ff66 	bl	800514e <_ZNK8SdVolume12clusterCountEv>
 8005282:	4603      	mov	r3, r0
 8005284:	fb03 f304 	mul.w	r3, r3, r4
 8005288:	220a      	movs	r2, #10
 800528a:	4619      	mov	r1, r3
 800528c:	4833      	ldr	r0, [pc, #204]	; (800535c <main+0x1f8>)
 800528e:	f7fc fd6b 	bl	8001d68 <_ZN5Print7printlnEmi>
	Serial.println();
 8005292:	4832      	ldr	r0, [pc, #200]	; (800535c <main+0x1f8>)
 8005294:	f7fc fd28 	bl	8001ce8 <_ZN5Print7printlnEv>

	// print the type and size of the first FAT-type volume
	uint32_t volumesize;
	Serial.print("Volume type is:    FAT");
 8005298:	4942      	ldr	r1, [pc, #264]	; (80053a4 <main+0x240>)
 800529a:	4830      	ldr	r0, [pc, #192]	; (800535c <main+0x1f8>)
 800529c:	f7fc fc60 	bl	8001b60 <_ZN5Print5printEPKc>
	Serial.println(volume.fatType(), DEC);
 80052a0:	483b      	ldr	r0, [pc, #236]	; (8005390 <main+0x22c>)
 80052a2:	f7fd fde0 	bl	8002e66 <_ZNK8SdVolume7fatTypeEv>
 80052a6:	4603      	mov	r3, r0
 80052a8:	220a      	movs	r2, #10
 80052aa:	4619      	mov	r1, r3
 80052ac:	482b      	ldr	r0, [pc, #172]	; (800535c <main+0x1f8>)
 80052ae:	f7fc fd41 	bl	8001d34 <_ZN5Print7printlnEhi>

	volumesize = volume.blocksPerCluster(); // clusters are collections of blocks
 80052b2:	4837      	ldr	r0, [pc, #220]	; (8005390 <main+0x22c>)
 80052b4:	f7ff ff40 	bl	8005138 <_ZNK8SdVolume16blocksPerClusterEv>
 80052b8:	4603      	mov	r3, r0
 80052ba:	607b      	str	r3, [r7, #4]
	volumesize *= volume.clusterCount();       // we'll have a lot of clusters
 80052bc:	4834      	ldr	r0, [pc, #208]	; (8005390 <main+0x22c>)
 80052be:	f7ff ff46 	bl	800514e <_ZNK8SdVolume12clusterCountEv>
 80052c2:	4602      	mov	r2, r0
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	fb02 f303 	mul.w	r3, r2, r3
 80052ca:	607b      	str	r3, [r7, #4]
	volumesize /= 2;   // SD card blocks are always 512 bytes (2 blocks are 1KB)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	085b      	lsrs	r3, r3, #1
 80052d0:	607b      	str	r3, [r7, #4]
	Serial.print("Volume size (Kb):  ");
 80052d2:	4935      	ldr	r1, [pc, #212]	; (80053a8 <main+0x244>)
 80052d4:	4821      	ldr	r0, [pc, #132]	; (800535c <main+0x1f8>)
 80052d6:	f7fc fc43 	bl	8001b60 <_ZN5Print5printEPKc>
	Serial.println(volumesize);
 80052da:	220a      	movs	r2, #10
 80052dc:	6879      	ldr	r1, [r7, #4]
 80052de:	481f      	ldr	r0, [pc, #124]	; (800535c <main+0x1f8>)
 80052e0:	f7fc fd42 	bl	8001d68 <_ZN5Print7printlnEmi>
	Serial.print("Volume size (Mb):  ");
 80052e4:	4931      	ldr	r1, [pc, #196]	; (80053ac <main+0x248>)
 80052e6:	481d      	ldr	r0, [pc, #116]	; (800535c <main+0x1f8>)
 80052e8:	f7fc fc3a 	bl	8001b60 <_ZN5Print5printEPKc>
	volumesize /= 1024;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	0a9b      	lsrs	r3, r3, #10
 80052f0:	607b      	str	r3, [r7, #4]
	Serial.println(volumesize);
 80052f2:	220a      	movs	r2, #10
 80052f4:	6879      	ldr	r1, [r7, #4]
 80052f6:	4819      	ldr	r0, [pc, #100]	; (800535c <main+0x1f8>)
 80052f8:	f7fc fd36 	bl	8001d68 <_ZN5Print7printlnEmi>
	Serial.print("Volume size (Gb):  ");
 80052fc:	492c      	ldr	r1, [pc, #176]	; (80053b0 <main+0x24c>)
 80052fe:	4817      	ldr	r0, [pc, #92]	; (800535c <main+0x1f8>)
 8005300:	f7fc fc2e 	bl	8001b60 <_ZN5Print5printEPKc>
	Serial.println((float) volumesize / 1024.0);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f7fb fc67 	bl	8000bd8 <__aeabi_ui2f>
 800530a:	4603      	mov	r3, r0
 800530c:	4618      	mov	r0, r3
 800530e:	f7fb f889 	bl	8000424 <__aeabi_f2d>
 8005312:	f04f 0200 	mov.w	r2, #0
 8005316:	4b27      	ldr	r3, [pc, #156]	; (80053b4 <main+0x250>)
 8005318:	f7fb fa02 	bl	8000720 <__aeabi_ddiv>
 800531c:	4603      	mov	r3, r0
 800531e:	460c      	mov	r4, r1
 8005320:	4619      	mov	r1, r3
 8005322:	4622      	mov	r2, r4
 8005324:	2302      	movs	r3, #2
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	4613      	mov	r3, r2
 800532a:	460a      	mov	r2, r1
 800532c:	480b      	ldr	r0, [pc, #44]	; (800535c <main+0x1f8>)
 800532e:	f7fc fd33 	bl	8001d98 <_ZN5Print7printlnEdi>

	Serial.println(
			"\nFiles found on the card (name, date and size in bytes): ");
 8005332:	4921      	ldr	r1, [pc, #132]	; (80053b8 <main+0x254>)
 8005334:	4809      	ldr	r0, [pc, #36]	; (800535c <main+0x1f8>)
 8005336:	f7fc fce7 	bl	8001d08 <_ZN5Print7printlnEPKc>
	root.openRoot(volume);
 800533a:	4915      	ldr	r1, [pc, #84]	; (8005390 <main+0x22c>)
 800533c:	481f      	ldr	r0, [pc, #124]	; (80053bc <main+0x258>)
 800533e:	f7fd f86b 	bl	8002418 <_ZN6SdFile8openRootER8SdVolume>

	// list all files in the card with date and size
	root.ls(LS_R | LS_DATE | LS_SIZE);
 8005342:	2200      	movs	r2, #0
 8005344:	2107      	movs	r1, #7
 8005346:	481d      	ldr	r0, [pc, #116]	; (80053bc <main+0x258>)
 8005348:	f7fd fe8c 	bl	8003064 <_ZN6SdFile2lsEhh>

	while (1)
	{
		digitalToggle(C13);
 800534c:	202d      	movs	r0, #45	; 0x2d
 800534e:	f7fc fa82 	bl	8001856 <digitalToggle>
		delay(1000);
 8005352:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005356:	f7ff fec9 	bl	80050ec <delay>
		digitalToggle(C13);
 800535a:	e7f7      	b.n	800534c <main+0x1e8>
 800535c:	20000394 	.word	0x20000394
 8005360:	08005854 	.word	0x08005854
 8005364:	200003e8 	.word	0x200003e8
 8005368:	08005870 	.word	0x08005870
 800536c:	08005898 	.word	0x08005898
 8005370:	080058b0 	.word	0x080058b0
 8005374:	080058cc 	.word	0x080058cc
 8005378:	08005910 	.word	0x08005910
 800537c:	0800593c 	.word	0x0800593c
 8005380:	08005950 	.word	0x08005950
 8005384:	08005954 	.word	0x08005954
 8005388:	08005958 	.word	0x08005958
 800538c:	08005960 	.word	0x08005960
 8005390:	200003f8 	.word	0x200003f8
 8005394:	08005968 	.word	0x08005968
 8005398:	080059b4 	.word	0x080059b4
 800539c:	080059c8 	.word	0x080059c8
 80053a0:	080059dc 	.word	0x080059dc
 80053a4:	080059f0 	.word	0x080059f0
 80053a8:	08005a08 	.word	0x08005a08
 80053ac:	08005a1c 	.word	0x08005a1c
 80053b0:	08005a30 	.word	0x08005a30
 80053b4:	40900000 	.word	0x40900000
 80053b8:	08005a44 	.word	0x08005a44
 80053bc:	20000420 	.word	0x20000420

080053c0 <_Z41__static_initialization_and_destruction_0ii>:
	}
}
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
 80053c8:	6039      	str	r1, [r7, #0]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d110      	bne.n	80053f2 <_Z41__static_initialization_and_destruction_0ii+0x32>
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d10b      	bne.n	80053f2 <_Z41__static_initialization_and_destruction_0ii+0x32>
File myFile;
 80053da:	4808      	ldr	r0, [pc, #32]	; (80053fc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80053dc:	f7fc feee 	bl	80021bc <_ZN5SDLib4FileC1Ev>
Sd2Card card;
 80053e0:	4807      	ldr	r0, [pc, #28]	; (8005400 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 80053e2:	f7fc ffdc 	bl	800239e <_ZN7Sd2CardC1Ev>
SdVolume volume;
 80053e6:	4807      	ldr	r0, [pc, #28]	; (8005404 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 80053e8:	f7fd f824 	bl	8002434 <_ZN8SdVolumeC1Ev>
SdFile root;
 80053ec:	4806      	ldr	r0, [pc, #24]	; (8005408 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80053ee:	f7fc ffed 	bl	80023cc <_ZN6SdFileC1Ev>
}
 80053f2:	bf00      	nop
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
 80053fa:	bf00      	nop
 80053fc:	200003c4 	.word	0x200003c4
 8005400:	200003e8 	.word	0x200003e8
 8005404:	200003f8 	.word	0x200003f8
 8005408:	20000420 	.word	0x20000420

0800540c <_GLOBAL__sub_I_receiveData>:
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
 8005410:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005414:	2001      	movs	r0, #1
 8005416:	f7ff ffd3 	bl	80053c0 <_Z41__static_initialization_and_destruction_0ii>
 800541a:	bd80      	pop	{r7, pc}

0800541c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800541c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005454 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8005420:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8005422:	e003      	b.n	800542c <LoopCopyDataInit>

08005424 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8005424:	4b0c      	ldr	r3, [pc, #48]	; (8005458 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8005426:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8005428:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800542a:	3104      	adds	r1, #4

0800542c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800542c:	480b      	ldr	r0, [pc, #44]	; (800545c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 800542e:	4b0c      	ldr	r3, [pc, #48]	; (8005460 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8005430:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8005432:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8005434:	d3f6      	bcc.n	8005424 <CopyDataInit>
	ldr	r2, =_sbss
 8005436:	4a0b      	ldr	r2, [pc, #44]	; (8005464 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8005438:	e002      	b.n	8005440 <LoopFillZerobss>

0800543a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800543a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800543c:	f842 3b04 	str.w	r3, [r2], #4

08005440 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8005440:	4b09      	ldr	r3, [pc, #36]	; (8005468 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8005442:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8005444:	d3f9      	bcc.n	800543a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005446:	f000 f837 	bl	80054b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800544a:	f000 f91f 	bl	800568c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800544e:	f7ff fe89 	bl	8005164 <main>
	bx	lr
 8005452:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8005454:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8005458:	08005b54 	.word	0x08005b54
	ldr	r0, =_sdata
 800545c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8005460:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 8005464:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 8005468:	20000458 	.word	0x20000458

0800546c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800546c:	e7fe      	b.n	800546c <ADC1_2_IRQHandler>

0800546e <NMI_Handler>:
  * @retval None
  */


void NMI_Handler(void)
{
 800546e:	b480      	push	{r7}
 8005470:	af00      	add	r7, sp, #0
}
 8005472:	bf00      	nop
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	4770      	bx	lr

0800547a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800547a:	b480      	push	{r7}
 800547c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800547e:	e7fe      	b.n	800547e <HardFault_Handler+0x4>

08005480 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8005480:	b480      	push	{r7}
 8005482:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8005484:	e7fe      	b.n	8005484 <MemManage_Handler+0x4>

08005486 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8005486:	b480      	push	{r7}
 8005488:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800548a:	e7fe      	b.n	800548a <BusFault_Handler+0x4>

0800548c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800548c:	b480      	push	{r7}
 800548e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8005490:	e7fe      	b.n	8005490 <UsageFault_Handler+0x4>

08005492 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8005492:	b480      	push	{r7}
 8005494:	af00      	add	r7, sp, #0
}
 8005496:	bf00      	nop
 8005498:	46bd      	mov	sp, r7
 800549a:	bc80      	pop	{r7}
 800549c:	4770      	bx	lr

0800549e <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800549e:	b480      	push	{r7}
 80054a0:	af00      	add	r7, sp, #0
}
 80054a2:	bf00      	nop
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bc80      	pop	{r7}
 80054a8:	4770      	bx	lr

080054aa <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80054aa:	b480      	push	{r7}
 80054ac:	af00      	add	r7, sp, #0
}
 80054ae:	bf00      	nop
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bc80      	pop	{r7}
 80054b4:	4770      	bx	lr
	...

080054b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80054bc:	4a15      	ldr	r2, [pc, #84]	; (8005514 <SystemInit+0x5c>)
 80054be:	4b15      	ldr	r3, [pc, #84]	; (8005514 <SystemInit+0x5c>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f043 0301 	orr.w	r3, r3, #1
 80054c6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 80054c8:	4912      	ldr	r1, [pc, #72]	; (8005514 <SystemInit+0x5c>)
 80054ca:	4b12      	ldr	r3, [pc, #72]	; (8005514 <SystemInit+0x5c>)
 80054cc:	685a      	ldr	r2, [r3, #4]
 80054ce:	4b12      	ldr	r3, [pc, #72]	; (8005518 <SystemInit+0x60>)
 80054d0:	4013      	ands	r3, r2
 80054d2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80054d4:	4a0f      	ldr	r2, [pc, #60]	; (8005514 <SystemInit+0x5c>)
 80054d6:	4b0f      	ldr	r3, [pc, #60]	; (8005514 <SystemInit+0x5c>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80054de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054e2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80054e4:	4a0b      	ldr	r2, [pc, #44]	; (8005514 <SystemInit+0x5c>)
 80054e6:	4b0b      	ldr	r3, [pc, #44]	; (8005514 <SystemInit+0x5c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054ee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 80054f0:	4a08      	ldr	r2, [pc, #32]	; (8005514 <SystemInit+0x5c>)
 80054f2:	4b08      	ldr	r3, [pc, #32]	; (8005514 <SystemInit+0x5c>)
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80054fa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 80054fc:	4b05      	ldr	r3, [pc, #20]	; (8005514 <SystemInit+0x5c>)
 80054fe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8005502:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8005504:	f000 f80c 	bl	8005520 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005508:	4b04      	ldr	r3, [pc, #16]	; (800551c <SystemInit+0x64>)
 800550a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800550e:	609a      	str	r2, [r3, #8]
#endif 
}
 8005510:	bf00      	nop
 8005512:	bd80      	pop	{r7, pc}
 8005514:	40021000 	.word	0x40021000
 8005518:	f8ff0000 	.word	0xf8ff0000
 800551c:	e000ed00 	.word	0xe000ed00

08005520 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8005524:	f000 f802 	bl	800552c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8005528:	bf00      	nop
 800552a:	bd80      	pop	{r7, pc}

0800552c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 800552c:	b480      	push	{r7}
 800552e:	b083      	sub	sp, #12
 8005530:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8005532:	2300      	movs	r3, #0
 8005534:	607b      	str	r3, [r7, #4]
 8005536:	2300      	movs	r3, #0
 8005538:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800553a:	4a3a      	ldr	r2, [pc, #232]	; (8005624 <SetSysClockTo72+0xf8>)
 800553c:	4b39      	ldr	r3, [pc, #228]	; (8005624 <SetSysClockTo72+0xf8>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005544:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8005546:	4b37      	ldr	r3, [pc, #220]	; (8005624 <SetSysClockTo72+0xf8>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800554e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	3301      	adds	r3, #1
 8005554:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d103      	bne.n	8005564 <SetSysClockTo72+0x38>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8005562:	d1f0      	bne.n	8005546 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8005564:	4b2f      	ldr	r3, [pc, #188]	; (8005624 <SetSysClockTo72+0xf8>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8005570:	2301      	movs	r3, #1
 8005572:	603b      	str	r3, [r7, #0]
 8005574:	e001      	b.n	800557a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8005576:	2300      	movs	r3, #0
 8005578:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b01      	cmp	r3, #1
 800557e:	d14b      	bne.n	8005618 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8005580:	4a29      	ldr	r2, [pc, #164]	; (8005628 <SetSysClockTo72+0xfc>)
 8005582:	4b29      	ldr	r3, [pc, #164]	; (8005628 <SetSysClockTo72+0xfc>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f043 0310 	orr.w	r3, r3, #16
 800558a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 800558c:	4a26      	ldr	r2, [pc, #152]	; (8005628 <SetSysClockTo72+0xfc>)
 800558e:	4b26      	ldr	r3, [pc, #152]	; (8005628 <SetSysClockTo72+0xfc>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f023 0303 	bic.w	r3, r3, #3
 8005596:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8005598:	4a23      	ldr	r2, [pc, #140]	; (8005628 <SetSysClockTo72+0xfc>)
 800559a:	4b23      	ldr	r3, [pc, #140]	; (8005628 <SetSysClockTo72+0xfc>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f043 0302 	orr.w	r3, r3, #2
 80055a2:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80055a4:	4a1f      	ldr	r2, [pc, #124]	; (8005624 <SetSysClockTo72+0xf8>)
 80055a6:	4b1f      	ldr	r3, [pc, #124]	; (8005624 <SetSysClockTo72+0xf8>)
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 80055ac:	4a1d      	ldr	r2, [pc, #116]	; (8005624 <SetSysClockTo72+0xf8>)
 80055ae:	4b1d      	ldr	r3, [pc, #116]	; (8005624 <SetSysClockTo72+0xf8>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 80055b4:	4a1b      	ldr	r2, [pc, #108]	; (8005624 <SetSysClockTo72+0xf8>)
 80055b6:	4b1b      	ldr	r3, [pc, #108]	; (8005624 <SetSysClockTo72+0xf8>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055be:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 80055c0:	4a18      	ldr	r2, [pc, #96]	; (8005624 <SetSysClockTo72+0xf8>)
 80055c2:	4b18      	ldr	r3, [pc, #96]	; (8005624 <SetSysClockTo72+0xf8>)
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 80055ca:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 80055cc:	4a15      	ldr	r2, [pc, #84]	; (8005624 <SetSysClockTo72+0xf8>)
 80055ce:	4b15      	ldr	r3, [pc, #84]	; (8005624 <SetSysClockTo72+0xf8>)
 80055d0:	685b      	ldr	r3, [r3, #4]
 80055d2:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 80055d6:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80055d8:	4a12      	ldr	r2, [pc, #72]	; (8005624 <SetSysClockTo72+0xf8>)
 80055da:	4b12      	ldr	r3, [pc, #72]	; (8005624 <SetSysClockTo72+0xf8>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055e2:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80055e4:	bf00      	nop
 80055e6:	4b0f      	ldr	r3, [pc, #60]	; (8005624 <SetSysClockTo72+0xf8>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0f9      	beq.n	80055e6 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80055f2:	4a0c      	ldr	r2, [pc, #48]	; (8005624 <SetSysClockTo72+0xf8>)
 80055f4:	4b0b      	ldr	r3, [pc, #44]	; (8005624 <SetSysClockTo72+0xf8>)
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f023 0303 	bic.w	r3, r3, #3
 80055fc:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 80055fe:	4a09      	ldr	r2, [pc, #36]	; (8005624 <SetSysClockTo72+0xf8>)
 8005600:	4b08      	ldr	r3, [pc, #32]	; (8005624 <SetSysClockTo72+0xf8>)
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	f043 0302 	orr.w	r3, r3, #2
 8005608:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 800560a:	bf00      	nop
 800560c:	4b05      	ldr	r3, [pc, #20]	; (8005624 <SetSysClockTo72+0xf8>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f003 030c 	and.w	r3, r3, #12
 8005614:	2b08      	cmp	r3, #8
 8005616:	d1f9      	bne.n	800560c <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	bc80      	pop	{r7}
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	40021000 	.word	0x40021000
 8005628:	40022000 	.word	0x40022000

0800562c <_ZdlPv>:
 800562c:	f000 b852 	b.w	80056d4 <free>

08005630 <__aeabi_atexit>:
 8005630:	460b      	mov	r3, r1
 8005632:	4601      	mov	r1, r0
 8005634:	4618      	mov	r0, r3
 8005636:	f000 b81b 	b.w	8005670 <__cxa_atexit>

0800563a <__cxa_pure_virtual>:
 800563a:	b508      	push	{r3, lr}
 800563c:	f000 f80c 	bl	8005658 <_ZSt9terminatev>

08005640 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8005640:	b508      	push	{r3, lr}
 8005642:	4780      	blx	r0
 8005644:	f000 f80d 	bl	8005662 <abort>

08005648 <_ZSt13get_terminatev>:
 8005648:	4b02      	ldr	r3, [pc, #8]	; (8005654 <_ZSt13get_terminatev+0xc>)
 800564a:	6818      	ldr	r0, [r3, #0]
 800564c:	f3bf 8f5b 	dmb	ish
 8005650:	4770      	bx	lr
 8005652:	bf00      	nop
 8005654:	20000020 	.word	0x20000020

08005658 <_ZSt9terminatev>:
 8005658:	b508      	push	{r3, lr}
 800565a:	f7ff fff5 	bl	8005648 <_ZSt13get_terminatev>
 800565e:	f7ff ffef 	bl	8005640 <_ZN10__cxxabiv111__terminateEPFvvE>

08005662 <abort>:
 8005662:	b508      	push	{r3, lr}
 8005664:	2006      	movs	r0, #6
 8005666:	f000 f8b1 	bl	80057cc <raise>
 800566a:	2001      	movs	r0, #1
 800566c:	f000 f8dc 	bl	8005828 <_exit>

08005670 <__cxa_atexit>:
 8005670:	b510      	push	{r4, lr}
 8005672:	4c05      	ldr	r4, [pc, #20]	; (8005688 <__cxa_atexit+0x18>)
 8005674:	4613      	mov	r3, r2
 8005676:	b12c      	cbz	r4, 8005684 <__cxa_atexit+0x14>
 8005678:	460a      	mov	r2, r1
 800567a:	4601      	mov	r1, r0
 800567c:	2002      	movs	r0, #2
 800567e:	f3af 8000 	nop.w
 8005682:	bd10      	pop	{r4, pc}
 8005684:	4620      	mov	r0, r4
 8005686:	bd10      	pop	{r4, pc}
 8005688:	00000000 	.word	0x00000000

0800568c <__libc_init_array>:
 800568c:	b570      	push	{r4, r5, r6, lr}
 800568e:	2500      	movs	r5, #0
 8005690:	4e0c      	ldr	r6, [pc, #48]	; (80056c4 <__libc_init_array+0x38>)
 8005692:	4c0d      	ldr	r4, [pc, #52]	; (80056c8 <__libc_init_array+0x3c>)
 8005694:	1ba4      	subs	r4, r4, r6
 8005696:	10a4      	asrs	r4, r4, #2
 8005698:	42a5      	cmp	r5, r4
 800569a:	d109      	bne.n	80056b0 <__libc_init_array+0x24>
 800569c:	f000 f8c6 	bl	800582c <_init>
 80056a0:	2500      	movs	r5, #0
 80056a2:	4e0a      	ldr	r6, [pc, #40]	; (80056cc <__libc_init_array+0x40>)
 80056a4:	4c0a      	ldr	r4, [pc, #40]	; (80056d0 <__libc_init_array+0x44>)
 80056a6:	1ba4      	subs	r4, r4, r6
 80056a8:	10a4      	asrs	r4, r4, #2
 80056aa:	42a5      	cmp	r5, r4
 80056ac:	d105      	bne.n	80056ba <__libc_init_array+0x2e>
 80056ae:	bd70      	pop	{r4, r5, r6, pc}
 80056b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056b4:	4798      	blx	r3
 80056b6:	3501      	adds	r5, #1
 80056b8:	e7ee      	b.n	8005698 <__libc_init_array+0xc>
 80056ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80056be:	4798      	blx	r3
 80056c0:	3501      	adds	r5, #1
 80056c2:	e7f2      	b.n	80056aa <__libc_init_array+0x1e>
 80056c4:	08005b38 	.word	0x08005b38
 80056c8:	08005b38 	.word	0x08005b38
 80056cc:	08005b38 	.word	0x08005b38
 80056d0:	08005b50 	.word	0x08005b50

080056d4 <free>:
 80056d4:	4b02      	ldr	r3, [pc, #8]	; (80056e0 <free+0xc>)
 80056d6:	4601      	mov	r1, r0
 80056d8:	6818      	ldr	r0, [r3, #0]
 80056da:	f000 b803 	b.w	80056e4 <_free_r>
 80056de:	bf00      	nop
 80056e0:	20000024 	.word	0x20000024

080056e4 <_free_r>:
 80056e4:	b538      	push	{r3, r4, r5, lr}
 80056e6:	4605      	mov	r5, r0
 80056e8:	2900      	cmp	r1, #0
 80056ea:	d043      	beq.n	8005774 <_free_r+0x90>
 80056ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056f0:	1f0c      	subs	r4, r1, #4
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	bfb8      	it	lt
 80056f6:	18e4      	addlt	r4, r4, r3
 80056f8:	f000 f884 	bl	8005804 <__malloc_lock>
 80056fc:	4a1e      	ldr	r2, [pc, #120]	; (8005778 <_free_r+0x94>)
 80056fe:	6813      	ldr	r3, [r2, #0]
 8005700:	4610      	mov	r0, r2
 8005702:	b933      	cbnz	r3, 8005712 <_free_r+0x2e>
 8005704:	6063      	str	r3, [r4, #4]
 8005706:	6014      	str	r4, [r2, #0]
 8005708:	4628      	mov	r0, r5
 800570a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800570e:	f000 b87a 	b.w	8005806 <__malloc_unlock>
 8005712:	42a3      	cmp	r3, r4
 8005714:	d90b      	bls.n	800572e <_free_r+0x4a>
 8005716:	6821      	ldr	r1, [r4, #0]
 8005718:	1862      	adds	r2, r4, r1
 800571a:	4293      	cmp	r3, r2
 800571c:	bf01      	itttt	eq
 800571e:	681a      	ldreq	r2, [r3, #0]
 8005720:	685b      	ldreq	r3, [r3, #4]
 8005722:	1852      	addeq	r2, r2, r1
 8005724:	6022      	streq	r2, [r4, #0]
 8005726:	6063      	str	r3, [r4, #4]
 8005728:	6004      	str	r4, [r0, #0]
 800572a:	e7ed      	b.n	8005708 <_free_r+0x24>
 800572c:	4613      	mov	r3, r2
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	b10a      	cbz	r2, 8005736 <_free_r+0x52>
 8005732:	42a2      	cmp	r2, r4
 8005734:	d9fa      	bls.n	800572c <_free_r+0x48>
 8005736:	6819      	ldr	r1, [r3, #0]
 8005738:	1858      	adds	r0, r3, r1
 800573a:	42a0      	cmp	r0, r4
 800573c:	d10b      	bne.n	8005756 <_free_r+0x72>
 800573e:	6820      	ldr	r0, [r4, #0]
 8005740:	4401      	add	r1, r0
 8005742:	1858      	adds	r0, r3, r1
 8005744:	4282      	cmp	r2, r0
 8005746:	6019      	str	r1, [r3, #0]
 8005748:	d1de      	bne.n	8005708 <_free_r+0x24>
 800574a:	6810      	ldr	r0, [r2, #0]
 800574c:	6852      	ldr	r2, [r2, #4]
 800574e:	4401      	add	r1, r0
 8005750:	6019      	str	r1, [r3, #0]
 8005752:	605a      	str	r2, [r3, #4]
 8005754:	e7d8      	b.n	8005708 <_free_r+0x24>
 8005756:	d902      	bls.n	800575e <_free_r+0x7a>
 8005758:	230c      	movs	r3, #12
 800575a:	602b      	str	r3, [r5, #0]
 800575c:	e7d4      	b.n	8005708 <_free_r+0x24>
 800575e:	6820      	ldr	r0, [r4, #0]
 8005760:	1821      	adds	r1, r4, r0
 8005762:	428a      	cmp	r2, r1
 8005764:	bf01      	itttt	eq
 8005766:	6811      	ldreq	r1, [r2, #0]
 8005768:	6852      	ldreq	r2, [r2, #4]
 800576a:	1809      	addeq	r1, r1, r0
 800576c:	6021      	streq	r1, [r4, #0]
 800576e:	6062      	str	r2, [r4, #4]
 8005770:	605c      	str	r4, [r3, #4]
 8005772:	e7c9      	b.n	8005708 <_free_r+0x24>
 8005774:	bd38      	pop	{r3, r4, r5, pc}
 8005776:	bf00      	nop
 8005778:	20000448 	.word	0x20000448

0800577c <_raise_r>:
 800577c:	291f      	cmp	r1, #31
 800577e:	b538      	push	{r3, r4, r5, lr}
 8005780:	4604      	mov	r4, r0
 8005782:	460d      	mov	r5, r1
 8005784:	d904      	bls.n	8005790 <_raise_r+0x14>
 8005786:	2316      	movs	r3, #22
 8005788:	6003      	str	r3, [r0, #0]
 800578a:	f04f 30ff 	mov.w	r0, #4294967295
 800578e:	bd38      	pop	{r3, r4, r5, pc}
 8005790:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005792:	b112      	cbz	r2, 800579a <_raise_r+0x1e>
 8005794:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005798:	b94b      	cbnz	r3, 80057ae <_raise_r+0x32>
 800579a:	4620      	mov	r0, r4
 800579c:	f000 f830 	bl	8005800 <_getpid_r>
 80057a0:	462a      	mov	r2, r5
 80057a2:	4601      	mov	r1, r0
 80057a4:	4620      	mov	r0, r4
 80057a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80057aa:	f000 b817 	b.w	80057dc <_kill_r>
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d00a      	beq.n	80057c8 <_raise_r+0x4c>
 80057b2:	1c59      	adds	r1, r3, #1
 80057b4:	d103      	bne.n	80057be <_raise_r+0x42>
 80057b6:	2316      	movs	r3, #22
 80057b8:	6003      	str	r3, [r0, #0]
 80057ba:	2001      	movs	r0, #1
 80057bc:	bd38      	pop	{r3, r4, r5, pc}
 80057be:	2400      	movs	r4, #0
 80057c0:	4628      	mov	r0, r5
 80057c2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80057c6:	4798      	blx	r3
 80057c8:	2000      	movs	r0, #0
 80057ca:	bd38      	pop	{r3, r4, r5, pc}

080057cc <raise>:
 80057cc:	4b02      	ldr	r3, [pc, #8]	; (80057d8 <raise+0xc>)
 80057ce:	4601      	mov	r1, r0
 80057d0:	6818      	ldr	r0, [r3, #0]
 80057d2:	f7ff bfd3 	b.w	800577c <_raise_r>
 80057d6:	bf00      	nop
 80057d8:	20000024 	.word	0x20000024

080057dc <_kill_r>:
 80057dc:	b538      	push	{r3, r4, r5, lr}
 80057de:	2300      	movs	r3, #0
 80057e0:	4c06      	ldr	r4, [pc, #24]	; (80057fc <_kill_r+0x20>)
 80057e2:	4605      	mov	r5, r0
 80057e4:	4608      	mov	r0, r1
 80057e6:	4611      	mov	r1, r2
 80057e8:	6023      	str	r3, [r4, #0]
 80057ea:	f000 f815 	bl	8005818 <_kill>
 80057ee:	1c43      	adds	r3, r0, #1
 80057f0:	d102      	bne.n	80057f8 <_kill_r+0x1c>
 80057f2:	6823      	ldr	r3, [r4, #0]
 80057f4:	b103      	cbz	r3, 80057f8 <_kill_r+0x1c>
 80057f6:	602b      	str	r3, [r5, #0]
 80057f8:	bd38      	pop	{r3, r4, r5, pc}
 80057fa:	bf00      	nop
 80057fc:	20000454 	.word	0x20000454

08005800 <_getpid_r>:
 8005800:	f000 b802 	b.w	8005808 <_getpid>

08005804 <__malloc_lock>:
 8005804:	4770      	bx	lr

08005806 <__malloc_unlock>:
 8005806:	4770      	bx	lr

08005808 <_getpid>:
 8005808:	2258      	movs	r2, #88	; 0x58
 800580a:	4b02      	ldr	r3, [pc, #8]	; (8005814 <_getpid+0xc>)
 800580c:	f04f 30ff 	mov.w	r0, #4294967295
 8005810:	601a      	str	r2, [r3, #0]
 8005812:	4770      	bx	lr
 8005814:	20000454 	.word	0x20000454

08005818 <_kill>:
 8005818:	2258      	movs	r2, #88	; 0x58
 800581a:	4b02      	ldr	r3, [pc, #8]	; (8005824 <_kill+0xc>)
 800581c:	f04f 30ff 	mov.w	r0, #4294967295
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	4770      	bx	lr
 8005824:	20000454 	.word	0x20000454

08005828 <_exit>:
 8005828:	e7fe      	b.n	8005828 <_exit>
	...

0800582c <_init>:
 800582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800582e:	bf00      	nop
 8005830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005832:	bc08      	pop	{r3}
 8005834:	469e      	mov	lr, r3
 8005836:	4770      	bx	lr

08005838 <_fini>:
 8005838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583a:	bf00      	nop
 800583c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800583e:	bc08      	pop	{r3}
 8005840:	469e      	mov	lr, r3
 8005842:	4770      	bx	lr
