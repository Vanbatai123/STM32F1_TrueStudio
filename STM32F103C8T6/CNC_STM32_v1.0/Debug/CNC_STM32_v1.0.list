
CNC_STM32_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072ac  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000548  080073c0  080073c0  000173c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08007908  08007908  00017908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800790c  0800790c  0001790c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001ec  20000000  08007910  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000ac  200001ec  08007afc  000201ec  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  20000298  08007afc  00020298  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
  9 .debug_info   00009f88  00000000  00000000  00020215  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001e31  00000000  00000000  0002a19d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000006c0  00000000  00000000  0002bfd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000005e8  00000000  00000000  0002c690  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00003761  00000000  00000000  0002cc78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000023b3  00000000  00000000  000303d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003278c  2**0
                  CONTENTS, READONLY
 16 .debug_frame  0000283c  00000000  00000000  00032808  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  00035044  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001ec 	.word	0x200001ec
 800012c:	00000000 	.word	0x00000000
 8000130:	080073a4 	.word	0x080073a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f0 	.word	0x200001f0
 800014c:	080073a4 	.word	0x080073a4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_d2uiz>:
 8000a80:	004a      	lsls	r2, r1, #1
 8000a82:	d211      	bcs.n	8000aa8 <__aeabi_d2uiz+0x28>
 8000a84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a88:	d211      	bcs.n	8000aae <__aeabi_d2uiz+0x2e>
 8000a8a:	d50d      	bpl.n	8000aa8 <__aeabi_d2uiz+0x28>
 8000a8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a94:	d40e      	bmi.n	8000ab4 <__aeabi_d2uiz+0x34>
 8000a96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	4770      	bx	lr
 8000aa8:	f04f 0000 	mov.w	r0, #0
 8000aac:	4770      	bx	lr
 8000aae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab2:	d102      	bne.n	8000aba <__aeabi_d2uiz+0x3a>
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	4770      	bx	lr
 8000aba:	f04f 0000 	mov.w	r0, #0
 8000abe:	4770      	bx	lr

08000ac0 <__aeabi_d2f>:
 8000ac0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ac8:	bf24      	itt	cs
 8000aca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ace:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad2:	d90d      	bls.n	8000af0 <__aeabi_d2f+0x30>
 8000ad4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ad8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000adc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ae8:	bf08      	it	eq
 8000aea:	f020 0001 	biceq.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af4:	d121      	bne.n	8000b3a <__aeabi_d2f+0x7a>
 8000af6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afa:	bfbc      	itt	lt
 8000afc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b00:	4770      	bxlt	lr
 8000b02:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b06:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0a:	f1c2 0218 	rsb	r2, r2, #24
 8000b0e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b12:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b16:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1a:	bf18      	it	ne
 8000b1c:	f040 0001 	orrne.w	r0, r0, #1
 8000b20:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b24:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b28:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b2c:	ea40 000c 	orr.w	r0, r0, ip
 8000b30:	fa23 f302 	lsr.w	r3, r3, r2
 8000b34:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b38:	e7cc      	b.n	8000ad4 <__aeabi_d2f+0x14>
 8000b3a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b3e:	d107      	bne.n	8000b50 <__aeabi_d2f+0x90>
 8000b40:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b44:	bf1e      	ittt	ne
 8000b46:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b4e:	4770      	bxne	lr
 8000b50:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b54:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b58:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop

08000b60 <__aeabi_frsub>:
 8000b60:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b64:	e002      	b.n	8000b6c <__addsf3>
 8000b66:	bf00      	nop

08000b68 <__aeabi_fsub>:
 8000b68:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b6c <__addsf3>:
 8000b6c:	0042      	lsls	r2, r0, #1
 8000b6e:	bf1f      	itttt	ne
 8000b70:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b74:	ea92 0f03 	teqne	r2, r3
 8000b78:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b7c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b80:	d06a      	beq.n	8000c58 <__addsf3+0xec>
 8000b82:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b86:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b8a:	bfc1      	itttt	gt
 8000b8c:	18d2      	addgt	r2, r2, r3
 8000b8e:	4041      	eorgt	r1, r0
 8000b90:	4048      	eorgt	r0, r1
 8000b92:	4041      	eorgt	r1, r0
 8000b94:	bfb8      	it	lt
 8000b96:	425b      	neglt	r3, r3
 8000b98:	2b19      	cmp	r3, #25
 8000b9a:	bf88      	it	hi
 8000b9c:	4770      	bxhi	lr
 8000b9e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ba2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4240      	negne	r0, r0
 8000bae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bb2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bb6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bba:	bf18      	it	ne
 8000bbc:	4249      	negne	r1, r1
 8000bbe:	ea92 0f03 	teq	r2, r3
 8000bc2:	d03f      	beq.n	8000c44 <__addsf3+0xd8>
 8000bc4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bc8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bcc:	eb10 000c 	adds.w	r0, r0, ip
 8000bd0:	f1c3 0320 	rsb	r3, r3, #32
 8000bd4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bd8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bdc:	d502      	bpl.n	8000be4 <__addsf3+0x78>
 8000bde:	4249      	negs	r1, r1
 8000be0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000be4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000be8:	d313      	bcc.n	8000c12 <__addsf3+0xa6>
 8000bea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bee:	d306      	bcc.n	8000bfe <__addsf3+0x92>
 8000bf0:	0840      	lsrs	r0, r0, #1
 8000bf2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bf6:	f102 0201 	add.w	r2, r2, #1
 8000bfa:	2afe      	cmp	r2, #254	; 0xfe
 8000bfc:	d251      	bcs.n	8000ca2 <__addsf3+0x136>
 8000bfe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	ea40 0003 	orr.w	r0, r0, r3
 8000c10:	4770      	bx	lr
 8000c12:	0049      	lsls	r1, r1, #1
 8000c14:	eb40 0000 	adc.w	r0, r0, r0
 8000c18:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c1c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c20:	d1ed      	bne.n	8000bfe <__addsf3+0x92>
 8000c22:	fab0 fc80 	clz	ip, r0
 8000c26:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c2a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c2e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c32:	bfaa      	itet	ge
 8000c34:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c38:	4252      	neglt	r2, r2
 8000c3a:	4318      	orrge	r0, r3
 8000c3c:	bfbc      	itt	lt
 8000c3e:	40d0      	lsrlt	r0, r2
 8000c40:	4318      	orrlt	r0, r3
 8000c42:	4770      	bx	lr
 8000c44:	f092 0f00 	teq	r2, #0
 8000c48:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c4c:	bf06      	itte	eq
 8000c4e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c52:	3201      	addeq	r2, #1
 8000c54:	3b01      	subne	r3, #1
 8000c56:	e7b5      	b.n	8000bc4 <__addsf3+0x58>
 8000c58:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c5c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c60:	bf18      	it	ne
 8000c62:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c66:	d021      	beq.n	8000cac <__addsf3+0x140>
 8000c68:	ea92 0f03 	teq	r2, r3
 8000c6c:	d004      	beq.n	8000c78 <__addsf3+0x10c>
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	bf08      	it	eq
 8000c74:	4608      	moveq	r0, r1
 8000c76:	4770      	bx	lr
 8000c78:	ea90 0f01 	teq	r0, r1
 8000c7c:	bf1c      	itt	ne
 8000c7e:	2000      	movne	r0, #0
 8000c80:	4770      	bxne	lr
 8000c82:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c86:	d104      	bne.n	8000c92 <__addsf3+0x126>
 8000c88:	0040      	lsls	r0, r0, #1
 8000c8a:	bf28      	it	cs
 8000c8c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c90:	4770      	bx	lr
 8000c92:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c96:	bf3c      	itt	cc
 8000c98:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c9c:	4770      	bxcc	lr
 8000c9e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ca6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000caa:	4770      	bx	lr
 8000cac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb0:	bf16      	itet	ne
 8000cb2:	4608      	movne	r0, r1
 8000cb4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cb8:	4601      	movne	r1, r0
 8000cba:	0242      	lsls	r2, r0, #9
 8000cbc:	bf06      	itte	eq
 8000cbe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cc2:	ea90 0f01 	teqeq	r0, r1
 8000cc6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cca:	4770      	bx	lr

08000ccc <__aeabi_ui2f>:
 8000ccc:	f04f 0300 	mov.w	r3, #0
 8000cd0:	e004      	b.n	8000cdc <__aeabi_i2f+0x8>
 8000cd2:	bf00      	nop

08000cd4 <__aeabi_i2f>:
 8000cd4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cd8:	bf48      	it	mi
 8000cda:	4240      	negmi	r0, r0
 8000cdc:	ea5f 0c00 	movs.w	ip, r0
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ce8:	4601      	mov	r1, r0
 8000cea:	f04f 0000 	mov.w	r0, #0
 8000cee:	e01c      	b.n	8000d2a <__aeabi_l2f+0x2a>

08000cf0 <__aeabi_ul2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f04f 0300 	mov.w	r3, #0
 8000cfc:	e00a      	b.n	8000d14 <__aeabi_l2f+0x14>
 8000cfe:	bf00      	nop

08000d00 <__aeabi_l2f>:
 8000d00:	ea50 0201 	orrs.w	r2, r0, r1
 8000d04:	bf08      	it	eq
 8000d06:	4770      	bxeq	lr
 8000d08:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d0c:	d502      	bpl.n	8000d14 <__aeabi_l2f+0x14>
 8000d0e:	4240      	negs	r0, r0
 8000d10:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d14:	ea5f 0c01 	movs.w	ip, r1
 8000d18:	bf02      	ittt	eq
 8000d1a:	4684      	moveq	ip, r0
 8000d1c:	4601      	moveq	r1, r0
 8000d1e:	2000      	moveq	r0, #0
 8000d20:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d24:	bf08      	it	eq
 8000d26:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d2a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d2e:	fabc f28c 	clz	r2, ip
 8000d32:	3a08      	subs	r2, #8
 8000d34:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d38:	db10      	blt.n	8000d5c <__aeabi_l2f+0x5c>
 8000d3a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d3e:	4463      	add	r3, ip
 8000d40:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d44:	f1c2 0220 	rsb	r2, r2, #32
 8000d48:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d4c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d50:	eb43 0002 	adc.w	r0, r3, r2
 8000d54:	bf08      	it	eq
 8000d56:	f020 0001 	biceq.w	r0, r0, #1
 8000d5a:	4770      	bx	lr
 8000d5c:	f102 0220 	add.w	r2, r2, #32
 8000d60:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d64:	f1c2 0220 	rsb	r2, r2, #32
 8000d68:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d6c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d70:	eb43 0002 	adc.w	r0, r3, r2
 8000d74:	bf08      	it	eq
 8000d76:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d7a:	4770      	bx	lr

08000d7c <__aeabi_fmul>:
 8000d7c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d80:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d84:	bf1e      	ittt	ne
 8000d86:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d8a:	ea92 0f0c 	teqne	r2, ip
 8000d8e:	ea93 0f0c 	teqne	r3, ip
 8000d92:	d06f      	beq.n	8000e74 <__aeabi_fmul+0xf8>
 8000d94:	441a      	add	r2, r3
 8000d96:	ea80 0c01 	eor.w	ip, r0, r1
 8000d9a:	0240      	lsls	r0, r0, #9
 8000d9c:	bf18      	it	ne
 8000d9e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000da2:	d01e      	beq.n	8000de2 <__aeabi_fmul+0x66>
 8000da4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000da8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000dac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db0:	fba0 3101 	umull	r3, r1, r0, r1
 8000db4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000db8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dbc:	bf3e      	ittt	cc
 8000dbe:	0049      	lslcc	r1, r1, #1
 8000dc0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dc4:	005b      	lslcc	r3, r3, #1
 8000dc6:	ea40 0001 	orr.w	r0, r0, r1
 8000dca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dce:	2afd      	cmp	r2, #253	; 0xfd
 8000dd0:	d81d      	bhi.n	8000e0e <__aeabi_fmul+0x92>
 8000dd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dd6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dda:	bf08      	it	eq
 8000ddc:	f020 0001 	biceq.w	r0, r0, #1
 8000de0:	4770      	bx	lr
 8000de2:	f090 0f00 	teq	r0, #0
 8000de6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dea:	bf08      	it	eq
 8000dec:	0249      	lsleq	r1, r1, #9
 8000dee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000df2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000df6:	3a7f      	subs	r2, #127	; 0x7f
 8000df8:	bfc2      	ittt	gt
 8000dfa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dfe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e02:	4770      	bxgt	lr
 8000e04:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e08:	f04f 0300 	mov.w	r3, #0
 8000e0c:	3a01      	subs	r2, #1
 8000e0e:	dc5d      	bgt.n	8000ecc <__aeabi_fmul+0x150>
 8000e10:	f112 0f19 	cmn.w	r2, #25
 8000e14:	bfdc      	itt	le
 8000e16:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e1a:	4770      	bxle	lr
 8000e1c:	f1c2 0200 	rsb	r2, r2, #0
 8000e20:	0041      	lsls	r1, r0, #1
 8000e22:	fa21 f102 	lsr.w	r1, r1, r2
 8000e26:	f1c2 0220 	rsb	r2, r2, #32
 8000e2a:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e32:	f140 0000 	adc.w	r0, r0, #0
 8000e36:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e3a:	bf08      	it	eq
 8000e3c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e40:	4770      	bx	lr
 8000e42:	f092 0f00 	teq	r2, #0
 8000e46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e4a:	bf02      	ittt	eq
 8000e4c:	0040      	lsleq	r0, r0, #1
 8000e4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e52:	3a01      	subeq	r2, #1
 8000e54:	d0f9      	beq.n	8000e4a <__aeabi_fmul+0xce>
 8000e56:	ea40 000c 	orr.w	r0, r0, ip
 8000e5a:	f093 0f00 	teq	r3, #0
 8000e5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e62:	bf02      	ittt	eq
 8000e64:	0049      	lsleq	r1, r1, #1
 8000e66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e6a:	3b01      	subeq	r3, #1
 8000e6c:	d0f9      	beq.n	8000e62 <__aeabi_fmul+0xe6>
 8000e6e:	ea41 010c 	orr.w	r1, r1, ip
 8000e72:	e78f      	b.n	8000d94 <__aeabi_fmul+0x18>
 8000e74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e78:	ea92 0f0c 	teq	r2, ip
 8000e7c:	bf18      	it	ne
 8000e7e:	ea93 0f0c 	teqne	r3, ip
 8000e82:	d00a      	beq.n	8000e9a <__aeabi_fmul+0x11e>
 8000e84:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e88:	bf18      	it	ne
 8000e8a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e8e:	d1d8      	bne.n	8000e42 <__aeabi_fmul+0xc6>
 8000e90:	ea80 0001 	eor.w	r0, r0, r1
 8000e94:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e98:	4770      	bx	lr
 8000e9a:	f090 0f00 	teq	r0, #0
 8000e9e:	bf17      	itett	ne
 8000ea0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ea4:	4608      	moveq	r0, r1
 8000ea6:	f091 0f00 	teqne	r1, #0
 8000eaa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eae:	d014      	beq.n	8000eda <__aeabi_fmul+0x15e>
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	d101      	bne.n	8000eba <__aeabi_fmul+0x13e>
 8000eb6:	0242      	lsls	r2, r0, #9
 8000eb8:	d10f      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000eba:	ea93 0f0c 	teq	r3, ip
 8000ebe:	d103      	bne.n	8000ec8 <__aeabi_fmul+0x14c>
 8000ec0:	024b      	lsls	r3, r1, #9
 8000ec2:	bf18      	it	ne
 8000ec4:	4608      	movne	r0, r1
 8000ec6:	d108      	bne.n	8000eda <__aeabi_fmul+0x15e>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ed4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ed8:	4770      	bx	lr
 8000eda:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ede:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ee2:	4770      	bx	lr

08000ee4 <__aeabi_fdiv>:
 8000ee4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ee8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eec:	bf1e      	ittt	ne
 8000eee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ef2:	ea92 0f0c 	teqne	r2, ip
 8000ef6:	ea93 0f0c 	teqne	r3, ip
 8000efa:	d069      	beq.n	8000fd0 <__aeabi_fdiv+0xec>
 8000efc:	eba2 0203 	sub.w	r2, r2, r3
 8000f00:	ea80 0c01 	eor.w	ip, r0, r1
 8000f04:	0249      	lsls	r1, r1, #9
 8000f06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f0a:	d037      	beq.n	8000f7c <__aeabi_fdiv+0x98>
 8000f0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f1c:	428b      	cmp	r3, r1
 8000f1e:	bf38      	it	cc
 8000f20:	005b      	lslcc	r3, r3, #1
 8000f22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f2a:	428b      	cmp	r3, r1
 8000f2c:	bf24      	itt	cs
 8000f2e:	1a5b      	subcs	r3, r3, r1
 8000f30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f38:	bf24      	itt	cs
 8000f3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f46:	bf24      	itt	cs
 8000f48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f54:	bf24      	itt	cs
 8000f56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f5e:	011b      	lsls	r3, r3, #4
 8000f60:	bf18      	it	ne
 8000f62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f66:	d1e0      	bne.n	8000f2a <__aeabi_fdiv+0x46>
 8000f68:	2afd      	cmp	r2, #253	; 0xfd
 8000f6a:	f63f af50 	bhi.w	8000e0e <__aeabi_fmul+0x92>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f74:	bf08      	it	eq
 8000f76:	f020 0001 	biceq.w	r0, r0, #1
 8000f7a:	4770      	bx	lr
 8000f7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f84:	327f      	adds	r2, #127	; 0x7f
 8000f86:	bfc2      	ittt	gt
 8000f88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f90:	4770      	bxgt	lr
 8000f92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f96:	f04f 0300 	mov.w	r3, #0
 8000f9a:	3a01      	subs	r2, #1
 8000f9c:	e737      	b.n	8000e0e <__aeabi_fmul+0x92>
 8000f9e:	f092 0f00 	teq	r2, #0
 8000fa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fa6:	bf02      	ittt	eq
 8000fa8:	0040      	lsleq	r0, r0, #1
 8000faa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fae:	3a01      	subeq	r2, #1
 8000fb0:	d0f9      	beq.n	8000fa6 <__aeabi_fdiv+0xc2>
 8000fb2:	ea40 000c 	orr.w	r0, r0, ip
 8000fb6:	f093 0f00 	teq	r3, #0
 8000fba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fbe:	bf02      	ittt	eq
 8000fc0:	0049      	lsleq	r1, r1, #1
 8000fc2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fc6:	3b01      	subeq	r3, #1
 8000fc8:	d0f9      	beq.n	8000fbe <__aeabi_fdiv+0xda>
 8000fca:	ea41 010c 	orr.w	r1, r1, ip
 8000fce:	e795      	b.n	8000efc <__aeabi_fdiv+0x18>
 8000fd0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fd4:	ea92 0f0c 	teq	r2, ip
 8000fd8:	d108      	bne.n	8000fec <__aeabi_fdiv+0x108>
 8000fda:	0242      	lsls	r2, r0, #9
 8000fdc:	f47f af7d 	bne.w	8000eda <__aeabi_fmul+0x15e>
 8000fe0:	ea93 0f0c 	teq	r3, ip
 8000fe4:	f47f af70 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8000fe8:	4608      	mov	r0, r1
 8000fea:	e776      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000fec:	ea93 0f0c 	teq	r3, ip
 8000ff0:	d104      	bne.n	8000ffc <__aeabi_fdiv+0x118>
 8000ff2:	024b      	lsls	r3, r1, #9
 8000ff4:	f43f af4c 	beq.w	8000e90 <__aeabi_fmul+0x114>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	e76e      	b.n	8000eda <__aeabi_fmul+0x15e>
 8000ffc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001000:	bf18      	it	ne
 8001002:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8001006:	d1ca      	bne.n	8000f9e <__aeabi_fdiv+0xba>
 8001008:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 800100c:	f47f af5c 	bne.w	8000ec8 <__aeabi_fmul+0x14c>
 8001010:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8001014:	f47f af3c 	bne.w	8000e90 <__aeabi_fmul+0x114>
 8001018:	e75f      	b.n	8000eda <__aeabi_fmul+0x15e>
 800101a:	bf00      	nop

0800101c <__gesf2>:
 800101c:	f04f 3cff 	mov.w	ip, #4294967295
 8001020:	e006      	b.n	8001030 <__cmpsf2+0x4>
 8001022:	bf00      	nop

08001024 <__lesf2>:
 8001024:	f04f 0c01 	mov.w	ip, #1
 8001028:	e002      	b.n	8001030 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__cmpsf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	f84d cd04 	str.w	ip, [sp, #-4]!
 8001034:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001038:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800103c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001040:	bf18      	it	ne
 8001042:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8001046:	d011      	beq.n	800106c <__cmpsf2+0x40>
 8001048:	b001      	add	sp, #4
 800104a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800104e:	bf18      	it	ne
 8001050:	ea90 0f01 	teqne	r0, r1
 8001054:	bf58      	it	pl
 8001056:	ebb2 0003 	subspl.w	r0, r2, r3
 800105a:	bf88      	it	hi
 800105c:	17c8      	asrhi	r0, r1, #31
 800105e:	bf38      	it	cc
 8001060:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8001064:	bf18      	it	ne
 8001066:	f040 0001 	orrne.w	r0, r0, #1
 800106a:	4770      	bx	lr
 800106c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001070:	d102      	bne.n	8001078 <__cmpsf2+0x4c>
 8001072:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001076:	d105      	bne.n	8001084 <__cmpsf2+0x58>
 8001078:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800107c:	d1e4      	bne.n	8001048 <__cmpsf2+0x1c>
 800107e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8001082:	d0e1      	beq.n	8001048 <__cmpsf2+0x1c>
 8001084:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop

0800108c <__aeabi_cfrcmple>:
 800108c:	4684      	mov	ip, r0
 800108e:	4608      	mov	r0, r1
 8001090:	4661      	mov	r1, ip
 8001092:	e7ff      	b.n	8001094 <__aeabi_cfcmpeq>

08001094 <__aeabi_cfcmpeq>:
 8001094:	b50f      	push	{r0, r1, r2, r3, lr}
 8001096:	f7ff ffc9 	bl	800102c <__cmpsf2>
 800109a:	2800      	cmp	r0, #0
 800109c:	bf48      	it	mi
 800109e:	f110 0f00 	cmnmi.w	r0, #0
 80010a2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010a4 <__aeabi_fcmpeq>:
 80010a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010a8:	f7ff fff4 	bl	8001094 <__aeabi_cfcmpeq>
 80010ac:	bf0c      	ite	eq
 80010ae:	2001      	moveq	r0, #1
 80010b0:	2000      	movne	r0, #0
 80010b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010b6:	bf00      	nop

080010b8 <__aeabi_fcmplt>:
 80010b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010bc:	f7ff ffea 	bl	8001094 <__aeabi_cfcmpeq>
 80010c0:	bf34      	ite	cc
 80010c2:	2001      	movcc	r0, #1
 80010c4:	2000      	movcs	r0, #0
 80010c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ca:	bf00      	nop

080010cc <__aeabi_fcmple>:
 80010cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d0:	f7ff ffe0 	bl	8001094 <__aeabi_cfcmpeq>
 80010d4:	bf94      	ite	ls
 80010d6:	2001      	movls	r0, #1
 80010d8:	2000      	movhi	r0, #0
 80010da:	f85d fb08 	ldr.w	pc, [sp], #8
 80010de:	bf00      	nop

080010e0 <__aeabi_fcmpge>:
 80010e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e4:	f7ff ffd2 	bl	800108c <__aeabi_cfrcmple>
 80010e8:	bf94      	ite	ls
 80010ea:	2001      	movls	r0, #1
 80010ec:	2000      	movhi	r0, #0
 80010ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80010f2:	bf00      	nop

080010f4 <__aeabi_fcmpgt>:
 80010f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f8:	f7ff ffc8 	bl	800108c <__aeabi_cfrcmple>
 80010fc:	bf34      	ite	cc
 80010fe:	2001      	movcc	r0, #1
 8001100:	2000      	movcs	r0, #0
 8001102:	f85d fb08 	ldr.w	pc, [sp], #8
 8001106:	bf00      	nop

08001108 <__aeabi_f2iz>:
 8001108:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800110c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001110:	d30f      	bcc.n	8001132 <__aeabi_f2iz+0x2a>
 8001112:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8001116:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800111a:	d90d      	bls.n	8001138 <__aeabi_f2iz+0x30>
 800111c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001120:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001124:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8001128:	fa23 f002 	lsr.w	r0, r3, r2
 800112c:	bf18      	it	ne
 800112e:	4240      	negne	r0, r0
 8001130:	4770      	bx	lr
 8001132:	f04f 0000 	mov.w	r0, #0
 8001136:	4770      	bx	lr
 8001138:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800113c:	d101      	bne.n	8001142 <__aeabi_f2iz+0x3a>
 800113e:	0242      	lsls	r2, r0, #9
 8001140:	d105      	bne.n	800114e <__aeabi_f2iz+0x46>
 8001142:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8001146:	bf08      	it	eq
 8001148:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800114c:	4770      	bx	lr
 800114e:	f04f 0000 	mov.w	r0, #0
 8001152:	4770      	bx	lr

08001154 <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for pre-emption priority
  *                                0 bits for subpriority
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 800115c:	4a05      	ldr	r2, [pc, #20]	; (8001174 <NVIC_PriorityGroupConfig+0x20>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001168:	60d3      	str	r3, [r2, #12]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 8001178:	b480      	push	{r7}
 800117a:	b087      	sub	sp, #28
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 8001180:	2300      	movs	r3, #0
 8001182:	617b      	str	r3, [r7, #20]
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	230f      	movs	r3, #15
 800118a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	78db      	ldrb	r3, [r3, #3]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d03a      	beq.n	800120a <NVIC_Init+0x92>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 8001194:	4b27      	ldr	r3, [pc, #156]	; (8001234 <NVIC_Init+0xbc>)
 8001196:	68db      	ldr	r3, [r3, #12]
 8001198:	43db      	mvns	r3, r3
 800119a:	0a1b      	lsrs	r3, r3, #8
 800119c:	f003 0307 	and.w	r3, r3, #7
 80011a0:	617b      	str	r3, [r7, #20]
    tmppre = (0x4 - tmppriority);
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	f1c3 0304 	rsb	r3, r3, #4
 80011a8:	613b      	str	r3, [r7, #16]
    tmpsub = tmpsub >> tmppriority;
 80011aa:	68fa      	ldr	r2, [r7, #12]
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	fa22 f303 	lsr.w	r3, r2, r3
 80011b2:	60fb      	str	r3, [r7, #12]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	785b      	ldrb	r3, [r3, #1]
 80011b8:	461a      	mov	r2, r3
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	fa02 f303 	lsl.w	r3, r2, r3
 80011c0:	617b      	str	r3, [r7, #20]
    tmppriority |=  NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	789b      	ldrb	r3, [r3, #2]
 80011c6:	461a      	mov	r2, r3
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4013      	ands	r3, r2
 80011cc:	697a      	ldr	r2, [r7, #20]
 80011ce:	4313      	orrs	r3, r2
 80011d0:	617b      	str	r3, [r7, #20]
    tmppriority = tmppriority << 0x04;
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	617b      	str	r3, [r7, #20]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 80011d8:	4a17      	ldr	r2, [pc, #92]	; (8001238 <NVIC_Init+0xc0>)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	6979      	ldr	r1, [r7, #20]
 80011e0:	b2c9      	uxtb	r1, r1
 80011e2:	4413      	add	r3, r2
 80011e4:	460a      	mov	r2, r1
 80011e6:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 80011ea:	4a13      	ldr	r2, [pc, #76]	; (8001238 <NVIC_Init+0xc0>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	095b      	lsrs	r3, r3, #5
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	781b      	ldrb	r3, [r3, #0]
 80011fa:	f003 031f 	and.w	r3, r3, #31
 80011fe:	2101      	movs	r1, #1
 8001200:	fa01 f303 	lsl.w	r3, r1, r3
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001204:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8001208:	e00f      	b.n	800122a <NVIC_Init+0xb2>
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800120a:	490b      	ldr	r1, [pc, #44]	; (8001238 <NVIC_Init+0xc0>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	095b      	lsrs	r3, r3, #5
 8001212:	b2db      	uxtb	r3, r3
 8001214:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	f003 031f 	and.w	r3, r3, #31
 800121e:	2201      	movs	r2, #1
 8001220:	409a      	lsls	r2, r3
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8001222:	f100 0320 	add.w	r3, r0, #32
 8001226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800122a:	bf00      	nop
 800122c:	371c      	adds	r7, #28
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	e000ed00 	.word	0xe000ed00
 8001238:	e000e100 	.word	0xe000e100

0800123c <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 8001248:	4b34      	ldr	r3, [pc, #208]	; (800131c <EXTI_Init+0xe0>)
 800124a:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	799b      	ldrb	r3, [r3, #6]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d04f      	beq.n	80012f4 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 8001254:	4931      	ldr	r1, [pc, #196]	; (800131c <EXTI_Init+0xe0>)
 8001256:	4b31      	ldr	r3, [pc, #196]	; (800131c <EXTI_Init+0xe0>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	43db      	mvns	r3, r3
 8001260:	4013      	ands	r3, r2
 8001262:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 8001264:	492d      	ldr	r1, [pc, #180]	; (800131c <EXTI_Init+0xe0>)
 8001266:	4b2d      	ldr	r3, [pc, #180]	; (800131c <EXTI_Init+0xe0>)
 8001268:	685a      	ldr	r2, [r3, #4]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	43db      	mvns	r3, r3
 8001270:	4013      	ands	r3, r2
 8001272:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	791b      	ldrb	r3, [r3, #4]
 8001278:	461a      	mov	r2, r3
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	4413      	add	r3, r2
 800127e:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	68fa      	ldr	r2, [r7, #12]
 8001284:	6811      	ldr	r1, [r2, #0]
 8001286:	687a      	ldr	r2, [r7, #4]
 8001288:	6812      	ldr	r2, [r2, #0]
 800128a:	430a      	orrs	r2, r1
 800128c:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 800128e:	4923      	ldr	r1, [pc, #140]	; (800131c <EXTI_Init+0xe0>)
 8001290:	4b22      	ldr	r3, [pc, #136]	; (800131c <EXTI_Init+0xe0>)
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	43db      	mvns	r3, r3
 800129a:	4013      	ands	r3, r2
 800129c:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 800129e:	491f      	ldr	r1, [pc, #124]	; (800131c <EXTI_Init+0xe0>)
 80012a0:	4b1e      	ldr	r3, [pc, #120]	; (800131c <EXTI_Init+0xe0>)
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	4013      	ands	r3, r2
 80012ac:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	795b      	ldrb	r3, [r3, #5]
 80012b2:	2b10      	cmp	r3, #16
 80012b4:	d10e      	bne.n	80012d4 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 80012b6:	4919      	ldr	r1, [pc, #100]	; (800131c <EXTI_Init+0xe0>)
 80012b8:	4b18      	ldr	r3, [pc, #96]	; (800131c <EXTI_Init+0xe0>)
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 80012c4:	4915      	ldr	r1, [pc, #84]	; (800131c <EXTI_Init+0xe0>)
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <EXTI_Init+0xe0>)
 80012c8:	68da      	ldr	r2, [r3, #12]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 80012d2:	e01d      	b.n	8001310 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 80012d4:	4b11      	ldr	r3, [pc, #68]	; (800131c <EXTI_Init+0xe0>)
 80012d6:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	795b      	ldrb	r3, [r3, #5]
 80012dc:	461a      	mov	r2, r3
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	4413      	add	r3, r2
 80012e2:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	6811      	ldr	r1, [r2, #0]
 80012ea:	687a      	ldr	r2, [r7, #4]
 80012ec:	6812      	ldr	r2, [r2, #0]
 80012ee:	430a      	orrs	r2, r1
 80012f0:	601a      	str	r2, [r3, #0]
}
 80012f2:	e00d      	b.n	8001310 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	791b      	ldrb	r3, [r3, #4]
 80012f8:	461a      	mov	r2, r3
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	4413      	add	r3, r2
 80012fe:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	68fa      	ldr	r2, [r7, #12]
 8001304:	6811      	ldr	r1, [r2, #0]
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	6812      	ldr	r2, [r2, #0]
 800130a:	43d2      	mvns	r2, r2
 800130c:	400a      	ands	r2, r1
 800130e:	601a      	str	r2, [r3, #0]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	40010400 	.word	0x40010400

08001320 <EXTI_GetITStatus>:
  *   This parameter can be:
  *     @arg EXTI_Linex: External interrupt line x where x(0..19)
  * @retval The new state of EXTI_Line (SET or RESET).
  */
ITStatus EXTI_GetITStatus(uint32_t EXTI_Line)
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8001328:	2300      	movs	r3, #0
 800132a:	73fb      	strb	r3, [r7, #15]
  uint32_t enablestatus = 0;
 800132c:	2300      	movs	r3, #0
 800132e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GET_EXTI_LINE(EXTI_Line));
  
  enablestatus =  EXTI->IMR & EXTI_Line;
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <EXTI_GetITStatus+0x44>)
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4013      	ands	r3, r2
 8001338:	60bb      	str	r3, [r7, #8]
  if (((EXTI->PR & EXTI_Line) != (uint32_t)RESET) && (enablestatus != (uint32_t)RESET))
 800133a:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <EXTI_GetITStatus+0x44>)
 800133c:	695a      	ldr	r2, [r3, #20]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4013      	ands	r3, r2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d005      	beq.n	8001352 <EXTI_GetITStatus+0x32>
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d002      	beq.n	8001352 <EXTI_GetITStatus+0x32>
  {
    bitstatus = SET;
 800134c:	2301      	movs	r3, #1
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	e001      	b.n	8001356 <EXTI_GetITStatus+0x36>
  }
  else
  {
    bitstatus = RESET;
 8001352:	2300      	movs	r3, #0
 8001354:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	bc80      	pop	{r7}
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40010400 	.word	0x40010400

08001368 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *   This parameter can be any combination of EXTI_Linex where x can be (0..19).
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 8001370:	4a03      	ldr	r2, [pc, #12]	; (8001380 <EXTI_ClearITPendingBit+0x18>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6153      	str	r3, [r2, #20]
}
 8001376:	bf00      	nop
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr
 8001380:	40010400 	.word	0x40010400

08001384 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	2300      	movs	r3, #0
 8001398:	61bb      	str	r3, [r7, #24]
 800139a:	2300      	movs	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	78db      	ldrb	r3, [r3, #3]
 80013aa:	f003 030f 	and.w	r3, r3, #15
 80013ae:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	78db      	ldrb	r3, [r3, #3]
 80013b4:	f003 0310 	and.w	r3, r3, #16
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d005      	beq.n	80013c8 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	789b      	ldrb	r3, [r3, #2]
 80013c0:	461a      	mov	r2, r3
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	4313      	orrs	r3, r2
 80013c6:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d044      	beq.n	800145c <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80013d8:	2300      	movs	r3, #0
 80013da:	61bb      	str	r3, [r7, #24]
 80013dc:	e038      	b.n	8001450 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80013de:	2201      	movs	r2, #1
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	461a      	mov	r2, r3
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4013      	ands	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d126      	bne.n	800144a <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80013fc:	69bb      	ldr	r3, [r7, #24]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001402:	220f      	movs	r2, #15
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	fa02 f303 	lsl.w	r3, r2, r3
 800140a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	43db      	mvns	r3, r3
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	4013      	ands	r3, r2
 8001414:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8001416:	69fa      	ldr	r2, [r7, #28]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	4313      	orrs	r3, r2
 8001422:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	78db      	ldrb	r3, [r3, #3]
 8001428:	2b28      	cmp	r3, #40	; 0x28
 800142a:	d105      	bne.n	8001438 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 800142c:	2201      	movs	r2, #1
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	409a      	lsls	r2, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	615a      	str	r2, [r3, #20]
 8001436:	e008      	b.n	800144a <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	78db      	ldrb	r3, [r3, #3]
 800143c:	2b48      	cmp	r3, #72	; 0x48
 800143e:	d104      	bne.n	800144a <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8001440:	2201      	movs	r2, #1
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	409a      	lsls	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800144a:	69bb      	ldr	r3, [r7, #24]
 800144c:	3301      	adds	r3, #1
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2b07      	cmp	r3, #7
 8001454:	d9c3      	bls.n	80013de <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	697a      	ldr	r2, [r7, #20]
 800145a:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	881b      	ldrh	r3, [r3, #0]
 8001460:	2bff      	cmp	r3, #255	; 0xff
 8001462:	d946      	bls.n	80014f2 <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
 800146e:	e03a      	b.n	80014e6 <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	3308      	adds	r3, #8
 8001474:	2201      	movs	r2, #1
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	881b      	ldrh	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	429a      	cmp	r2, r3
 800148e:	d127      	bne.n	80014e0 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 8001496:	220f      	movs	r2, #15
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	43db      	mvns	r3, r3
 80014a4:	697a      	ldr	r2, [r7, #20]
 80014a6:	4013      	ands	r3, r2
 80014a8:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80014aa:	69fa      	ldr	r2, [r7, #28]
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	697a      	ldr	r2, [r7, #20]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	78db      	ldrb	r3, [r3, #3]
 80014bc:	2b28      	cmp	r3, #40	; 0x28
 80014be:	d105      	bne.n	80014cc <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	3308      	adds	r3, #8
 80014c4:	2201      	movs	r2, #1
 80014c6:	409a      	lsls	r2, r3
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	78db      	ldrb	r3, [r3, #3]
 80014d0:	2b48      	cmp	r3, #72	; 0x48
 80014d2:	d105      	bne.n	80014e0 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	3308      	adds	r3, #8
 80014d8:	2201      	movs	r2, #1
 80014da:	409a      	lsls	r2, r3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80014e0:	69bb      	ldr	r3, [r7, #24]
 80014e2:	3301      	adds	r3, #1
 80014e4:	61bb      	str	r3, [r7, #24]
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	2b07      	cmp	r3, #7
 80014ea:	d9c1      	bls.n	8001470 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	605a      	str	r2, [r3, #4]
  }
}
 80014f2:	bf00      	nop
 80014f4:	3724      	adds	r7, #36	; 0x24
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <GPIO_EXTILineConfig>:
  * @param  GPIO_PinSource: specifies the EXTI line to be configured.
  *   This parameter can be GPIO_PinSourcex where x can be (0..15).
  * @retval None
  */
void GPIO_EXTILineConfig(uint8_t GPIO_PortSource, uint8_t GPIO_PinSource)
{
 80014fc:	b490      	push	{r4, r7}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	460a      	mov	r2, r1
 8001506:	71fb      	strb	r3, [r7, #7]
 8001508:	4613      	mov	r3, r2
 800150a:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_GPIO_EXTI_PORT_SOURCE(GPIO_PortSource));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  
  tmp = ((uint32_t)0x0F) << (0x04 * (GPIO_PinSource & (uint8_t)0x03));
 8001510:	79bb      	ldrb	r3, [r7, #6]
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	220f      	movs	r2, #15
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	60fb      	str	r3, [r7, #12]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] &= ~tmp;
 8001520:	4916      	ldr	r1, [pc, #88]	; (800157c <GPIO_EXTILineConfig+0x80>)
 8001522:	79bb      	ldrb	r3, [r7, #6]
 8001524:	089b      	lsrs	r3, r3, #2
 8001526:	b2db      	uxtb	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	4a14      	ldr	r2, [pc, #80]	; (800157c <GPIO_EXTILineConfig+0x80>)
 800152c:	79bb      	ldrb	r3, [r7, #6]
 800152e:	089b      	lsrs	r3, r3, #2
 8001530:	b2db      	uxtb	r3, r3
 8001532:	3302      	adds	r3, #2
 8001534:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	43db      	mvns	r3, r3
 800153c:	401a      	ands	r2, r3
 800153e:	1c83      	adds	r3, r0, #2
 8001540:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  AFIO->EXTICR[GPIO_PinSource >> 0x02] |= (((uint32_t)GPIO_PortSource) << (0x04 * (GPIO_PinSource & (uint8_t)0x03)));
 8001544:	480d      	ldr	r0, [pc, #52]	; (800157c <GPIO_EXTILineConfig+0x80>)
 8001546:	79bb      	ldrb	r3, [r7, #6]
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	b2db      	uxtb	r3, r3
 800154c:	461c      	mov	r4, r3
 800154e:	4a0b      	ldr	r2, [pc, #44]	; (800157c <GPIO_EXTILineConfig+0x80>)
 8001550:	79bb      	ldrb	r3, [r7, #6]
 8001552:	089b      	lsrs	r3, r3, #2
 8001554:	b2db      	uxtb	r3, r3
 8001556:	3302      	adds	r3, #2
 8001558:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800155c:	79f9      	ldrb	r1, [r7, #7]
 800155e:	79bb      	ldrb	r3, [r7, #6]
 8001560:	f003 0303 	and.w	r3, r3, #3
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	431a      	orrs	r2, r3
 800156c:	1ca3      	adds	r3, r4, #2
 800156e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001572:	bf00      	nop
 8001574:	3710      	adds	r7, #16
 8001576:	46bd      	mov	sp, r7
 8001578:	bc90      	pop	{r4, r7}
 800157a:	4770      	bx	lr
 800157c:	40010000 	.word	0x40010000

08001580 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8001580:	b480      	push	{r7}
 8001582:	b087      	sub	sp, #28
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
 800158c:	2300      	movs	r3, #0
 800158e:	613b      	str	r3, [r7, #16]
 8001590:	2300      	movs	r3, #0
 8001592:	60fb      	str	r3, [r7, #12]
 8001594:	2300      	movs	r3, #0
 8001596:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 8001598:	4b4c      	ldr	r3, [pc, #304]	; (80016cc <RCC_GetClocksFreq+0x14c>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f003 030c 	and.w	r3, r3, #12
 80015a0:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d007      	beq.n	80015b8 <RCC_GetClocksFreq+0x38>
 80015a8:	2b08      	cmp	r3, #8
 80015aa:	d009      	beq.n	80015c0 <RCC_GetClocksFreq+0x40>
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d133      	bne.n	8001618 <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a47      	ldr	r2, [pc, #284]	; (80016d0 <RCC_GetClocksFreq+0x150>)
 80015b4:	601a      	str	r2, [r3, #0]
      break;
 80015b6:	e033      	b.n	8001620 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a45      	ldr	r2, [pc, #276]	; (80016d0 <RCC_GetClocksFreq+0x150>)
 80015bc:	601a      	str	r2, [r3, #0]
      break;
 80015be:	e02f      	b.n	8001620 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80015c0:	4b42      	ldr	r3, [pc, #264]	; (80016cc <RCC_GetClocksFreq+0x14c>)
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80015c8:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80015ca:	4b40      	ldr	r3, [pc, #256]	; (80016cc <RCC_GetClocksFreq+0x14c>)
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015d2:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80015d4:	693b      	ldr	r3, [r7, #16]
 80015d6:	0c9b      	lsrs	r3, r3, #18
 80015d8:	3302      	adds	r3, #2
 80015da:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d106      	bne.n	80015f0 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	4a3b      	ldr	r2, [pc, #236]	; (80016d4 <RCC_GetClocksFreq+0x154>)
 80015e6:	fb02 f203 	mul.w	r2, r2, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80015ee:	e017      	b.n	8001620 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80015f0:	4b36      	ldr	r3, [pc, #216]	; (80016cc <RCC_GetClocksFreq+0x14c>)
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d006      	beq.n	800160a <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	4a35      	ldr	r2, [pc, #212]	; (80016d4 <RCC_GetClocksFreq+0x154>)
 8001600:	fb02 f203 	mul.w	r2, r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	601a      	str	r2, [r3, #0]
      break;
 8001608:	e00a      	b.n	8001620 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	4a30      	ldr	r2, [pc, #192]	; (80016d0 <RCC_GetClocksFreq+0x150>)
 800160e:	fb02 f203 	mul.w	r2, r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	601a      	str	r2, [r3, #0]
      break;
 8001616:	e003      	b.n	8001620 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a2d      	ldr	r2, [pc, #180]	; (80016d0 <RCC_GetClocksFreq+0x150>)
 800161c:	601a      	str	r2, [r3, #0]
      break;
 800161e:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8001620:	4b2a      	ldr	r3, [pc, #168]	; (80016cc <RCC_GetClocksFreq+0x14c>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001628:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	091b      	lsrs	r3, r3, #4
 800162e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001630:	4a29      	ldr	r2, [pc, #164]	; (80016d8 <RCC_GetClocksFreq+0x158>)
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	4413      	add	r3, r2
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	b2db      	uxtb	r3, r3
 800163a:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	40da      	lsrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 8001648:	4b20      	ldr	r3, [pc, #128]	; (80016cc <RCC_GetClocksFreq+0x14c>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001650:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	0a1b      	lsrs	r3, r3, #8
 8001656:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001658:	4a1f      	ldr	r2, [pc, #124]	; (80016d8 <RCC_GetClocksFreq+0x158>)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	4413      	add	r3, r2
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	b2db      	uxtb	r3, r3
 8001662:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685a      	ldr	r2, [r3, #4]
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	40da      	lsrs	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8001670:	4b16      	ldr	r3, [pc, #88]	; (80016cc <RCC_GetClocksFreq+0x14c>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001678:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	0adb      	lsrs	r3, r3, #11
 800167e:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8001680:	4a15      	ldr	r2, [pc, #84]	; (80016d8 <RCC_GetClocksFreq+0x158>)
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	4413      	add	r3, r2
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	b2db      	uxtb	r3, r3
 800168a:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	685a      	ldr	r2, [r3, #4]
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	40da      	lsrs	r2, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <RCC_GetClocksFreq+0x14c>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80016a0:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	0b9b      	lsrs	r3, r3, #14
 80016a6:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 80016a8:	4a0c      	ldr	r2, [pc, #48]	; (80016dc <RCC_GetClocksFreq+0x15c>)
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	4413      	add	r3, r2
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	b2db      	uxtb	r3, r3
 80016b2:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	68da      	ldr	r2, [r3, #12]
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	611a      	str	r2, [r3, #16]
}
 80016c2:	bf00      	nop
 80016c4:	371c      	adds	r7, #28
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	40021000 	.word	0x40021000
 80016d0:	007a1200 	.word	0x007a1200
 80016d4:	003d0900 	.word	0x003d0900
 80016d8:	20000000 	.word	0x20000000
 80016dc:	20000010 	.word	0x20000010

080016e0 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80016ec:	78fb      	ldrb	r3, [r7, #3]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d006      	beq.n	8001700 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80016f2:	4909      	ldr	r1, [pc, #36]	; (8001718 <RCC_APB2PeriphClockCmd+0x38>)
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <RCC_APB2PeriphClockCmd+0x38>)
 80016f6:	699a      	ldr	r2, [r3, #24]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80016fe:	e006      	b.n	800170e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8001700:	4905      	ldr	r1, [pc, #20]	; (8001718 <RCC_APB2PeriphClockCmd+0x38>)
 8001702:	4b05      	ldr	r3, [pc, #20]	; (8001718 <RCC_APB2PeriphClockCmd+0x38>)
 8001704:	699a      	ldr	r2, [r3, #24]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	43db      	mvns	r3, r3
 800170a:	4013      	ands	r3, r2
 800170c:	618b      	str	r3, [r1, #24]
}
 800170e:	bf00      	nop
 8001710:	370c      	adds	r7, #12
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr
 8001718:	40021000 	.word	0x40021000

0800171c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	460b      	mov	r3, r1
 8001726:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d006      	beq.n	800173c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800172e:	4909      	ldr	r1, [pc, #36]	; (8001754 <RCC_APB1PeriphClockCmd+0x38>)
 8001730:	4b08      	ldr	r3, [pc, #32]	; (8001754 <RCC_APB1PeriphClockCmd+0x38>)
 8001732:	69da      	ldr	r2, [r3, #28]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	4313      	orrs	r3, r2
 8001738:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800173a:	e006      	b.n	800174a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800173c:	4905      	ldr	r1, [pc, #20]	; (8001754 <RCC_APB1PeriphClockCmd+0x38>)
 800173e:	4b05      	ldr	r3, [pc, #20]	; (8001754 <RCC_APB1PeriphClockCmd+0x38>)
 8001740:	69da      	ldr	r2, [r3, #28]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	43db      	mvns	r3, r3
 8001746:	4013      	ands	r3, r2
 8001748:	61cb      	str	r3, [r1, #28]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	bc80      	pop	{r7}
 8001752:	4770      	bx	lr
 8001754:	40021000 	.word	0x40021000

08001758 <USART_Init>:
  *         that contains the configuration information for the specified USART 
  *         peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08c      	sub	sp, #48	; 0x30
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8001762:	2300      	movs	r3, #0
 8001764:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001766:	2300      	movs	r3, #0
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t integerdivider = 0x00;
 800176a:	2300      	movs	r3, #0
 800176c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t fractionaldivider = 0x00;
 800176e:	2300      	movs	r3, #0
 8001770:	623b      	str	r3, [r7, #32]
  uint32_t usartxbase = 0;
 8001772:	2300      	movs	r3, #0
 8001774:	61fb      	str	r3, [r7, #28]
  if (USART_InitStruct->USART_HardwareFlowControl != USART_HardwareFlowControl_None)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }

  usartxbase = (uint32_t)USARTx;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	61fb      	str	r3, [r7, #28]

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	8a1b      	ldrh	r3, [r3, #16]
 800177e:	b29b      	uxth	r3, r3
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear STOP[13:12] bits */
  tmpreg &= CR2_STOP_CLEAR_Mask;
 8001782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001784:	f64c 73ff 	movw	r3, #53247	; 0xcfff
 8001788:	4013      	ands	r3, r2
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	88db      	ldrh	r3, [r3, #6]
 8001790:	461a      	mov	r2, r3
 8001792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001794:	4313      	orrs	r3, r2
 8001796:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8001798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179a:	b29a      	uxth	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	899b      	ldrh	r3, [r3, #12]
 80017a4:	b29b      	uxth	r3, r3
 80017a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= CR1_CLEAR_Mask;
 80017a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017aa:	f64e 13f3 	movw	r3, #59891	; 0xe9f3
 80017ae:	4013      	ands	r3, r2
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	889a      	ldrh	r2, [r3, #4]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	891b      	ldrh	r3, [r3, #8]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80017c2:	4313      	orrs	r3, r2
 80017c4:	b29b      	uxth	r3, r3
 80017c6:	461a      	mov	r2, r3
 80017c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ca:	4313      	orrs	r3, r2
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80017ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	8a9b      	ldrh	r3, [r3, #20]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Clear CTSE and RTSE bits */
  tmpreg &= CR3_CLEAR_Mask;
 80017de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017e0:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 80017e4:	4013      	ands	r3, r2
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	899b      	ldrh	r3, [r3, #12]
 80017ec:	461a      	mov	r2, r3
 80017ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f0:	4313      	orrs	r3, r2
 80017f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80017f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80017fc:	f107 0308 	add.w	r3, r7, #8
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff febd 	bl	8001580 <RCC_GetClocksFreq>
  if (usartxbase == USART1_BASE)
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	4a2e      	ldr	r2, [pc, #184]	; (80018c4 <USART_Init+0x16c>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d102      	bne.n	8001814 <USART_Init+0xbc>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	62bb      	str	r3, [r7, #40]	; 0x28
 8001812:	e001      	b.n	8001818 <USART_Init+0xc0>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	899b      	ldrh	r3, [r3, #12]
 800181c:	b29b      	uxth	r3, r3
 800181e:	b21b      	sxth	r3, r3
 8001820:	2b00      	cmp	r3, #0
 8001822:	da0c      	bge.n	800183e <USART_Init+0xe6>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8001824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	009a      	lsls	r2, r3, #2
 800182e:	441a      	add	r2, r3
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	005b      	lsls	r3, r3, #1
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
 800183c:	e00b      	b.n	8001856 <USART_Init+0xfe>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 800183e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	009a      	lsls	r2, r3, #2
 8001848:	441a      	add	r2, r3
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	fbb2 f3f3 	udiv	r3, r2, r3
 8001854:	627b      	str	r3, [r7, #36]	; 0x24
  }
  tmpreg = (integerdivider / 100) << 4;
 8001856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001858:	4a1b      	ldr	r2, [pc, #108]	; (80018c8 <USART_Init+0x170>)
 800185a:	fba2 2303 	umull	r2, r3, r2, r3
 800185e:	095b      	lsrs	r3, r3, #5
 8001860:	011b      	lsls	r3, r3, #4
 8001862:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8001864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001866:	091b      	lsrs	r3, r3, #4
 8001868:	2264      	movs	r2, #100	; 0x64
 800186a:	fb02 f303 	mul.w	r3, r2, r3
 800186e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	623b      	str	r3, [r7, #32]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & CR1_OVER8_Set) != 0)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	899b      	ldrh	r3, [r3, #12]
 8001878:	b29b      	uxth	r3, r3
 800187a:	b21b      	sxth	r3, r3
 800187c:	2b00      	cmp	r3, #0
 800187e:	da0c      	bge.n	800189a <USART_Init+0x142>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8001880:	6a3b      	ldr	r3, [r7, #32]
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	3332      	adds	r3, #50	; 0x32
 8001886:	4a10      	ldr	r2, [pc, #64]	; (80018c8 <USART_Init+0x170>)
 8001888:	fba2 2303 	umull	r2, r3, r2, r3
 800188c:	095b      	lsrs	r3, r3, #5
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001894:	4313      	orrs	r3, r2
 8001896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001898:	e00b      	b.n	80018b2 <USART_Init+0x15a>
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 800189a:	6a3b      	ldr	r3, [r7, #32]
 800189c:	011b      	lsls	r3, r3, #4
 800189e:	3332      	adds	r3, #50	; 0x32
 80018a0:	4a09      	ldr	r2, [pc, #36]	; (80018c8 <USART_Init+0x170>)
 80018a2:	fba2 2303 	umull	r2, r3, r2, r3
 80018a6:	095b      	lsrs	r3, r3, #5
 80018a8:	f003 030f 	and.w	r3, r3, #15
 80018ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018ae:	4313      	orrs	r3, r2
 80018b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)tmpreg;
 80018b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b4:	b29a      	uxth	r2, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	811a      	strh	r2, [r3, #8]
}
 80018ba:	bf00      	nop
 80018bc:	3730      	adds	r7, #48	; 0x30
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40013800 	.word	0x40013800
 80018c8:	51eb851f 	.word	0x51eb851f

080018cc <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80018d8:	78fb      	ldrb	r3, [r7, #3]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d008      	beq.n	80018f0 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= CR1_UE_Set;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	899b      	ldrh	r3, [r3, #12]
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= CR1_UE_Reset;
  }
}
 80018ee:	e007      	b.n	8001900 <USART_Cmd+0x34>
    USARTx->CR1 &= CR1_UE_Reset;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	899b      	ldrh	r3, [r3, #12]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80018fa:	b29a      	uxth	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	819a      	strh	r2, [r3, #12]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr

0800190a <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 800190a:	b480      	push	{r7}
 800190c:	b087      	sub	sp, #28
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	460b      	mov	r3, r1
 8001914:	807b      	strh	r3, [r7, #2]
 8001916:	4613      	mov	r3, r2
 8001918:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	2300      	movs	r3, #0
 8001920:	60fb      	str	r3, [r7, #12]
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8001926:	2300      	movs	r3, #0
 8001928:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  usartxbase = (uint32_t)USARTx;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 800192e:	887b      	ldrh	r3, [r7, #2]
 8001930:	b2db      	uxtb	r3, r3
 8001932:	095b      	lsrs	r3, r3, #5
 8001934:	b2db      	uxtb	r3, r3
 8001936:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_Mask;
 8001938:	887b      	ldrh	r3, [r7, #2]
 800193a:	f003 031f 	and.w	r3, r3, #31
 800193e:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8001940:	2201      	movs	r2, #1
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	2b01      	cmp	r3, #1
 800194e:	d103      	bne.n	8001958 <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	330c      	adds	r3, #12
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	e009      	b.n	800196c <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d103      	bne.n	8001966 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	3310      	adds	r3, #16
 8001962:	617b      	str	r3, [r7, #20]
 8001964:	e002      	b.n	800196c <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	3314      	adds	r3, #20
 800196a:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 800196c:	787b      	ldrb	r3, [r7, #1]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d006      	beq.n	8001980 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	6811      	ldr	r1, [r2, #0]
 8001978:	68ba      	ldr	r2, [r7, #8]
 800197a:	430a      	orrs	r2, r1
 800197c:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 800197e:	e006      	b.n	800198e <USART_ITConfig+0x84>
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	697a      	ldr	r2, [r7, #20]
 8001984:	6811      	ldr	r1, [r2, #0]
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	43d2      	mvns	r2, r2
 800198a:	400a      	ands	r2, r1
 800198c:	601a      	str	r2, [r3, #0]
}
 800198e:	bf00      	nop
 8001990:	371c      	adds	r7, #28
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr

08001998 <USART_ReceiveData>:
  *   This parameter can be one of the following values:
  *   USART1, USART2, USART3, UART4 or UART5.
  * @retval The received data.
  */
uint16_t USART_ReceiveData(USART_TypeDef* USARTx)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->DR & (uint16_t)0x01FF);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	889b      	ldrh	r3, [r3, #4]
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019aa:	b29b      	uxth	r3, r3
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr

080019b6 <USART_GetFlagStatus>:
  *     @arg USART_FLAG_FE:   Framing Error flag
  *     @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b085      	sub	sp, #20
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80019c2:	2300      	movs	r3, #0
 80019c4:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }  
  
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	b29a      	uxth	r2, r3
 80019cc:	887b      	ldrh	r3, [r7, #2]
 80019ce:	4013      	ands	r3, r2
 80019d0:	b29b      	uxth	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d002      	beq.n	80019dc <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 80019d6:	2301      	movs	r3, #1
 80019d8:	73fb      	strb	r3, [r7, #15]
 80019da:	e001      	b.n	80019e0 <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 80019dc:	2300      	movs	r3, #0
 80019de:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80019e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bc80      	pop	{r7}
 80019ea:	4770      	bx	lr

080019ec <USART_ClearFlag>:
  *   - TXE flag is cleared only by a write to the USART_DR register 
  *     (USART_SendData()).
  * @retval None
  */
void USART_ClearFlag(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	460b      	mov	r3, r1
 80019f6:	807b      	strh	r3, [r7, #2]
  if ((USART_FLAG & USART_FLAG_CTS) == USART_FLAG_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
   
  USARTx->SR = (uint16_t)~USART_FLAG;
 80019f8:	887b      	ldrh	r3, [r7, #2]
 80019fa:	43db      	mvns	r3, r3
 80019fc:	b29a      	uxth	r2, r3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	801a      	strh	r2, [r3, #0]
}
 8001a02:	bf00      	nop
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bc80      	pop	{r7}
 8001a0a:	4770      	bx	lr

08001a0c <USART_GetITStatus>:
  *     @arg USART_IT_FE:   Framing Error interrupt
  *     @arg USART_IT_PE:   Parity Error interrupt
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint16_t USART_IT)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	807b      	strh	r3, [r7, #2]
  uint32_t bitpos = 0x00, itmask = 0x00, usartreg = 0x00;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
 8001a20:	2300      	movs	r3, #0
 8001a22:	60bb      	str	r3, [r7, #8]
  ITStatus bitstatus = RESET;
 8001a24:	2300      	movs	r3, #0
 8001a26:	74fb      	strb	r3, [r7, #19]
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  }   
  
  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8001a28:	887b      	ldrh	r3, [r7, #2]
 8001a2a:	b2db      	uxtb	r3, r3
 8001a2c:	095b      	lsrs	r3, r3, #5
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	60bb      	str	r3, [r7, #8]
  /* Get the interrupt position */
  itmask = USART_IT & IT_Mask;
 8001a32:	887b      	ldrh	r3, [r7, #2]
 8001a34:	f003 031f 	and.w	r3, r3, #31
 8001a38:	617b      	str	r3, [r7, #20]
  itmask = (uint32_t)0x01 << itmask;
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	617b      	str	r3, [r7, #20]
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d107      	bne.n	8001a5a <USART_GetITStatus+0x4e>
  {
    itmask &= USARTx->CR1;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	899b      	ldrh	r3, [r3, #12]
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	461a      	mov	r2, r3
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	4013      	ands	r3, r2
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	e011      	b.n	8001a7e <USART_GetITStatus+0x72>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d107      	bne.n	8001a70 <USART_GetITStatus+0x64>
  {
    itmask &= USARTx->CR2;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	8a1b      	ldrh	r3, [r3, #16]
 8001a64:	b29b      	uxth	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	e006      	b.n	8001a7e <USART_GetITStatus+0x72>
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	8a9b      	ldrh	r3, [r3, #20]
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	461a      	mov	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	617b      	str	r3, [r7, #20]
  }
  
  bitpos = USART_IT >> 0x08;
 8001a7e:	887b      	ldrh	r3, [r7, #2]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	b29b      	uxth	r3, r3
 8001a84:	60fb      	str	r3, [r7, #12]
  bitpos = (uint32_t)0x01 << bitpos;
 8001a86:	2201      	movs	r2, #1
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8e:	60fb      	str	r3, [r7, #12]
  bitpos &= USARTx->SR;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	461a      	mov	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	60fb      	str	r3, [r7, #12]
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d005      	beq.n	8001ab0 <USART_GetITStatus+0xa4>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <USART_GetITStatus+0xa4>
  {
    bitstatus = SET;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	74fb      	strb	r3, [r7, #19]
 8001aae:	e001      	b.n	8001ab4 <USART_GetITStatus+0xa8>
  }
  else
  {
    bitstatus = RESET;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	74fb      	strb	r3, [r7, #19]
  }
  
  return bitstatus;  
 8001ab4:	7cfb      	ldrb	r3, [r7, #19]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	371c      	adds	r7, #28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <getDigitalGPIO>:
 * get GPIO function
 * return GPIO_TypeDef from GPIO_PINx
 * GPIO_PINx: A0-C15
 */
GPIO_TypeDef *getDigitalGPIO(uint8_t GPIO_PINx)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
	return (GPIO_TypeDef *)((GPIO_PINx / 16)*0x0400 + 0x40010800);
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	091b      	lsrs	r3, r3, #4
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8001ad4:	3342      	adds	r3, #66	; 0x42
 8001ad6:	029b      	lsls	r3, r3, #10
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	370c      	adds	r7, #12
 8001adc:	46bd      	mov	sp, r7
 8001ade:	bc80      	pop	{r7}
 8001ae0:	4770      	bx	lr

08001ae2 <getDigitalPin>:
 * get GPIO function
 * return Pin number from GPIO_PINx
 * GPIO_PINx: A0-C15
 */
uint8_t getDigitalPin(uint8_t GPIO_PINx)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	71fb      	strb	r3, [r7, #7]
	return GPIO_PINx % 16;
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	b2db      	uxtb	r3, r3
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bc80      	pop	{r7}
 8001afc:	4770      	bx	lr
	...

08001b00 <pinMode>:
 * pin configuration function
 * mode: INPUT, OUT_PUT, INPUT_PULLUP, INPUT_PULLDOWN
 * GPIO_PINx: A0 - C15
 */
void pinMode(uint8_t GPIO_PINx, uint8_t mode)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b086      	sub	sp, #24
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	4603      	mov	r3, r0
 8001b08:	460a      	mov	r2, r1
 8001b0a:	71fb      	strb	r3, [r7, #7]
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	71bb      	strb	r3, [r7, #6]
	GPIO_TypeDef* GPIOx = getDigitalGPIO(GPIO_PINx);
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff ffd4 	bl	8001ac0 <getDigitalGPIO>
 8001b18:	6178      	str	r0, [r7, #20]
	uint8_t PINx = getDigitalPin(GPIO_PINx);
 8001b1a:	79fb      	ldrb	r3, [r7, #7]
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7ff ffe0 	bl	8001ae2 <getDigitalPin>
 8001b22:	4603      	mov	r3, r0
 8001b24:	74fb      	strb	r3, [r7, #19]

	GPIO_InitTypeDef  GPIO_InitStructure;

	/* Enable the GPIO_AHPclock Clock */
	if(GPIOx == GPIOA)	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	4a23      	ldr	r2, [pc, #140]	; (8001bb8 <pinMode+0xb8>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d104      	bne.n	8001b38 <pinMode+0x38>
 8001b2e:	2101      	movs	r1, #1
 8001b30:	2004      	movs	r0, #4
 8001b32:	f7ff fdd5 	bl	80016e0 <RCC_APB2PeriphClockCmd>
 8001b36:	e02b      	b.n	8001b90 <pinMode+0x90>
	else if(GPIOx == GPIOB)	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	4a20      	ldr	r2, [pc, #128]	; (8001bbc <pinMode+0xbc>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d104      	bne.n	8001b4a <pinMode+0x4a>
 8001b40:	2101      	movs	r1, #1
 8001b42:	2008      	movs	r0, #8
 8001b44:	f7ff fdcc 	bl	80016e0 <RCC_APB2PeriphClockCmd>
 8001b48:	e022      	b.n	8001b90 <pinMode+0x90>
	else if(GPIOx == GPIOC)	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	4a1c      	ldr	r2, [pc, #112]	; (8001bc0 <pinMode+0xc0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d104      	bne.n	8001b5c <pinMode+0x5c>
 8001b52:	2101      	movs	r1, #1
 8001b54:	2010      	movs	r0, #16
 8001b56:	f7ff fdc3 	bl	80016e0 <RCC_APB2PeriphClockCmd>
 8001b5a:	e019      	b.n	8001b90 <pinMode+0x90>
	else if(GPIOx == GPIOD)	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOD, ENABLE);
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	4a19      	ldr	r2, [pc, #100]	; (8001bc4 <pinMode+0xc4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d104      	bne.n	8001b6e <pinMode+0x6e>
 8001b64:	2101      	movs	r1, #1
 8001b66:	2020      	movs	r0, #32
 8001b68:	f7ff fdba 	bl	80016e0 <RCC_APB2PeriphClockCmd>
 8001b6c:	e010      	b.n	8001b90 <pinMode+0x90>
	else if(GPIOx == GPIOE)	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOE, ENABLE);
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	4a15      	ldr	r2, [pc, #84]	; (8001bc8 <pinMode+0xc8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d104      	bne.n	8001b80 <pinMode+0x80>
 8001b76:	2101      	movs	r1, #1
 8001b78:	2040      	movs	r0, #64	; 0x40
 8001b7a:	f7ff fdb1 	bl	80016e0 <RCC_APB2PeriphClockCmd>
 8001b7e:	e007      	b.n	8001b90 <pinMode+0x90>
	else if(GPIOx == GPIOF)	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOF, ENABLE);
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <pinMode+0xcc>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d103      	bne.n	8001b90 <pinMode+0x90>
 8001b88:	2101      	movs	r1, #1
 8001b8a:	2080      	movs	r0, #128	; 0x80
 8001b8c:	f7ff fda8 	bl	80016e0 <RCC_APB2PeriphClockCmd>

	/* Configure the GPIO PINx */
	GPIO_InitStructure.GPIO_Mode = (GPIOMode_TypeDef)mode;
 8001b90:	79bb      	ldrb	r3, [r7, #6]
 8001b92:	73fb      	strb	r3, [r7, #15]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001b94:	2303      	movs	r3, #3
 8001b96:	73bb      	strb	r3, [r7, #14]

	GPIO_InitStructure.GPIO_Pin = (1<<PINx);
 8001b98:	7cfb      	ldrb	r3, [r7, #19]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	b29b      	uxth	r3, r3
 8001ba2:	81bb      	strh	r3, [r7, #12]
	GPIO_Init(GPIOx, &GPIO_InitStructure);
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	4619      	mov	r1, r3
 8001baa:	6978      	ldr	r0, [r7, #20]
 8001bac:	f7ff fbea 	bl	8001384 <GPIO_Init>
}// end pinMode function
 8001bb0:	bf00      	nop
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}
 8001bb8:	40010800 	.word	0x40010800
 8001bbc:	40010c00 	.word	0x40010c00
 8001bc0:	40011000 	.word	0x40011000
 8001bc4:	40011400 	.word	0x40011400
 8001bc8:	40011800 	.word	0x40011800
 8001bcc:	40011c00 	.word	0x40011c00

08001bd0 <digitalRead>:
 * digital read function
 * read pin state
 * GPIO_PINx: A0-C15
 */
uint8_t digitalRead(uint8_t GPIO_PINx)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	71fb      	strb	r3, [r7, #7]
	GPIO_TypeDef* GPIOx = getDigitalGPIO(GPIO_PINx);
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff ff6f 	bl	8001ac0 <getDigitalGPIO>
 8001be2:	6138      	str	r0, [r7, #16]
	uint8_t PINx = getDigitalPin(GPIO_PINx);
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff ff7b 	bl	8001ae2 <getDigitalPin>
 8001bec:	4603      	mov	r3, r0
 8001bee:	73fb      	strb	r3, [r7, #15]

	uint8_t bitstatus = 0x00;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	75fb      	strb	r3, [r7, #23]

	/* Check the parameters */
	assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
	assert_param(IS_GET_());

	if ((GPIOx->IDR & (1<<PINx)) != (uint32_t)Bit_RESET)  bitstatus = (uint8_t)Bit_SET;
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	7bfa      	ldrb	r2, [r7, #15]
 8001bfa:	2101      	movs	r1, #1
 8001bfc:	fa01 f202 	lsl.w	r2, r1, r2
 8001c00:	4013      	ands	r3, r2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d002      	beq.n	8001c0c <digitalRead+0x3c>
 8001c06:	2301      	movs	r3, #1
 8001c08:	75fb      	strb	r3, [r7, #23]
 8001c0a:	e001      	b.n	8001c10 <digitalRead+0x40>
	else   bitstatus = (uint8_t)Bit_RESET;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	75fb      	strb	r3, [r7, #23]
	return bitstatus;
 8001c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
	...

08001c1c <attachInterrupt>:
 * attach external interrupt
 * mode: RISING, FALLING, FALLING_RISING
 *
 */
void attachInterrupt(uint8_t GPIO_PINx, uint8_t mode, void (*userFunc)(void))
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	603a      	str	r2, [r7, #0]
 8001c26:	71fb      	strb	r3, [r7, #7]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	71bb      	strb	r3, [r7, #6]

	GPIO_TypeDef* GPIOx = getDigitalGPIO(GPIO_PINx);
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	4618      	mov	r0, r3
 8001c30:	f7ff ff46 	bl	8001ac0 <getDigitalGPIO>
 8001c34:	61f8      	str	r0, [r7, #28]
	uint8_t PINx = getDigitalPin(GPIO_PINx);
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff ff52 	bl	8001ae2 <getDigitalPin>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	76fb      	strb	r3, [r7, #27]
	GPIO_InitTypeDef GPIO_InitStructure;
	EXTI_InitTypeDef EXTI_InitStructure;
	NVIC_InitTypeDef NVIC_InitStructure;

	/* Enable the GPIO_AHPclock Clock */
	if(GPIOx == GPIOA)	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	4a43      	ldr	r2, [pc, #268]	; (8001d54 <attachInterrupt+0x138>)
 8001c46:	4293      	cmp	r3, r2
 8001c48:	d104      	bne.n	8001c54 <attachInterrupt+0x38>
 8001c4a:	2101      	movs	r1, #1
 8001c4c:	2004      	movs	r0, #4
 8001c4e:	f7ff fd47 	bl	80016e0 <RCC_APB2PeriphClockCmd>
 8001c52:	e010      	b.n	8001c76 <attachInterrupt+0x5a>
	else if(GPIOx == GPIOB)	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	4a40      	ldr	r2, [pc, #256]	; (8001d58 <attachInterrupt+0x13c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d104      	bne.n	8001c66 <attachInterrupt+0x4a>
 8001c5c:	2101      	movs	r1, #1
 8001c5e:	2008      	movs	r0, #8
 8001c60:	f7ff fd3e 	bl	80016e0 <RCC_APB2PeriphClockCmd>
 8001c64:	e007      	b.n	8001c76 <attachInterrupt+0x5a>
	else if(GPIOx == GPIOC)	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC, ENABLE);
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	4a3c      	ldr	r2, [pc, #240]	; (8001d5c <attachInterrupt+0x140>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d103      	bne.n	8001c76 <attachInterrupt+0x5a>
 8001c6e:	2101      	movs	r1, #1
 8001c70:	2010      	movs	r0, #16
 8001c72:	f7ff fd35 	bl	80016e0 <RCC_APB2PeriphClockCmd>

	/* GPIO init */
	GPIO_InitStructure.GPIO_Pin = (1<<PINx);
 8001c76:	7efb      	ldrb	r3, [r7, #27]
 8001c78:	2201      	movs	r2, #1
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	82bb      	strh	r3, [r7, #20]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001c82:	2303      	movs	r3, #3
 8001c84:	75bb      	strb	r3, [r7, #22]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 8001c86:	2348      	movs	r3, #72	; 0x48
 8001c88:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOx, &GPIO_InitStructure);
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	4619      	mov	r1, r3
 8001c90:	69f8      	ldr	r0, [r7, #28]
 8001c92:	f7ff fb77 	bl	8001384 <GPIO_Init>

	/* mapping */
	if(GPIOx == GPIOA)	GPIO_EXTILineConfig(GPIO_PortSourceGPIOA, PINx);
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	4a2e      	ldr	r2, [pc, #184]	; (8001d54 <attachInterrupt+0x138>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d105      	bne.n	8001caa <attachInterrupt+0x8e>
 8001c9e:	7efb      	ldrb	r3, [r7, #27]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	f7ff fc2a 	bl	80014fc <GPIO_EXTILineConfig>
 8001ca8:	e012      	b.n	8001cd0 <attachInterrupt+0xb4>
	else if(GPIOx == GPIOB)	GPIO_EXTILineConfig(GPIO_PortSourceGPIOB, PINx);
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	4a2a      	ldr	r2, [pc, #168]	; (8001d58 <attachInterrupt+0x13c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d105      	bne.n	8001cbe <attachInterrupt+0xa2>
 8001cb2:	7efb      	ldrb	r3, [r7, #27]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	2001      	movs	r0, #1
 8001cb8:	f7ff fc20 	bl	80014fc <GPIO_EXTILineConfig>
 8001cbc:	e008      	b.n	8001cd0 <attachInterrupt+0xb4>
	else if(GPIOx == GPIOC)	GPIO_EXTILineConfig(GPIO_PortSourceGPIOC, PINx);
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	4a26      	ldr	r2, [pc, #152]	; (8001d5c <attachInterrupt+0x140>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d104      	bne.n	8001cd0 <attachInterrupt+0xb4>
 8001cc6:	7efb      	ldrb	r3, [r7, #27]
 8001cc8:	4619      	mov	r1, r3
 8001cca:	2002      	movs	r0, #2
 8001ccc:	f7ff fc16 	bl	80014fc <GPIO_EXTILineConfig>


	/* Clear the the EXTI line interrupt pending bit */
	EXTI_ClearITPendingBit(1<<PINx);
 8001cd0:	7efb      	ldrb	r3, [r7, #27]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff fb45 	bl	8001368 <EXTI_ClearITPendingBit>
	/* EXTI line Configuration */
	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	743b      	strb	r3, [r7, #16]
	EXTI_InitStructure.EXTI_Line = (1<<PINx);
 8001ce2:	7efb      	ldrb	r3, [r7, #27]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cea:	60fb      	str	r3, [r7, #12]
	EXTI_InitStructure.EXTI_Trigger = (EXTITrigger_TypeDef) mode;
 8001cec:	79bb      	ldrb	r3, [r7, #6]
 8001cee:	747b      	strb	r3, [r7, #17]
	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	74bb      	strb	r3, [r7, #18]
	EXTI_Init(&EXTI_InitStructure);
 8001cf4:	f107 030c 	add.w	r3, r7, #12
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fa9f 	bl	800123c <EXTI_Init>

	/*NVIC Configuration*/
	if (4 < PINx && PINx < 10)
 8001cfe:	7efb      	ldrb	r3, [r7, #27]
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d905      	bls.n	8001d10 <attachInterrupt+0xf4>
 8001d04:	7efb      	ldrb	r3, [r7, #27]
 8001d06:	2b09      	cmp	r3, #9
 8001d08:	d802      	bhi.n	8001d10 <attachInterrupt+0xf4>
	{
		NVIC_InitStructure.NVIC_IRQChannel = EXTI9_5_IRQn;
 8001d0a:	2317      	movs	r3, #23
 8001d0c:	723b      	strb	r3, [r7, #8]
 8001d0e:	e00c      	b.n	8001d2a <attachInterrupt+0x10e>
	}
	else if (9 < PINx && PINx < 16)
 8001d10:	7efb      	ldrb	r3, [r7, #27]
 8001d12:	2b09      	cmp	r3, #9
 8001d14:	d905      	bls.n	8001d22 <attachInterrupt+0x106>
 8001d16:	7efb      	ldrb	r3, [r7, #27]
 8001d18:	2b0f      	cmp	r3, #15
 8001d1a:	d802      	bhi.n	8001d22 <attachInterrupt+0x106>
	{
		NVIC_InitStructure.NVIC_IRQChannel = EXTI15_10_IRQn;
 8001d1c:	2328      	movs	r3, #40	; 0x28
 8001d1e:	723b      	strb	r3, [r7, #8]
 8001d20:	e003      	b.n	8001d2a <attachInterrupt+0x10e>
	}
	else
	{
		NVIC_InitStructure.NVIC_IRQChannel = PINx + 6;
 8001d22:	7efb      	ldrb	r3, [r7, #27]
 8001d24:	3306      	adds	r3, #6
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	723b      	strb	r3, [r7, #8]
	}
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	727b      	strb	r3, [r7, #9]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	72bb      	strb	r3, [r7, #10]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001d32:	2301      	movs	r3, #1
 8001d34:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&NVIC_InitStructure);
 8001d36:	f107 0308 	add.w	r3, r7, #8
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fa1c 	bl	8001178 <NVIC_Init>
	intFunc[PINx] = userFunc;
 8001d40:	7efb      	ldrb	r3, [r7, #27]
 8001d42:	4907      	ldr	r1, [pc, #28]	; (8001d60 <attachInterrupt+0x144>)
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d4a:	bf00      	nop
 8001d4c:	3720      	adds	r7, #32
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40010800 	.word	0x40010800
 8001d58:	40010c00 	.word	0x40010c00
 8001d5c:	40011000 	.word	0x40011000
 8001d60:	20000208 	.word	0x20000208

08001d64 <EXTI0_IRQHandler>:
  * @brief  This function handles EXTI0 interrupt.
  * @param  None
  * @retval None
  */
void EXTI0_IRQHandler(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line0) != RESET)
 8001d68:	2001      	movs	r0, #1
 8001d6a:	f7ff fad9 	bl	8001320 <EXTI_GetITStatus>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d005      	beq.n	8001d80 <EXTI0_IRQHandler+0x1c>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line0);
 8001d74:	2001      	movs	r0, #1
 8001d76:	f7ff faf7 	bl	8001368 <EXTI_ClearITPendingBit>
		intFunc[0]();
 8001d7a:	4b02      	ldr	r3, [pc, #8]	; (8001d84 <EXTI0_IRQHandler+0x20>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4798      	blx	r3
	}
}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20000208 	.word	0x20000208

08001d88 <EXTI1_IRQHandler>:
  * @brief  This function handles EXTI1 interrupt.
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line1) != RESET)
 8001d8c:	2002      	movs	r0, #2
 8001d8e:	f7ff fac7 	bl	8001320 <EXTI_GetITStatus>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <EXTI1_IRQHandler+0x1c>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line1);
 8001d98:	2002      	movs	r0, #2
 8001d9a:	f7ff fae5 	bl	8001368 <EXTI_ClearITPendingBit>
		intFunc[1]();
 8001d9e:	4b02      	ldr	r3, [pc, #8]	; (8001da8 <EXTI1_IRQHandler+0x20>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4798      	blx	r3
	}
}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000208 	.word	0x20000208

08001dac <EXTI2_IRQHandler>:
  * @brief  This function handles EXTI2 interrupt.
  * @param  None
  * @retval None
  */
void EXTI2_IRQHandler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line2) != RESET)
 8001db0:	2004      	movs	r0, #4
 8001db2:	f7ff fab5 	bl	8001320 <EXTI_GetITStatus>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <EXTI2_IRQHandler+0x1c>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line2);
 8001dbc:	2004      	movs	r0, #4
 8001dbe:	f7ff fad3 	bl	8001368 <EXTI_ClearITPendingBit>
		intFunc[2]();
 8001dc2:	4b02      	ldr	r3, [pc, #8]	; (8001dcc <EXTI2_IRQHandler+0x20>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	4798      	blx	r3
	}
}
 8001dc8:	bf00      	nop
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20000208 	.word	0x20000208

08001dd0 <EXTI3_IRQHandler>:
  * @brief  This function handles EXTI3 interrupt.
  * @param  None
  * @retval None
  */
void EXTI3_IRQHandler(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line3) != RESET)
 8001dd4:	2008      	movs	r0, #8
 8001dd6:	f7ff faa3 	bl	8001320 <EXTI_GetITStatus>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <EXTI3_IRQHandler+0x1c>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line3);
 8001de0:	2008      	movs	r0, #8
 8001de2:	f7ff fac1 	bl	8001368 <EXTI_ClearITPendingBit>
		intFunc[3]();
 8001de6:	4b02      	ldr	r3, [pc, #8]	; (8001df0 <EXTI3_IRQHandler+0x20>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	4798      	blx	r3
	}
}
 8001dec:	bf00      	nop
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20000208 	.word	0x20000208

08001df4 <EXTI4_IRQHandler>:
  * @brief  This function handles EXTI4 interrupt.
  * @param  None
  * @retval None
  */
void EXTI4_IRQHandler(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line4) != RESET)
 8001df8:	2010      	movs	r0, #16
 8001dfa:	f7ff fa91 	bl	8001320 <EXTI_GetITStatus>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d005      	beq.n	8001e10 <EXTI4_IRQHandler+0x1c>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line4);
 8001e04:	2010      	movs	r0, #16
 8001e06:	f7ff faaf 	bl	8001368 <EXTI_ClearITPendingBit>
		intFunc[4]();
 8001e0a:	4b02      	ldr	r3, [pc, #8]	; (8001e14 <EXTI4_IRQHandler+0x20>)
 8001e0c:	691b      	ldr	r3, [r3, #16]
 8001e0e:	4798      	blx	r3
	}
}
 8001e10:	bf00      	nop
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	20000208 	.word	0x20000208

08001e18 <EXTI15_10_IRQHandler>:
  * @brief  This function handles EXTI4 interrupt.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line10) != RESET)
 8001e1c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001e20:	f7ff fa7e 	bl	8001320 <EXTI_GetITStatus>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d006      	beq.n	8001e38 <EXTI15_10_IRQHandler+0x20>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line10);
 8001e2a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001e2e:	f7ff fa9b 	bl	8001368 <EXTI_ClearITPendingBit>
		intFunc[10]();
 8001e32:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <EXTI15_10_IRQHandler+0xb0>)
 8001e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e36:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line11) != RESET)
 8001e38:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e3c:	f7ff fa70 	bl	8001320 <EXTI_GetITStatus>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d006      	beq.n	8001e54 <EXTI15_10_IRQHandler+0x3c>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line11);
 8001e46:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001e4a:	f7ff fa8d 	bl	8001368 <EXTI_ClearITPendingBit>
		intFunc[11]();
 8001e4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ec8 <EXTI15_10_IRQHandler+0xb0>)
 8001e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e52:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line12) != RESET)
 8001e54:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e58:	f7ff fa62 	bl	8001320 <EXTI_GetITStatus>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d006      	beq.n	8001e70 <EXTI15_10_IRQHandler+0x58>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line12);
 8001e62:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001e66:	f7ff fa7f 	bl	8001368 <EXTI_ClearITPendingBit>
		intFunc[12]();
 8001e6a:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <EXTI15_10_IRQHandler+0xb0>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6e:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line13) != RESET)
 8001e70:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e74:	f7ff fa54 	bl	8001320 <EXTI_GetITStatus>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d006      	beq.n	8001e8c <EXTI15_10_IRQHandler+0x74>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line13);
 8001e7e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e82:	f7ff fa71 	bl	8001368 <EXTI_ClearITPendingBit>
		intFunc[13]();
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <EXTI15_10_IRQHandler+0xb0>)
 8001e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e8a:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line14) != RESET)
 8001e8c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e90:	f7ff fa46 	bl	8001320 <EXTI_GetITStatus>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d006      	beq.n	8001ea8 <EXTI15_10_IRQHandler+0x90>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line14);
 8001e9a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001e9e:	f7ff fa63 	bl	8001368 <EXTI_ClearITPendingBit>
		intFunc[14]();
 8001ea2:	4b09      	ldr	r3, [pc, #36]	; (8001ec8 <EXTI15_10_IRQHandler+0xb0>)
 8001ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea6:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line15) != RESET)
 8001ea8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001eac:	f7ff fa38 	bl	8001320 <EXTI_GetITStatus>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d006      	beq.n	8001ec4 <EXTI15_10_IRQHandler+0xac>
	{
		/* Clear the EXTI line pending bit */
		EXTI_ClearITPendingBit(EXTI_Line15);
 8001eb6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001eba:	f7ff fa55 	bl	8001368 <EXTI_ClearITPendingBit>
		intFunc[15]();
 8001ebe:	4b02      	ldr	r3, [pc, #8]	; (8001ec8 <EXTI15_10_IRQHandler+0xb0>)
 8001ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec2:	4798      	blx	r3
	}
}
 8001ec4:	bf00      	nop
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000208 	.word	0x20000208

08001ecc <EXTI9_5_IRQHandler>:
  * @param  None
  * @retval None
  */

void EXTI9_5_IRQHandler(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
	if(EXTI_GetITStatus(EXTI_Line5) != RESET)
 8001ed0:	2020      	movs	r0, #32
 8001ed2:	f7ff fa25 	bl	8001320 <EXTI_GetITStatus>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d005      	beq.n	8001ee8 <EXTI9_5_IRQHandler+0x1c>
	{
		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(EXTI_Line5);
 8001edc:	2020      	movs	r0, #32
 8001ede:	f7ff fa43 	bl	8001368 <EXTI_ClearITPendingBit>
		intFunc[5]();
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	; (8001f54 <EXTI9_5_IRQHandler+0x88>)
 8001ee4:	695b      	ldr	r3, [r3, #20]
 8001ee6:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line6) != RESET)
 8001ee8:	2040      	movs	r0, #64	; 0x40
 8001eea:	f7ff fa19 	bl	8001320 <EXTI_GetITStatus>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d005      	beq.n	8001f00 <EXTI9_5_IRQHandler+0x34>
	{
		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(EXTI_Line6);
 8001ef4:	2040      	movs	r0, #64	; 0x40
 8001ef6:	f7ff fa37 	bl	8001368 <EXTI_ClearITPendingBit>
		intFunc[6]();
 8001efa:	4b16      	ldr	r3, [pc, #88]	; (8001f54 <EXTI9_5_IRQHandler+0x88>)
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line7) != RESET)
 8001f00:	2080      	movs	r0, #128	; 0x80
 8001f02:	f7ff fa0d 	bl	8001320 <EXTI_GetITStatus>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d005      	beq.n	8001f18 <EXTI9_5_IRQHandler+0x4c>
	{
		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(EXTI_Line7);
 8001f0c:	2080      	movs	r0, #128	; 0x80
 8001f0e:	f7ff fa2b 	bl	8001368 <EXTI_ClearITPendingBit>
		intFunc[7]();
 8001f12:	4b10      	ldr	r3, [pc, #64]	; (8001f54 <EXTI9_5_IRQHandler+0x88>)
 8001f14:	69db      	ldr	r3, [r3, #28]
 8001f16:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line8) != RESET)
 8001f18:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f1c:	f7ff fa00 	bl	8001320 <EXTI_GetITStatus>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d006      	beq.n	8001f34 <EXTI9_5_IRQHandler+0x68>
	{
		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(EXTI_Line8);
 8001f26:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001f2a:	f7ff fa1d 	bl	8001368 <EXTI_ClearITPendingBit>
		intFunc[8]();
 8001f2e:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <EXTI9_5_IRQHandler+0x88>)
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	4798      	blx	r3
	}
	if(EXTI_GetITStatus(EXTI_Line9) != RESET)
 8001f34:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f38:	f7ff f9f2 	bl	8001320 <EXTI_GetITStatus>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d006      	beq.n	8001f50 <EXTI9_5_IRQHandler+0x84>
	{
		// Clear the EXTI line pending bit
		EXTI_ClearITPendingBit(EXTI_Line9);
 8001f42:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f46:	f7ff fa0f 	bl	8001368 <EXTI_ClearITPendingBit>
		intFunc[9]();
 8001f4a:	4b02      	ldr	r3, [pc, #8]	; (8001f54 <EXTI9_5_IRQHandler+0x88>)
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	4798      	blx	r3
	}
}
 8001f50:	bf00      	nop
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000208 	.word	0x20000208

08001f58 <getAllGcodeValue>:
*/
#include "../include.h"
#include "gcode.h"

struct gValue getAllGcodeValue(char *gCode)
{
 8001f58:	b5b0      	push	{r4, r5, r7, lr}
 8001f5a:	b08c      	sub	sp, #48	; 0x30
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
 8001f60:	6039      	str	r1, [r7, #0]
	struct gValue gval1;
	
	gval1.G = getGcodeValue(gCode, 'G') / 100;
 8001f62:	2147      	movs	r1, #71	; 0x47
 8001f64:	6838      	ldr	r0, [r7, #0]
 8001f66:	f000 f843 	bl	8001ff0 <getGcodeValue>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4a1f      	ldr	r2, [pc, #124]	; (8001fec <getAllGcodeValue+0x94>)
 8001f6e:	fb82 1203 	smull	r1, r2, r2, r3
 8001f72:	1152      	asrs	r2, r2, #5
 8001f74:	17db      	asrs	r3, r3, #31
 8001f76:	1ad3      	subs	r3, r2, r3
 8001f78:	b21b      	sxth	r3, r3
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	733b      	strb	r3, [r7, #12]
	gval1.X = getGcodeValue(gCode, 'X');
 8001f7e:	2158      	movs	r1, #88	; 0x58
 8001f80:	6838      	ldr	r0, [r7, #0]
 8001f82:	f000 f835 	bl	8001ff0 <getGcodeValue>
 8001f86:	4603      	mov	r3, r0
 8001f88:	617b      	str	r3, [r7, #20]
	gval1.Y = getGcodeValue(gCode, 'Y');
 8001f8a:	2159      	movs	r1, #89	; 0x59
 8001f8c:	6838      	ldr	r0, [r7, #0]
 8001f8e:	f000 f82f 	bl	8001ff0 <getGcodeValue>
 8001f92:	4603      	mov	r3, r0
 8001f94:	61bb      	str	r3, [r7, #24]
	gval1.Z = getGcodeValue(gCode, 'Z');
 8001f96:	215a      	movs	r1, #90	; 0x5a
 8001f98:	6838      	ldr	r0, [r7, #0]
 8001f9a:	f000 f829 	bl	8001ff0 <getGcodeValue>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	61fb      	str	r3, [r7, #28]
	gval1.I = getGcodeValue(gCode, 'I');
 8001fa2:	2149      	movs	r1, #73	; 0x49
 8001fa4:	6838      	ldr	r0, [r7, #0]
 8001fa6:	f000 f823 	bl	8001ff0 <getGcodeValue>
 8001faa:	4603      	mov	r3, r0
 8001fac:	623b      	str	r3, [r7, #32]
	gval1.J = getGcodeValue(gCode, 'J');
 8001fae:	214a      	movs	r1, #74	; 0x4a
 8001fb0:	6838      	ldr	r0, [r7, #0]
 8001fb2:	f000 f81d 	bl	8001ff0 <getGcodeValue>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
	gval1.R = getGcodeValue(gCode, 'R');
 8001fba:	2152      	movs	r1, #82	; 0x52
 8001fbc:	6838      	ldr	r0, [r7, #0]
 8001fbe:	f000 f817 	bl	8001ff0 <getGcodeValue>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7fe fe85 	bl	8000cd4 <__aeabi_i2f>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	613b      	str	r3, [r7, #16]
	
	return gval1;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	461d      	mov	r5, r3
 8001fd2:	f107 040c 	add.w	r4, r7, #12
 8001fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fde:	6823      	ldr	r3, [r4, #0]
 8001fe0:	602b      	str	r3, [r5, #0]
}
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	3730      	adds	r7, #48	; 0x30
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bdb0      	pop	{r4, r5, r7, pc}
 8001fea:	bf00      	nop
 8001fec:	51eb851f 	.word	0x51eb851f

08001ff0 <getGcodeValue>:


int16_t getGcodeValue(char *gCode, char gValue)
{
 8001ff0:	b590      	push	{r4, r7, lr}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	70fb      	strb	r3, [r7, #3]
	char *gTemp;
	gTemp = malloc(7);
 8001ffc:	2007      	movs	r0, #7
 8001ffe:	f001 ffa7 	bl	8003f50 <malloc>
 8002002:	4603      	mov	r3, r0
 8002004:	613b      	str	r3, [r7, #16]
	uint8_t j = 0, exists = false;
 8002006:	2300      	movs	r3, #0
 8002008:	75fb      	strb	r3, [r7, #23]
 800200a:	2300      	movs	r3, #0
 800200c:	75bb      	strb	r3, [r7, #22]
	
	for (uint8_t i = 0; gCode[i]!= '\0'; i++){
 800200e:	2300      	movs	r3, #0
 8002010:	757b      	strb	r3, [r7, #21]
 8002012:	e026      	b.n	8002062 <getGcodeValue+0x72>
		if (exists == true){
 8002014:	7dbb      	ldrb	r3, [r7, #22]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d117      	bne.n	800204a <getGcodeValue+0x5a>
			if (gCode[i] != ' '){
 800201a:	7d7b      	ldrb	r3, [r7, #21]
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	4413      	add	r3, r2
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	2b20      	cmp	r3, #32
 8002024:	d00b      	beq.n	800203e <getGcodeValue+0x4e>
				gTemp[j++] = gCode[i];
 8002026:	7dfb      	ldrb	r3, [r7, #23]
 8002028:	1c5a      	adds	r2, r3, #1
 800202a:	75fa      	strb	r2, [r7, #23]
 800202c:	461a      	mov	r2, r3
 800202e:	693b      	ldr	r3, [r7, #16]
 8002030:	4413      	add	r3, r2
 8002032:	7d7a      	ldrb	r2, [r7, #21]
 8002034:	6879      	ldr	r1, [r7, #4]
 8002036:	440a      	add	r2, r1
 8002038:	7812      	ldrb	r2, [r2, #0]
 800203a:	701a      	strb	r2, [r3, #0]
 800203c:	e00e      	b.n	800205c <getGcodeValue+0x6c>
			}
			else{
				gTemp[j] = '\0';
 800203e:	7dfb      	ldrb	r3, [r7, #23]
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	4413      	add	r3, r2
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
				break;
 8002048:	e011      	b.n	800206e <getGcodeValue+0x7e>
			}
		}
		else if (gCode[i] == gValue){
 800204a:	7d7b      	ldrb	r3, [r7, #21]
 800204c:	687a      	ldr	r2, [r7, #4]
 800204e:	4413      	add	r3, r2
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	78fa      	ldrb	r2, [r7, #3]
 8002054:	429a      	cmp	r2, r3
 8002056:	d101      	bne.n	800205c <getGcodeValue+0x6c>
			exists = true;
 8002058:	2301      	movs	r3, #1
 800205a:	75bb      	strb	r3, [r7, #22]
	for (uint8_t i = 0; gCode[i]!= '\0'; i++){
 800205c:	7d7b      	ldrb	r3, [r7, #21]
 800205e:	3301      	adds	r3, #1
 8002060:	757b      	strb	r3, [r7, #21]
 8002062:	7d7b      	ldrb	r3, [r7, #21]
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	4413      	add	r3, r2
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d1d2      	bne.n	8002014 <getGcodeValue+0x24>
		}
	}
	
	int16_t reValue = atof(gTemp) * 100;
 800206e:	6938      	ldr	r0, [r7, #16]
 8002070:	f001 ff46 	bl	8003f00 <atof>
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <getGcodeValue+0xb0>)
 800207a:	f7fe fa29 	bl	80004d0 <__aeabi_dmul>
 800207e:	4603      	mov	r3, r0
 8002080:	460c      	mov	r4, r1
 8002082:	4618      	mov	r0, r3
 8002084:	4621      	mov	r1, r4
 8002086:	f7fe fcd3 	bl	8000a30 <__aeabi_d2iz>
 800208a:	4603      	mov	r3, r0
 800208c:	81fb      	strh	r3, [r7, #14]
	free(gTemp);
 800208e:	6938      	ldr	r0, [r7, #16]
 8002090:	f001 ff66 	bl	8003f60 <free>
	return reValue;
 8002094:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8002098:	4618      	mov	r0, r3
 800209a:	371c      	adds	r7, #28
 800209c:	46bd      	mov	sp, r7
 800209e:	bd90      	pop	{r4, r7, pc}
 80020a0:	40590000 	.word	0x40590000

080020a4 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	4603      	mov	r3, r0
 80020ac:	6039      	str	r1, [r7, #0]
 80020ae:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 80020b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	da0b      	bge.n	80020d0 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 80020b8:	490d      	ldr	r1, [pc, #52]	; (80020f0 <NVIC_SetPriority+0x4c>)
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	f003 030f 	and.w	r3, r3, #15
 80020c0:	3b04      	subs	r3, #4
 80020c2:	683a      	ldr	r2, [r7, #0]
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	0112      	lsls	r2, r2, #4
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	440b      	add	r3, r1
 80020cc:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 80020ce:	e009      	b.n	80020e4 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 80020d0:	4908      	ldr	r1, [pc, #32]	; (80020f4 <NVIC_SetPriority+0x50>)
 80020d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020d6:	683a      	ldr	r2, [r7, #0]
 80020d8:	b2d2      	uxtb	r2, r2
 80020da:	0112      	lsls	r2, r2, #4
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	440b      	add	r3, r1
 80020e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bc80      	pop	{r7}
 80020ec:	4770      	bx	lr
 80020ee:	bf00      	nop
 80020f0:	e000ed00 	.word	0xe000ed00
 80020f4:	e000e100 	.word	0xe000e100

080020f8 <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002106:	d301      	bcc.n	800210c <SysTick_Config+0x14>
 8002108:	2301      	movs	r3, #1
 800210a:	e011      	b.n	8002130 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 800210c:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <SysTick_Config+0x40>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002114:	3b01      	subs	r3, #1
 8002116:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8002118:	210f      	movs	r1, #15
 800211a:	f04f 30ff 	mov.w	r0, #4294967295
 800211e:	f7ff ffc1 	bl	80020a4 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8002122:	4b05      	ldr	r3, [pc, #20]	; (8002138 <SysTick_Config+0x40>)
 8002124:	2200      	movs	r2, #0
 8002126:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002128:	4b03      	ldr	r3, [pc, #12]	; (8002138 <SysTick_Config+0x40>)
 800212a:	2207      	movs	r2, #7
 800212c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 800212e:	2300      	movs	r3, #0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	e000e010 	.word	0xe000e010

0800213c <SysTick_Init>:
uint32_t tim_cnt = 0;
uint32_t ticker;
volatile uint32_t us;

void SysTick_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
	if (SysTick_Config(SystemCoreClock / 1000)) //1ms per interrupt
 8002140:	4b0d      	ldr	r3, [pc, #52]	; (8002178 <SysTick_Init+0x3c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a0d      	ldr	r2, [pc, #52]	; (800217c <SysTick_Init+0x40>)
 8002146:	fba2 2303 	umull	r2, r3, r2, r3
 800214a:	099b      	lsrs	r3, r3, #6
 800214c:	4618      	mov	r0, r3
 800214e:	f7ff ffd3 	bl	80020f8 <SysTick_Config>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d000      	beq.n	800215a <SysTick_Init+0x1e>
	{
		while(1);
 8002158:	e7fe      	b.n	8002158 <SysTick_Init+0x1c>
	}
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 800215a:	f44f 7040 	mov.w	r0, #768	; 0x300
 800215e:	f7fe fff9 	bl	8001154 <NVIC_PriorityGroupConfig>
	NVIC_SetPriority(SysTick_IRQn, 0);
 8002162:	2100      	movs	r1, #0
 8002164:	f04f 30ff 	mov.w	r0, #4294967295
 8002168:	f7ff ff9c 	bl	80020a4 <NVIC_SetPriority>
	ticker = 0;
 800216c:	4b04      	ldr	r3, [pc, #16]	; (8002180 <SysTick_Init+0x44>)
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000014 	.word	0x20000014
 800217c:	10624dd3 	.word	0x10624dd3
 8002180:	20000258 	.word	0x20000258

08002184 <_delay_ms>:
//	us = ticker * 1000 + 1000 - SysTick->VAL / 80;
	return us;
}

void _delay_ms(uint32_t nTime)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
	uint32_t curTime = ticker;
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <_delay_ms+0x2c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	60fb      	str	r3, [r7, #12]
	while ((nTime - (ticker - curTime)) > 0);
 8002192:	bf00      	nop
 8002194:	4b06      	ldr	r3, [pc, #24]	; (80021b0 <_delay_ms+0x2c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68fa      	ldr	r2, [r7, #12]
 800219a:	1ad2      	subs	r2, r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4413      	add	r3, r2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f7      	bne.n	8002194 <_delay_ms+0x10>
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	20000258 	.word	0x20000258

080021b4 <SysTick_Handler>:
	while((nTime-(micros()-curTime)) > 0);
}


void SysTick_Handler(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
	ticker++;
 80021b8:	4b04      	ldr	r3, [pc, #16]	; (80021cc <SysTick_Handler+0x18>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	3301      	adds	r3, #1
 80021be:	4a03      	ldr	r2, [pc, #12]	; (80021cc <SysTick_Handler+0x18>)
 80021c0:	6013      	str	r3, [r2, #0]
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bc80      	pop	{r7}
 80021c8:	4770      	bx	lr
 80021ca:	bf00      	nop
 80021cc:	20000258 	.word	0x20000258

080021d0 <draw>:
	float y;
	float angle;
};

struct point draw(struct gValue gVal1, struct point pntStart)
{
 80021d0:	b084      	sub	sp, #16
 80021d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021d6:	b09b      	sub	sp, #108	; 0x6c
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
 80021dc:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 80021e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	float deltaC;

	struct point pntCenter, pntEnd;
	struct point pntCur, pntPre;

	pntPre.x = pntStart.x;
 80021e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021e8:	623b      	str	r3, [r7, #32]
	pntPre.y = pntStart.y;
 80021ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80021ee:	627b      	str	r3, [r7, #36]	; 0x24

	int16_t anglePre;
	// diem cuoi cung cua lenh
	pntEnd.x = gVal1.X;
 80021f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7fe fd6d 	bl	8000cd4 <__aeabi_i2f>
 80021fa:	4603      	mov	r3, r0
 80021fc:	63bb      	str	r3, [r7, #56]	; 0x38
	pntEnd.y = gVal1.Y;
 80021fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe fd66 	bl	8000cd4 <__aeabi_i2f>
 8002208:	4603      	mov	r3, r0
 800220a:	63fb      	str	r3, [r7, #60]	; 0x3c

	// neu 2 diem trung nhau thi bo qua

	#warning "them phan tra ve ma loi"
	if (pntStart.x == pntEnd.x && pntStart.y == pntEnd.y) return  pntStart;
 800220c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002210:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002212:	4611      	mov	r1, r2
 8002214:	4618      	mov	r0, r3
 8002216:	f7fe ff45 	bl	80010a4 <__aeabi_fcmpeq>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d013      	beq.n	8002248 <draw+0x78>
 8002220:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002224:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe ff3b 	bl	80010a4 <__aeabi_fcmpeq>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d009      	beq.n	8002248 <draw+0x78>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	461c      	mov	r4, r3
 8002238:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800223c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002240:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002244:	f001 b95c 	b.w	8003500 <draw+0x1330>

	if (gVal1.G == CNC_LINEAR_FAST || gVal1.G == CNC_LINEAR_FEED)// noi suy tuyen tinh
 8002248:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 800224c:	2b00      	cmp	r3, #0
 800224e:	d004      	beq.n	800225a <draw+0x8a>
 8002250:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8002254:	2b01      	cmp	r3, #1
 8002256:	f040 826b 	bne.w	8002730 <draw+0x560>

		// bien dem delta dung cho G00, G01
		int32_t deltaL;

		// goc cua duong thang
		line1.angle = 180 * atan2(pntEnd.y - pntStart.y, pntEnd.x - pntStart.x) / M_PI;
 800225a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800225c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002260:	4611      	mov	r1, r2
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe fc80 	bl	8000b68 <__aeabi_fsub>
 8002268:	4603      	mov	r3, r0
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe f8dc 	bl	8000428 <__aeabi_f2d>
 8002270:	4604      	mov	r4, r0
 8002272:	460d      	mov	r5, r1
 8002274:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002276:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800227a:	4611      	mov	r1, r2
 800227c:	4618      	mov	r0, r3
 800227e:	f7fe fc73 	bl	8000b68 <__aeabi_fsub>
 8002282:	4603      	mov	r3, r0
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe f8cf 	bl	8000428 <__aeabi_f2d>
 800228a:	4602      	mov	r2, r0
 800228c:	460b      	mov	r3, r1
 800228e:	4620      	mov	r0, r4
 8002290:	4629      	mov	r1, r5
 8002292:	f003 fd1f 	bl	8005cd4 <atan2>
 8002296:	f04f 0200 	mov.w	r2, #0
 800229a:	4b9d      	ldr	r3, [pc, #628]	; (8002510 <draw+0x340>)
 800229c:	f7fe f918 	bl	80004d0 <__aeabi_dmul>
 80022a0:	4603      	mov	r3, r0
 80022a2:	460c      	mov	r4, r1
 80022a4:	4618      	mov	r0, r3
 80022a6:	4621      	mov	r1, r4
 80022a8:	a397      	add	r3, pc, #604	; (adr r3, 8002508 <draw+0x338>)
 80022aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022ae:	f7fe fa39 	bl	8000724 <__aeabi_ddiv>
 80022b2:	4603      	mov	r3, r0
 80022b4:	460c      	mov	r4, r1
 80022b6:	4618      	mov	r0, r3
 80022b8:	4621      	mov	r1, r4
 80022ba:	f7fe fc01 	bl	8000ac0 <__aeabi_d2f>
 80022be:	4603      	mov	r3, r0
 80022c0:	61fb      	str	r3, [r7, #28]
		if ((line1.angle > 45 && line1.angle < 135) || (line1.angle < -45 && line1.angle > -135))// duong thang x = Ay + B
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	4993      	ldr	r1, [pc, #588]	; (8002514 <draw+0x344>)
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7fe ff14 	bl	80010f4 <__aeabi_fcmpgt>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d007      	beq.n	80022e2 <draw+0x112>
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	4990      	ldr	r1, [pc, #576]	; (8002518 <draw+0x348>)
 80022d6:	4618      	mov	r0, r3
 80022d8:	f7fe feee 	bl	80010b8 <__aeabi_fcmplt>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d111      	bne.n	8002306 <draw+0x136>
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	498d      	ldr	r1, [pc, #564]	; (800251c <draw+0x34c>)
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7fe fee6 	bl	80010b8 <__aeabi_fcmplt>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	f000 811a 	beq.w	8002528 <draw+0x358>
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	498a      	ldr	r1, [pc, #552]	; (8002520 <draw+0x350>)
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7fe fefb 	bl	80010f4 <__aeabi_fcmpgt>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	f000 8111 	beq.w	8002528 <draw+0x358>
		{
			// tim phuong trinh duong thang
			line1.a = (pntEnd.x - pntStart.x) / (pntEnd.y - pntStart.y);// 2/3
 8002306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002308:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800230c:	4611      	mov	r1, r2
 800230e:	4618      	mov	r0, r3
 8002310:	f7fe fc2a 	bl	8000b68 <__aeabi_fsub>
 8002314:	4603      	mov	r3, r0
 8002316:	461c      	mov	r4, r3
 8002318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800231a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800231e:	4611      	mov	r1, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f7fe fc21 	bl	8000b68 <__aeabi_fsub>
 8002326:	4603      	mov	r3, r0
 8002328:	4619      	mov	r1, r3
 800232a:	4620      	mov	r0, r4
 800232c:	f7fe fdda 	bl	8000ee4 <__aeabi_fdiv>
 8002330:	4603      	mov	r3, r0
 8002332:	60fb      	str	r3, [r7, #12]
			line1.b = (pntEnd.x - pntEnd.y * line1.a);//
 8002334:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8002336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4611      	mov	r1, r2
 800233c:	4618      	mov	r0, r3
 800233e:	f7fe fd1d 	bl	8000d7c <__aeabi_fmul>
 8002342:	4603      	mov	r3, r0
 8002344:	4619      	mov	r1, r3
 8002346:	4620      	mov	r0, r4
 8002348:	f7fe fc0e 	bl	8000b68 <__aeabi_fsub>
 800234c:	4603      	mov	r3, r0
 800234e:	613b      	str	r3, [r7, #16]
			line1.y = pntStart.y;
 8002350:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002354:	61bb      	str	r3, [r7, #24]

			if (pntStart.y <= pntEnd.y)
 8002356:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800235a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f7fe feb4 	bl	80010cc <__aeabi_fcmple>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d060      	beq.n	800242c <draw+0x25c>
			{
				for (deltaL = line1.y; deltaL <= pntEnd.y; deltaL++)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	4618      	mov	r0, r3
 800236e:	f7fe fecb 	bl	8001108 <__aeabi_f2iz>
 8002372:	4603      	mov	r3, r0
 8002374:	663b      	str	r3, [r7, #96]	; 0x60
 8002376:	e04c      	b.n	8002412 <draw+0x242>
				{
					pntCur.x = (int32_t)(line1.a * deltaL + line1.b);
 8002378:	68fc      	ldr	r4, [r7, #12]
 800237a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800237c:	f7fe fcaa 	bl	8000cd4 <__aeabi_i2f>
 8002380:	4603      	mov	r3, r0
 8002382:	4619      	mov	r1, r3
 8002384:	4620      	mov	r0, r4
 8002386:	f7fe fcf9 	bl	8000d7c <__aeabi_fmul>
 800238a:	4603      	mov	r3, r0
 800238c:	461a      	mov	r2, r3
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	4619      	mov	r1, r3
 8002392:	4610      	mov	r0, r2
 8002394:	f7fe fbea 	bl	8000b6c <__addsf3>
 8002398:	4603      	mov	r3, r0
 800239a:	4618      	mov	r0, r3
 800239c:	f7fe feb4 	bl	8001108 <__aeabi_f2iz>
 80023a0:	4603      	mov	r3, r0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fe fc96 	bl	8000cd4 <__aeabi_i2f>
 80023a8:	4603      	mov	r3, r0
 80023aa:	62fb      	str	r3, [r7, #44]	; 0x2c
					pntCur.y = deltaL;
 80023ac:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80023ae:	f7fe fc91 	bl	8000cd4 <__aeabi_i2f>
 80023b2:	4603      	mov	r3, r0
 80023b4:	633b      	str	r3, [r7, #48]	; 0x30
					stepper_ctrl(pntCur.x - pntPre.x, pntCur.y - pntPre.y);
 80023b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023b8:	6a3a      	ldr	r2, [r7, #32]
 80023ba:	4611      	mov	r1, r2
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fe fbd3 	bl	8000b68 <__aeabi_fsub>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7fe fe9f 	bl	8001108 <__aeabi_f2iz>
 80023ca:	4603      	mov	r3, r0
 80023cc:	b25c      	sxtb	r4, r3
 80023ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7fe fbc7 	bl	8000b68 <__aeabi_fsub>
 80023da:	4603      	mov	r3, r0
 80023dc:	4618      	mov	r0, r3
 80023de:	f7fe fe93 	bl	8001108 <__aeabi_f2iz>
 80023e2:	4603      	mov	r3, r0
 80023e4:	b25b      	sxtb	r3, r3
 80023e6:	4619      	mov	r1, r3
 80023e8:	4620      	mov	r0, r4
 80023ea:	f001 fa3f 	bl	800386c <stepper_ctrl>
					if (deltaL % 100 == 0)
 80023ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023f0:	4a4c      	ldr	r2, [pc, #304]	; (8002524 <draw+0x354>)
 80023f2:	fb82 1203 	smull	r1, r2, r2, r3
 80023f6:	1151      	asrs	r1, r2, #5
 80023f8:	17da      	asrs	r2, r3, #31
 80023fa:	1a8a      	subs	r2, r1, r2
 80023fc:	2164      	movs	r1, #100	; 0x64
 80023fe:	fb01 f202 	mul.w	r2, r1, r2
 8002402:	1a9a      	subs	r2, r3, r2
					{
						//UART3_printXY(pntCur.x, pntCur.y);
					}
					pntPre.x = pntCur.x;
 8002404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002406:	623b      	str	r3, [r7, #32]
					pntPre.y = pntCur.y;
 8002408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240a:	627b      	str	r3, [r7, #36]	; 0x24
				for (deltaL = line1.y; deltaL <= pntEnd.y; deltaL++)
 800240c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800240e:	3301      	adds	r3, #1
 8002410:	663b      	str	r3, [r7, #96]	; 0x60
 8002412:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002414:	f7fe fc5e 	bl	8000cd4 <__aeabi_i2f>
 8002418:	4602      	mov	r2, r0
 800241a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800241c:	4619      	mov	r1, r3
 800241e:	4610      	mov	r0, r2
 8002420:	f7fe fe54 	bl	80010cc <__aeabi_fcmple>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d1a6      	bne.n	8002378 <draw+0x1a8>
			if (pntStart.y <= pntEnd.y)
 800242a:	e17f      	b.n	800272c <draw+0x55c>
				}
			}
			else if (pntStart.y > pntEnd.y)
 800242c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002430:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002432:	4611      	mov	r1, r2
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe fe5d 	bl	80010f4 <__aeabi_fcmpgt>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d100      	bne.n	8002442 <draw+0x272>
			if (pntStart.y <= pntEnd.y)
 8002440:	e174      	b.n	800272c <draw+0x55c>
			{
				for (deltaL = line1.y; deltaL >= pntEnd.y; deltaL--)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	4618      	mov	r0, r3
 8002446:	f7fe fe5f 	bl	8001108 <__aeabi_f2iz>
 800244a:	4603      	mov	r3, r0
 800244c:	663b      	str	r3, [r7, #96]	; 0x60
 800244e:	e04c      	b.n	80024ea <draw+0x31a>
				{
					pntCur.x = (int32_t)(line1.a * deltaL + line1.b);
 8002450:	68fc      	ldr	r4, [r7, #12]
 8002452:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002454:	f7fe fc3e 	bl	8000cd4 <__aeabi_i2f>
 8002458:	4603      	mov	r3, r0
 800245a:	4619      	mov	r1, r3
 800245c:	4620      	mov	r0, r4
 800245e:	f7fe fc8d 	bl	8000d7c <__aeabi_fmul>
 8002462:	4603      	mov	r3, r0
 8002464:	461a      	mov	r2, r3
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4619      	mov	r1, r3
 800246a:	4610      	mov	r0, r2
 800246c:	f7fe fb7e 	bl	8000b6c <__addsf3>
 8002470:	4603      	mov	r3, r0
 8002472:	4618      	mov	r0, r3
 8002474:	f7fe fe48 	bl	8001108 <__aeabi_f2iz>
 8002478:	4603      	mov	r3, r0
 800247a:	4618      	mov	r0, r3
 800247c:	f7fe fc2a 	bl	8000cd4 <__aeabi_i2f>
 8002480:	4603      	mov	r3, r0
 8002482:	62fb      	str	r3, [r7, #44]	; 0x2c
					pntCur.y = deltaL;
 8002484:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002486:	f7fe fc25 	bl	8000cd4 <__aeabi_i2f>
 800248a:	4603      	mov	r3, r0
 800248c:	633b      	str	r3, [r7, #48]	; 0x30
					stepper_ctrl(pntCur.x - pntPre.x, pntCur.y - pntPre.y);
 800248e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002490:	6a3a      	ldr	r2, [r7, #32]
 8002492:	4611      	mov	r1, r2
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe fb67 	bl	8000b68 <__aeabi_fsub>
 800249a:	4603      	mov	r3, r0
 800249c:	4618      	mov	r0, r3
 800249e:	f7fe fe33 	bl	8001108 <__aeabi_f2iz>
 80024a2:	4603      	mov	r3, r0
 80024a4:	b25c      	sxtb	r4, r3
 80024a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024aa:	4611      	mov	r1, r2
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7fe fb5b 	bl	8000b68 <__aeabi_fsub>
 80024b2:	4603      	mov	r3, r0
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7fe fe27 	bl	8001108 <__aeabi_f2iz>
 80024ba:	4603      	mov	r3, r0
 80024bc:	b25b      	sxtb	r3, r3
 80024be:	4619      	mov	r1, r3
 80024c0:	4620      	mov	r0, r4
 80024c2:	f001 f9d3 	bl	800386c <stepper_ctrl>
					if (deltaL % 100 == 0)
 80024c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024c8:	4a16      	ldr	r2, [pc, #88]	; (8002524 <draw+0x354>)
 80024ca:	fb82 1203 	smull	r1, r2, r2, r3
 80024ce:	1151      	asrs	r1, r2, #5
 80024d0:	17da      	asrs	r2, r3, #31
 80024d2:	1a8a      	subs	r2, r1, r2
 80024d4:	2164      	movs	r1, #100	; 0x64
 80024d6:	fb01 f202 	mul.w	r2, r1, r2
 80024da:	1a9a      	subs	r2, r3, r2
					{
						//UART3_printXY(pntCur.x, pntCur.y);
					}
					pntPre.x = pntCur.x;
 80024dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024de:	623b      	str	r3, [r7, #32]
					pntPre.y = pntCur.y;
 80024e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
				for (deltaL = line1.y; deltaL >= pntEnd.y; deltaL--)
 80024e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024e6:	3b01      	subs	r3, #1
 80024e8:	663b      	str	r3, [r7, #96]	; 0x60
 80024ea:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80024ec:	f7fe fbf2 	bl	8000cd4 <__aeabi_i2f>
 80024f0:	4602      	mov	r2, r0
 80024f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024f4:	4619      	mov	r1, r3
 80024f6:	4610      	mov	r0, r2
 80024f8:	f7fe fdf2 	bl	80010e0 <__aeabi_fcmpge>
 80024fc:	4603      	mov	r3, r0
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1a6      	bne.n	8002450 <draw+0x280>
			if (pntStart.y <= pntEnd.y)
 8002502:	e113      	b.n	800272c <draw+0x55c>
 8002504:	f3af 8000 	nop.w
 8002508:	54442d18 	.word	0x54442d18
 800250c:	400921fb 	.word	0x400921fb
 8002510:	40668000 	.word	0x40668000
 8002514:	42340000 	.word	0x42340000
 8002518:	43070000 	.word	0x43070000
 800251c:	c2340000 	.word	0xc2340000
 8002520:	c3070000 	.word	0xc3070000
 8002524:	51eb851f 	.word	0x51eb851f
			}
		}
		else// duong thang y = ax + b
		{
			// tim phuong trinh duong thang
			line1.a = (pntEnd.y - pntStart.y) / (pntEnd.x - pntStart.x);
 8002528:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800252a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800252e:	4611      	mov	r1, r2
 8002530:	4618      	mov	r0, r3
 8002532:	f7fe fb19 	bl	8000b68 <__aeabi_fsub>
 8002536:	4603      	mov	r3, r0
 8002538:	461c      	mov	r4, r3
 800253a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800253c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002540:	4611      	mov	r1, r2
 8002542:	4618      	mov	r0, r3
 8002544:	f7fe fb10 	bl	8000b68 <__aeabi_fsub>
 8002548:	4603      	mov	r3, r0
 800254a:	4619      	mov	r1, r3
 800254c:	4620      	mov	r0, r4
 800254e:	f7fe fcc9 	bl	8000ee4 <__aeabi_fdiv>
 8002552:	4603      	mov	r3, r0
 8002554:	60fb      	str	r3, [r7, #12]
			line1.b = pntEnd.y - pntEnd.x * line1.a;
 8002556:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8002558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	4611      	mov	r1, r2
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fc0c 	bl	8000d7c <__aeabi_fmul>
 8002564:	4603      	mov	r3, r0
 8002566:	4619      	mov	r1, r3
 8002568:	4620      	mov	r0, r4
 800256a:	f7fe fafd 	bl	8000b68 <__aeabi_fsub>
 800256e:	4603      	mov	r3, r0
 8002570:	613b      	str	r3, [r7, #16]
			line1.x = pntStart.x;
 8002572:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002576:	617b      	str	r3, [r7, #20]

			if (pntStart.x <= pntEnd.x)
 8002578:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800257c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800257e:	4611      	mov	r1, r2
 8002580:	4618      	mov	r0, r3
 8002582:	f7fe fda3 	bl	80010cc <__aeabi_fcmple>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d061      	beq.n	8002650 <draw+0x480>
			{
				for (deltaL = line1.x; deltaL <= pntEnd.x; deltaL++)
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe fdba 	bl	8001108 <__aeabi_f2iz>
 8002594:	4603      	mov	r3, r0
 8002596:	663b      	str	r3, [r7, #96]	; 0x60
 8002598:	e04c      	b.n	8002634 <draw+0x464>
				{
					pntCur.x = deltaL;
 800259a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800259c:	f7fe fb9a 	bl	8000cd4 <__aeabi_i2f>
 80025a0:	4603      	mov	r3, r0
 80025a2:	62fb      	str	r3, [r7, #44]	; 0x2c
					pntCur.y = (int32_t)(line1.a * deltaL + line1.b);
 80025a4:	68fc      	ldr	r4, [r7, #12]
 80025a6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80025a8:	f7fe fb94 	bl	8000cd4 <__aeabi_i2f>
 80025ac:	4603      	mov	r3, r0
 80025ae:	4619      	mov	r1, r3
 80025b0:	4620      	mov	r0, r4
 80025b2:	f7fe fbe3 	bl	8000d7c <__aeabi_fmul>
 80025b6:	4603      	mov	r3, r0
 80025b8:	461a      	mov	r2, r3
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4619      	mov	r1, r3
 80025be:	4610      	mov	r0, r2
 80025c0:	f7fe fad4 	bl	8000b6c <__addsf3>
 80025c4:	4603      	mov	r3, r0
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe fd9e 	bl	8001108 <__aeabi_f2iz>
 80025cc:	4603      	mov	r3, r0
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe fb80 	bl	8000cd4 <__aeabi_i2f>
 80025d4:	4603      	mov	r3, r0
 80025d6:	633b      	str	r3, [r7, #48]	; 0x30
					//UART3_printXY(pntCur.x, pntCur.y);
					//UART3_printXY(pntPre.x, pntPre.y);
					//UART3_printXY(pntCur.x - pntPre.x, pntCur.y - pntPre.y);
					stepper_ctrl(pntCur.x - pntPre.x, pntCur.y - pntPre.y);
 80025d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025da:	6a3a      	ldr	r2, [r7, #32]
 80025dc:	4611      	mov	r1, r2
 80025de:	4618      	mov	r0, r3
 80025e0:	f7fe fac2 	bl	8000b68 <__aeabi_fsub>
 80025e4:	4603      	mov	r3, r0
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fe fd8e 	bl	8001108 <__aeabi_f2iz>
 80025ec:	4603      	mov	r3, r0
 80025ee:	b25c      	sxtb	r4, r3
 80025f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fe fab6 	bl	8000b68 <__aeabi_fsub>
 80025fc:	4603      	mov	r3, r0
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fe fd82 	bl	8001108 <__aeabi_f2iz>
 8002604:	4603      	mov	r3, r0
 8002606:	b25b      	sxtb	r3, r3
 8002608:	4619      	mov	r1, r3
 800260a:	4620      	mov	r0, r4
 800260c:	f001 f92e 	bl	800386c <stepper_ctrl>
					if (deltaL % 100 == 0)
 8002610:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002612:	4a7f      	ldr	r2, [pc, #508]	; (8002810 <draw+0x640>)
 8002614:	fb82 1203 	smull	r1, r2, r2, r3
 8002618:	1151      	asrs	r1, r2, #5
 800261a:	17da      	asrs	r2, r3, #31
 800261c:	1a8a      	subs	r2, r1, r2
 800261e:	2164      	movs	r1, #100	; 0x64
 8002620:	fb01 f202 	mul.w	r2, r1, r2
 8002624:	1a9a      	subs	r2, r3, r2
					{
						//UART3_printXY(pntCur.x, pntCur.y);
					}
					pntPre.x = pntCur.x;
 8002626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002628:	623b      	str	r3, [r7, #32]
					pntPre.y = pntCur.y;
 800262a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
				for (deltaL = line1.x; deltaL <= pntEnd.x; deltaL++)
 800262e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002630:	3301      	adds	r3, #1
 8002632:	663b      	str	r3, [r7, #96]	; 0x60
 8002634:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002636:	f7fe fb4d 	bl	8000cd4 <__aeabi_i2f>
 800263a:	4602      	mov	r2, r0
 800263c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263e:	4619      	mov	r1, r3
 8002640:	4610      	mov	r0, r2
 8002642:	f7fe fd43 	bl	80010cc <__aeabi_fcmple>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d1a6      	bne.n	800259a <draw+0x3ca>
	{
 800264c:	f000 bf50 	b.w	80034f0 <draw+0x1320>
				}
			}
			else if (pntStart.x > pntEnd.x)
 8002650:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002654:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f7fe fd4b 	bl	80010f4 <__aeabi_fcmpgt>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d101      	bne.n	8002668 <draw+0x498>
	{
 8002664:	f000 bf44 	b.w	80034f0 <draw+0x1320>
			{
				for (deltaL = line1.x; deltaL >= pntEnd.x; deltaL--)
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fe fd4c 	bl	8001108 <__aeabi_f2iz>
 8002670:	4603      	mov	r3, r0
 8002672:	663b      	str	r3, [r7, #96]	; 0x60
 8002674:	e04c      	b.n	8002710 <draw+0x540>
				{
					pntCur.x = deltaL;
 8002676:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002678:	f7fe fb2c 	bl	8000cd4 <__aeabi_i2f>
 800267c:	4603      	mov	r3, r0
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
					pntCur.y = (int32_t)(line1.a * deltaL + line1.b);
 8002680:	68fc      	ldr	r4, [r7, #12]
 8002682:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002684:	f7fe fb26 	bl	8000cd4 <__aeabi_i2f>
 8002688:	4603      	mov	r3, r0
 800268a:	4619      	mov	r1, r3
 800268c:	4620      	mov	r0, r4
 800268e:	f7fe fb75 	bl	8000d7c <__aeabi_fmul>
 8002692:	4603      	mov	r3, r0
 8002694:	461a      	mov	r2, r3
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	4619      	mov	r1, r3
 800269a:	4610      	mov	r0, r2
 800269c:	f7fe fa66 	bl	8000b6c <__addsf3>
 80026a0:	4603      	mov	r3, r0
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe fd30 	bl	8001108 <__aeabi_f2iz>
 80026a8:	4603      	mov	r3, r0
 80026aa:	4618      	mov	r0, r3
 80026ac:	f7fe fb12 	bl	8000cd4 <__aeabi_i2f>
 80026b0:	4603      	mov	r3, r0
 80026b2:	633b      	str	r3, [r7, #48]	; 0x30
					stepper_ctrl(pntCur.x - pntPre.x, pntCur.y - pntPre.y);
 80026b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026b6:	6a3a      	ldr	r2, [r7, #32]
 80026b8:	4611      	mov	r1, r2
 80026ba:	4618      	mov	r0, r3
 80026bc:	f7fe fa54 	bl	8000b68 <__aeabi_fsub>
 80026c0:	4603      	mov	r3, r0
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fd20 	bl	8001108 <__aeabi_f2iz>
 80026c8:	4603      	mov	r3, r0
 80026ca:	b25c      	sxtb	r4, r3
 80026cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026d0:	4611      	mov	r1, r2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fe fa48 	bl	8000b68 <__aeabi_fsub>
 80026d8:	4603      	mov	r3, r0
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fe fd14 	bl	8001108 <__aeabi_f2iz>
 80026e0:	4603      	mov	r3, r0
 80026e2:	b25b      	sxtb	r3, r3
 80026e4:	4619      	mov	r1, r3
 80026e6:	4620      	mov	r0, r4
 80026e8:	f001 f8c0 	bl	800386c <stepper_ctrl>
					if (deltaL % 100 == 0)
 80026ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80026ee:	4a48      	ldr	r2, [pc, #288]	; (8002810 <draw+0x640>)
 80026f0:	fb82 1203 	smull	r1, r2, r2, r3
 80026f4:	1151      	asrs	r1, r2, #5
 80026f6:	17da      	asrs	r2, r3, #31
 80026f8:	1a8a      	subs	r2, r1, r2
 80026fa:	2164      	movs	r1, #100	; 0x64
 80026fc:	fb01 f202 	mul.w	r2, r1, r2
 8002700:	1a9a      	subs	r2, r3, r2
					{
						//UART3_printXY(pntCur.x, pntCur.y);
					}
					pntPre.x = pntCur.x;
 8002702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002704:	623b      	str	r3, [r7, #32]
					pntPre.y = pntCur.y;
 8002706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002708:	627b      	str	r3, [r7, #36]	; 0x24
				for (deltaL = line1.x; deltaL >= pntEnd.x; deltaL--)
 800270a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800270c:	3b01      	subs	r3, #1
 800270e:	663b      	str	r3, [r7, #96]	; 0x60
 8002710:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8002712:	f7fe fadf 	bl	8000cd4 <__aeabi_i2f>
 8002716:	4602      	mov	r2, r0
 8002718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800271a:	4619      	mov	r1, r3
 800271c:	4610      	mov	r0, r2
 800271e:	f7fe fcdf 	bl	80010e0 <__aeabi_fcmpge>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1a6      	bne.n	8002676 <draw+0x4a6>
	{
 8002728:	f000 bee2 	b.w	80034f0 <draw+0x1320>
 800272c:	f000 bee0 	b.w	80034f0 <draw+0x1320>
				}
			}
		}
	}
	else if (gVal1.G == CNC_CIRCLE_CLW)
 8002730:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8002734:	2b02      	cmp	r3, #2
 8002736:	f040 8375 	bne.w	8002e24 <draw+0xc54>
	{
		// tim ban kinh duong tron
		if (gVal1.R == 0)
 800273a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800273e:	f04f 0100 	mov.w	r1, #0
 8002742:	4618      	mov	r0, r3
 8002744:	f7fe fcae 	bl	80010a4 <__aeabi_fcmpeq>
 8002748:	4603      	mov	r3, r0
 800274a:	2b00      	cmp	r3, #0
 800274c:	d062      	beq.n	8002814 <draw+0x644>
		{
			pntCenter.x = pntStart.x + gVal1.I;
 800274e:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002752:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002756:	4618      	mov	r0, r3
 8002758:	f7fe fabc 	bl	8000cd4 <__aeabi_i2f>
 800275c:	4603      	mov	r3, r0
 800275e:	4619      	mov	r1, r3
 8002760:	4620      	mov	r0, r4
 8002762:	f7fe fa03 	bl	8000b6c <__addsf3>
 8002766:	4603      	mov	r3, r0
 8002768:	647b      	str	r3, [r7, #68]	; 0x44
			pntCenter.y = pntStart.y + gVal1.J;
 800276a:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 800276e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe faae 	bl	8000cd4 <__aeabi_i2f>
 8002778:	4603      	mov	r3, r0
 800277a:	4619      	mov	r1, r3
 800277c:	4620      	mov	r0, r4
 800277e:	f7fe f9f5 	bl	8000b6c <__addsf3>
 8002782:	4603      	mov	r3, r0
 8002784:	64bb      	str	r3, [r7, #72]	; 0x48
			gVal1.R = sqrt((pntStart.x - pntCenter.x) * (pntStart.x - pntCenter.x) + (pntStart.y - pntCenter.y) * (pntStart.y - pntCenter.y));
 8002786:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800278a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800278c:	4611      	mov	r1, r2
 800278e:	4618      	mov	r0, r3
 8002790:	f7fe f9ea 	bl	8000b68 <__aeabi_fsub>
 8002794:	4603      	mov	r3, r0
 8002796:	461c      	mov	r4, r3
 8002798:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800279c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800279e:	4611      	mov	r1, r2
 80027a0:	4618      	mov	r0, r3
 80027a2:	f7fe f9e1 	bl	8000b68 <__aeabi_fsub>
 80027a6:	4603      	mov	r3, r0
 80027a8:	4619      	mov	r1, r3
 80027aa:	4620      	mov	r0, r4
 80027ac:	f7fe fae6 	bl	8000d7c <__aeabi_fmul>
 80027b0:	4603      	mov	r3, r0
 80027b2:	461c      	mov	r4, r3
 80027b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027ba:	4611      	mov	r1, r2
 80027bc:	4618      	mov	r0, r3
 80027be:	f7fe f9d3 	bl	8000b68 <__aeabi_fsub>
 80027c2:	4603      	mov	r3, r0
 80027c4:	461d      	mov	r5, r3
 80027c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80027ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fe f9ca 	bl	8000b68 <__aeabi_fsub>
 80027d4:	4603      	mov	r3, r0
 80027d6:	4619      	mov	r1, r3
 80027d8:	4628      	mov	r0, r5
 80027da:	f7fe facf 	bl	8000d7c <__aeabi_fmul>
 80027de:	4603      	mov	r3, r0
 80027e0:	4619      	mov	r1, r3
 80027e2:	4620      	mov	r0, r4
 80027e4:	f7fe f9c2 	bl	8000b6c <__addsf3>
 80027e8:	4603      	mov	r3, r0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7fd fe1c 	bl	8000428 <__aeabi_f2d>
 80027f0:	4603      	mov	r3, r0
 80027f2:	460c      	mov	r4, r1
 80027f4:	4618      	mov	r0, r3
 80027f6:	4621      	mov	r1, r4
 80027f8:	f003 fa6e 	bl	8005cd8 <sqrt>
 80027fc:	4603      	mov	r3, r0
 80027fe:	460c      	mov	r4, r1
 8002800:	4618      	mov	r0, r3
 8002802:	4621      	mov	r1, r4
 8002804:	f7fe f95c 	bl	8000ac0 <__aeabi_d2f>
 8002808:	4603      	mov	r3, r0
 800280a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800280e:	e10c      	b.n	8002a2a <draw+0x85a>
 8002810:	51eb851f 	.word	0x51eb851f
		}
		else
		{
			// khoang cach diem bat dau va ket thuc
			float q = sqrt((pntEnd.x - pntStart.x) * (pntEnd.x - pntStart.x) + (pntEnd.y - pntStart.y) * (pntEnd.y - pntStart.y));
 8002814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002816:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800281a:	4611      	mov	r1, r2
 800281c:	4618      	mov	r0, r3
 800281e:	f7fe f9a3 	bl	8000b68 <__aeabi_fsub>
 8002822:	4603      	mov	r3, r0
 8002824:	461c      	mov	r4, r3
 8002826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002828:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800282c:	4611      	mov	r1, r2
 800282e:	4618      	mov	r0, r3
 8002830:	f7fe f99a 	bl	8000b68 <__aeabi_fsub>
 8002834:	4603      	mov	r3, r0
 8002836:	4619      	mov	r1, r3
 8002838:	4620      	mov	r0, r4
 800283a:	f7fe fa9f 	bl	8000d7c <__aeabi_fmul>
 800283e:	4603      	mov	r3, r0
 8002840:	461c      	mov	r4, r3
 8002842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002844:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002848:	4611      	mov	r1, r2
 800284a:	4618      	mov	r0, r3
 800284c:	f7fe f98c 	bl	8000b68 <__aeabi_fsub>
 8002850:	4603      	mov	r3, r0
 8002852:	461d      	mov	r5, r3
 8002854:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002856:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f7fe f983 	bl	8000b68 <__aeabi_fsub>
 8002862:	4603      	mov	r3, r0
 8002864:	4619      	mov	r1, r3
 8002866:	4628      	mov	r0, r5
 8002868:	f7fe fa88 	bl	8000d7c <__aeabi_fmul>
 800286c:	4603      	mov	r3, r0
 800286e:	4619      	mov	r1, r3
 8002870:	4620      	mov	r0, r4
 8002872:	f7fe f97b 	bl	8000b6c <__addsf3>
 8002876:	4603      	mov	r3, r0
 8002878:	4618      	mov	r0, r3
 800287a:	f7fd fdd5 	bl	8000428 <__aeabi_f2d>
 800287e:	4603      	mov	r3, r0
 8002880:	460c      	mov	r4, r1
 8002882:	4618      	mov	r0, r3
 8002884:	4621      	mov	r1, r4
 8002886:	f003 fa27 	bl	8005cd8 <sqrt>
 800288a:	4603      	mov	r3, r0
 800288c:	460c      	mov	r4, r1
 800288e:	4618      	mov	r0, r3
 8002890:	4621      	mov	r1, r4
 8002892:	f7fe f915 	bl	8000ac0 <__aeabi_d2f>
 8002896:	4603      	mov	r3, r0
 8002898:	65fb      	str	r3, [r7, #92]	; 0x5c
			pntCenter.x = (pntStart.x + pntEnd.x) / 2 - sqrt(gVal1.R * gVal1.R - (q * q / 4)) * (pntStart.y - pntEnd.y) / q;
 800289a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800289e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028a0:	4611      	mov	r1, r2
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fe f962 	bl	8000b6c <__addsf3>
 80028a8:	4603      	mov	r3, r0
 80028aa:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fe fb18 	bl	8000ee4 <__aeabi_fdiv>
 80028b4:	4603      	mov	r3, r0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fd fdb6 	bl	8000428 <__aeabi_f2d>
 80028bc:	4604      	mov	r4, r0
 80028be:	460d      	mov	r5, r1
 80028c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80028c4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80028c8:	4611      	mov	r1, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fe fa56 	bl	8000d7c <__aeabi_fmul>
 80028d0:	4603      	mov	r3, r0
 80028d2:	461e      	mov	r6, r3
 80028d4:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80028d6:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80028d8:	f7fe fa50 	bl	8000d7c <__aeabi_fmul>
 80028dc:	4603      	mov	r3, r0
 80028de:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe fafe 	bl	8000ee4 <__aeabi_fdiv>
 80028e8:	4603      	mov	r3, r0
 80028ea:	4619      	mov	r1, r3
 80028ec:	4630      	mov	r0, r6
 80028ee:	f7fe f93b 	bl	8000b68 <__aeabi_fsub>
 80028f2:	4603      	mov	r3, r0
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fd fd97 	bl	8000428 <__aeabi_f2d>
 80028fa:	4602      	mov	r2, r0
 80028fc:	460b      	mov	r3, r1
 80028fe:	4610      	mov	r0, r2
 8002900:	4619      	mov	r1, r3
 8002902:	f003 f9e9 	bl	8005cd8 <sqrt>
 8002906:	4680      	mov	r8, r0
 8002908:	4689      	mov	r9, r1
 800290a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800290e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002910:	4611      	mov	r1, r2
 8002912:	4618      	mov	r0, r3
 8002914:	f7fe f928 	bl	8000b68 <__aeabi_fsub>
 8002918:	4603      	mov	r3, r0
 800291a:	4618      	mov	r0, r3
 800291c:	f7fd fd84 	bl	8000428 <__aeabi_f2d>
 8002920:	4602      	mov	r2, r0
 8002922:	460b      	mov	r3, r1
 8002924:	4640      	mov	r0, r8
 8002926:	4649      	mov	r1, r9
 8002928:	f7fd fdd2 	bl	80004d0 <__aeabi_dmul>
 800292c:	4602      	mov	r2, r0
 800292e:	460b      	mov	r3, r1
 8002930:	4690      	mov	r8, r2
 8002932:	4699      	mov	r9, r3
 8002934:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8002936:	f7fd fd77 	bl	8000428 <__aeabi_f2d>
 800293a:	4602      	mov	r2, r0
 800293c:	460b      	mov	r3, r1
 800293e:	4640      	mov	r0, r8
 8002940:	4649      	mov	r1, r9
 8002942:	f7fd feef 	bl	8000724 <__aeabi_ddiv>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	4620      	mov	r0, r4
 800294c:	4629      	mov	r1, r5
 800294e:	f7fd fc0b 	bl	8000168 <__aeabi_dsub>
 8002952:	4603      	mov	r3, r0
 8002954:	460c      	mov	r4, r1
 8002956:	4618      	mov	r0, r3
 8002958:	4621      	mov	r1, r4
 800295a:	f7fe f8b1 	bl	8000ac0 <__aeabi_d2f>
 800295e:	4603      	mov	r3, r0
 8002960:	647b      	str	r3, [r7, #68]	; 0x44
			pntCenter.y = (pntStart.y + pntEnd.y) / 2 - sqrt(gVal1.R * gVal1.R - (q * q / 4)) * (pntEnd.x - pntStart.x) / q;
 8002962:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002966:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002968:	4611      	mov	r1, r2
 800296a:	4618      	mov	r0, r3
 800296c:	f7fe f8fe 	bl	8000b6c <__addsf3>
 8002970:	4603      	mov	r3, r0
 8002972:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fab4 	bl	8000ee4 <__aeabi_fdiv>
 800297c:	4603      	mov	r3, r0
 800297e:	4618      	mov	r0, r3
 8002980:	f7fd fd52 	bl	8000428 <__aeabi_f2d>
 8002984:	4604      	mov	r4, r0
 8002986:	460d      	mov	r5, r1
 8002988:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800298c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002990:	4611      	mov	r1, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f7fe f9f2 	bl	8000d7c <__aeabi_fmul>
 8002998:	4603      	mov	r3, r0
 800299a:	461e      	mov	r6, r3
 800299c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800299e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80029a0:	f7fe f9ec 	bl	8000d7c <__aeabi_fmul>
 80029a4:	4603      	mov	r3, r0
 80029a6:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7fe fa9a 	bl	8000ee4 <__aeabi_fdiv>
 80029b0:	4603      	mov	r3, r0
 80029b2:	4619      	mov	r1, r3
 80029b4:	4630      	mov	r0, r6
 80029b6:	f7fe f8d7 	bl	8000b68 <__aeabi_fsub>
 80029ba:	4603      	mov	r3, r0
 80029bc:	4618      	mov	r0, r3
 80029be:	f7fd fd33 	bl	8000428 <__aeabi_f2d>
 80029c2:	4602      	mov	r2, r0
 80029c4:	460b      	mov	r3, r1
 80029c6:	4610      	mov	r0, r2
 80029c8:	4619      	mov	r1, r3
 80029ca:	f003 f985 	bl	8005cd8 <sqrt>
 80029ce:	4680      	mov	r8, r0
 80029d0:	4689      	mov	r9, r1
 80029d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029d4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80029d8:	4611      	mov	r1, r2
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fe f8c4 	bl	8000b68 <__aeabi_fsub>
 80029e0:	4603      	mov	r3, r0
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fd fd20 	bl	8000428 <__aeabi_f2d>
 80029e8:	4602      	mov	r2, r0
 80029ea:	460b      	mov	r3, r1
 80029ec:	4640      	mov	r0, r8
 80029ee:	4649      	mov	r1, r9
 80029f0:	f7fd fd6e 	bl	80004d0 <__aeabi_dmul>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4690      	mov	r8, r2
 80029fa:	4699      	mov	r9, r3
 80029fc:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80029fe:	f7fd fd13 	bl	8000428 <__aeabi_f2d>
 8002a02:	4602      	mov	r2, r0
 8002a04:	460b      	mov	r3, r1
 8002a06:	4640      	mov	r0, r8
 8002a08:	4649      	mov	r1, r9
 8002a0a:	f7fd fe8b 	bl	8000724 <__aeabi_ddiv>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	460b      	mov	r3, r1
 8002a12:	4620      	mov	r0, r4
 8002a14:	4629      	mov	r1, r5
 8002a16:	f7fd fba7 	bl	8000168 <__aeabi_dsub>
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	460c      	mov	r4, r1
 8002a1e:	4618      	mov	r0, r3
 8002a20:	4621      	mov	r1, r4
 8002a22:	f7fe f84d 	bl	8000ac0 <__aeabi_d2f>
 8002a26:	4603      	mov	r3, r0
 8002a28:	64bb      	str	r3, [r7, #72]	; 0x48
		}
		// khoang cach 2 diem lon hon 2 lan ban kinh
		if (sqrt((pntStart.x - pntCenter.x) * (pntStart.x - pntCenter.x) + (pntStart.y - pntCenter.y) * (pntStart.y - pntCenter.y)) > (2 * gVal1.R))
 8002a2a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a30:	4611      	mov	r1, r2
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fe f898 	bl	8000b68 <__aeabi_fsub>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	461c      	mov	r4, r3
 8002a3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f7fe f88f 	bl	8000b68 <__aeabi_fsub>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4620      	mov	r0, r4
 8002a50:	f7fe f994 	bl	8000d7c <__aeabi_fmul>
 8002a54:	4603      	mov	r3, r0
 8002a56:	461c      	mov	r4, r3
 8002a58:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a5e:	4611      	mov	r1, r2
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fe f881 	bl	8000b68 <__aeabi_fsub>
 8002a66:	4603      	mov	r3, r0
 8002a68:	461d      	mov	r5, r3
 8002a6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a70:	4611      	mov	r1, r2
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7fe f878 	bl	8000b68 <__aeabi_fsub>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	4628      	mov	r0, r5
 8002a7e:	f7fe f97d 	bl	8000d7c <__aeabi_fmul>
 8002a82:	4603      	mov	r3, r0
 8002a84:	4619      	mov	r1, r3
 8002a86:	4620      	mov	r0, r4
 8002a88:	f7fe f870 	bl	8000b6c <__addsf3>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7fd fcca 	bl	8000428 <__aeabi_f2d>
 8002a94:	4603      	mov	r3, r0
 8002a96:	460c      	mov	r4, r1
 8002a98:	4618      	mov	r0, r3
 8002a9a:	4621      	mov	r1, r4
 8002a9c:	f003 f91c 	bl	8005cd8 <sqrt>
 8002aa0:	4604      	mov	r4, r0
 8002aa2:	460d      	mov	r5, r1
 8002aa4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002aa8:	4619      	mov	r1, r3
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7fe f85e 	bl	8000b6c <__addsf3>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7fd fcb8 	bl	8000428 <__aeabi_f2d>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4620      	mov	r0, r4
 8002abe:	4629      	mov	r1, r5
 8002ac0:	f7fd ff96 	bl	80009f0 <__aeabi_dcmpgt>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d009      	beq.n	8002ade <draw+0x90e>
		{
			return pntStart;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	461c      	mov	r4, r3
 8002ace:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002ad2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ad6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002ada:	f000 bd11 	b.w	8003500 <draw+0x1330>
		}
		// tim goc cua diem dau va diem cuoi so voi tam
		pntStart.angle = 180 * atan2(pntStart.y - pntCenter.y, pntStart.x - pntCenter.x) / M_PI;
 8002ade:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ae2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ae4:	4611      	mov	r1, r2
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7fe f83e 	bl	8000b68 <__aeabi_fsub>
 8002aec:	4603      	mov	r3, r0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7fd fc9a 	bl	8000428 <__aeabi_f2d>
 8002af4:	4604      	mov	r4, r0
 8002af6:	460d      	mov	r5, r1
 8002af8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002afc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fe f831 	bl	8000b68 <__aeabi_fsub>
 8002b06:	4603      	mov	r3, r0
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f7fd fc8d 	bl	8000428 <__aeabi_f2d>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	460b      	mov	r3, r1
 8002b12:	4620      	mov	r0, r4
 8002b14:	4629      	mov	r1, r5
 8002b16:	f003 f8dd 	bl	8005cd4 <atan2>
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	4bbe      	ldr	r3, [pc, #760]	; (8002e18 <draw+0xc48>)
 8002b20:	f7fd fcd6 	bl	80004d0 <__aeabi_dmul>
 8002b24:	4603      	mov	r3, r0
 8002b26:	460c      	mov	r4, r1
 8002b28:	4618      	mov	r0, r3
 8002b2a:	4621      	mov	r1, r4
 8002b2c:	a3b6      	add	r3, pc, #728	; (adr r3, 8002e08 <draw+0xc38>)
 8002b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b32:	f7fd fdf7 	bl	8000724 <__aeabi_ddiv>
 8002b36:	4603      	mov	r3, r0
 8002b38:	460c      	mov	r4, r1
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	4621      	mov	r1, r4
 8002b3e:	f7fd ffbf 	bl	8000ac0 <__aeabi_d2f>
 8002b42:	4603      	mov	r3, r0
 8002b44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		pntEnd.angle = 180 * atan2(pntEnd.y - pntCenter.y, pntEnd.x - pntCenter.x) / M_PI;
 8002b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002b4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b4c:	4611      	mov	r1, r2
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe f80a 	bl	8000b68 <__aeabi_fsub>
 8002b54:	4603      	mov	r3, r0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fd fc66 	bl	8000428 <__aeabi_f2d>
 8002b5c:	4604      	mov	r4, r0
 8002b5e:	460d      	mov	r5, r1
 8002b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002b64:	4611      	mov	r1, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd fffe 	bl	8000b68 <__aeabi_fsub>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7fd fc5a 	bl	8000428 <__aeabi_f2d>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4620      	mov	r0, r4
 8002b7a:	4629      	mov	r1, r5
 8002b7c:	f003 f8aa 	bl	8005cd4 <atan2>
 8002b80:	f04f 0200 	mov.w	r2, #0
 8002b84:	4ba4      	ldr	r3, [pc, #656]	; (8002e18 <draw+0xc48>)
 8002b86:	f7fd fca3 	bl	80004d0 <__aeabi_dmul>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	460c      	mov	r4, r1
 8002b8e:	4618      	mov	r0, r3
 8002b90:	4621      	mov	r1, r4
 8002b92:	a39d      	add	r3, pc, #628	; (adr r3, 8002e08 <draw+0xc38>)
 8002b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b98:	f7fd fdc4 	bl	8000724 <__aeabi_ddiv>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	460c      	mov	r4, r1
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	f7fd ff8c 	bl	8000ac0 <__aeabi_d2f>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	643b      	str	r3, [r7, #64]	; 0x40

		// xac dinh goc de chay het cung tron
		angle = pntStart.angle;
 8002bac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bb0:	667b      	str	r3, [r7, #100]	; 0x64
		anglePre = (int)angle;
 8002bb2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002bb4:	f7fe faa8 	bl	8001108 <__aeabi_f2iz>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

		// do dich chuyen cua 1 truc tuong ung voi 1 buoc (STEP)
		deltaC = 360 * STEP / (2 * M_PI * gVal1.R);
 8002bbe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7fd fc30 	bl	8000428 <__aeabi_f2d>
 8002bc8:	a391      	add	r3, pc, #580	; (adr r3, 8002e10 <draw+0xc40>)
 8002bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bce:	f7fd fc7f 	bl	80004d0 <__aeabi_dmul>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	460c      	mov	r4, r1
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	4623      	mov	r3, r4
 8002bda:	f04f 0000 	mov.w	r0, #0
 8002bde:	498f      	ldr	r1, [pc, #572]	; (8002e1c <draw+0xc4c>)
 8002be0:	f7fd fda0 	bl	8000724 <__aeabi_ddiv>
 8002be4:	4603      	mov	r3, r0
 8002be6:	460c      	mov	r4, r1
 8002be8:	4618      	mov	r0, r3
 8002bea:	4621      	mov	r1, r4
 8002bec:	f7fd ff68 	bl	8000ac0 <__aeabi_d2f>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	657b      	str	r3, [r7, #84]	; 0x54
		// quen me roi????
		if ((pntStart.angle <= 0 && pntEnd.angle <= 0 && pntEnd.angle >= pntStart.angle)
 8002bf4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002bf8:	f04f 0100 	mov.w	r1, #0
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fe fa65 	bl	80010cc <__aeabi_fcmple>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d012      	beq.n	8002c2e <draw+0xa5e>
 8002c08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c0a:	f04f 0100 	mov.w	r1, #0
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7fe fa5c 	bl	80010cc <__aeabi_fcmple>
 8002c14:	4603      	mov	r3, r0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d009      	beq.n	8002c2e <draw+0xa5e>
 8002c1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c1c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c20:	4611      	mov	r1, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe fa5c 	bl	80010e0 <__aeabi_fcmpge>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d12f      	bne.n	8002c8e <draw+0xabe>
		|| (pntStart.angle <= 0 && pntEnd.angle >= 0)
 8002c2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c32:	f04f 0100 	mov.w	r1, #0
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fe fa48 	bl	80010cc <__aeabi_fcmple>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d008      	beq.n	8002c54 <draw+0xa84>
 8002c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c44:	f04f 0100 	mov.w	r1, #0
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7fe fa49 	bl	80010e0 <__aeabi_fcmpge>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d11c      	bne.n	8002c8e <draw+0xabe>
		|| (pntStart.angle >= 0 && pntEnd.angle >= 0 && pntEnd.angle >= pntStart.angle)
 8002c54:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c58:	f04f 0100 	mov.w	r1, #0
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fe fa3f 	bl	80010e0 <__aeabi_fcmpge>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d019      	beq.n	8002c9c <draw+0xacc>
 8002c68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c6a:	f04f 0100 	mov.w	r1, #0
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7fe fa36 	bl	80010e0 <__aeabi_fcmpge>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d010      	beq.n	8002c9c <draw+0xacc>
 8002c7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c7c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002c80:	4611      	mov	r1, r2
 8002c82:	4618      	mov	r0, r3
 8002c84:	f7fe fa2c 	bl	80010e0 <__aeabi_fcmpge>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d006      	beq.n	8002c9c <draw+0xacc>
		)
		{
			pntEnd.angle -= 360;
 8002c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c90:	4963      	ldr	r1, [pc, #396]	; (8002e20 <draw+0xc50>)
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fd ff68 	bl	8000b68 <__aeabi_fsub>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	643b      	str	r3, [r7, #64]	; 0x40
		}
		while (angle >= pntEnd.angle)
 8002c9c:	e0a4      	b.n	8002de8 <draw+0xc18>
		{
			pntCur.x = (int32_t)(gVal1.R * cos(angle * M_PI / 180) + pntCenter.x);
 8002c9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f7fd fbc0 	bl	8000428 <__aeabi_f2d>
 8002ca8:	4604      	mov	r4, r0
 8002caa:	460d      	mov	r5, r1
 8002cac:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002cae:	f7fd fbbb 	bl	8000428 <__aeabi_f2d>
 8002cb2:	a355      	add	r3, pc, #340	; (adr r3, 8002e08 <draw+0xc38>)
 8002cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb8:	f7fd fc0a 	bl	80004d0 <__aeabi_dmul>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	460b      	mov	r3, r1
 8002cc0:	4610      	mov	r0, r2
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	f04f 0200 	mov.w	r2, #0
 8002cc8:	4b53      	ldr	r3, [pc, #332]	; (8002e18 <draw+0xc48>)
 8002cca:	f7fd fd2b 	bl	8000724 <__aeabi_ddiv>
 8002cce:	4602      	mov	r2, r0
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	4610      	mov	r0, r2
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	f002 ff8d 	bl	8005bf4 <cos>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4620      	mov	r0, r4
 8002ce0:	4629      	mov	r1, r5
 8002ce2:	f7fd fbf5 	bl	80004d0 <__aeabi_dmul>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	460c      	mov	r4, r1
 8002cea:	4625      	mov	r5, r4
 8002cec:	461c      	mov	r4, r3
 8002cee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7fd fb99 	bl	8000428 <__aeabi_f2d>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4620      	mov	r0, r4
 8002cfc:	4629      	mov	r1, r5
 8002cfe:	f7fd fa35 	bl	800016c <__adddf3>
 8002d02:	4603      	mov	r3, r0
 8002d04:	460c      	mov	r4, r1
 8002d06:	4618      	mov	r0, r3
 8002d08:	4621      	mov	r1, r4
 8002d0a:	f7fd fe91 	bl	8000a30 <__aeabi_d2iz>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fd ffdf 	bl	8000cd4 <__aeabi_i2f>
 8002d16:	4603      	mov	r3, r0
 8002d18:	62fb      	str	r3, [r7, #44]	; 0x2c
			pntCur.y = (int32_t)(gVal1.R * sin(angle * M_PI / 180) + pntCenter.y);
 8002d1a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fb82 	bl	8000428 <__aeabi_f2d>
 8002d24:	4604      	mov	r4, r0
 8002d26:	460d      	mov	r5, r1
 8002d28:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002d2a:	f7fd fb7d 	bl	8000428 <__aeabi_f2d>
 8002d2e:	a336      	add	r3, pc, #216	; (adr r3, 8002e08 <draw+0xc38>)
 8002d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d34:	f7fd fbcc 	bl	80004d0 <__aeabi_dmul>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	4610      	mov	r0, r2
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	4b34      	ldr	r3, [pc, #208]	; (8002e18 <draw+0xc48>)
 8002d46:	f7fd fced 	bl	8000724 <__aeabi_ddiv>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	4610      	mov	r0, r2
 8002d50:	4619      	mov	r1, r3
 8002d52:	f002 ff85 	bl	8005c60 <sin>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4620      	mov	r0, r4
 8002d5c:	4629      	mov	r1, r5
 8002d5e:	f7fd fbb7 	bl	80004d0 <__aeabi_dmul>
 8002d62:	4603      	mov	r3, r0
 8002d64:	460c      	mov	r4, r1
 8002d66:	4625      	mov	r5, r4
 8002d68:	461c      	mov	r4, r3
 8002d6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fd fb5b 	bl	8000428 <__aeabi_f2d>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4620      	mov	r0, r4
 8002d78:	4629      	mov	r1, r5
 8002d7a:	f7fd f9f7 	bl	800016c <__adddf3>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	460c      	mov	r4, r1
 8002d82:	4618      	mov	r0, r3
 8002d84:	4621      	mov	r1, r4
 8002d86:	f7fd fe53 	bl	8000a30 <__aeabi_d2iz>
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fd ffa1 	bl	8000cd4 <__aeabi_i2f>
 8002d92:	4603      	mov	r3, r0
 8002d94:	633b      	str	r3, [r7, #48]	; 0x30
			//UART3_printXY(pntCur.x, pntCur.y);
			//UART3_printXY(pntPre.x, pntPre.y);
			//UART3_printXY(pntCur.x - pntPre.x, pntCur.y -pntPre.y);
			stepper_ctrl(pntCur.x - pntPre.x, pntCur.y - pntPre.y);
 8002d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d98:	6a3a      	ldr	r2, [r7, #32]
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7fd fee3 	bl	8000b68 <__aeabi_fsub>
 8002da2:	4603      	mov	r3, r0
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fe f9af 	bl	8001108 <__aeabi_f2iz>
 8002daa:	4603      	mov	r3, r0
 8002dac:	b25c      	sxtb	r4, r3
 8002dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002db0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db2:	4611      	mov	r1, r2
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fd fed7 	bl	8000b68 <__aeabi_fsub>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7fe f9a3 	bl	8001108 <__aeabi_f2iz>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	b25b      	sxtb	r3, r3
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4620      	mov	r0, r4
 8002dca:	f000 fd4f 	bl	800386c <stepper_ctrl>
			if ((int)angle !=anglePre)// ghi gia tri len uart
 8002dce:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002dd0:	f7fe f99a 	bl	8001108 <__aeabi_f2iz>
			{
				//UART3_printXY(pntCur.x, pntCur.y);
				//anglePre = (int)angle;
			}
			pntPre.x = pntCur.x;
 8002dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd6:	623b      	str	r3, [r7, #32]
			pntPre.y = pntCur.y;
 8002dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
			angle -= deltaC;
 8002ddc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dde:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8002de0:	f7fd fec2 	bl	8000b68 <__aeabi_fsub>
 8002de4:	4603      	mov	r3, r0
 8002de6:	667b      	str	r3, [r7, #100]	; 0x64
		while (angle >= pntEnd.angle)
 8002de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dea:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7fe f96d 	bl	80010cc <__aeabi_fcmple>
 8002df2:	4603      	mov	r3, r0
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f47f af52 	bne.w	8002c9e <draw+0xace>
		}
		// reset gVal1.R = 0 for next Gcode
		gVal1.R = 0;
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002e02:	e375      	b.n	80034f0 <draw+0x1320>
 8002e04:	f3af 8000 	nop.w
 8002e08:	54442d18 	.word	0x54442d18
 8002e0c:	400921fb 	.word	0x400921fb
 8002e10:	54442d18 	.word	0x54442d18
 8002e14:	401921fb 	.word	0x401921fb
 8002e18:	40668000 	.word	0x40668000
 8002e1c:	40768000 	.word	0x40768000
 8002e20:	43b40000 	.word	0x43b40000
	}
	else if (gVal1.G == CNC_CIRCLE_ACLW)// G03 noi suy tron nguoc chieu kim dong ho
 8002e24:	f897 308c 	ldrb.w	r3, [r7, #140]	; 0x8c
 8002e28:	2b03      	cmp	r3, #3
 8002e2a:	f040 8361 	bne.w	80034f0 <draw+0x1320>
	{
		// tim tam duong tron
		if (gVal1.R == 0)
 8002e2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002e32:	f04f 0100 	mov.w	r1, #0
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe f934 	bl	80010a4 <__aeabi_fcmpeq>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d060      	beq.n	8002f04 <draw+0xd34>
		{
			pntCenter.x = pntStart.x + gVal1.I;
 8002e42:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8002e46:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fd ff42 	bl	8000cd4 <__aeabi_i2f>
 8002e50:	4603      	mov	r3, r0
 8002e52:	4619      	mov	r1, r3
 8002e54:	4620      	mov	r0, r4
 8002e56:	f7fd fe89 	bl	8000b6c <__addsf3>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	647b      	str	r3, [r7, #68]	; 0x44
			pntCenter.y = pntStart.y + gVal1.J;
 8002e5e:	f8d7 40b4 	ldr.w	r4, [r7, #180]	; 0xb4
 8002e62:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fd ff34 	bl	8000cd4 <__aeabi_i2f>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4620      	mov	r0, r4
 8002e72:	f7fd fe7b 	bl	8000b6c <__addsf3>
 8002e76:	4603      	mov	r3, r0
 8002e78:	64bb      	str	r3, [r7, #72]	; 0x48
			gVal1.R = sqrt((pntStart.x - pntCenter.x) * (pntStart.x - pntCenter.x) + (pntStart.y - pntCenter.y) * (pntStart.y - pntCenter.y));
 8002e7a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e80:	4611      	mov	r1, r2
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fd fe70 	bl	8000b68 <__aeabi_fsub>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	461c      	mov	r4, r3
 8002e8c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e92:	4611      	mov	r1, r2
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7fd fe67 	bl	8000b68 <__aeabi_fsub>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4620      	mov	r0, r4
 8002ea0:	f7fd ff6c 	bl	8000d7c <__aeabi_fmul>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	461c      	mov	r4, r3
 8002ea8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002eac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002eae:	4611      	mov	r1, r2
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7fd fe59 	bl	8000b68 <__aeabi_fsub>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	461d      	mov	r5, r3
 8002eba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ebe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002ec0:	4611      	mov	r1, r2
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	f7fd fe50 	bl	8000b68 <__aeabi_fsub>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4628      	mov	r0, r5
 8002ece:	f7fd ff55 	bl	8000d7c <__aeabi_fmul>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	f7fd fe48 	bl	8000b6c <__addsf3>
 8002edc:	4603      	mov	r3, r0
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f7fd faa2 	bl	8000428 <__aeabi_f2d>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	460c      	mov	r4, r1
 8002ee8:	4618      	mov	r0, r3
 8002eea:	4621      	mov	r1, r4
 8002eec:	f002 fef4 	bl	8005cd8 <sqrt>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	460c      	mov	r4, r1
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	4621      	mov	r1, r4
 8002ef8:	f7fd fde2 	bl	8000ac0 <__aeabi_d2f>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f02:	e10a      	b.n	800311a <draw+0xf4a>
		}
		else
		{
			//khoang cach diem dau va diem ket thuc
			float q = sqrt((pntEnd.x - pntStart.x) * (pntEnd.x - pntStart.x) + (pntEnd.y - pntStart.y) * (pntEnd.y - pntStart.y));
 8002f04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f0a:	4611      	mov	r1, r2
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fd fe2b 	bl	8000b68 <__aeabi_fsub>
 8002f12:	4603      	mov	r3, r0
 8002f14:	461c      	mov	r4, r3
 8002f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f18:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f1c:	4611      	mov	r1, r2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fd fe22 	bl	8000b68 <__aeabi_fsub>
 8002f24:	4603      	mov	r3, r0
 8002f26:	4619      	mov	r1, r3
 8002f28:	4620      	mov	r0, r4
 8002f2a:	f7fd ff27 	bl	8000d7c <__aeabi_fmul>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	461c      	mov	r4, r3
 8002f32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f34:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f38:	4611      	mov	r1, r2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fd fe14 	bl	8000b68 <__aeabi_fsub>
 8002f40:	4603      	mov	r3, r0
 8002f42:	461d      	mov	r5, r3
 8002f44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7fd fe0b 	bl	8000b68 <__aeabi_fsub>
 8002f52:	4603      	mov	r3, r0
 8002f54:	4619      	mov	r1, r3
 8002f56:	4628      	mov	r0, r5
 8002f58:	f7fd ff10 	bl	8000d7c <__aeabi_fmul>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	4619      	mov	r1, r3
 8002f60:	4620      	mov	r0, r4
 8002f62:	f7fd fe03 	bl	8000b6c <__addsf3>
 8002f66:	4603      	mov	r3, r0
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f7fd fa5d 	bl	8000428 <__aeabi_f2d>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	460c      	mov	r4, r1
 8002f72:	4618      	mov	r0, r3
 8002f74:	4621      	mov	r1, r4
 8002f76:	f002 feaf 	bl	8005cd8 <sqrt>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	460c      	mov	r4, r1
 8002f7e:	4618      	mov	r0, r3
 8002f80:	4621      	mov	r1, r4
 8002f82:	f7fd fd9d 	bl	8000ac0 <__aeabi_d2f>
 8002f86:	4603      	mov	r3, r0
 8002f88:	653b      	str	r3, [r7, #80]	; 0x50
			// toa do diem tam
			pntCenter.x = (pntStart.x + pntEnd.x) / 2 + sqrt(gVal1.R * gVal1.R - (q * q / 4)) * (pntStart.y - pntEnd.y) / q;
 8002f8a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002f8e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f90:	4611      	mov	r1, r2
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fd fdea 	bl	8000b6c <__addsf3>
 8002f98:	4603      	mov	r3, r0
 8002f9a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fd ffa0 	bl	8000ee4 <__aeabi_fdiv>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7fd fa3e 	bl	8000428 <__aeabi_f2d>
 8002fac:	4604      	mov	r4, r0
 8002fae:	460d      	mov	r5, r1
 8002fb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fb4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8002fb8:	4611      	mov	r1, r2
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7fd fede 	bl	8000d7c <__aeabi_fmul>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	461e      	mov	r6, r3
 8002fc4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002fc6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002fc8:	f7fd fed8 	bl	8000d7c <__aeabi_fmul>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fd ff86 	bl	8000ee4 <__aeabi_fdiv>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	4619      	mov	r1, r3
 8002fdc:	4630      	mov	r0, r6
 8002fde:	f7fd fdc3 	bl	8000b68 <__aeabi_fsub>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f7fd fa1f 	bl	8000428 <__aeabi_f2d>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4610      	mov	r0, r2
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	f002 fe71 	bl	8005cd8 <sqrt>
 8002ff6:	4680      	mov	r8, r0
 8002ff8:	4689      	mov	r9, r1
 8002ffa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002ffe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003000:	4611      	mov	r1, r2
 8003002:	4618      	mov	r0, r3
 8003004:	f7fd fdb0 	bl	8000b68 <__aeabi_fsub>
 8003008:	4603      	mov	r3, r0
 800300a:	4618      	mov	r0, r3
 800300c:	f7fd fa0c 	bl	8000428 <__aeabi_f2d>
 8003010:	4602      	mov	r2, r0
 8003012:	460b      	mov	r3, r1
 8003014:	4640      	mov	r0, r8
 8003016:	4649      	mov	r1, r9
 8003018:	f7fd fa5a 	bl	80004d0 <__aeabi_dmul>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4690      	mov	r8, r2
 8003022:	4699      	mov	r9, r3
 8003024:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003026:	f7fd f9ff 	bl	8000428 <__aeabi_f2d>
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4640      	mov	r0, r8
 8003030:	4649      	mov	r1, r9
 8003032:	f7fd fb77 	bl	8000724 <__aeabi_ddiv>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4620      	mov	r0, r4
 800303c:	4629      	mov	r1, r5
 800303e:	f7fd f895 	bl	800016c <__adddf3>
 8003042:	4603      	mov	r3, r0
 8003044:	460c      	mov	r4, r1
 8003046:	4618      	mov	r0, r3
 8003048:	4621      	mov	r1, r4
 800304a:	f7fd fd39 	bl	8000ac0 <__aeabi_d2f>
 800304e:	4603      	mov	r3, r0
 8003050:	647b      	str	r3, [r7, #68]	; 0x44
			pntCenter.y = (pntStart.y + pntEnd.y) / 2 + sqrt(gVal1.R * gVal1.R - (q * q / 4)) * (pntEnd.x - pntStart.x) / q;
 8003052:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003056:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003058:	4611      	mov	r1, r2
 800305a:	4618      	mov	r0, r3
 800305c:	f7fd fd86 	bl	8000b6c <__addsf3>
 8003060:	4603      	mov	r3, r0
 8003062:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8003066:	4618      	mov	r0, r3
 8003068:	f7fd ff3c 	bl	8000ee4 <__aeabi_fdiv>
 800306c:	4603      	mov	r3, r0
 800306e:	4618      	mov	r0, r3
 8003070:	f7fd f9da 	bl	8000428 <__aeabi_f2d>
 8003074:	4604      	mov	r4, r0
 8003076:	460d      	mov	r5, r1
 8003078:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800307c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8003080:	4611      	mov	r1, r2
 8003082:	4618      	mov	r0, r3
 8003084:	f7fd fe7a 	bl	8000d7c <__aeabi_fmul>
 8003088:	4603      	mov	r3, r0
 800308a:	461e      	mov	r6, r3
 800308c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800308e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8003090:	f7fd fe74 	bl	8000d7c <__aeabi_fmul>
 8003094:	4603      	mov	r3, r0
 8003096:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 800309a:	4618      	mov	r0, r3
 800309c:	f7fd ff22 	bl	8000ee4 <__aeabi_fdiv>
 80030a0:	4603      	mov	r3, r0
 80030a2:	4619      	mov	r1, r3
 80030a4:	4630      	mov	r0, r6
 80030a6:	f7fd fd5f 	bl	8000b68 <__aeabi_fsub>
 80030aa:	4603      	mov	r3, r0
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fd f9bb 	bl	8000428 <__aeabi_f2d>
 80030b2:	4602      	mov	r2, r0
 80030b4:	460b      	mov	r3, r1
 80030b6:	4610      	mov	r0, r2
 80030b8:	4619      	mov	r1, r3
 80030ba:	f002 fe0d 	bl	8005cd8 <sqrt>
 80030be:	4680      	mov	r8, r0
 80030c0:	4689      	mov	r9, r1
 80030c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80030c4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80030c8:	4611      	mov	r1, r2
 80030ca:	4618      	mov	r0, r3
 80030cc:	f7fd fd4c 	bl	8000b68 <__aeabi_fsub>
 80030d0:	4603      	mov	r3, r0
 80030d2:	4618      	mov	r0, r3
 80030d4:	f7fd f9a8 	bl	8000428 <__aeabi_f2d>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4640      	mov	r0, r8
 80030de:	4649      	mov	r1, r9
 80030e0:	f7fd f9f6 	bl	80004d0 <__aeabi_dmul>
 80030e4:	4602      	mov	r2, r0
 80030e6:	460b      	mov	r3, r1
 80030e8:	4690      	mov	r8, r2
 80030ea:	4699      	mov	r9, r3
 80030ec:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80030ee:	f7fd f99b 	bl	8000428 <__aeabi_f2d>
 80030f2:	4602      	mov	r2, r0
 80030f4:	460b      	mov	r3, r1
 80030f6:	4640      	mov	r0, r8
 80030f8:	4649      	mov	r1, r9
 80030fa:	f7fd fb13 	bl	8000724 <__aeabi_ddiv>
 80030fe:	4602      	mov	r2, r0
 8003100:	460b      	mov	r3, r1
 8003102:	4620      	mov	r0, r4
 8003104:	4629      	mov	r1, r5
 8003106:	f7fd f831 	bl	800016c <__adddf3>
 800310a:	4603      	mov	r3, r0
 800310c:	460c      	mov	r4, r1
 800310e:	4618      	mov	r0, r3
 8003110:	4621      	mov	r1, r4
 8003112:	f7fd fcd5 	bl	8000ac0 <__aeabi_d2f>
 8003116:	4603      	mov	r3, r0
 8003118:	64bb      	str	r3, [r7, #72]	; 0x48
		}

		// khoang cach 2 diem lon hon 2 lan ban kinh
		if (sqrt((pntStart.x - pntCenter.x) * (pntStart.x - pntCenter.x) + (pntStart.y - pntCenter.y) * (pntStart.y - pntCenter.y)) > (2 * gVal1.R))
 800311a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800311e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003120:	4611      	mov	r1, r2
 8003122:	4618      	mov	r0, r3
 8003124:	f7fd fd20 	bl	8000b68 <__aeabi_fsub>
 8003128:	4603      	mov	r3, r0
 800312a:	461c      	mov	r4, r3
 800312c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003130:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003132:	4611      	mov	r1, r2
 8003134:	4618      	mov	r0, r3
 8003136:	f7fd fd17 	bl	8000b68 <__aeabi_fsub>
 800313a:	4603      	mov	r3, r0
 800313c:	4619      	mov	r1, r3
 800313e:	4620      	mov	r0, r4
 8003140:	f7fd fe1c 	bl	8000d7c <__aeabi_fmul>
 8003144:	4603      	mov	r3, r0
 8003146:	461c      	mov	r4, r3
 8003148:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800314c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800314e:	4611      	mov	r1, r2
 8003150:	4618      	mov	r0, r3
 8003152:	f7fd fd09 	bl	8000b68 <__aeabi_fsub>
 8003156:	4603      	mov	r3, r0
 8003158:	461d      	mov	r5, r3
 800315a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800315e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003160:	4611      	mov	r1, r2
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd fd00 	bl	8000b68 <__aeabi_fsub>
 8003168:	4603      	mov	r3, r0
 800316a:	4619      	mov	r1, r3
 800316c:	4628      	mov	r0, r5
 800316e:	f7fd fe05 	bl	8000d7c <__aeabi_fmul>
 8003172:	4603      	mov	r3, r0
 8003174:	4619      	mov	r1, r3
 8003176:	4620      	mov	r0, r4
 8003178:	f7fd fcf8 	bl	8000b6c <__addsf3>
 800317c:	4603      	mov	r3, r0
 800317e:	4618      	mov	r0, r3
 8003180:	f7fd f952 	bl	8000428 <__aeabi_f2d>
 8003184:	4603      	mov	r3, r0
 8003186:	460c      	mov	r4, r1
 8003188:	4618      	mov	r0, r3
 800318a:	4621      	mov	r1, r4
 800318c:	f002 fda4 	bl	8005cd8 <sqrt>
 8003190:	4604      	mov	r4, r0
 8003192:	460d      	mov	r5, r1
 8003194:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003198:	4619      	mov	r1, r3
 800319a:	4618      	mov	r0, r3
 800319c:	f7fd fce6 	bl	8000b6c <__addsf3>
 80031a0:	4603      	mov	r3, r0
 80031a2:	4618      	mov	r0, r3
 80031a4:	f7fd f940 	bl	8000428 <__aeabi_f2d>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4620      	mov	r0, r4
 80031ae:	4629      	mov	r1, r5
 80031b0:	f7fd fc1e 	bl	80009f0 <__aeabi_dcmpgt>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d008      	beq.n	80031cc <draw+0xffc>
		{
			return pntStart;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	461c      	mov	r4, r3
 80031be:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80031c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80031ca:	e199      	b.n	8003500 <draw+0x1330>
		}

		// tim goc cua diem dau va diem cuoi so voi tam
		pntStart.angle = 180 * atan2(pntStart.y - pntCenter.y, pntStart.x - pntCenter.x) / M_PI;
 80031cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80031d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fd fcc7 	bl	8000b68 <__aeabi_fsub>
 80031da:	4603      	mov	r3, r0
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fd f923 	bl	8000428 <__aeabi_f2d>
 80031e2:	4604      	mov	r4, r0
 80031e4:	460d      	mov	r5, r1
 80031e6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80031ea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031ec:	4611      	mov	r1, r2
 80031ee:	4618      	mov	r0, r3
 80031f0:	f7fd fcba 	bl	8000b68 <__aeabi_fsub>
 80031f4:	4603      	mov	r3, r0
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fd f916 	bl	8000428 <__aeabi_f2d>
 80031fc:	4602      	mov	r2, r0
 80031fe:	460b      	mov	r3, r1
 8003200:	4620      	mov	r0, r4
 8003202:	4629      	mov	r1, r5
 8003204:	f002 fd66 	bl	8005cd4 <atan2>
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	4bc4      	ldr	r3, [pc, #784]	; (8003520 <draw+0x1350>)
 800320e:	f7fd f95f 	bl	80004d0 <__aeabi_dmul>
 8003212:	4603      	mov	r3, r0
 8003214:	460c      	mov	r4, r1
 8003216:	4618      	mov	r0, r3
 8003218:	4621      	mov	r1, r4
 800321a:	a3bd      	add	r3, pc, #756	; (adr r3, 8003510 <draw+0x1340>)
 800321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003220:	f7fd fa80 	bl	8000724 <__aeabi_ddiv>
 8003224:	4603      	mov	r3, r0
 8003226:	460c      	mov	r4, r1
 8003228:	4618      	mov	r0, r3
 800322a:	4621      	mov	r1, r4
 800322c:	f7fd fc48 	bl	8000ac0 <__aeabi_d2f>
 8003230:	4603      	mov	r3, r0
 8003232:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
		pntEnd.angle = 180 * atan2(pntEnd.y - pntCenter.y, pntEnd.x - pntCenter.x) / M_PI;
 8003236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003238:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800323a:	4611      	mov	r1, r2
 800323c:	4618      	mov	r0, r3
 800323e:	f7fd fc93 	bl	8000b68 <__aeabi_fsub>
 8003242:	4603      	mov	r3, r0
 8003244:	4618      	mov	r0, r3
 8003246:	f7fd f8ef 	bl	8000428 <__aeabi_f2d>
 800324a:	4604      	mov	r4, r0
 800324c:	460d      	mov	r5, r1
 800324e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003250:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003252:	4611      	mov	r1, r2
 8003254:	4618      	mov	r0, r3
 8003256:	f7fd fc87 	bl	8000b68 <__aeabi_fsub>
 800325a:	4603      	mov	r3, r0
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd f8e3 	bl	8000428 <__aeabi_f2d>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	4620      	mov	r0, r4
 8003268:	4629      	mov	r1, r5
 800326a:	f002 fd33 	bl	8005cd4 <atan2>
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	4bab      	ldr	r3, [pc, #684]	; (8003520 <draw+0x1350>)
 8003274:	f7fd f92c 	bl	80004d0 <__aeabi_dmul>
 8003278:	4603      	mov	r3, r0
 800327a:	460c      	mov	r4, r1
 800327c:	4618      	mov	r0, r3
 800327e:	4621      	mov	r1, r4
 8003280:	a3a3      	add	r3, pc, #652	; (adr r3, 8003510 <draw+0x1340>)
 8003282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003286:	f7fd fa4d 	bl	8000724 <__aeabi_ddiv>
 800328a:	4603      	mov	r3, r0
 800328c:	460c      	mov	r4, r1
 800328e:	4618      	mov	r0, r3
 8003290:	4621      	mov	r1, r4
 8003292:	f7fd fc15 	bl	8000ac0 <__aeabi_d2f>
 8003296:	4603      	mov	r3, r0
 8003298:	643b      	str	r3, [r7, #64]	; 0x40

		// xac dinh goc de chay het cung tron
		angle = pntStart.angle;
 800329a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800329e:	667b      	str	r3, [r7, #100]	; 0x64
		anglePre = (int)angle;
 80032a0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80032a2:	f7fd ff31 	bl	8001108 <__aeabi_f2iz>
 80032a6:	4603      	mov	r3, r0
 80032a8:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a

		// do dich chuyen cua 1 truc tuong ung voi 1 buoc (STEP)
		deltaC = 360 * STEP / (2 * M_PI * gVal1.R);
 80032ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80032b0:	4618      	mov	r0, r3
 80032b2:	f7fd f8b9 	bl	8000428 <__aeabi_f2d>
 80032b6:	a398      	add	r3, pc, #608	; (adr r3, 8003518 <draw+0x1348>)
 80032b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032bc:	f7fd f908 	bl	80004d0 <__aeabi_dmul>
 80032c0:	4603      	mov	r3, r0
 80032c2:	460c      	mov	r4, r1
 80032c4:	461a      	mov	r2, r3
 80032c6:	4623      	mov	r3, r4
 80032c8:	f04f 0000 	mov.w	r0, #0
 80032cc:	4995      	ldr	r1, [pc, #596]	; (8003524 <draw+0x1354>)
 80032ce:	f7fd fa29 	bl	8000724 <__aeabi_ddiv>
 80032d2:	4603      	mov	r3, r0
 80032d4:	460c      	mov	r4, r1
 80032d6:	4618      	mov	r0, r3
 80032d8:	4621      	mov	r1, r4
 80032da:	f7fd fbf1 	bl	8000ac0 <__aeabi_d2f>
 80032de:	4603      	mov	r3, r0
 80032e0:	657b      	str	r3, [r7, #84]	; 0x54
		// quen me roi, nhung ma cai nay khac cai case tren.
		if ((pntStart.angle <= 0 && pntEnd.angle <= 0 && pntEnd.angle <= pntStart.angle)
 80032e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032e6:	f04f 0100 	mov.w	r1, #0
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd feee 	bl	80010cc <__aeabi_fcmple>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d012      	beq.n	800331c <draw+0x114c>
 80032f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032f8:	f04f 0100 	mov.w	r1, #0
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fd fee5 	bl	80010cc <__aeabi_fcmple>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d009      	beq.n	800331c <draw+0x114c>
 8003308:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800330a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800330e:	4611      	mov	r1, r2
 8003310:	4618      	mov	r0, r3
 8003312:	f7fd fedb 	bl	80010cc <__aeabi_fcmple>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d12f      	bne.n	800337c <draw+0x11ac>
		|| (pntStart.angle >= 0 && pntEnd.angle <= 0)
 800331c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003320:	f04f 0100 	mov.w	r1, #0
 8003324:	4618      	mov	r0, r3
 8003326:	f7fd fedb 	bl	80010e0 <__aeabi_fcmpge>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d008      	beq.n	8003342 <draw+0x1172>
 8003330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003332:	f04f 0100 	mov.w	r1, #0
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd fec8 	bl	80010cc <__aeabi_fcmple>
 800333c:	4603      	mov	r3, r0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d11c      	bne.n	800337c <draw+0x11ac>
		|| (pntStart.angle >= 0 && pntEnd.angle >= 0 && pntEnd.angle <= pntStart.angle)
 8003342:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003346:	f04f 0100 	mov.w	r1, #0
 800334a:	4618      	mov	r0, r3
 800334c:	f7fd fec8 	bl	80010e0 <__aeabi_fcmpge>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d019      	beq.n	800338a <draw+0x11ba>
 8003356:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003358:	f04f 0100 	mov.w	r1, #0
 800335c:	4618      	mov	r0, r3
 800335e:	f7fd febf 	bl	80010e0 <__aeabi_fcmpge>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d010      	beq.n	800338a <draw+0x11ba>
 8003368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800336a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800336e:	4611      	mov	r1, r2
 8003370:	4618      	mov	r0, r3
 8003372:	f7fd feab 	bl	80010cc <__aeabi_fcmple>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d006      	beq.n	800338a <draw+0x11ba>
		)
		{
			pntEnd.angle += 360;
 800337c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800337e:	496a      	ldr	r1, [pc, #424]	; (8003528 <draw+0x1358>)
 8003380:	4618      	mov	r0, r3
 8003382:	f7fd fbf3 	bl	8000b6c <__addsf3>
 8003386:	4603      	mov	r3, r0
 8003388:	643b      	str	r3, [r7, #64]	; 0x40
		}
		while (angle <= pntEnd.angle)
 800338a:	e0a4      	b.n	80034d6 <draw+0x1306>
		{
			pntCur.x = (int32_t)(gVal1.R * cos(angle * M_PI / 180) + pntCenter.x);
 800338c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003390:	4618      	mov	r0, r3
 8003392:	f7fd f849 	bl	8000428 <__aeabi_f2d>
 8003396:	4604      	mov	r4, r0
 8003398:	460d      	mov	r5, r1
 800339a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800339c:	f7fd f844 	bl	8000428 <__aeabi_f2d>
 80033a0:	a35b      	add	r3, pc, #364	; (adr r3, 8003510 <draw+0x1340>)
 80033a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a6:	f7fd f893 	bl	80004d0 <__aeabi_dmul>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4610      	mov	r0, r2
 80033b0:	4619      	mov	r1, r3
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	4b5a      	ldr	r3, [pc, #360]	; (8003520 <draw+0x1350>)
 80033b8:	f7fd f9b4 	bl	8000724 <__aeabi_ddiv>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4610      	mov	r0, r2
 80033c2:	4619      	mov	r1, r3
 80033c4:	f002 fc16 	bl	8005bf4 <cos>
 80033c8:	4602      	mov	r2, r0
 80033ca:	460b      	mov	r3, r1
 80033cc:	4620      	mov	r0, r4
 80033ce:	4629      	mov	r1, r5
 80033d0:	f7fd f87e 	bl	80004d0 <__aeabi_dmul>
 80033d4:	4603      	mov	r3, r0
 80033d6:	460c      	mov	r4, r1
 80033d8:	4625      	mov	r5, r4
 80033da:	461c      	mov	r4, r3
 80033dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fd f822 	bl	8000428 <__aeabi_f2d>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	4620      	mov	r0, r4
 80033ea:	4629      	mov	r1, r5
 80033ec:	f7fc febe 	bl	800016c <__adddf3>
 80033f0:	4603      	mov	r3, r0
 80033f2:	460c      	mov	r4, r1
 80033f4:	4618      	mov	r0, r3
 80033f6:	4621      	mov	r1, r4
 80033f8:	f7fd fb1a 	bl	8000a30 <__aeabi_d2iz>
 80033fc:	4603      	mov	r3, r0
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fd fc68 	bl	8000cd4 <__aeabi_i2f>
 8003404:	4603      	mov	r3, r0
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
			pntCur.y = (int32_t)(gVal1.R * sin(angle * M_PI / 180) + pntCenter.y);
 8003408:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800340c:	4618      	mov	r0, r3
 800340e:	f7fd f80b 	bl	8000428 <__aeabi_f2d>
 8003412:	4604      	mov	r4, r0
 8003414:	460d      	mov	r5, r1
 8003416:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003418:	f7fd f806 	bl	8000428 <__aeabi_f2d>
 800341c:	a33c      	add	r3, pc, #240	; (adr r3, 8003510 <draw+0x1340>)
 800341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003422:	f7fd f855 	bl	80004d0 <__aeabi_dmul>
 8003426:	4602      	mov	r2, r0
 8003428:	460b      	mov	r3, r1
 800342a:	4610      	mov	r0, r2
 800342c:	4619      	mov	r1, r3
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	4b3b      	ldr	r3, [pc, #236]	; (8003520 <draw+0x1350>)
 8003434:	f7fd f976 	bl	8000724 <__aeabi_ddiv>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4610      	mov	r0, r2
 800343e:	4619      	mov	r1, r3
 8003440:	f002 fc0e 	bl	8005c60 <sin>
 8003444:	4602      	mov	r2, r0
 8003446:	460b      	mov	r3, r1
 8003448:	4620      	mov	r0, r4
 800344a:	4629      	mov	r1, r5
 800344c:	f7fd f840 	bl	80004d0 <__aeabi_dmul>
 8003450:	4603      	mov	r3, r0
 8003452:	460c      	mov	r4, r1
 8003454:	4625      	mov	r5, r4
 8003456:	461c      	mov	r4, r3
 8003458:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800345a:	4618      	mov	r0, r3
 800345c:	f7fc ffe4 	bl	8000428 <__aeabi_f2d>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4620      	mov	r0, r4
 8003466:	4629      	mov	r1, r5
 8003468:	f7fc fe80 	bl	800016c <__adddf3>
 800346c:	4603      	mov	r3, r0
 800346e:	460c      	mov	r4, r1
 8003470:	4618      	mov	r0, r3
 8003472:	4621      	mov	r1, r4
 8003474:	f7fd fadc 	bl	8000a30 <__aeabi_d2iz>
 8003478:	4603      	mov	r3, r0
 800347a:	4618      	mov	r0, r3
 800347c:	f7fd fc2a 	bl	8000cd4 <__aeabi_i2f>
 8003480:	4603      	mov	r3, r0
 8003482:	633b      	str	r3, [r7, #48]	; 0x30
			stepper_ctrl(pntCur.x - pntPre.x, pntCur.y - pntPre.y);
 8003484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003486:	6a3a      	ldr	r2, [r7, #32]
 8003488:	4611      	mov	r1, r2
 800348a:	4618      	mov	r0, r3
 800348c:	f7fd fb6c 	bl	8000b68 <__aeabi_fsub>
 8003490:	4603      	mov	r3, r0
 8003492:	4618      	mov	r0, r3
 8003494:	f7fd fe38 	bl	8001108 <__aeabi_f2iz>
 8003498:	4603      	mov	r3, r0
 800349a:	b25c      	sxtb	r4, r3
 800349c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a0:	4611      	mov	r1, r2
 80034a2:	4618      	mov	r0, r3
 80034a4:	f7fd fb60 	bl	8000b68 <__aeabi_fsub>
 80034a8:	4603      	mov	r3, r0
 80034aa:	4618      	mov	r0, r3
 80034ac:	f7fd fe2c 	bl	8001108 <__aeabi_f2iz>
 80034b0:	4603      	mov	r3, r0
 80034b2:	b25b      	sxtb	r3, r3
 80034b4:	4619      	mov	r1, r3
 80034b6:	4620      	mov	r0, r4
 80034b8:	f000 f9d8 	bl	800386c <stepper_ctrl>
			if ((int)angle != anglePre)// ghi gia tri len uart
 80034bc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80034be:	f7fd fe23 	bl	8001108 <__aeabi_f2iz>
			{
				//UART3_printXY(pntCur.x, pntCur.y);
				//anglePre = (int)angle;
			}
			pntPre.x = pntCur.x;
 80034c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034c4:	623b      	str	r3, [r7, #32]
			pntPre.y = pntCur.y;
 80034c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c8:	627b      	str	r3, [r7, #36]	; 0x24
			angle += deltaC;
 80034ca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034cc:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80034ce:	f7fd fb4d 	bl	8000b6c <__addsf3>
 80034d2:	4603      	mov	r3, r0
 80034d4:	667b      	str	r3, [r7, #100]	; 0x64
		while (angle <= pntEnd.angle)
 80034d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034d8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fd fe00 	bl	80010e0 <__aeabi_fcmpge>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	f47f af52 	bne.w	800338c <draw+0x11bc>
		}
		gVal1.R = 0;
 80034e8:	f04f 0300 	mov.w	r3, #0
 80034ec:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	}

	return pntEnd;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	461c      	mov	r4, r3
 80034f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80034f8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80034fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	376c      	adds	r7, #108	; 0x6c
 8003504:	46bd      	mov	sp, r7
 8003506:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800350a:	b004      	add	sp, #16
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	54442d18 	.word	0x54442d18
 8003514:	400921fb 	.word	0x400921fb
 8003518:	54442d18 	.word	0x54442d18
 800351c:	401921fb 	.word	0x401921fb
 8003520:	40668000 	.word	0x40668000
 8003524:	40768000 	.word	0x40768000
 8003528:	43b40000 	.word	0x43b40000

0800352c <endPointX>:

void endPointX(){
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
	UART3_println("end point x axis");
 8003530:	4803      	ldr	r0, [pc, #12]	; (8003540 <endPointX+0x14>)
 8003532:	f000 fc95 	bl	8003e60 <UART3_println>
	stepper_ctrl(0, 0);
 8003536:	2100      	movs	r1, #0
 8003538:	2000      	movs	r0, #0
 800353a:	f000 f997 	bl	800386c <stepper_ctrl>
	while(1);
 800353e:	e7fe      	b.n	800353e <endPointX+0x12>
 8003540:	080073c0 	.word	0x080073c0

08003544 <endPointY>:
}
void endPointY(){
 8003544:	b580      	push	{r7, lr}
 8003546:	af00      	add	r7, sp, #0
	UART3_println("end point y axis");
 8003548:	4803      	ldr	r0, [pc, #12]	; (8003558 <endPointY+0x14>)
 800354a:	f000 fc89 	bl	8003e60 <UART3_println>
	stepper_ctrl(0, 0);
 800354e:	2100      	movs	r1, #0
 8003550:	2000      	movs	r0, #0
 8003552:	f000 f98b 	bl	800386c <stepper_ctrl>
	while(1);
 8003556:	e7fe      	b.n	8003556 <endPointY+0x12>
 8003558:	080073d4 	.word	0x080073d4

0800355c <main>:

/************************************************************/
/*                  MAIN FUNCTION							*/
/************************************************************/
int main(void)
{
 800355c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800355e:	b0b5      	sub	sp, #212	; 0xd4
 8003560:	af0a      	add	r7, sp, #40	; 0x28
	SysTick_Init();
 8003562:	f7fe fdeb 	bl	800213c <SysTick_Init>

	char gCode[100];
	struct gValue gVal;
	struct point pntStart;
	pntStart.x = pntStart.y = -500;
 8003566:	4b74      	ldr	r3, [pc, #464]	; (8003738 <main+0x1dc>)
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	617b      	str	r3, [r7, #20]
	UART3_config(115200);
 800356e:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8003572:	f000 fbed 	bl	8003d50 <UART3_config>
	stepper_config();
 8003576:	f000 f965 	bl	8003844 <stepper_config>
	UART3_println("START!!!");
 800357a:	4870      	ldr	r0, [pc, #448]	; (800373c <main+0x1e0>)
 800357c:	f000 fc70 	bl	8003e60 <UART3_println>
	UART3_println("Get basical position!!!");
 8003580:	486f      	ldr	r0, [pc, #444]	; (8003740 <main+0x1e4>)
 8003582:	f000 fc6d 	bl	8003e60 <UART3_println>

	pinMode(B13, INPUT_PULLUP);
 8003586:	2148      	movs	r1, #72	; 0x48
 8003588:	201d      	movs	r0, #29
 800358a:	f7fe fab9 	bl	8001b00 <pinMode>
	pinMode(B12, INPUT_PULLUP);
 800358e:	2148      	movs	r1, #72	; 0x48
 8003590:	201c      	movs	r0, #28
 8003592:	f7fe fab5 	bl	8001b00 <pinMode>
	// set ve 0
	while(digitalRead(B13) == 1 || digitalRead(B12) == 1)
 8003596:	e029      	b.n	80035ec <main+0x90>
	{
		if(digitalRead(B13) == 1 && digitalRead(B12) == 1)
 8003598:	201d      	movs	r0, #29
 800359a:	f7fe fb19 	bl	8001bd0 <digitalRead>
 800359e:	4603      	mov	r3, r0
 80035a0:	2b01      	cmp	r3, #1
 80035a2:	d10c      	bne.n	80035be <main+0x62>
 80035a4:	201c      	movs	r0, #28
 80035a6:	f7fe fb13 	bl	8001bd0 <digitalRead>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d106      	bne.n	80035be <main+0x62>
			stepper_ctrl(-1 , -1);
 80035b0:	f04f 31ff 	mov.w	r1, #4294967295
 80035b4:	f04f 30ff 	mov.w	r0, #4294967295
 80035b8:	f000 f958 	bl	800386c <stepper_ctrl>
 80035bc:	e016      	b.n	80035ec <main+0x90>

		else if(digitalRead(B13) == 1)
 80035be:	201d      	movs	r0, #29
 80035c0:	f7fe fb06 	bl	8001bd0 <digitalRead>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b01      	cmp	r3, #1
 80035c8:	d105      	bne.n	80035d6 <main+0x7a>
			stepper_ctrl(-1 , 0);
 80035ca:	2100      	movs	r1, #0
 80035cc:	f04f 30ff 	mov.w	r0, #4294967295
 80035d0:	f000 f94c 	bl	800386c <stepper_ctrl>
 80035d4:	e00a      	b.n	80035ec <main+0x90>

		else if(digitalRead(B12) == 1)
 80035d6:	201c      	movs	r0, #28
 80035d8:	f7fe fafa 	bl	8001bd0 <digitalRead>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d104      	bne.n	80035ec <main+0x90>
			stepper_ctrl(0 , -1);
 80035e2:	f04f 31ff 	mov.w	r1, #4294967295
 80035e6:	2000      	movs	r0, #0
 80035e8:	f000 f940 	bl	800386c <stepper_ctrl>
	while(digitalRead(B13) == 1 || digitalRead(B12) == 1)
 80035ec:	201d      	movs	r0, #29
 80035ee:	f7fe faef 	bl	8001bd0 <digitalRead>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d0cf      	beq.n	8003598 <main+0x3c>
 80035f8:	201c      	movs	r0, #28
 80035fa:	f7fe fae9 	bl	8001bd0 <digitalRead>
 80035fe:	4603      	mov	r3, r0
 8003600:	2b01      	cmp	r3, #1
 8003602:	d0c9      	beq.n	8003598 <main+0x3c>
	}
	stepper_ctrl(0 , 0);
 8003604:	2100      	movs	r1, #0
 8003606:	2000      	movs	r0, #0
 8003608:	f000 f930 	bl	800386c <stepper_ctrl>
	UART3_printXY(pntStart.x, pntStart.y);
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	4611      	mov	r1, r2
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fc34 	bl	8003e80 <UART3_printXY>
	UART3_println("Get zero position!!!");
 8003618:	484a      	ldr	r0, [pc, #296]	; (8003744 <main+0x1e8>)
 800361a:	f000 fc21 	bl	8003e60 <UART3_println>
	gVal.G = gVal.X = gVal.Y = 0;
 800361e:	2300      	movs	r3, #0
 8003620:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003624:	62bb      	str	r3, [r7, #40]	; 0x28
 8003626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003628:	b2db      	uxtb	r3, r3
 800362a:	f887 3020 	strb.w	r3, [r7, #32]
	_delay_ms(1000);
 800362e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003632:	f7fe fda7 	bl	8002184 <_delay_ms>
	pntStart = draw(gVal, pntStart);
 8003636:	f107 0614 	add.w	r6, r7, #20
 800363a:	ac06      	add	r4, sp, #24
 800363c:	f107 0314 	add.w	r3, r7, #20
 8003640:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003644:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003648:	466d      	mov	r5, sp
 800364a:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800364e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003650:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003652:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003656:	e885 0003 	stmia.w	r5, {r0, r1}
 800365a:	f107 0320 	add.w	r3, r7, #32
 800365e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003660:	4630      	mov	r0, r6
 8003662:	f7fe fdb5 	bl	80021d0 <draw>

	UART3_printXY(pntStart.x, pntStart.y);
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4611      	mov	r1, r2
 800366c:	4618      	mov	r0, r3
 800366e:	f000 fc07 	bl	8003e80 <UART3_printXY>
	_delay_ms(1000);
 8003672:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003676:	f7fe fd85 	bl	8002184 <_delay_ms>
	attachInterrupt(B13, FALLING, endPointX);
 800367a:	4a33      	ldr	r2, [pc, #204]	; (8003748 <main+0x1ec>)
 800367c:	210c      	movs	r1, #12
 800367e:	201d      	movs	r0, #29
 8003680:	f7fe facc 	bl	8001c1c <attachInterrupt>
	attachInterrupt(B12, FALLING, endPointY);
 8003684:	4a31      	ldr	r2, [pc, #196]	; (800374c <main+0x1f0>)
 8003686:	210c      	movs	r1, #12
 8003688:	201c      	movs	r0, #28
 800368a:	f7fe fac7 	bl	8001c1c <attachInterrupt>
	while(1)
	{
		if (transmitted == true)
 800368e:	4b30      	ldr	r3, [pc, #192]	; (8003750 <main+0x1f4>)
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d14a      	bne.n	800372c <main+0x1d0>
		{
			UART3_println(uartBuffer);
 8003696:	482f      	ldr	r0, [pc, #188]	; (8003754 <main+0x1f8>)
 8003698:	f000 fbe2 	bl	8003e60 <UART3_println>
			gVal = getAllGcodeValue(uartBuffer);
 800369c:	f107 0320 	add.w	r3, r7, #32
 80036a0:	492c      	ldr	r1, [pc, #176]	; (8003754 <main+0x1f8>)
 80036a2:	4618      	mov	r0, r3
 80036a4:	f7fe fc58 	bl	8001f58 <getAllGcodeValue>
			sprintf(gCode, "G = %d\tX = %d\tY = %d\tR = %d\tI = %d\tJ = %d\n", (int)gVal.G, (int)gVal.X, (int)gVal.Y, (int)gVal.R, (int)gVal.I, (int)gVal.J);
 80036a8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80036ac:	461e      	mov	r6, r3
 80036ae:	6abd      	ldr	r5, [r7, #40]	; 0x28
 80036b0:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 80036b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7fd fd27 	bl	8001108 <__aeabi_f2iz>
 80036ba:	4601      	mov	r1, r0
 80036bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036be:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80036c0:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80036c4:	9203      	str	r2, [sp, #12]
 80036c6:	9302      	str	r3, [sp, #8]
 80036c8:	9101      	str	r1, [sp, #4]
 80036ca:	9400      	str	r4, [sp, #0]
 80036cc:	462b      	mov	r3, r5
 80036ce:	4632      	mov	r2, r6
 80036d0:	4921      	ldr	r1, [pc, #132]	; (8003758 <main+0x1fc>)
 80036d2:	f000 fb26 	bl	8003d22 <siprintf>
			UART3_println(gCode);
 80036d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80036da:	4618      	mov	r0, r3
 80036dc:	f000 fbc0 	bl	8003e60 <UART3_println>
			pntStart = draw(gVal, pntStart);
 80036e0:	463e      	mov	r6, r7
 80036e2:	ac06      	add	r4, sp, #24
 80036e4:	f107 0314 	add.w	r3, r7, #20
 80036e8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80036ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80036f0:	466d      	mov	r5, sp
 80036f2:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80036f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80036f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80036fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8003702:	f107 0320 	add.w	r3, r7, #32
 8003706:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003708:	4630      	mov	r0, r6
 800370a:	f7fe fd61 	bl	80021d0 <draw>
 800370e:	f107 0314 	add.w	r3, r7, #20
 8003712:	463a      	mov	r2, r7
 8003714:	ca07      	ldmia	r2, {r0, r1, r2}
 8003716:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			UART3_printXY(pntStart.x, pntStart.y);
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	69ba      	ldr	r2, [r7, #24]
 800371e:	4611      	mov	r1, r2
 8003720:	4618      	mov	r0, r3
 8003722:	f000 fbad 	bl	8003e80 <UART3_printXY>
			transmitted = false;
 8003726:	4b0a      	ldr	r3, [pc, #40]	; (8003750 <main+0x1f4>)
 8003728:	2200      	movs	r2, #0
 800372a:	701a      	strb	r2, [r3, #0]
		}
		//UART_println("LOPP");
		_delay_ms(500);
 800372c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003730:	f7fe fd28 	bl	8002184 <_delay_ms>
		if (transmitted == true)
 8003734:	e7ab      	b.n	800368e <main+0x132>
 8003736:	bf00      	nop
 8003738:	c3fa0000 	.word	0xc3fa0000
 800373c:	080073e8 	.word	0x080073e8
 8003740:	080073f4 	.word	0x080073f4
 8003744:	0800740c 	.word	0x0800740c
 8003748:	0800352d 	.word	0x0800352d
 800374c:	08003545 	.word	0x08003545
 8003750:	20000248 	.word	0x20000248
 8003754:	20000260 	.word	0x20000260
 8003758:	08007424 	.word	0x08007424

0800375c <UART3_Event>:
	}
}
void UART3_Event()
{
 800375c:	b598      	push	{r3, r4, r7, lr}
 800375e:	af00      	add	r7, sp, #0
	uartBuffer[indexUART] = USART_ReceiveData(USART3);
 8003760:	4b15      	ldr	r3, [pc, #84]	; (80037b8 <UART3_Event+0x5c>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	461c      	mov	r4, r3
 8003766:	4815      	ldr	r0, [pc, #84]	; (80037bc <UART3_Event+0x60>)
 8003768:	f7fe f916 	bl	8001998 <USART_ReceiveData>
 800376c:	4603      	mov	r3, r0
 800376e:	b2da      	uxtb	r2, r3
 8003770:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <UART3_Event+0x64>)
 8003772:	551a      	strb	r2, [r3, r4]
	if (transmitted == true)
 8003774:	4b13      	ldr	r3, [pc, #76]	; (80037c4 <UART3_Event+0x68>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d01a      	beq.n	80037b2 <UART3_Event+0x56>
	{
		return;
	}
	if (uartBuffer[indexUART] == '@')
 800377c:	4b0e      	ldr	r3, [pc, #56]	; (80037b8 <UART3_Event+0x5c>)
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	461a      	mov	r2, r3
 8003782:	4b0f      	ldr	r3, [pc, #60]	; (80037c0 <UART3_Event+0x64>)
 8003784:	5c9b      	ldrb	r3, [r3, r2]
 8003786:	2b40      	cmp	r3, #64	; 0x40
 8003788:	d10c      	bne.n	80037a4 <UART3_Event+0x48>
	{
		uartBuffer[indexUART] = '\0';
 800378a:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <UART3_Event+0x5c>)
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <UART3_Event+0x64>)
 8003792:	2100      	movs	r1, #0
 8003794:	5499      	strb	r1, [r3, r2]
		indexUART = 0;
 8003796:	4b08      	ldr	r3, [pc, #32]	; (80037b8 <UART3_Event+0x5c>)
 8003798:	2200      	movs	r2, #0
 800379a:	701a      	strb	r2, [r3, #0]
		transmitted = true;
 800379c:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <UART3_Event+0x68>)
 800379e:	2201      	movs	r2, #1
 80037a0:	701a      	strb	r2, [r3, #0]
		return;
 80037a2:	e007      	b.n	80037b4 <UART3_Event+0x58>
	}
	indexUART++;
 80037a4:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <UART3_Event+0x5c>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	3301      	adds	r3, #1
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	4b02      	ldr	r3, [pc, #8]	; (80037b8 <UART3_Event+0x5c>)
 80037ae:	701a      	strb	r2, [r3, #0]
 80037b0:	e000      	b.n	80037b4 <UART3_Event+0x58>
		return;
 80037b2:	bf00      	nop
}
 80037b4:	bd98      	pop	{r3, r4, r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000249 	.word	0x20000249
 80037bc:	40004800 	.word	0x40004800
 80037c0:	20000260 	.word	0x20000260
 80037c4:	20000248 	.word	0x20000248

080037c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80037c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003800 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80037cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80037ce:	e003      	b.n	80037d8 <LoopCopyDataInit>

080037d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 80037d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80037d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80037d6:	3104      	adds	r1, #4

080037d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80037d8:	480b      	ldr	r0, [pc, #44]	; (8003808 <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 80037da:	4b0c      	ldr	r3, [pc, #48]	; (800380c <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 80037dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80037de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80037e0:	d3f6      	bcc.n	80037d0 <CopyDataInit>
	ldr	r2, =_sbss
 80037e2:	4a0b      	ldr	r2, [pc, #44]	; (8003810 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 80037e4:	e002      	b.n	80037ec <LoopFillZerobss>

080037e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80037e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80037e8:	f842 3b04 	str.w	r3, [r2], #4

080037ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80037ec:	4b09      	ldr	r3, [pc, #36]	; (8003814 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 80037ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80037f0:	d3f9      	bcc.n	80037e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80037f2:	f000 f8fd 	bl	80039f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037f6:	f000 fb87 	bl	8003f08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80037fa:	f7ff feaf 	bl	800355c <main>
	bx	lr
 80037fe:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003800:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8003804:	08007910 	.word	0x08007910
	ldr	r0, =_sdata
 8003808:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800380c:	200001ec 	.word	0x200001ec
	ldr	r2, =_sbss
 8003810:	200001ec 	.word	0x200001ec
	ldr	r3, = _ebss
 8003814:	20000298 	.word	0x20000298

08003818 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003818:	e7fe      	b.n	8003818 <ADC1_2_IRQHandler>

0800381a <_delay_stepper>:
*/
#include <include.h>
#include "stepper.h"

void _delay_stepper(uint16_t i)
{
 800381a:	b480      	push	{r7}
 800381c:	b083      	sub	sp, #12
 800381e:	af00      	add	r7, sp, #0
 8003820:	4603      	mov	r3, r0
 8003822:	80fb      	strh	r3, [r7, #6]
	i *= 7;
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	461a      	mov	r2, r3
 8003828:	00d2      	lsls	r2, r2, #3
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	80fb      	strh	r3, [r7, #6]
	while(i--);
 800382e:	bf00      	nop
 8003830:	88fb      	ldrh	r3, [r7, #6]
 8003832:	1e5a      	subs	r2, r3, #1
 8003834:	80fa      	strh	r2, [r7, #6]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1fa      	bne.n	8003830 <_delay_stepper+0x16>
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	bc80      	pop	{r7}
 8003842:	4770      	bx	lr

08003844 <stepper_config>:
// configure stepper pin
void stepper_config()
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
	pinMode(PIN_DIR_X, OUTPUT);
 8003848:	2110      	movs	r1, #16
 800384a:	2002      	movs	r0, #2
 800384c:	f7fe f958 	bl	8001b00 <pinMode>
	pinMode(PIN_DIR_Y, OUTPUT);
 8003850:	2110      	movs	r1, #16
 8003852:	2004      	movs	r0, #4
 8003854:	f7fe f954 	bl	8001b00 <pinMode>
	pinMode(PIN_STEP_X, OUTPUT);
 8003858:	2110      	movs	r1, #16
 800385a:	2003      	movs	r0, #3
 800385c:	f7fe f950 	bl	8001b00 <pinMode>
	pinMode(PIN_STEP_Y, OUTPUT);
 8003860:	2110      	movs	r1, #16
 8003862:	2005      	movs	r0, #5
 8003864:	f7fe f94c 	bl	8001b00 <pinMode>
}
 8003868:	bf00      	nop
 800386a:	bd80      	pop	{r7, pc}

0800386c <stepper_ctrl>:

// control a stepper
void stepper_ctrl(int8_t delta_x, int8_t delta_y)
{
 800386c:	b590      	push	{r4, r7, lr}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	4603      	mov	r3, r0
 8003874:	460a      	mov	r2, r1
 8003876:	71fb      	strb	r3, [r7, #7]
 8003878:	4613      	mov	r3, r2
 800387a:	71bb      	strb	r3, [r7, #6]
	// configure direction of steppers
	if (delta_x < 0) setb(PIN_DIR_X);
 800387c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003880:	2b00      	cmp	r3, #0
 8003882:	da0c      	bge.n	800389e <stepper_ctrl+0x32>
 8003884:	2002      	movs	r0, #2
 8003886:	f7fe f91b 	bl	8001ac0 <getDigitalGPIO>
 800388a:	4604      	mov	r4, r0
 800388c:	2002      	movs	r0, #2
 800388e:	f7fe f928 	bl	8001ae2 <getDigitalPin>
 8003892:	4603      	mov	r3, r0
 8003894:	461a      	mov	r2, r3
 8003896:	2301      	movs	r3, #1
 8003898:	4093      	lsls	r3, r2
 800389a:	6123      	str	r3, [r4, #16]
 800389c:	e00b      	b.n	80038b6 <stepper_ctrl+0x4a>
	else clrb(PIN_DIR_X);
 800389e:	2002      	movs	r0, #2
 80038a0:	f7fe f90e 	bl	8001ac0 <getDigitalGPIO>
 80038a4:	4604      	mov	r4, r0
 80038a6:	2002      	movs	r0, #2
 80038a8:	f7fe f91b 	bl	8001ae2 <getDigitalPin>
 80038ac:	4603      	mov	r3, r0
 80038ae:	461a      	mov	r2, r3
 80038b0:	2301      	movs	r3, #1
 80038b2:	4093      	lsls	r3, r2
 80038b4:	6163      	str	r3, [r4, #20]

	if (delta_y < 0) setb(PIN_DIR_Y);
 80038b6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	da0c      	bge.n	80038d8 <stepper_ctrl+0x6c>
 80038be:	2004      	movs	r0, #4
 80038c0:	f7fe f8fe 	bl	8001ac0 <getDigitalGPIO>
 80038c4:	4604      	mov	r4, r0
 80038c6:	2004      	movs	r0, #4
 80038c8:	f7fe f90b 	bl	8001ae2 <getDigitalPin>
 80038cc:	4603      	mov	r3, r0
 80038ce:	461a      	mov	r2, r3
 80038d0:	2301      	movs	r3, #1
 80038d2:	4093      	lsls	r3, r2
 80038d4:	6123      	str	r3, [r4, #16]
 80038d6:	e00b      	b.n	80038f0 <stepper_ctrl+0x84>
	else clrb(PIN_DIR_Y);
 80038d8:	2004      	movs	r0, #4
 80038da:	f7fe f8f1 	bl	8001ac0 <getDigitalGPIO>
 80038de:	4604      	mov	r4, r0
 80038e0:	2004      	movs	r0, #4
 80038e2:	f7fe f8fe 	bl	8001ae2 <getDigitalPin>
 80038e6:	4603      	mov	r3, r0
 80038e8:	461a      	mov	r2, r3
 80038ea:	2301      	movs	r3, #1
 80038ec:	4093      	lsls	r3, r2
 80038ee:	6163      	str	r3, [r4, #20]
	
	if (delta_x != 0) setb(PIN_STEP_X);
 80038f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00c      	beq.n	8003912 <stepper_ctrl+0xa6>
 80038f8:	2003      	movs	r0, #3
 80038fa:	f7fe f8e1 	bl	8001ac0 <getDigitalGPIO>
 80038fe:	4604      	mov	r4, r0
 8003900:	2003      	movs	r0, #3
 8003902:	f7fe f8ee 	bl	8001ae2 <getDigitalPin>
 8003906:	4603      	mov	r3, r0
 8003908:	461a      	mov	r2, r3
 800390a:	2301      	movs	r3, #1
 800390c:	4093      	lsls	r3, r2
 800390e:	6123      	str	r3, [r4, #16]
 8003910:	e00b      	b.n	800392a <stepper_ctrl+0xbe>
	else clrb(PIN_STEP_X);
 8003912:	2003      	movs	r0, #3
 8003914:	f7fe f8d4 	bl	8001ac0 <getDigitalGPIO>
 8003918:	4604      	mov	r4, r0
 800391a:	2003      	movs	r0, #3
 800391c:	f7fe f8e1 	bl	8001ae2 <getDigitalPin>
 8003920:	4603      	mov	r3, r0
 8003922:	461a      	mov	r2, r3
 8003924:	2301      	movs	r3, #1
 8003926:	4093      	lsls	r3, r2
 8003928:	6163      	str	r3, [r4, #20]
	if (delta_y != 0) setb(PIN_STEP_Y);
 800392a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d00c      	beq.n	800394c <stepper_ctrl+0xe0>
 8003932:	2005      	movs	r0, #5
 8003934:	f7fe f8c4 	bl	8001ac0 <getDigitalGPIO>
 8003938:	4604      	mov	r4, r0
 800393a:	2005      	movs	r0, #5
 800393c:	f7fe f8d1 	bl	8001ae2 <getDigitalPin>
 8003940:	4603      	mov	r3, r0
 8003942:	461a      	mov	r2, r3
 8003944:	2301      	movs	r3, #1
 8003946:	4093      	lsls	r3, r2
 8003948:	6123      	str	r3, [r4, #16]
 800394a:	e00b      	b.n	8003964 <stepper_ctrl+0xf8>
	else clrb(PIN_STEP_Y);
 800394c:	2005      	movs	r0, #5
 800394e:	f7fe f8b7 	bl	8001ac0 <getDigitalGPIO>
 8003952:	4604      	mov	r4, r0
 8003954:	2005      	movs	r0, #5
 8003956:	f7fe f8c4 	bl	8001ae2 <getDigitalPin>
 800395a:	4603      	mov	r3, r0
 800395c:	461a      	mov	r2, r3
 800395e:	2301      	movs	r3, #1
 8003960:	4093      	lsls	r3, r2
 8003962:	6163      	str	r3, [r4, #20]
	
	_delay_stepper(100);
 8003964:	2064      	movs	r0, #100	; 0x64
 8003966:	f7ff ff58 	bl	800381a <_delay_stepper>
	clrb(PIN_STEP_X);
 800396a:	2003      	movs	r0, #3
 800396c:	f7fe f8a8 	bl	8001ac0 <getDigitalGPIO>
 8003970:	4604      	mov	r4, r0
 8003972:	2003      	movs	r0, #3
 8003974:	f7fe f8b5 	bl	8001ae2 <getDigitalPin>
 8003978:	4603      	mov	r3, r0
 800397a:	461a      	mov	r2, r3
 800397c:	2301      	movs	r3, #1
 800397e:	4093      	lsls	r3, r2
 8003980:	6163      	str	r3, [r4, #20]
	clrb(PIN_STEP_Y);
 8003982:	2005      	movs	r0, #5
 8003984:	f7fe f89c 	bl	8001ac0 <getDigitalGPIO>
 8003988:	4604      	mov	r4, r0
 800398a:	2005      	movs	r0, #5
 800398c:	f7fe f8a9 	bl	8001ae2 <getDigitalPin>
 8003990:	4603      	mov	r3, r0
 8003992:	461a      	mov	r2, r3
 8003994:	2301      	movs	r3, #1
 8003996:	4093      	lsls	r3, r2
 8003998:	6163      	str	r3, [r4, #20]
	_delay_stepper(100);
 800399a:	2064      	movs	r0, #100	; 0x64
 800399c:	f7ff ff3d 	bl	800381a <_delay_stepper>
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd90      	pop	{r4, r7, pc}

080039a8 <NMI_Handler>:
  * @retval None
  */


void NMI_Handler(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	af00      	add	r7, sp, #0
}
 80039ac:	bf00      	nop
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bc80      	pop	{r7}
 80039b2:	4770      	bx	lr

080039b4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80039b8:	e7fe      	b.n	80039b8 <HardFault_Handler+0x4>

080039ba <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 80039ba:	b480      	push	{r7}
 80039bc:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 80039be:	e7fe      	b.n	80039be <MemManage_Handler+0x4>

080039c0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 80039c4:	e7fe      	b.n	80039c4 <BusFault_Handler+0x4>

080039c6 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 80039c6:	b480      	push	{r7}
 80039c8:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 80039ca:	e7fe      	b.n	80039ca <UsageFault_Handler+0x4>

080039cc <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
}
 80039d0:	bf00      	nop
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr

080039d8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 80039d8:	b480      	push	{r7}
 80039da:	af00      	add	r7, sp, #0
}
 80039dc:	bf00      	nop
 80039de:	46bd      	mov	sp, r7
 80039e0:	bc80      	pop	{r7}
 80039e2:	4770      	bx	lr

080039e4 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 80039e4:	b480      	push	{r7}
 80039e6:	af00      	add	r7, sp, #0
}
 80039e8:	bf00      	nop
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr

080039f0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80039f4:	4a15      	ldr	r2, [pc, #84]	; (8003a4c <SystemInit+0x5c>)
 80039f6:	4b15      	ldr	r3, [pc, #84]	; (8003a4c <SystemInit+0x5c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f043 0301 	orr.w	r3, r3, #1
 80039fe:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8003a00:	4912      	ldr	r1, [pc, #72]	; (8003a4c <SystemInit+0x5c>)
 8003a02:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <SystemInit+0x5c>)
 8003a04:	685a      	ldr	r2, [r3, #4]
 8003a06:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <SystemInit+0x60>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8003a0c:	4a0f      	ldr	r2, [pc, #60]	; (8003a4c <SystemInit+0x5c>)
 8003a0e:	4b0f      	ldr	r3, [pc, #60]	; (8003a4c <SystemInit+0x5c>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a1a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8003a1c:	4a0b      	ldr	r2, [pc, #44]	; (8003a4c <SystemInit+0x5c>)
 8003a1e:	4b0b      	ldr	r3, [pc, #44]	; (8003a4c <SystemInit+0x5c>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a26:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8003a28:	4a08      	ldr	r2, [pc, #32]	; (8003a4c <SystemInit+0x5c>)
 8003a2a:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <SystemInit+0x5c>)
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003a32:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <SystemInit+0x5c>)
 8003a36:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8003a3a:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8003a3c:	f000 f80c 	bl	8003a58 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8003a40:	4b04      	ldr	r3, [pc, #16]	; (8003a54 <SystemInit+0x64>)
 8003a42:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a46:	609a      	str	r2, [r3, #8]
#endif 
}
 8003a48:	bf00      	nop
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	f8ff0000 	.word	0xf8ff0000
 8003a54:	e000ed00 	.word	0xe000ed00

08003a58 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8003a5c:	f000 f802 	bl	8003a64 <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8003a60:	bf00      	nop
 8003a62:	bd80      	pop	{r7, pc}

08003a64 <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	607b      	str	r3, [r7, #4]
 8003a6e:	2300      	movs	r3, #0
 8003a70:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8003a72:	4a3a      	ldr	r2, [pc, #232]	; (8003b5c <SetSysClockTo72+0xf8>)
 8003a74:	4b39      	ldr	r3, [pc, #228]	; (8003b5c <SetSysClockTo72+0xf8>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a7c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8003a7e:	4b37      	ldr	r3, [pc, #220]	; (8003b5c <SetSysClockTo72+0xf8>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d103      	bne.n	8003a9c <SetSysClockTo72+0x38>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8003a9a:	d1f0      	bne.n	8003a7e <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003a9c:	4b2f      	ldr	r3, [pc, #188]	; (8003b5c <SetSysClockTo72+0xf8>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d002      	beq.n	8003aae <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	603b      	str	r3, [r7, #0]
 8003aac:	e001      	b.n	8003ab2 <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b01      	cmp	r3, #1
 8003ab6:	d14b      	bne.n	8003b50 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8003ab8:	4a29      	ldr	r2, [pc, #164]	; (8003b60 <SetSysClockTo72+0xfc>)
 8003aba:	4b29      	ldr	r3, [pc, #164]	; (8003b60 <SetSysClockTo72+0xfc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f043 0310 	orr.w	r3, r3, #16
 8003ac2:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8003ac4:	4a26      	ldr	r2, [pc, #152]	; (8003b60 <SetSysClockTo72+0xfc>)
 8003ac6:	4b26      	ldr	r3, [pc, #152]	; (8003b60 <SetSysClockTo72+0xfc>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f023 0303 	bic.w	r3, r3, #3
 8003ace:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8003ad0:	4a23      	ldr	r2, [pc, #140]	; (8003b60 <SetSysClockTo72+0xfc>)
 8003ad2:	4b23      	ldr	r3, [pc, #140]	; (8003b60 <SetSysClockTo72+0xfc>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f043 0302 	orr.w	r3, r3, #2
 8003ada:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8003adc:	4a1f      	ldr	r2, [pc, #124]	; (8003b5c <SetSysClockTo72+0xf8>)
 8003ade:	4b1f      	ldr	r3, [pc, #124]	; (8003b5c <SetSysClockTo72+0xf8>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8003ae4:	4a1d      	ldr	r2, [pc, #116]	; (8003b5c <SetSysClockTo72+0xf8>)
 8003ae6:	4b1d      	ldr	r3, [pc, #116]	; (8003b5c <SetSysClockTo72+0xf8>)
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8003aec:	4a1b      	ldr	r2, [pc, #108]	; (8003b5c <SetSysClockTo72+0xf8>)
 8003aee:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <SetSysClockTo72+0xf8>)
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003af6:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8003af8:	4a18      	ldr	r2, [pc, #96]	; (8003b5c <SetSysClockTo72+0xf8>)
 8003afa:	4b18      	ldr	r3, [pc, #96]	; (8003b5c <SetSysClockTo72+0xf8>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8003b02:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8003b04:	4a15      	ldr	r2, [pc, #84]	; (8003b5c <SetSysClockTo72+0xf8>)
 8003b06:	4b15      	ldr	r3, [pc, #84]	; (8003b5c <SetSysClockTo72+0xf8>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8003b0e:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8003b10:	4a12      	ldr	r2, [pc, #72]	; (8003b5c <SetSysClockTo72+0xf8>)
 8003b12:	4b12      	ldr	r3, [pc, #72]	; (8003b5c <SetSysClockTo72+0xf8>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b1a:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8003b1c:	bf00      	nop
 8003b1e:	4b0f      	ldr	r3, [pc, #60]	; (8003b5c <SetSysClockTo72+0xf8>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d0f9      	beq.n	8003b1e <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003b2a:	4a0c      	ldr	r2, [pc, #48]	; (8003b5c <SetSysClockTo72+0xf8>)
 8003b2c:	4b0b      	ldr	r3, [pc, #44]	; (8003b5c <SetSysClockTo72+0xf8>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f023 0303 	bic.w	r3, r3, #3
 8003b34:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8003b36:	4a09      	ldr	r2, [pc, #36]	; (8003b5c <SetSysClockTo72+0xf8>)
 8003b38:	4b08      	ldr	r3, [pc, #32]	; (8003b5c <SetSysClockTo72+0xf8>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f043 0302 	orr.w	r3, r3, #2
 8003b40:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8003b42:	bf00      	nop
 8003b44:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <SetSysClockTo72+0xf8>)
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f003 030c 	and.w	r3, r3, #12
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d1f9      	bne.n	8003b44 <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bc80      	pop	{r7}
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40021000 	.word	0x40021000
 8003b60:	40022000 	.word	0x40022000

08003b64 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
	int div = 1;
 8003b70:	2301      	movs	r3, #1
 8003b72:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003b74:	e004      	b.n	8003b80 <ts_itoa+0x1c>
		div *= base;
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	fb02 f303 	mul.w	r3, r2, r3
 8003b7e:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	68ba      	ldr	r2, [r7, #8]
 8003b84:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d2f3      	bcs.n	8003b76 <ts_itoa+0x12>

	while (div != 0)
 8003b8e:	e029      	b.n	8003be4 <ts_itoa+0x80>
	{
		int num = d/div;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	68ba      	ldr	r2, [r7, #8]
 8003b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b98:	613b      	str	r3, [r7, #16]
		d = d%div;
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003ba2:	fb02 f201 	mul.w	r2, r2, r1
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	60bb      	str	r3, [r7, #8]
		div /= base;
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	fb92 f3f3 	sdiv	r3, r2, r3
 8003bb2:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	2b09      	cmp	r3, #9
 8003bb8:	dd0a      	ble.n	8003bd0 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	1c59      	adds	r1, r3, #1
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	6011      	str	r1, [r2, #0]
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	3237      	adds	r2, #55	; 0x37
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	701a      	strb	r2, [r3, #0]
 8003bce:	e009      	b.n	8003be4 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	1c59      	adds	r1, r3, #1
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	6011      	str	r1, [r2, #0]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	3230      	adds	r2, #48	; 0x30
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d1d2      	bne.n	8003b90 <ts_itoa+0x2c>
	}
}
 8003bea:	bf00      	nop
 8003bec:	371c      	adds	r7, #28
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr

08003bf4 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8003c04:	e07d      	b.n	8003d02 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	2b25      	cmp	r3, #37	; 0x25
 8003c0c:	d171      	bne.n	8003cf2 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	3301      	adds	r3, #1
 8003c12:	60bb      	str	r3, [r7, #8]
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	781b      	ldrb	r3, [r3, #0]
 8003c18:	2b64      	cmp	r3, #100	; 0x64
 8003c1a:	d01e      	beq.n	8003c5a <ts_formatstring+0x66>
 8003c1c:	2b64      	cmp	r3, #100	; 0x64
 8003c1e:	dc06      	bgt.n	8003c2e <ts_formatstring+0x3a>
 8003c20:	2b58      	cmp	r3, #88	; 0x58
 8003c22:	d050      	beq.n	8003cc6 <ts_formatstring+0xd2>
 8003c24:	2b63      	cmp	r3, #99	; 0x63
 8003c26:	d00e      	beq.n	8003c46 <ts_formatstring+0x52>
 8003c28:	2b25      	cmp	r3, #37	; 0x25
 8003c2a:	d058      	beq.n	8003cde <ts_formatstring+0xea>
 8003c2c:	e05d      	b.n	8003cea <ts_formatstring+0xf6>
 8003c2e:	2b73      	cmp	r3, #115	; 0x73
 8003c30:	d02b      	beq.n	8003c8a <ts_formatstring+0x96>
 8003c32:	2b73      	cmp	r3, #115	; 0x73
 8003c34:	dc02      	bgt.n	8003c3c <ts_formatstring+0x48>
 8003c36:	2b69      	cmp	r3, #105	; 0x69
 8003c38:	d00f      	beq.n	8003c5a <ts_formatstring+0x66>
 8003c3a:	e056      	b.n	8003cea <ts_formatstring+0xf6>
 8003c3c:	2b75      	cmp	r3, #117	; 0x75
 8003c3e:	d037      	beq.n	8003cb0 <ts_formatstring+0xbc>
 8003c40:	2b78      	cmp	r3, #120	; 0x78
 8003c42:	d040      	beq.n	8003cc6 <ts_formatstring+0xd2>
 8003c44:	e051      	b.n	8003cea <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	1c5a      	adds	r2, r3, #1
 8003c4a:	60fa      	str	r2, [r7, #12]
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	1d11      	adds	r1, r2, #4
 8003c50:	6079      	str	r1, [r7, #4]
 8003c52:	6812      	ldr	r2, [r2, #0]
 8003c54:	b2d2      	uxtb	r2, r2
 8003c56:	701a      	strb	r2, [r3, #0]
				break;
 8003c58:	e047      	b.n	8003cea <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	1d1a      	adds	r2, r3, #4
 8003c5e:	607a      	str	r2, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	da07      	bge.n	8003c7a <ts_formatstring+0x86>
					{
						val *= -1;
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	425b      	negs	r3, r3
 8003c6e:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	1c5a      	adds	r2, r3, #1
 8003c74:	60fa      	str	r2, [r7, #12]
 8003c76:	222d      	movs	r2, #45	; 0x2d
 8003c78:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8003c7a:	69f9      	ldr	r1, [r7, #28]
 8003c7c:	f107 030c 	add.w	r3, r7, #12
 8003c80:	220a      	movs	r2, #10
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff ff6e 	bl	8003b64 <ts_itoa>
				}
				break;
 8003c88:	e02f      	b.n	8003cea <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	1d1a      	adds	r2, r3, #4
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	61bb      	str	r3, [r7, #24]
					while (*arg)
 8003c94:	e007      	b.n	8003ca6 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	1c5a      	adds	r2, r3, #1
 8003c9a:	60fa      	str	r2, [r7, #12]
 8003c9c:	69ba      	ldr	r2, [r7, #24]
 8003c9e:	1c51      	adds	r1, r2, #1
 8003ca0:	61b9      	str	r1, [r7, #24]
 8003ca2:	7812      	ldrb	r2, [r2, #0]
 8003ca4:	701a      	strb	r2, [r3, #0]
					while (*arg)
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	781b      	ldrb	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f3      	bne.n	8003c96 <ts_formatstring+0xa2>
					}
				}
				break;
 8003cae:	e01c      	b.n	8003cea <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	1d1a      	adds	r2, r3, #4
 8003cb4:	607a      	str	r2, [r7, #4]
 8003cb6:	6819      	ldr	r1, [r3, #0]
 8003cb8:	f107 030c 	add.w	r3, r7, #12
 8003cbc:	220a      	movs	r2, #10
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	f7ff ff50 	bl	8003b64 <ts_itoa>
				break;
 8003cc4:	e011      	b.n	8003cea <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	1d1a      	adds	r2, r3, #4
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4619      	mov	r1, r3
 8003cd0:	f107 030c 	add.w	r3, r7, #12
 8003cd4:	2210      	movs	r2, #16
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f7ff ff44 	bl	8003b64 <ts_itoa>
				break;
 8003cdc:	e005      	b.n	8003cea <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	60fa      	str	r2, [r7, #12]
 8003ce4:	2225      	movs	r2, #37	; 0x25
 8003ce6:	701a      	strb	r2, [r3, #0]
				  break;
 8003ce8:	bf00      	nop
			}
			fmt++;
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	3301      	adds	r3, #1
 8003cee:	60bb      	str	r3, [r7, #8]
 8003cf0:	e007      	b.n	8003d02 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	1c5a      	adds	r2, r3, #1
 8003cf6:	60fa      	str	r2, [r7, #12]
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	1c51      	adds	r1, r2, #1
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	7812      	ldrb	r2, [r2, #0]
 8003d00:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	f47f af7d 	bne.w	8003c06 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	461a      	mov	r2, r3
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	1ad3      	subs	r3, r2, r3
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3720      	adds	r7, #32
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8003d22:	b40e      	push	{r1, r2, r3}
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 8003d2c:	f107 0320 	add.w	r3, r7, #32
 8003d30:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	69f9      	ldr	r1, [r7, #28]
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f7ff ff5c 	bl	8003bf4 <ts_formatstring>
 8003d3c:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3714      	adds	r7, #20
 8003d44:	46bd      	mov	sp, r7
 8003d46:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d4a:	b003      	add	sp, #12
 8003d4c:	4770      	bx	lr
	...

08003d50 <UART3_config>:
#include "uart3.h"
#include <stm32f1xx_it.h>


void UART3_config(uint32_t baudrate)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b088      	sub	sp, #32
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]

	// check USART is available
	assert_param(IS_USART_123_PERIPH(USART3));

	// set clock for GPIOA
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_AFIO, ENABLE);
 8003d58:	2101      	movs	r1, #1
 8003d5a:	2009      	movs	r0, #9
 8003d5c:	f7fd fcc0 	bl	80016e0 <RCC_APB2PeriphClockCmd>
	// set clock for USART3
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART3, ENABLE);
 8003d60:	2101      	movs	r1, #1
 8003d62:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8003d66:	f7fd fcd9 	bl	800171c <RCC_APB1PeriphClockCmd>

	// config A2 - Tx pin
	Gpio_InitStructure.GPIO_Pin = (1 << 10);
 8003d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003d6e:	81bb      	strh	r3, [r7, #12]
	Gpio_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 8003d70:	2318      	movs	r3, #24
 8003d72:	73fb      	strb	r3, [r7, #15]
	Gpio_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8003d74:	2303      	movs	r3, #3
 8003d76:	73bb      	strb	r3, [r7, #14]
	GPIO_Init(GPIOB, &Gpio_InitStructure);
 8003d78:	f107 030c 	add.w	r3, r7, #12
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	481f      	ldr	r0, [pc, #124]	; (8003dfc <UART3_config+0xac>)
 8003d80:	f7fd fb00 	bl	8001384 <GPIO_Init>

	// config A3 Rx pin
	Gpio_InitStructure.GPIO_Pin = (1 << 11);
 8003d84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003d88:	81bb      	strh	r3, [r7, #12]
	Gpio_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 8003d8a:	2304      	movs	r3, #4
 8003d8c:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOB, &Gpio_InitStructure);
 8003d8e:	f107 030c 	add.w	r3, r7, #12
 8003d92:	4619      	mov	r1, r3
 8003d94:	4819      	ldr	r0, [pc, #100]	; (8003dfc <UART3_config+0xac>)
 8003d96:	f7fd faf5 	bl	8001384 <GPIO_Init>

	// set USART3 parameter
	Usart_InitStructure.USART_BaudRate = baudrate;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	613b      	str	r3, [r7, #16]
	Usart_InitStructure.USART_HardwareFlowControl =	USART_HardwareFlowControl_None;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	83bb      	strh	r3, [r7, #28]
	Usart_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8003da2:	230c      	movs	r3, #12
 8003da4:	837b      	strh	r3, [r7, #26]
	Usart_InitStructure.USART_Parity = USART_Parity_No;
 8003da6:	2300      	movs	r3, #0
 8003da8:	833b      	strh	r3, [r7, #24]
	Usart_InitStructure.USART_StopBits = USART_StopBits_1;
 8003daa:	2300      	movs	r3, #0
 8003dac:	82fb      	strh	r3, [r7, #22]
	Usart_InitStructure.USART_WordLength = USART_WordLength_8b;
 8003dae:	2300      	movs	r3, #0
 8003db0:	82bb      	strh	r3, [r7, #20]

	//Init USART3
	USART_Init(USART3, &Usart_InitStructure);
 8003db2:	f107 0310 	add.w	r3, r7, #16
 8003db6:	4619      	mov	r1, r3
 8003db8:	4811      	ldr	r0, [pc, #68]	; (8003e00 <UART3_config+0xb0>)
 8003dba:	f7fd fccd 	bl	8001758 <USART_Init>

	/* Enable the USARTx Interrupt */
	NVIC_InitStructure.NVIC_IRQChannel = USART3_IRQn;
 8003dbe:	2327      	movs	r3, #39	; 0x27
 8003dc0:	723b      	strb	r3, [r7, #8]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	727b      	strb	r3, [r7, #9]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	72bb      	strb	r3, [r7, #10]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	72fb      	strb	r3, [r7, #11]
	NVIC_Init(&NVIC_InitStructure);
 8003dce:	f107 0308 	add.w	r3, r7, #8
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fd f9d0 	bl	8001178 <NVIC_Init>
	//clear flag for the first time
	USART_ClearFlag(USART3, USART_FLAG_RXNE);
 8003dd8:	2120      	movs	r1, #32
 8003dda:	4809      	ldr	r0, [pc, #36]	; (8003e00 <UART3_config+0xb0>)
 8003ddc:	f7fd fe06 	bl	80019ec <USART_ClearFlag>

	// enable receive interrupt
	USART_ITConfig(USART3, USART_IT_RXNE, ENABLE);
 8003de0:	2201      	movs	r2, #1
 8003de2:	f240 5125 	movw	r1, #1317	; 0x525
 8003de6:	4806      	ldr	r0, [pc, #24]	; (8003e00 <UART3_config+0xb0>)
 8003de8:	f7fd fd8f 	bl	800190a <USART_ITConfig>

	// enable USART 1
	USART_Cmd(USART3, ENABLE);
 8003dec:	2101      	movs	r1, #1
 8003dee:	4804      	ldr	r0, [pc, #16]	; (8003e00 <UART3_config+0xb0>)
 8003df0:	f7fd fd6c 	bl	80018cc <USART_Cmd>
}
 8003df4:	bf00      	nop
 8003df6:	3720      	adds	r7, #32
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	40010c00 	.word	0x40010c00
 8003e00:	40004800 	.word	0x40004800

08003e04 <UART3_putChar>:

void UART3_putChar(char c)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	71fb      	strb	r3, [r7, #7]
	while(USART_GetFlagStatus(USART3, USART_FLAG_TXE) == 0);
 8003e0e:	bf00      	nop
 8003e10:	2180      	movs	r1, #128	; 0x80
 8003e12:	4807      	ldr	r0, [pc, #28]	; (8003e30 <UART3_putChar+0x2c>)
 8003e14:	f7fd fdcf 	bl	80019b6 <USART_GetFlagStatus>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d0f8      	beq.n	8003e10 <UART3_putChar+0xc>
	/* Check the parameters */
	assert_param(IS_USART_ALL_PERIPH(USART3));
	assert_param(IS_USART_DATA(c));

	/* Transmit Data */
	USART3 -> DR = (c & (uint16_t) 0x01FF);
 8003e1e:	4b04      	ldr	r3, [pc, #16]	; (8003e30 <UART3_putChar+0x2c>)
 8003e20:	79fa      	ldrb	r2, [r7, #7]
 8003e22:	b292      	uxth	r2, r2
 8003e24:	809a      	strh	r2, [r3, #4]
}
 8003e26:	bf00      	nop
 8003e28:	3708      	adds	r7, #8
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	40004800 	.word	0x40004800

08003e34 <UART3_print>:

void UART3_print(char* str)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
	while (*str)// loop through entire string
 8003e3c:	e007      	b.n	8003e4e <UART3_print+0x1a>
	{
		UART3_putChar(*str);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff ffde 	bl	8003e04 <UART3_putChar>
		str++;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	607b      	str	r3, [r7, #4]
	while (*str)// loop through entire string
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1f3      	bne.n	8003e3e <UART3_print+0xa>
	}
}
 8003e56:	bf00      	nop
 8003e58:	3708      	adds	r7, #8
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
	...

08003e60 <UART3_println>:
	UART3_printFloat(num, digits);
	UART3_print("\r\n");
}

void UART3_println(char* str)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b082      	sub	sp, #8
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
	UART3_print(str);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f7ff ffe3 	bl	8003e34 <UART3_print>
	UART3_print("\r\n");
 8003e6e:	4803      	ldr	r0, [pc, #12]	; (8003e7c <UART3_println+0x1c>)
 8003e70:	f7ff ffe0 	bl	8003e34 <UART3_print>
}
 8003e74:	bf00      	nop
 8003e76:	3708      	adds	r7, #8
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	bd80      	pop	{r7, pc}
 8003e7c:	08007468 	.word	0x08007468

08003e80 <UART3_printXY>:
	// return value
	return USART3->DR & 0xff;
}

void UART3_printXY(float x, float y)
{
 8003e80:	b590      	push	{r4, r7, lr}
 8003e82:	b089      	sub	sp, #36	; 0x24
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
	char pos[20] = "";
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
 8003e8e:	f107 0310 	add.w	r3, r7, #16
 8003e92:	2200      	movs	r2, #0
 8003e94:	601a      	str	r2, [r3, #0]
 8003e96:	605a      	str	r2, [r3, #4]
 8003e98:	609a      	str	r2, [r3, #8]
 8003e9a:	60da      	str	r2, [r3, #12]
	sprintf(pos, "X = %d   Y = %d", (int)x, (int)y);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f7fd f933 	bl	8001108 <__aeabi_f2iz>
 8003ea2:	4604      	mov	r4, r0
 8003ea4:	6838      	ldr	r0, [r7, #0]
 8003ea6:	f7fd f92f 	bl	8001108 <__aeabi_f2iz>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	f107 000c 	add.w	r0, r7, #12
 8003eb0:	4622      	mov	r2, r4
 8003eb2:	4906      	ldr	r1, [pc, #24]	; (8003ecc <UART3_printXY+0x4c>)
 8003eb4:	f7ff ff35 	bl	8003d22 <siprintf>
	UART3_println(pos);
 8003eb8:	f107 030c 	add.w	r3, r7, #12
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7ff ffcf 	bl	8003e60 <UART3_println>
}
 8003ec2:	bf00      	nop
 8003ec4:	3724      	adds	r7, #36	; 0x24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd90      	pop	{r4, r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	0800746c 	.word	0x0800746c

08003ed0 <USART3_IRQHandler>:

void USART3_IRQHandler()
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
	if(USART_GetITStatus(USART3, USART_IT_RXNE) != RESET)
 8003ed4:	f240 5125 	movw	r1, #1317	; 0x525
 8003ed8:	4808      	ldr	r0, [pc, #32]	; (8003efc <USART3_IRQHandler+0x2c>)
 8003eda:	f7fd fd97 	bl	8001a0c <USART_GetITStatus>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d009      	beq.n	8003ef8 <USART3_IRQHandler+0x28>
	{
		if (USART_ReceiveData(USART3) == 13)// ki tu ket thuc
 8003ee4:	4805      	ldr	r0, [pc, #20]	; (8003efc <USART3_IRQHandler+0x2c>)
 8003ee6:	f7fd fd57 	bl	8001998 <USART_ReceiveData>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b0d      	cmp	r3, #13
 8003eee:	d002      	beq.n	8003ef6 <USART3_IRQHandler+0x26>
		{
			return;
		}
		UART3_Event();
 8003ef0:	f7ff fc34 	bl	800375c <UART3_Event>
 8003ef4:	e000      	b.n	8003ef8 <USART3_IRQHandler+0x28>
			return;
 8003ef6:	bf00      	nop
	}
}
 8003ef8:	bd80      	pop	{r7, pc}
 8003efa:	bf00      	nop
 8003efc:	40004800 	.word	0x40004800

08003f00 <atof>:
 8003f00:	2100      	movs	r1, #0
 8003f02:	f000 bf09 	b.w	8004d18 <strtod>
	...

08003f08 <__libc_init_array>:
 8003f08:	b570      	push	{r4, r5, r6, lr}
 8003f0a:	2500      	movs	r5, #0
 8003f0c:	4e0c      	ldr	r6, [pc, #48]	; (8003f40 <__libc_init_array+0x38>)
 8003f0e:	4c0d      	ldr	r4, [pc, #52]	; (8003f44 <__libc_init_array+0x3c>)
 8003f10:	1ba4      	subs	r4, r4, r6
 8003f12:	10a4      	asrs	r4, r4, #2
 8003f14:	42a5      	cmp	r5, r4
 8003f16:	d109      	bne.n	8003f2c <__libc_init_array+0x24>
 8003f18:	f003 fa44 	bl	80073a4 <_init>
 8003f1c:	2500      	movs	r5, #0
 8003f1e:	4e0a      	ldr	r6, [pc, #40]	; (8003f48 <__libc_init_array+0x40>)
 8003f20:	4c0a      	ldr	r4, [pc, #40]	; (8003f4c <__libc_init_array+0x44>)
 8003f22:	1ba4      	subs	r4, r4, r6
 8003f24:	10a4      	asrs	r4, r4, #2
 8003f26:	42a5      	cmp	r5, r4
 8003f28:	d105      	bne.n	8003f36 <__libc_init_array+0x2e>
 8003f2a:	bd70      	pop	{r4, r5, r6, pc}
 8003f2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f30:	4798      	blx	r3
 8003f32:	3501      	adds	r5, #1
 8003f34:	e7ee      	b.n	8003f14 <__libc_init_array+0xc>
 8003f36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f3a:	4798      	blx	r3
 8003f3c:	3501      	adds	r5, #1
 8003f3e:	e7f2      	b.n	8003f26 <__libc_init_array+0x1e>
 8003f40:	08007908 	.word	0x08007908
 8003f44:	08007908 	.word	0x08007908
 8003f48:	08007908 	.word	0x08007908
 8003f4c:	0800790c 	.word	0x0800790c

08003f50 <malloc>:
 8003f50:	4b02      	ldr	r3, [pc, #8]	; (8003f5c <malloc+0xc>)
 8003f52:	4601      	mov	r1, r0
 8003f54:	6818      	ldr	r0, [r3, #0]
 8003f56:	f000 b857 	b.w	8004008 <_malloc_r>
 8003f5a:	bf00      	nop
 8003f5c:	20000018 	.word	0x20000018

08003f60 <free>:
 8003f60:	4b02      	ldr	r3, [pc, #8]	; (8003f6c <free+0xc>)
 8003f62:	4601      	mov	r1, r0
 8003f64:	6818      	ldr	r0, [r3, #0]
 8003f66:	f000 b803 	b.w	8003f70 <_free_r>
 8003f6a:	bf00      	nop
 8003f6c:	20000018 	.word	0x20000018

08003f70 <_free_r>:
 8003f70:	b538      	push	{r3, r4, r5, lr}
 8003f72:	4605      	mov	r5, r0
 8003f74:	2900      	cmp	r1, #0
 8003f76:	d043      	beq.n	8004000 <_free_r+0x90>
 8003f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003f7c:	1f0c      	subs	r4, r1, #4
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	bfb8      	it	lt
 8003f82:	18e4      	addlt	r4, r4, r3
 8003f84:	f001 fa17 	bl	80053b6 <__malloc_lock>
 8003f88:	4a1e      	ldr	r2, [pc, #120]	; (8004004 <_free_r+0x94>)
 8003f8a:	6813      	ldr	r3, [r2, #0]
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	b933      	cbnz	r3, 8003f9e <_free_r+0x2e>
 8003f90:	6063      	str	r3, [r4, #4]
 8003f92:	6014      	str	r4, [r2, #0]
 8003f94:	4628      	mov	r0, r5
 8003f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003f9a:	f001 ba0d 	b.w	80053b8 <__malloc_unlock>
 8003f9e:	42a3      	cmp	r3, r4
 8003fa0:	d90b      	bls.n	8003fba <_free_r+0x4a>
 8003fa2:	6821      	ldr	r1, [r4, #0]
 8003fa4:	1862      	adds	r2, r4, r1
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	bf01      	itttt	eq
 8003faa:	681a      	ldreq	r2, [r3, #0]
 8003fac:	685b      	ldreq	r3, [r3, #4]
 8003fae:	1852      	addeq	r2, r2, r1
 8003fb0:	6022      	streq	r2, [r4, #0]
 8003fb2:	6063      	str	r3, [r4, #4]
 8003fb4:	6004      	str	r4, [r0, #0]
 8003fb6:	e7ed      	b.n	8003f94 <_free_r+0x24>
 8003fb8:	4613      	mov	r3, r2
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	b10a      	cbz	r2, 8003fc2 <_free_r+0x52>
 8003fbe:	42a2      	cmp	r2, r4
 8003fc0:	d9fa      	bls.n	8003fb8 <_free_r+0x48>
 8003fc2:	6819      	ldr	r1, [r3, #0]
 8003fc4:	1858      	adds	r0, r3, r1
 8003fc6:	42a0      	cmp	r0, r4
 8003fc8:	d10b      	bne.n	8003fe2 <_free_r+0x72>
 8003fca:	6820      	ldr	r0, [r4, #0]
 8003fcc:	4401      	add	r1, r0
 8003fce:	1858      	adds	r0, r3, r1
 8003fd0:	4282      	cmp	r2, r0
 8003fd2:	6019      	str	r1, [r3, #0]
 8003fd4:	d1de      	bne.n	8003f94 <_free_r+0x24>
 8003fd6:	6810      	ldr	r0, [r2, #0]
 8003fd8:	6852      	ldr	r2, [r2, #4]
 8003fda:	4401      	add	r1, r0
 8003fdc:	6019      	str	r1, [r3, #0]
 8003fde:	605a      	str	r2, [r3, #4]
 8003fe0:	e7d8      	b.n	8003f94 <_free_r+0x24>
 8003fe2:	d902      	bls.n	8003fea <_free_r+0x7a>
 8003fe4:	230c      	movs	r3, #12
 8003fe6:	602b      	str	r3, [r5, #0]
 8003fe8:	e7d4      	b.n	8003f94 <_free_r+0x24>
 8003fea:	6820      	ldr	r0, [r4, #0]
 8003fec:	1821      	adds	r1, r4, r0
 8003fee:	428a      	cmp	r2, r1
 8003ff0:	bf01      	itttt	eq
 8003ff2:	6811      	ldreq	r1, [r2, #0]
 8003ff4:	6852      	ldreq	r2, [r2, #4]
 8003ff6:	1809      	addeq	r1, r1, r0
 8003ff8:	6021      	streq	r1, [r4, #0]
 8003ffa:	6062      	str	r2, [r4, #4]
 8003ffc:	605c      	str	r4, [r3, #4]
 8003ffe:	e7c9      	b.n	8003f94 <_free_r+0x24>
 8004000:	bd38      	pop	{r3, r4, r5, pc}
 8004002:	bf00      	nop
 8004004:	2000024c 	.word	0x2000024c

08004008 <_malloc_r>:
 8004008:	b570      	push	{r4, r5, r6, lr}
 800400a:	1ccd      	adds	r5, r1, #3
 800400c:	f025 0503 	bic.w	r5, r5, #3
 8004010:	3508      	adds	r5, #8
 8004012:	2d0c      	cmp	r5, #12
 8004014:	bf38      	it	cc
 8004016:	250c      	movcc	r5, #12
 8004018:	2d00      	cmp	r5, #0
 800401a:	4606      	mov	r6, r0
 800401c:	db01      	blt.n	8004022 <_malloc_r+0x1a>
 800401e:	42a9      	cmp	r1, r5
 8004020:	d903      	bls.n	800402a <_malloc_r+0x22>
 8004022:	230c      	movs	r3, #12
 8004024:	6033      	str	r3, [r6, #0]
 8004026:	2000      	movs	r0, #0
 8004028:	bd70      	pop	{r4, r5, r6, pc}
 800402a:	f001 f9c4 	bl	80053b6 <__malloc_lock>
 800402e:	4a23      	ldr	r2, [pc, #140]	; (80040bc <_malloc_r+0xb4>)
 8004030:	6814      	ldr	r4, [r2, #0]
 8004032:	4621      	mov	r1, r4
 8004034:	b991      	cbnz	r1, 800405c <_malloc_r+0x54>
 8004036:	4c22      	ldr	r4, [pc, #136]	; (80040c0 <_malloc_r+0xb8>)
 8004038:	6823      	ldr	r3, [r4, #0]
 800403a:	b91b      	cbnz	r3, 8004044 <_malloc_r+0x3c>
 800403c:	4630      	mov	r0, r6
 800403e:	f000 f841 	bl	80040c4 <_sbrk_r>
 8004042:	6020      	str	r0, [r4, #0]
 8004044:	4629      	mov	r1, r5
 8004046:	4630      	mov	r0, r6
 8004048:	f000 f83c 	bl	80040c4 <_sbrk_r>
 800404c:	1c43      	adds	r3, r0, #1
 800404e:	d126      	bne.n	800409e <_malloc_r+0x96>
 8004050:	230c      	movs	r3, #12
 8004052:	4630      	mov	r0, r6
 8004054:	6033      	str	r3, [r6, #0]
 8004056:	f001 f9af 	bl	80053b8 <__malloc_unlock>
 800405a:	e7e4      	b.n	8004026 <_malloc_r+0x1e>
 800405c:	680b      	ldr	r3, [r1, #0]
 800405e:	1b5b      	subs	r3, r3, r5
 8004060:	d41a      	bmi.n	8004098 <_malloc_r+0x90>
 8004062:	2b0b      	cmp	r3, #11
 8004064:	d90f      	bls.n	8004086 <_malloc_r+0x7e>
 8004066:	600b      	str	r3, [r1, #0]
 8004068:	18cc      	adds	r4, r1, r3
 800406a:	50cd      	str	r5, [r1, r3]
 800406c:	4630      	mov	r0, r6
 800406e:	f001 f9a3 	bl	80053b8 <__malloc_unlock>
 8004072:	f104 000b 	add.w	r0, r4, #11
 8004076:	1d23      	adds	r3, r4, #4
 8004078:	f020 0007 	bic.w	r0, r0, #7
 800407c:	1ac3      	subs	r3, r0, r3
 800407e:	d01b      	beq.n	80040b8 <_malloc_r+0xb0>
 8004080:	425a      	negs	r2, r3
 8004082:	50e2      	str	r2, [r4, r3]
 8004084:	bd70      	pop	{r4, r5, r6, pc}
 8004086:	428c      	cmp	r4, r1
 8004088:	bf0b      	itete	eq
 800408a:	6863      	ldreq	r3, [r4, #4]
 800408c:	684b      	ldrne	r3, [r1, #4]
 800408e:	6013      	streq	r3, [r2, #0]
 8004090:	6063      	strne	r3, [r4, #4]
 8004092:	bf18      	it	ne
 8004094:	460c      	movne	r4, r1
 8004096:	e7e9      	b.n	800406c <_malloc_r+0x64>
 8004098:	460c      	mov	r4, r1
 800409a:	6849      	ldr	r1, [r1, #4]
 800409c:	e7ca      	b.n	8004034 <_malloc_r+0x2c>
 800409e:	1cc4      	adds	r4, r0, #3
 80040a0:	f024 0403 	bic.w	r4, r4, #3
 80040a4:	42a0      	cmp	r0, r4
 80040a6:	d005      	beq.n	80040b4 <_malloc_r+0xac>
 80040a8:	1a21      	subs	r1, r4, r0
 80040aa:	4630      	mov	r0, r6
 80040ac:	f000 f80a 	bl	80040c4 <_sbrk_r>
 80040b0:	3001      	adds	r0, #1
 80040b2:	d0cd      	beq.n	8004050 <_malloc_r+0x48>
 80040b4:	6025      	str	r5, [r4, #0]
 80040b6:	e7d9      	b.n	800406c <_malloc_r+0x64>
 80040b8:	bd70      	pop	{r4, r5, r6, pc}
 80040ba:	bf00      	nop
 80040bc:	2000024c 	.word	0x2000024c
 80040c0:	20000250 	.word	0x20000250

080040c4 <_sbrk_r>:
 80040c4:	b538      	push	{r3, r4, r5, lr}
 80040c6:	2300      	movs	r3, #0
 80040c8:	4c05      	ldr	r4, [pc, #20]	; (80040e0 <_sbrk_r+0x1c>)
 80040ca:	4605      	mov	r5, r0
 80040cc:	4608      	mov	r0, r1
 80040ce:	6023      	str	r3, [r4, #0]
 80040d0:	f003 f95a 	bl	8007388 <_sbrk>
 80040d4:	1c43      	adds	r3, r0, #1
 80040d6:	d102      	bne.n	80040de <_sbrk_r+0x1a>
 80040d8:	6823      	ldr	r3, [r4, #0]
 80040da:	b103      	cbz	r3, 80040de <_sbrk_r+0x1a>
 80040dc:	602b      	str	r3, [r5, #0]
 80040de:	bd38      	pop	{r3, r4, r5, pc}
 80040e0:	20000294 	.word	0x20000294

080040e4 <sulp>:
 80040e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040e8:	460f      	mov	r7, r1
 80040ea:	4690      	mov	r8, r2
 80040ec:	f001 fc24 	bl	8005938 <__ulp>
 80040f0:	4604      	mov	r4, r0
 80040f2:	460d      	mov	r5, r1
 80040f4:	f1b8 0f00 	cmp.w	r8, #0
 80040f8:	d011      	beq.n	800411e <sulp+0x3a>
 80040fa:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80040fe:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004102:	2b00      	cmp	r3, #0
 8004104:	dd0b      	ble.n	800411e <sulp+0x3a>
 8004106:	2400      	movs	r4, #0
 8004108:	051b      	lsls	r3, r3, #20
 800410a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800410e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8004112:	4622      	mov	r2, r4
 8004114:	462b      	mov	r3, r5
 8004116:	f7fc f9db 	bl	80004d0 <__aeabi_dmul>
 800411a:	4604      	mov	r4, r0
 800411c:	460d      	mov	r5, r1
 800411e:	4620      	mov	r0, r4
 8004120:	4629      	mov	r1, r5
 8004122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004128 <_strtod_l>:
 8004128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800412c:	4699      	mov	r9, r3
 800412e:	2300      	movs	r3, #0
 8004130:	b09f      	sub	sp, #124	; 0x7c
 8004132:	4680      	mov	r8, r0
 8004134:	4648      	mov	r0, r9
 8004136:	460c      	mov	r4, r1
 8004138:	9215      	str	r2, [sp, #84]	; 0x54
 800413a:	931a      	str	r3, [sp, #104]	; 0x68
 800413c:	f001 f91c 	bl	8005378 <__localeconv_l>
 8004140:	4607      	mov	r7, r0
 8004142:	6800      	ldr	r0, [r0, #0]
 8004144:	f7fc f804 	bl	8000150 <strlen>
 8004148:	f04f 0a00 	mov.w	sl, #0
 800414c:	4605      	mov	r5, r0
 800414e:	f04f 0b00 	mov.w	fp, #0
 8004152:	9419      	str	r4, [sp, #100]	; 0x64
 8004154:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004156:	781a      	ldrb	r2, [r3, #0]
 8004158:	2a0d      	cmp	r2, #13
 800415a:	d833      	bhi.n	80041c4 <_strtod_l+0x9c>
 800415c:	2a09      	cmp	r2, #9
 800415e:	d237      	bcs.n	80041d0 <_strtod_l+0xa8>
 8004160:	2a00      	cmp	r2, #0
 8004162:	d03f      	beq.n	80041e4 <_strtod_l+0xbc>
 8004164:	2300      	movs	r3, #0
 8004166:	9309      	str	r3, [sp, #36]	; 0x24
 8004168:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800416a:	7833      	ldrb	r3, [r6, #0]
 800416c:	2b30      	cmp	r3, #48	; 0x30
 800416e:	f040 8101 	bne.w	8004374 <_strtod_l+0x24c>
 8004172:	7873      	ldrb	r3, [r6, #1]
 8004174:	2b58      	cmp	r3, #88	; 0x58
 8004176:	d001      	beq.n	800417c <_strtod_l+0x54>
 8004178:	2b78      	cmp	r3, #120	; 0x78
 800417a:	d16b      	bne.n	8004254 <_strtod_l+0x12c>
 800417c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800417e:	f8cd 9008 	str.w	r9, [sp, #8]
 8004182:	9301      	str	r3, [sp, #4]
 8004184:	ab1a      	add	r3, sp, #104	; 0x68
 8004186:	9300      	str	r3, [sp, #0]
 8004188:	4aaa      	ldr	r2, [pc, #680]	; (8004434 <_strtod_l+0x30c>)
 800418a:	ab1b      	add	r3, sp, #108	; 0x6c
 800418c:	a919      	add	r1, sp, #100	; 0x64
 800418e:	4640      	mov	r0, r8
 8004190:	f000 fe1e 	bl	8004dd0 <__gethex>
 8004194:	f010 0407 	ands.w	r4, r0, #7
 8004198:	4605      	mov	r5, r0
 800419a:	d005      	beq.n	80041a8 <_strtod_l+0x80>
 800419c:	2c06      	cmp	r4, #6
 800419e:	d12b      	bne.n	80041f8 <_strtod_l+0xd0>
 80041a0:	2300      	movs	r3, #0
 80041a2:	3601      	adds	r6, #1
 80041a4:	9619      	str	r6, [sp, #100]	; 0x64
 80041a6:	9309      	str	r3, [sp, #36]	; 0x24
 80041a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	f040 859d 	bne.w	8004cea <_strtod_l+0xbc2>
 80041b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041b2:	b1e3      	cbz	r3, 80041ee <_strtod_l+0xc6>
 80041b4:	4652      	mov	r2, sl
 80041b6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80041ba:	4610      	mov	r0, r2
 80041bc:	4619      	mov	r1, r3
 80041be:	b01f      	add	sp, #124	; 0x7c
 80041c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041c4:	2a2b      	cmp	r2, #43	; 0x2b
 80041c6:	d006      	beq.n	80041d6 <_strtod_l+0xae>
 80041c8:	2a2d      	cmp	r2, #45	; 0x2d
 80041ca:	d013      	beq.n	80041f4 <_strtod_l+0xcc>
 80041cc:	2a20      	cmp	r2, #32
 80041ce:	d1c9      	bne.n	8004164 <_strtod_l+0x3c>
 80041d0:	3301      	adds	r3, #1
 80041d2:	9319      	str	r3, [sp, #100]	; 0x64
 80041d4:	e7be      	b.n	8004154 <_strtod_l+0x2c>
 80041d6:	2200      	movs	r2, #0
 80041d8:	9209      	str	r2, [sp, #36]	; 0x24
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	9219      	str	r2, [sp, #100]	; 0x64
 80041de:	785b      	ldrb	r3, [r3, #1]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d1c1      	bne.n	8004168 <_strtod_l+0x40>
 80041e4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80041e6:	9419      	str	r4, [sp, #100]	; 0x64
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f040 857c 	bne.w	8004ce6 <_strtod_l+0xbbe>
 80041ee:	4652      	mov	r2, sl
 80041f0:	465b      	mov	r3, fp
 80041f2:	e7e2      	b.n	80041ba <_strtod_l+0x92>
 80041f4:	2201      	movs	r2, #1
 80041f6:	e7ef      	b.n	80041d8 <_strtod_l+0xb0>
 80041f8:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80041fa:	b13a      	cbz	r2, 800420c <_strtod_l+0xe4>
 80041fc:	2135      	movs	r1, #53	; 0x35
 80041fe:	a81c      	add	r0, sp, #112	; 0x70
 8004200:	f001 fc87 	bl	8005b12 <__copybits>
 8004204:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004206:	4640      	mov	r0, r8
 8004208:	f001 f90b 	bl	8005422 <_Bfree>
 800420c:	3c01      	subs	r4, #1
 800420e:	2c04      	cmp	r4, #4
 8004210:	d808      	bhi.n	8004224 <_strtod_l+0xfc>
 8004212:	e8df f004 	tbb	[pc, r4]
 8004216:	030c      	.short	0x030c
 8004218:	1a17      	.short	0x1a17
 800421a:	0c          	.byte	0x0c
 800421b:	00          	.byte	0x00
 800421c:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8004220:	f8dd b074 	ldr.w	fp, [sp, #116]	; 0x74
 8004224:	0729      	lsls	r1, r5, #28
 8004226:	d5bf      	bpl.n	80041a8 <_strtod_l+0x80>
 8004228:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800422c:	e7bc      	b.n	80041a8 <_strtod_l+0x80>
 800422e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004230:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8004232:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004236:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800423a:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800423e:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8004242:	e7ef      	b.n	8004224 <_strtod_l+0xfc>
 8004244:	f8df b1f8 	ldr.w	fp, [pc, #504]	; 8004440 <_strtod_l+0x318>
 8004248:	e7ec      	b.n	8004224 <_strtod_l+0xfc>
 800424a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800424e:	f04f 3aff 	mov.w	sl, #4294967295
 8004252:	e7e7      	b.n	8004224 <_strtod_l+0xfc>
 8004254:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004256:	1c5a      	adds	r2, r3, #1
 8004258:	9219      	str	r2, [sp, #100]	; 0x64
 800425a:	785b      	ldrb	r3, [r3, #1]
 800425c:	2b30      	cmp	r3, #48	; 0x30
 800425e:	d0f9      	beq.n	8004254 <_strtod_l+0x12c>
 8004260:	2b00      	cmp	r3, #0
 8004262:	d0a1      	beq.n	80041a8 <_strtod_l+0x80>
 8004264:	2301      	movs	r3, #1
 8004266:	9308      	str	r3, [sp, #32]
 8004268:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800426a:	220a      	movs	r2, #10
 800426c:	930a      	str	r3, [sp, #40]	; 0x28
 800426e:	2300      	movs	r3, #0
 8004270:	9305      	str	r3, [sp, #20]
 8004272:	9306      	str	r3, [sp, #24]
 8004274:	9304      	str	r3, [sp, #16]
 8004276:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004278:	7806      	ldrb	r6, [r0, #0]
 800427a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800427e:	b2d9      	uxtb	r1, r3
 8004280:	2909      	cmp	r1, #9
 8004282:	d979      	bls.n	8004378 <_strtod_l+0x250>
 8004284:	462a      	mov	r2, r5
 8004286:	6839      	ldr	r1, [r7, #0]
 8004288:	f001 fc8c 	bl	8005ba4 <strncmp>
 800428c:	2800      	cmp	r0, #0
 800428e:	f000 8085 	beq.w	800439c <_strtod_l+0x274>
 8004292:	2000      	movs	r0, #0
 8004294:	4633      	mov	r3, r6
 8004296:	4602      	mov	r2, r0
 8004298:	4601      	mov	r1, r0
 800429a:	9d04      	ldr	r5, [sp, #16]
 800429c:	2b65      	cmp	r3, #101	; 0x65
 800429e:	d002      	beq.n	80042a6 <_strtod_l+0x17e>
 80042a0:	2b45      	cmp	r3, #69	; 0x45
 80042a2:	f040 80ef 	bne.w	8004484 <_strtod_l+0x35c>
 80042a6:	b925      	cbnz	r5, 80042b2 <_strtod_l+0x18a>
 80042a8:	b910      	cbnz	r0, 80042b0 <_strtod_l+0x188>
 80042aa:	9b08      	ldr	r3, [sp, #32]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d099      	beq.n	80041e4 <_strtod_l+0xbc>
 80042b0:	2500      	movs	r5, #0
 80042b2:	9c19      	ldr	r4, [sp, #100]	; 0x64
 80042b4:	1c63      	adds	r3, r4, #1
 80042b6:	9319      	str	r3, [sp, #100]	; 0x64
 80042b8:	7863      	ldrb	r3, [r4, #1]
 80042ba:	2b2b      	cmp	r3, #43	; 0x2b
 80042bc:	f000 80cf 	beq.w	800445e <_strtod_l+0x336>
 80042c0:	2b2d      	cmp	r3, #45	; 0x2d
 80042c2:	f000 80d2 	beq.w	800446a <_strtod_l+0x342>
 80042c6:	2600      	movs	r6, #0
 80042c8:	9607      	str	r6, [sp, #28]
 80042ca:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80042ce:	2e09      	cmp	r6, #9
 80042d0:	f200 80d7 	bhi.w	8004482 <_strtod_l+0x35a>
 80042d4:	2b30      	cmp	r3, #48	; 0x30
 80042d6:	f000 80ca 	beq.w	800446e <_strtod_l+0x346>
 80042da:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 80042de:	2e08      	cmp	r6, #8
 80042e0:	f200 80d0 	bhi.w	8004484 <_strtod_l+0x35c>
 80042e4:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80042e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80042ea:	f04f 0c0a 	mov.w	ip, #10
 80042ee:	461f      	mov	r7, r3
 80042f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80042f2:	1c5e      	adds	r6, r3, #1
 80042f4:	9619      	str	r6, [sp, #100]	; 0x64
 80042f6:	785b      	ldrb	r3, [r3, #1]
 80042f8:	f1a3 0930 	sub.w	r9, r3, #48	; 0x30
 80042fc:	f1b9 0f09 	cmp.w	r9, #9
 8004300:	f240 80ba 	bls.w	8004478 <_strtod_l+0x350>
 8004304:	1bf6      	subs	r6, r6, r7
 8004306:	2e08      	cmp	r6, #8
 8004308:	f644 691f 	movw	r9, #19999	; 0x4e1f
 800430c:	dc02      	bgt.n	8004314 <_strtod_l+0x1ec>
 800430e:	45f1      	cmp	r9, lr
 8004310:	bfa8      	it	ge
 8004312:	46f1      	movge	r9, lr
 8004314:	9e07      	ldr	r6, [sp, #28]
 8004316:	b10e      	cbz	r6, 800431c <_strtod_l+0x1f4>
 8004318:	f1c9 0900 	rsb	r9, r9, #0
 800431c:	2d00      	cmp	r5, #0
 800431e:	f040 80d7 	bne.w	80044d0 <_strtod_l+0x3a8>
 8004322:	2800      	cmp	r0, #0
 8004324:	f47f af40 	bne.w	80041a8 <_strtod_l+0x80>
 8004328:	9a08      	ldr	r2, [sp, #32]
 800432a:	2a00      	cmp	r2, #0
 800432c:	f47f af3c 	bne.w	80041a8 <_strtod_l+0x80>
 8004330:	2900      	cmp	r1, #0
 8004332:	f47f af57 	bne.w	80041e4 <_strtod_l+0xbc>
 8004336:	2b4e      	cmp	r3, #78	; 0x4e
 8004338:	f000 80ad 	beq.w	8004496 <_strtod_l+0x36e>
 800433c:	f300 80a5 	bgt.w	800448a <_strtod_l+0x362>
 8004340:	2b49      	cmp	r3, #73	; 0x49
 8004342:	f47f af4f 	bne.w	80041e4 <_strtod_l+0xbc>
 8004346:	493c      	ldr	r1, [pc, #240]	; (8004438 <_strtod_l+0x310>)
 8004348:	a819      	add	r0, sp, #100	; 0x64
 800434a:	f000 ff72 	bl	8005232 <__match>
 800434e:	2800      	cmp	r0, #0
 8004350:	f43f af48 	beq.w	80041e4 <_strtod_l+0xbc>
 8004354:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004356:	4939      	ldr	r1, [pc, #228]	; (800443c <_strtod_l+0x314>)
 8004358:	3b01      	subs	r3, #1
 800435a:	a819      	add	r0, sp, #100	; 0x64
 800435c:	9319      	str	r3, [sp, #100]	; 0x64
 800435e:	f000 ff68 	bl	8005232 <__match>
 8004362:	b910      	cbnz	r0, 800436a <_strtod_l+0x242>
 8004364:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004366:	3301      	adds	r3, #1
 8004368:	9319      	str	r3, [sp, #100]	; 0x64
 800436a:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 8004440 <_strtod_l+0x318>
 800436e:	f04f 0a00 	mov.w	sl, #0
 8004372:	e719      	b.n	80041a8 <_strtod_l+0x80>
 8004374:	2300      	movs	r3, #0
 8004376:	e776      	b.n	8004266 <_strtod_l+0x13e>
 8004378:	9904      	ldr	r1, [sp, #16]
 800437a:	3001      	adds	r0, #1
 800437c:	2908      	cmp	r1, #8
 800437e:	bfd5      	itete	le
 8004380:	9906      	ldrle	r1, [sp, #24]
 8004382:	9905      	ldrgt	r1, [sp, #20]
 8004384:	fb02 3301 	mlale	r3, r2, r1, r3
 8004388:	fb02 3301 	mlagt	r3, r2, r1, r3
 800438c:	bfd4      	ite	le
 800438e:	9306      	strle	r3, [sp, #24]
 8004390:	9305      	strgt	r3, [sp, #20]
 8004392:	9b04      	ldr	r3, [sp, #16]
 8004394:	9019      	str	r0, [sp, #100]	; 0x64
 8004396:	3301      	adds	r3, #1
 8004398:	9304      	str	r3, [sp, #16]
 800439a:	e76c      	b.n	8004276 <_strtod_l+0x14e>
 800439c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800439e:	195a      	adds	r2, r3, r5
 80043a0:	9219      	str	r2, [sp, #100]	; 0x64
 80043a2:	9a04      	ldr	r2, [sp, #16]
 80043a4:	5d5b      	ldrb	r3, [r3, r5]
 80043a6:	2a00      	cmp	r2, #0
 80043a8:	d154      	bne.n	8004454 <_strtod_l+0x32c>
 80043aa:	4610      	mov	r0, r2
 80043ac:	2b30      	cmp	r3, #48	; 0x30
 80043ae:	d02a      	beq.n	8004406 <_strtod_l+0x2de>
 80043b0:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80043b4:	2a08      	cmp	r2, #8
 80043b6:	f200 849d 	bhi.w	8004cf4 <_strtod_l+0xbcc>
 80043ba:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80043bc:	920a      	str	r2, [sp, #40]	; 0x28
 80043be:	4602      	mov	r2, r0
 80043c0:	2000      	movs	r0, #0
 80043c2:	4605      	mov	r5, r0
 80043c4:	3b30      	subs	r3, #48	; 0x30
 80043c6:	f100 0101 	add.w	r1, r0, #1
 80043ca:	d011      	beq.n	80043f0 <_strtod_l+0x2c8>
 80043cc:	440a      	add	r2, r1
 80043ce:	260a      	movs	r6, #10
 80043d0:	4629      	mov	r1, r5
 80043d2:	eb00 0c05 	add.w	ip, r0, r5
 80043d6:	4561      	cmp	r1, ip
 80043d8:	d11b      	bne.n	8004412 <_strtod_l+0x2ea>
 80043da:	4428      	add	r0, r5
 80043dc:	2808      	cmp	r0, #8
 80043de:	f100 0501 	add.w	r5, r0, #1
 80043e2:	dc2f      	bgt.n	8004444 <_strtod_l+0x31c>
 80043e4:	210a      	movs	r1, #10
 80043e6:	9806      	ldr	r0, [sp, #24]
 80043e8:	fb01 3300 	mla	r3, r1, r0, r3
 80043ec:	9306      	str	r3, [sp, #24]
 80043ee:	2100      	movs	r1, #0
 80043f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80043f2:	1c58      	adds	r0, r3, #1
 80043f4:	9019      	str	r0, [sp, #100]	; 0x64
 80043f6:	4608      	mov	r0, r1
 80043f8:	785b      	ldrb	r3, [r3, #1]
 80043fa:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80043fe:	2909      	cmp	r1, #9
 8004400:	d9e0      	bls.n	80043c4 <_strtod_l+0x29c>
 8004402:	2101      	movs	r1, #1
 8004404:	e74a      	b.n	800429c <_strtod_l+0x174>
 8004406:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004408:	3001      	adds	r0, #1
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	9219      	str	r2, [sp, #100]	; 0x64
 800440e:	785b      	ldrb	r3, [r3, #1]
 8004410:	e7cc      	b.n	80043ac <_strtod_l+0x284>
 8004412:	3101      	adds	r1, #1
 8004414:	f101 3eff 	add.w	lr, r1, #4294967295
 8004418:	f1be 0f08 	cmp.w	lr, #8
 800441c:	dc03      	bgt.n	8004426 <_strtod_l+0x2fe>
 800441e:	9f06      	ldr	r7, [sp, #24]
 8004420:	4377      	muls	r7, r6
 8004422:	9706      	str	r7, [sp, #24]
 8004424:	e7d7      	b.n	80043d6 <_strtod_l+0x2ae>
 8004426:	2910      	cmp	r1, #16
 8004428:	bfde      	ittt	le
 800442a:	9f05      	ldrle	r7, [sp, #20]
 800442c:	4377      	mulle	r7, r6
 800442e:	9705      	strle	r7, [sp, #20]
 8004430:	e7d1      	b.n	80043d6 <_strtod_l+0x2ae>
 8004432:	bf00      	nop
 8004434:	08007488 	.word	0x08007488
 8004438:	0800747c 	.word	0x0800747c
 800443c:	0800747f 	.word	0x0800747f
 8004440:	7ff00000 	.word	0x7ff00000
 8004444:	2d10      	cmp	r5, #16
 8004446:	bfdf      	itttt	le
 8004448:	210a      	movle	r1, #10
 800444a:	9805      	ldrle	r0, [sp, #20]
 800444c:	fb01 3300 	mlale	r3, r1, r0, r3
 8004450:	9305      	strle	r3, [sp, #20]
 8004452:	e7cc      	b.n	80043ee <_strtod_l+0x2c6>
 8004454:	4602      	mov	r2, r0
 8004456:	9d04      	ldr	r5, [sp, #16]
 8004458:	e7cf      	b.n	80043fa <_strtod_l+0x2d2>
 800445a:	2101      	movs	r1, #1
 800445c:	e724      	b.n	80042a8 <_strtod_l+0x180>
 800445e:	2300      	movs	r3, #0
 8004460:	9307      	str	r3, [sp, #28]
 8004462:	1ca3      	adds	r3, r4, #2
 8004464:	9319      	str	r3, [sp, #100]	; 0x64
 8004466:	78a3      	ldrb	r3, [r4, #2]
 8004468:	e72f      	b.n	80042ca <_strtod_l+0x1a2>
 800446a:	2301      	movs	r3, #1
 800446c:	e7f8      	b.n	8004460 <_strtod_l+0x338>
 800446e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004470:	1c5e      	adds	r6, r3, #1
 8004472:	9619      	str	r6, [sp, #100]	; 0x64
 8004474:	785b      	ldrb	r3, [r3, #1]
 8004476:	e72d      	b.n	80042d4 <_strtod_l+0x1ac>
 8004478:	fb0c 3e0e 	mla	lr, ip, lr, r3
 800447c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8004480:	e736      	b.n	80042f0 <_strtod_l+0x1c8>
 8004482:	9419      	str	r4, [sp, #100]	; 0x64
 8004484:	f04f 0900 	mov.w	r9, #0
 8004488:	e748      	b.n	800431c <_strtod_l+0x1f4>
 800448a:	2b69      	cmp	r3, #105	; 0x69
 800448c:	f43f af5b 	beq.w	8004346 <_strtod_l+0x21e>
 8004490:	2b6e      	cmp	r3, #110	; 0x6e
 8004492:	f47f aea7 	bne.w	80041e4 <_strtod_l+0xbc>
 8004496:	498c      	ldr	r1, [pc, #560]	; (80046c8 <_strtod_l+0x5a0>)
 8004498:	a819      	add	r0, sp, #100	; 0x64
 800449a:	f000 feca 	bl	8005232 <__match>
 800449e:	2800      	cmp	r0, #0
 80044a0:	f43f aea0 	beq.w	80041e4 <_strtod_l+0xbc>
 80044a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	2b28      	cmp	r3, #40	; 0x28
 80044aa:	d10e      	bne.n	80044ca <_strtod_l+0x3a2>
 80044ac:	aa1c      	add	r2, sp, #112	; 0x70
 80044ae:	4987      	ldr	r1, [pc, #540]	; (80046cc <_strtod_l+0x5a4>)
 80044b0:	a819      	add	r0, sp, #100	; 0x64
 80044b2:	f000 fed1 	bl	8005258 <__hexnan>
 80044b6:	2805      	cmp	r0, #5
 80044b8:	d107      	bne.n	80044ca <_strtod_l+0x3a2>
 80044ba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80044bc:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 80044c0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80044c4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80044c8:	e66e      	b.n	80041a8 <_strtod_l+0x80>
 80044ca:	f8df b210 	ldr.w	fp, [pc, #528]	; 80046dc <_strtod_l+0x5b4>
 80044ce:	e74e      	b.n	800436e <_strtod_l+0x246>
 80044d0:	9b04      	ldr	r3, [sp, #16]
 80044d2:	462c      	mov	r4, r5
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	bf08      	it	eq
 80044d8:	462b      	moveq	r3, r5
 80044da:	2d10      	cmp	r5, #16
 80044dc:	bfa8      	it	ge
 80044de:	2410      	movge	r4, #16
 80044e0:	9806      	ldr	r0, [sp, #24]
 80044e2:	eba9 0902 	sub.w	r9, r9, r2
 80044e6:	9304      	str	r3, [sp, #16]
 80044e8:	f7fb ff7c 	bl	80003e4 <__aeabi_ui2d>
 80044ec:	2c09      	cmp	r4, #9
 80044ee:	4682      	mov	sl, r0
 80044f0:	468b      	mov	fp, r1
 80044f2:	dd13      	ble.n	800451c <_strtod_l+0x3f4>
 80044f4:	4b76      	ldr	r3, [pc, #472]	; (80046d0 <_strtod_l+0x5a8>)
 80044f6:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80044fa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80044fe:	f7fb ffe7 	bl	80004d0 <__aeabi_dmul>
 8004502:	4606      	mov	r6, r0
 8004504:	9805      	ldr	r0, [sp, #20]
 8004506:	460f      	mov	r7, r1
 8004508:	f7fb ff6c 	bl	80003e4 <__aeabi_ui2d>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4630      	mov	r0, r6
 8004512:	4639      	mov	r1, r7
 8004514:	f7fb fe2a 	bl	800016c <__adddf3>
 8004518:	4682      	mov	sl, r0
 800451a:	468b      	mov	fp, r1
 800451c:	2d0f      	cmp	r5, #15
 800451e:	dc36      	bgt.n	800458e <_strtod_l+0x466>
 8004520:	f1b9 0f00 	cmp.w	r9, #0
 8004524:	f43f ae40 	beq.w	80041a8 <_strtod_l+0x80>
 8004528:	dd24      	ble.n	8004574 <_strtod_l+0x44c>
 800452a:	f1b9 0f16 	cmp.w	r9, #22
 800452e:	dc0b      	bgt.n	8004548 <_strtod_l+0x420>
 8004530:	4652      	mov	r2, sl
 8004532:	465b      	mov	r3, fp
 8004534:	4d66      	ldr	r5, [pc, #408]	; (80046d0 <_strtod_l+0x5a8>)
 8004536:	eb05 09c9 	add.w	r9, r5, r9, lsl #3
 800453a:	e9d9 0100 	ldrd	r0, r1, [r9]
 800453e:	f7fb ffc7 	bl	80004d0 <__aeabi_dmul>
 8004542:	4682      	mov	sl, r0
 8004544:	468b      	mov	fp, r1
 8004546:	e62f      	b.n	80041a8 <_strtod_l+0x80>
 8004548:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800454c:	4599      	cmp	r9, r3
 800454e:	dc1e      	bgt.n	800458e <_strtod_l+0x466>
 8004550:	4c5f      	ldr	r4, [pc, #380]	; (80046d0 <_strtod_l+0x5a8>)
 8004552:	f1c5 050f 	rsb	r5, r5, #15
 8004556:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800455a:	eba9 0505 	sub.w	r5, r9, r5
 800455e:	4652      	mov	r2, sl
 8004560:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004564:	465b      	mov	r3, fp
 8004566:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800456a:	f7fb ffb1 	bl	80004d0 <__aeabi_dmul>
 800456e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8004572:	e7e4      	b.n	800453e <_strtod_l+0x416>
 8004574:	f119 0f16 	cmn.w	r9, #22
 8004578:	db09      	blt.n	800458e <_strtod_l+0x466>
 800457a:	4d55      	ldr	r5, [pc, #340]	; (80046d0 <_strtod_l+0x5a8>)
 800457c:	4650      	mov	r0, sl
 800457e:	eba5 09c9 	sub.w	r9, r5, r9, lsl #3
 8004582:	e9d9 2300 	ldrd	r2, r3, [r9]
 8004586:	4659      	mov	r1, fp
 8004588:	f7fc f8cc 	bl	8000724 <__aeabi_ddiv>
 800458c:	e7d9      	b.n	8004542 <_strtod_l+0x41a>
 800458e:	1b2c      	subs	r4, r5, r4
 8004590:	444c      	add	r4, r9
 8004592:	2c00      	cmp	r4, #0
 8004594:	dd73      	ble.n	800467e <_strtod_l+0x556>
 8004596:	f014 030f 	ands.w	r3, r4, #15
 800459a:	d00a      	beq.n	80045b2 <_strtod_l+0x48a>
 800459c:	494c      	ldr	r1, [pc, #304]	; (80046d0 <_strtod_l+0x5a8>)
 800459e:	4652      	mov	r2, sl
 80045a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80045a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80045a8:	465b      	mov	r3, fp
 80045aa:	f7fb ff91 	bl	80004d0 <__aeabi_dmul>
 80045ae:	4682      	mov	sl, r0
 80045b0:	468b      	mov	fp, r1
 80045b2:	f034 040f 	bics.w	r4, r4, #15
 80045b6:	d054      	beq.n	8004662 <_strtod_l+0x53a>
 80045b8:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 80045bc:	dd27      	ble.n	800460e <_strtod_l+0x4e6>
 80045be:	f04f 0900 	mov.w	r9, #0
 80045c2:	f8cd 9010 	str.w	r9, [sp, #16]
 80045c6:	f8cd 901c 	str.w	r9, [sp, #28]
 80045ca:	f8cd 9018 	str.w	r9, [sp, #24]
 80045ce:	2322      	movs	r3, #34	; 0x22
 80045d0:	f04f 0a00 	mov.w	sl, #0
 80045d4:	f8df b108 	ldr.w	fp, [pc, #264]	; 80046e0 <_strtod_l+0x5b8>
 80045d8:	f8c8 3000 	str.w	r3, [r8]
 80045dc:	9b07      	ldr	r3, [sp, #28]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f43f ade2 	beq.w	80041a8 <_strtod_l+0x80>
 80045e4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80045e6:	4640      	mov	r0, r8
 80045e8:	f000 ff1b 	bl	8005422 <_Bfree>
 80045ec:	9906      	ldr	r1, [sp, #24]
 80045ee:	4640      	mov	r0, r8
 80045f0:	f000 ff17 	bl	8005422 <_Bfree>
 80045f4:	9904      	ldr	r1, [sp, #16]
 80045f6:	4640      	mov	r0, r8
 80045f8:	f000 ff13 	bl	8005422 <_Bfree>
 80045fc:	9907      	ldr	r1, [sp, #28]
 80045fe:	4640      	mov	r0, r8
 8004600:	f000 ff0f 	bl	8005422 <_Bfree>
 8004604:	4649      	mov	r1, r9
 8004606:	4640      	mov	r0, r8
 8004608:	f000 ff0b 	bl	8005422 <_Bfree>
 800460c:	e5cc      	b.n	80041a8 <_strtod_l+0x80>
 800460e:	2300      	movs	r3, #0
 8004610:	4650      	mov	r0, sl
 8004612:	4659      	mov	r1, fp
 8004614:	461f      	mov	r7, r3
 8004616:	4e2f      	ldr	r6, [pc, #188]	; (80046d4 <_strtod_l+0x5ac>)
 8004618:	1124      	asrs	r4, r4, #4
 800461a:	2c01      	cmp	r4, #1
 800461c:	dc24      	bgt.n	8004668 <_strtod_l+0x540>
 800461e:	b10b      	cbz	r3, 8004624 <_strtod_l+0x4fc>
 8004620:	4682      	mov	sl, r0
 8004622:	468b      	mov	fp, r1
 8004624:	4b2b      	ldr	r3, [pc, #172]	; (80046d4 <_strtod_l+0x5ac>)
 8004626:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800462a:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800462e:	4652      	mov	r2, sl
 8004630:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004634:	465b      	mov	r3, fp
 8004636:	f7fb ff4b 	bl	80004d0 <__aeabi_dmul>
 800463a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800463e:	468b      	mov	fp, r1
 8004640:	460a      	mov	r2, r1
 8004642:	0d1b      	lsrs	r3, r3, #20
 8004644:	4924      	ldr	r1, [pc, #144]	; (80046d8 <_strtod_l+0x5b0>)
 8004646:	051b      	lsls	r3, r3, #20
 8004648:	428b      	cmp	r3, r1
 800464a:	4682      	mov	sl, r0
 800464c:	d8b7      	bhi.n	80045be <_strtod_l+0x496>
 800464e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004652:	428b      	cmp	r3, r1
 8004654:	bf86      	itte	hi
 8004656:	f04f 3aff 	movhi.w	sl, #4294967295
 800465a:	f8df b088 	ldrhi.w	fp, [pc, #136]	; 80046e4 <_strtod_l+0x5bc>
 800465e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8004662:	2300      	movs	r3, #0
 8004664:	9305      	str	r3, [sp, #20]
 8004666:	e070      	b.n	800474a <_strtod_l+0x622>
 8004668:	07e2      	lsls	r2, r4, #31
 800466a:	d504      	bpl.n	8004676 <_strtod_l+0x54e>
 800466c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004670:	f7fb ff2e 	bl	80004d0 <__aeabi_dmul>
 8004674:	2301      	movs	r3, #1
 8004676:	3701      	adds	r7, #1
 8004678:	1064      	asrs	r4, r4, #1
 800467a:	3608      	adds	r6, #8
 800467c:	e7cd      	b.n	800461a <_strtod_l+0x4f2>
 800467e:	d0f0      	beq.n	8004662 <_strtod_l+0x53a>
 8004680:	4264      	negs	r4, r4
 8004682:	f014 020f 	ands.w	r2, r4, #15
 8004686:	d00a      	beq.n	800469e <_strtod_l+0x576>
 8004688:	4b11      	ldr	r3, [pc, #68]	; (80046d0 <_strtod_l+0x5a8>)
 800468a:	4650      	mov	r0, sl
 800468c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004690:	4659      	mov	r1, fp
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	f7fc f845 	bl	8000724 <__aeabi_ddiv>
 800469a:	4682      	mov	sl, r0
 800469c:	468b      	mov	fp, r1
 800469e:	1124      	asrs	r4, r4, #4
 80046a0:	d0df      	beq.n	8004662 <_strtod_l+0x53a>
 80046a2:	2c1f      	cmp	r4, #31
 80046a4:	dd20      	ble.n	80046e8 <_strtod_l+0x5c0>
 80046a6:	f04f 0900 	mov.w	r9, #0
 80046aa:	f8cd 9010 	str.w	r9, [sp, #16]
 80046ae:	f8cd 901c 	str.w	r9, [sp, #28]
 80046b2:	f8cd 9018 	str.w	r9, [sp, #24]
 80046b6:	2322      	movs	r3, #34	; 0x22
 80046b8:	f04f 0a00 	mov.w	sl, #0
 80046bc:	f04f 0b00 	mov.w	fp, #0
 80046c0:	f8c8 3000 	str.w	r3, [r8]
 80046c4:	e78a      	b.n	80045dc <_strtod_l+0x4b4>
 80046c6:	bf00      	nop
 80046c8:	08007485 	.word	0x08007485
 80046cc:	0800749c 	.word	0x0800749c
 80046d0:	08007510 	.word	0x08007510
 80046d4:	080074e8 	.word	0x080074e8
 80046d8:	7ca00000 	.word	0x7ca00000
 80046dc:	fff80000 	.word	0xfff80000
 80046e0:	7ff00000 	.word	0x7ff00000
 80046e4:	7fefffff 	.word	0x7fefffff
 80046e8:	f014 0310 	ands.w	r3, r4, #16
 80046ec:	bf18      	it	ne
 80046ee:	236a      	movne	r3, #106	; 0x6a
 80046f0:	4650      	mov	r0, sl
 80046f2:	9305      	str	r3, [sp, #20]
 80046f4:	4659      	mov	r1, fp
 80046f6:	2300      	movs	r3, #0
 80046f8:	4e9f      	ldr	r6, [pc, #636]	; (8004978 <_strtod_l+0x850>)
 80046fa:	2c00      	cmp	r4, #0
 80046fc:	f300 8109 	bgt.w	8004912 <_strtod_l+0x7ea>
 8004700:	b10b      	cbz	r3, 8004706 <_strtod_l+0x5de>
 8004702:	4682      	mov	sl, r0
 8004704:	468b      	mov	fp, r1
 8004706:	9b05      	ldr	r3, [sp, #20]
 8004708:	b1bb      	cbz	r3, 800473a <_strtod_l+0x612>
 800470a:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800470e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004712:	2b00      	cmp	r3, #0
 8004714:	4659      	mov	r1, fp
 8004716:	dd10      	ble.n	800473a <_strtod_l+0x612>
 8004718:	2b1f      	cmp	r3, #31
 800471a:	f340 8104 	ble.w	8004926 <_strtod_l+0x7fe>
 800471e:	2b34      	cmp	r3, #52	; 0x34
 8004720:	bfd8      	it	le
 8004722:	f04f 32ff 	movle.w	r2, #4294967295
 8004726:	f04f 0a00 	mov.w	sl, #0
 800472a:	bfcf      	iteee	gt
 800472c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8004730:	3b20      	suble	r3, #32
 8004732:	fa02 f303 	lslle.w	r3, r2, r3
 8004736:	ea03 0b01 	andle.w	fp, r3, r1
 800473a:	2200      	movs	r2, #0
 800473c:	2300      	movs	r3, #0
 800473e:	4650      	mov	r0, sl
 8004740:	4659      	mov	r1, fp
 8004742:	f7fc f92d 	bl	80009a0 <__aeabi_dcmpeq>
 8004746:	2800      	cmp	r0, #0
 8004748:	d1ad      	bne.n	80046a6 <_strtod_l+0x57e>
 800474a:	9b06      	ldr	r3, [sp, #24]
 800474c:	9a04      	ldr	r2, [sp, #16]
 800474e:	9300      	str	r3, [sp, #0]
 8004750:	990a      	ldr	r1, [sp, #40]	; 0x28
 8004752:	462b      	mov	r3, r5
 8004754:	4640      	mov	r0, r8
 8004756:	f000 feb6 	bl	80054c6 <__s2b>
 800475a:	9007      	str	r0, [sp, #28]
 800475c:	2800      	cmp	r0, #0
 800475e:	f43f af2e 	beq.w	80045be <_strtod_l+0x496>
 8004762:	f1b9 0f00 	cmp.w	r9, #0
 8004766:	f1c9 0300 	rsb	r3, r9, #0
 800476a:	bfa8      	it	ge
 800476c:	2300      	movge	r3, #0
 800476e:	930e      	str	r3, [sp, #56]	; 0x38
 8004770:	ea29 73e9 	bic.w	r3, r9, r9, asr #31
 8004774:	f04f 0900 	mov.w	r9, #0
 8004778:	930f      	str	r3, [sp, #60]	; 0x3c
 800477a:	f8cd 9010 	str.w	r9, [sp, #16]
 800477e:	9b07      	ldr	r3, [sp, #28]
 8004780:	4640      	mov	r0, r8
 8004782:	6859      	ldr	r1, [r3, #4]
 8004784:	f000 fe19 	bl	80053ba <_Balloc>
 8004788:	9006      	str	r0, [sp, #24]
 800478a:	2800      	cmp	r0, #0
 800478c:	f43f af1f 	beq.w	80045ce <_strtod_l+0x4a6>
 8004790:	9b07      	ldr	r3, [sp, #28]
 8004792:	300c      	adds	r0, #12
 8004794:	691a      	ldr	r2, [r3, #16]
 8004796:	f103 010c 	add.w	r1, r3, #12
 800479a:	3202      	adds	r2, #2
 800479c:	0092      	lsls	r2, r2, #2
 800479e:	f000 fdff 	bl	80053a0 <memcpy>
 80047a2:	ab1c      	add	r3, sp, #112	; 0x70
 80047a4:	9301      	str	r3, [sp, #4]
 80047a6:	ab1b      	add	r3, sp, #108	; 0x6c
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	4652      	mov	r2, sl
 80047ac:	465b      	mov	r3, fp
 80047ae:	4640      	mov	r0, r8
 80047b0:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80047b4:	f001 f936 	bl	8005a24 <__d2b>
 80047b8:	901a      	str	r0, [sp, #104]	; 0x68
 80047ba:	2800      	cmp	r0, #0
 80047bc:	f43f af07 	beq.w	80045ce <_strtod_l+0x4a6>
 80047c0:	2101      	movs	r1, #1
 80047c2:	4640      	mov	r0, r8
 80047c4:	f000 ff0b 	bl	80055de <__i2b>
 80047c8:	9004      	str	r0, [sp, #16]
 80047ca:	4603      	mov	r3, r0
 80047cc:	2800      	cmp	r0, #0
 80047ce:	f43f aefe 	beq.w	80045ce <_strtod_l+0x4a6>
 80047d2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80047d4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80047d6:	2d00      	cmp	r5, #0
 80047d8:	bfab      	itete	ge
 80047da:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80047dc:	9b0f      	ldrlt	r3, [sp, #60]	; 0x3c
 80047de:	195e      	addge	r6, r3, r5
 80047e0:	1b5c      	sublt	r4, r3, r5
 80047e2:	9b05      	ldr	r3, [sp, #20]
 80047e4:	bfa8      	it	ge
 80047e6:	9c0f      	ldrge	r4, [sp, #60]	; 0x3c
 80047e8:	eba5 0503 	sub.w	r5, r5, r3
 80047ec:	4415      	add	r5, r2
 80047ee:	4b63      	ldr	r3, [pc, #396]	; (800497c <_strtod_l+0x854>)
 80047f0:	f105 35ff 	add.w	r5, r5, #4294967295
 80047f4:	bfb8      	it	lt
 80047f6:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80047f8:	429d      	cmp	r5, r3
 80047fa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80047fe:	f280 80a4 	bge.w	800494a <_strtod_l+0x822>
 8004802:	1b5b      	subs	r3, r3, r5
 8004804:	2b1f      	cmp	r3, #31
 8004806:	eba2 0203 	sub.w	r2, r2, r3
 800480a:	f04f 0701 	mov.w	r7, #1
 800480e:	f300 8091 	bgt.w	8004934 <_strtod_l+0x80c>
 8004812:	2500      	movs	r5, #0
 8004814:	fa07 f303 	lsl.w	r3, r7, r3
 8004818:	9314      	str	r3, [sp, #80]	; 0x50
 800481a:	18b7      	adds	r7, r6, r2
 800481c:	9b05      	ldr	r3, [sp, #20]
 800481e:	42be      	cmp	r6, r7
 8004820:	4414      	add	r4, r2
 8004822:	441c      	add	r4, r3
 8004824:	4633      	mov	r3, r6
 8004826:	bfa8      	it	ge
 8004828:	463b      	movge	r3, r7
 800482a:	42a3      	cmp	r3, r4
 800482c:	bfa8      	it	ge
 800482e:	4623      	movge	r3, r4
 8004830:	2b00      	cmp	r3, #0
 8004832:	bfc2      	ittt	gt
 8004834:	1aff      	subgt	r7, r7, r3
 8004836:	1ae4      	subgt	r4, r4, r3
 8004838:	1af6      	subgt	r6, r6, r3
 800483a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800483c:	b1bb      	cbz	r3, 800486e <_strtod_l+0x746>
 800483e:	461a      	mov	r2, r3
 8004840:	9904      	ldr	r1, [sp, #16]
 8004842:	4640      	mov	r0, r8
 8004844:	f000 ff60 	bl	8005708 <__pow5mult>
 8004848:	9004      	str	r0, [sp, #16]
 800484a:	2800      	cmp	r0, #0
 800484c:	f43f aebf 	beq.w	80045ce <_strtod_l+0x4a6>
 8004850:	4601      	mov	r1, r0
 8004852:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8004854:	4640      	mov	r0, r8
 8004856:	f000 fecb 	bl	80055f0 <__multiply>
 800485a:	9008      	str	r0, [sp, #32]
 800485c:	2800      	cmp	r0, #0
 800485e:	f43f aeb6 	beq.w	80045ce <_strtod_l+0x4a6>
 8004862:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004864:	4640      	mov	r0, r8
 8004866:	f000 fddc 	bl	8005422 <_Bfree>
 800486a:	9b08      	ldr	r3, [sp, #32]
 800486c:	931a      	str	r3, [sp, #104]	; 0x68
 800486e:	2f00      	cmp	r7, #0
 8004870:	dc6f      	bgt.n	8004952 <_strtod_l+0x82a>
 8004872:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004874:	2b00      	cmp	r3, #0
 8004876:	d175      	bne.n	8004964 <_strtod_l+0x83c>
 8004878:	2c00      	cmp	r4, #0
 800487a:	dd08      	ble.n	800488e <_strtod_l+0x766>
 800487c:	4622      	mov	r2, r4
 800487e:	9906      	ldr	r1, [sp, #24]
 8004880:	4640      	mov	r0, r8
 8004882:	f000 ff8f 	bl	80057a4 <__lshift>
 8004886:	9006      	str	r0, [sp, #24]
 8004888:	2800      	cmp	r0, #0
 800488a:	f43f aea0 	beq.w	80045ce <_strtod_l+0x4a6>
 800488e:	2e00      	cmp	r6, #0
 8004890:	dd08      	ble.n	80048a4 <_strtod_l+0x77c>
 8004892:	4632      	mov	r2, r6
 8004894:	9904      	ldr	r1, [sp, #16]
 8004896:	4640      	mov	r0, r8
 8004898:	f000 ff84 	bl	80057a4 <__lshift>
 800489c:	9004      	str	r0, [sp, #16]
 800489e:	2800      	cmp	r0, #0
 80048a0:	f43f ae95 	beq.w	80045ce <_strtod_l+0x4a6>
 80048a4:	9a06      	ldr	r2, [sp, #24]
 80048a6:	991a      	ldr	r1, [sp, #104]	; 0x68
 80048a8:	4640      	mov	r0, r8
 80048aa:	f000 ffe6 	bl	800587a <__mdiff>
 80048ae:	4681      	mov	r9, r0
 80048b0:	2800      	cmp	r0, #0
 80048b2:	f43f ae8c 	beq.w	80045ce <_strtod_l+0x4a6>
 80048b6:	2400      	movs	r4, #0
 80048b8:	68c3      	ldr	r3, [r0, #12]
 80048ba:	9904      	ldr	r1, [sp, #16]
 80048bc:	60c4      	str	r4, [r0, #12]
 80048be:	9308      	str	r3, [sp, #32]
 80048c0:	f000 ffc1 	bl	8005846 <__mcmp>
 80048c4:	42a0      	cmp	r0, r4
 80048c6:	da5b      	bge.n	8004980 <_strtod_l+0x858>
 80048c8:	9b08      	ldr	r3, [sp, #32]
 80048ca:	b9f3      	cbnz	r3, 800490a <_strtod_l+0x7e2>
 80048cc:	f1ba 0f00 	cmp.w	sl, #0
 80048d0:	d11b      	bne.n	800490a <_strtod_l+0x7e2>
 80048d2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80048d6:	b9c3      	cbnz	r3, 800490a <_strtod_l+0x7e2>
 80048d8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80048dc:	0d1b      	lsrs	r3, r3, #20
 80048de:	051b      	lsls	r3, r3, #20
 80048e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80048e4:	d911      	bls.n	800490a <_strtod_l+0x7e2>
 80048e6:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80048ea:	b91b      	cbnz	r3, 80048f4 <_strtod_l+0x7cc>
 80048ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	dd0a      	ble.n	800490a <_strtod_l+0x7e2>
 80048f4:	4649      	mov	r1, r9
 80048f6:	2201      	movs	r2, #1
 80048f8:	4640      	mov	r0, r8
 80048fa:	f000 ff53 	bl	80057a4 <__lshift>
 80048fe:	9904      	ldr	r1, [sp, #16]
 8004900:	4681      	mov	r9, r0
 8004902:	f000 ffa0 	bl	8005846 <__mcmp>
 8004906:	2800      	cmp	r0, #0
 8004908:	dc6b      	bgt.n	80049e2 <_strtod_l+0x8ba>
 800490a:	9b05      	ldr	r3, [sp, #20]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d175      	bne.n	80049fc <_strtod_l+0x8d4>
 8004910:	e668      	b.n	80045e4 <_strtod_l+0x4bc>
 8004912:	07e2      	lsls	r2, r4, #31
 8004914:	d504      	bpl.n	8004920 <_strtod_l+0x7f8>
 8004916:	e9d6 2300 	ldrd	r2, r3, [r6]
 800491a:	f7fb fdd9 	bl	80004d0 <__aeabi_dmul>
 800491e:	2301      	movs	r3, #1
 8004920:	1064      	asrs	r4, r4, #1
 8004922:	3608      	adds	r6, #8
 8004924:	e6e9      	b.n	80046fa <_strtod_l+0x5d2>
 8004926:	f04f 32ff 	mov.w	r2, #4294967295
 800492a:	fa02 f303 	lsl.w	r3, r2, r3
 800492e:	ea03 0a0a 	and.w	sl, r3, sl
 8004932:	e702      	b.n	800473a <_strtod_l+0x612>
 8004934:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004938:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800493c:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004940:	35e2      	adds	r5, #226	; 0xe2
 8004942:	fa07 f505 	lsl.w	r5, r7, r5
 8004946:	9714      	str	r7, [sp, #80]	; 0x50
 8004948:	e767      	b.n	800481a <_strtod_l+0x6f2>
 800494a:	2301      	movs	r3, #1
 800494c:	2500      	movs	r5, #0
 800494e:	9314      	str	r3, [sp, #80]	; 0x50
 8004950:	e763      	b.n	800481a <_strtod_l+0x6f2>
 8004952:	463a      	mov	r2, r7
 8004954:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004956:	4640      	mov	r0, r8
 8004958:	f000 ff24 	bl	80057a4 <__lshift>
 800495c:	901a      	str	r0, [sp, #104]	; 0x68
 800495e:	2800      	cmp	r0, #0
 8004960:	d187      	bne.n	8004872 <_strtod_l+0x74a>
 8004962:	e634      	b.n	80045ce <_strtod_l+0x4a6>
 8004964:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004966:	9906      	ldr	r1, [sp, #24]
 8004968:	4640      	mov	r0, r8
 800496a:	f000 fecd 	bl	8005708 <__pow5mult>
 800496e:	9006      	str	r0, [sp, #24]
 8004970:	2800      	cmp	r0, #0
 8004972:	d181      	bne.n	8004878 <_strtod_l+0x750>
 8004974:	e62b      	b.n	80045ce <_strtod_l+0x4a6>
 8004976:	bf00      	nop
 8004978:	080074b0 	.word	0x080074b0
 800497c:	fffffc02 	.word	0xfffffc02
 8004980:	f040 8086 	bne.w	8004a90 <_strtod_l+0x968>
 8004984:	9a08      	ldr	r2, [sp, #32]
 8004986:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800498a:	b332      	cbz	r2, 80049da <_strtod_l+0x8b2>
 800498c:	4aac      	ldr	r2, [pc, #688]	; (8004c40 <_strtod_l+0xb18>)
 800498e:	4659      	mov	r1, fp
 8004990:	4293      	cmp	r3, r2
 8004992:	d152      	bne.n	8004a3a <_strtod_l+0x912>
 8004994:	9b05      	ldr	r3, [sp, #20]
 8004996:	4650      	mov	r0, sl
 8004998:	b1d3      	cbz	r3, 80049d0 <_strtod_l+0x8a8>
 800499a:	4aaa      	ldr	r2, [pc, #680]	; (8004c44 <_strtod_l+0xb1c>)
 800499c:	f04f 34ff 	mov.w	r4, #4294967295
 80049a0:	400a      	ands	r2, r1
 80049a2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80049a6:	d816      	bhi.n	80049d6 <_strtod_l+0x8ae>
 80049a8:	0d12      	lsrs	r2, r2, #20
 80049aa:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80049ae:	fa04 f303 	lsl.w	r3, r4, r3
 80049b2:	4283      	cmp	r3, r0
 80049b4:	d141      	bne.n	8004a3a <_strtod_l+0x912>
 80049b6:	4aa4      	ldr	r2, [pc, #656]	; (8004c48 <_strtod_l+0xb20>)
 80049b8:	4291      	cmp	r1, r2
 80049ba:	d102      	bne.n	80049c2 <_strtod_l+0x89a>
 80049bc:	3301      	adds	r3, #1
 80049be:	f43f ae06 	beq.w	80045ce <_strtod_l+0x4a6>
 80049c2:	4ba0      	ldr	r3, [pc, #640]	; (8004c44 <_strtod_l+0xb1c>)
 80049c4:	f04f 0a00 	mov.w	sl, #0
 80049c8:	400b      	ands	r3, r1
 80049ca:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80049ce:	e79c      	b.n	800490a <_strtod_l+0x7e2>
 80049d0:	f04f 33ff 	mov.w	r3, #4294967295
 80049d4:	e7ed      	b.n	80049b2 <_strtod_l+0x88a>
 80049d6:	4623      	mov	r3, r4
 80049d8:	e7eb      	b.n	80049b2 <_strtod_l+0x88a>
 80049da:	bb73      	cbnz	r3, 8004a3a <_strtod_l+0x912>
 80049dc:	f1ba 0f00 	cmp.w	sl, #0
 80049e0:	d12b      	bne.n	8004a3a <_strtod_l+0x912>
 80049e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80049e6:	9a05      	ldr	r2, [sp, #20]
 80049e8:	0d1b      	lsrs	r3, r3, #20
 80049ea:	051b      	lsls	r3, r3, #20
 80049ec:	b1e2      	cbz	r2, 8004a28 <_strtod_l+0x900>
 80049ee:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80049f2:	dc19      	bgt.n	8004a28 <_strtod_l+0x900>
 80049f4:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 80049f8:	f77f ae5d 	ble.w	80046b6 <_strtod_l+0x58e>
 80049fc:	4b93      	ldr	r3, [pc, #588]	; (8004c4c <_strtod_l+0xb24>)
 80049fe:	4650      	mov	r0, sl
 8004a00:	930d      	str	r3, [sp, #52]	; 0x34
 8004a02:	2300      	movs	r3, #0
 8004a04:	930c      	str	r3, [sp, #48]	; 0x30
 8004a06:	4659      	mov	r1, fp
 8004a08:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004a0c:	f7fb fd60 	bl	80004d0 <__aeabi_dmul>
 8004a10:	4682      	mov	sl, r0
 8004a12:	468b      	mov	fp, r1
 8004a14:	2900      	cmp	r1, #0
 8004a16:	f47f ade5 	bne.w	80045e4 <_strtod_l+0x4bc>
 8004a1a:	2800      	cmp	r0, #0
 8004a1c:	f47f ade2 	bne.w	80045e4 <_strtod_l+0x4bc>
 8004a20:	2322      	movs	r3, #34	; 0x22
 8004a22:	f8c8 3000 	str.w	r3, [r8]
 8004a26:	e5dd      	b.n	80045e4 <_strtod_l+0x4bc>
 8004a28:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004a2c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8004a30:	f04f 3aff 	mov.w	sl, #4294967295
 8004a34:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8004a38:	e767      	b.n	800490a <_strtod_l+0x7e2>
 8004a3a:	b19d      	cbz	r5, 8004a64 <_strtod_l+0x93c>
 8004a3c:	ea15 0f0b 	tst.w	r5, fp
 8004a40:	f43f af63 	beq.w	800490a <_strtod_l+0x7e2>
 8004a44:	9b08      	ldr	r3, [sp, #32]
 8004a46:	9a05      	ldr	r2, [sp, #20]
 8004a48:	4650      	mov	r0, sl
 8004a4a:	4659      	mov	r1, fp
 8004a4c:	b173      	cbz	r3, 8004a6c <_strtod_l+0x944>
 8004a4e:	f7ff fb49 	bl	80040e4 <sulp>
 8004a52:	4602      	mov	r2, r0
 8004a54:	460b      	mov	r3, r1
 8004a56:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004a5a:	f7fb fb87 	bl	800016c <__adddf3>
 8004a5e:	4682      	mov	sl, r0
 8004a60:	468b      	mov	fp, r1
 8004a62:	e752      	b.n	800490a <_strtod_l+0x7e2>
 8004a64:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004a66:	ea13 0f0a 	tst.w	r3, sl
 8004a6a:	e7e9      	b.n	8004a40 <_strtod_l+0x918>
 8004a6c:	f7ff fb3a 	bl	80040e4 <sulp>
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004a78:	f7fb fb76 	bl	8000168 <__aeabi_dsub>
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	2300      	movs	r3, #0
 8004a80:	4682      	mov	sl, r0
 8004a82:	468b      	mov	fp, r1
 8004a84:	f7fb ff8c 	bl	80009a0 <__aeabi_dcmpeq>
 8004a88:	2800      	cmp	r0, #0
 8004a8a:	f47f ae14 	bne.w	80046b6 <_strtod_l+0x58e>
 8004a8e:	e73c      	b.n	800490a <_strtod_l+0x7e2>
 8004a90:	9904      	ldr	r1, [sp, #16]
 8004a92:	4648      	mov	r0, r9
 8004a94:	f001 f815 	bl	8005ac2 <__ratio>
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004a9e:	4606      	mov	r6, r0
 8004aa0:	460f      	mov	r7, r1
 8004aa2:	f7fb ff91 	bl	80009c8 <__aeabi_dcmple>
 8004aa6:	2800      	cmp	r0, #0
 8004aa8:	d070      	beq.n	8004b8c <_strtod_l+0xa64>
 8004aaa:	9b08      	ldr	r3, [sp, #32]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d043      	beq.n	8004b38 <_strtod_l+0xa10>
 8004ab0:	2600      	movs	r6, #0
 8004ab2:	4f67      	ldr	r7, [pc, #412]	; (8004c50 <_strtod_l+0xb28>)
 8004ab4:	4d66      	ldr	r5, [pc, #408]	; (8004c50 <_strtod_l+0xb28>)
 8004ab6:	4b63      	ldr	r3, [pc, #396]	; (8004c44 <_strtod_l+0xb1c>)
 8004ab8:	ea0b 0303 	and.w	r3, fp, r3
 8004abc:	9314      	str	r3, [sp, #80]	; 0x50
 8004abe:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004ac0:	4b64      	ldr	r3, [pc, #400]	; (8004c54 <_strtod_l+0xb2c>)
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	f040 80ce 	bne.w	8004c64 <_strtod_l+0xb3c>
 8004ac8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004acc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8004ad0:	4650      	mov	r0, sl
 8004ad2:	4659      	mov	r1, fp
 8004ad4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004ad8:	f000 ff2e 	bl	8005938 <__ulp>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4630      	mov	r0, r6
 8004ae2:	4639      	mov	r1, r7
 8004ae4:	f7fb fcf4 	bl	80004d0 <__aeabi_dmul>
 8004ae8:	4652      	mov	r2, sl
 8004aea:	465b      	mov	r3, fp
 8004aec:	f7fb fb3e 	bl	800016c <__adddf3>
 8004af0:	4a54      	ldr	r2, [pc, #336]	; (8004c44 <_strtod_l+0xb1c>)
 8004af2:	4b59      	ldr	r3, [pc, #356]	; (8004c58 <_strtod_l+0xb30>)
 8004af4:	400a      	ands	r2, r1
 8004af6:	429a      	cmp	r2, r3
 8004af8:	4682      	mov	sl, r0
 8004afa:	d95d      	bls.n	8004bb8 <_strtod_l+0xa90>
 8004afc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004afe:	f103 7354 	add.w	r3, r3, #55574528	; 0x3500000
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d103      	bne.n	8004b0e <_strtod_l+0x9e6>
 8004b06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004b08:	3301      	adds	r3, #1
 8004b0a:	f43f ad60 	beq.w	80045ce <_strtod_l+0x4a6>
 8004b0e:	f04f 3aff 	mov.w	sl, #4294967295
 8004b12:	f8df b134 	ldr.w	fp, [pc, #308]	; 8004c48 <_strtod_l+0xb20>
 8004b16:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004b18:	4640      	mov	r0, r8
 8004b1a:	f000 fc82 	bl	8005422 <_Bfree>
 8004b1e:	9906      	ldr	r1, [sp, #24]
 8004b20:	4640      	mov	r0, r8
 8004b22:	f000 fc7e 	bl	8005422 <_Bfree>
 8004b26:	9904      	ldr	r1, [sp, #16]
 8004b28:	4640      	mov	r0, r8
 8004b2a:	f000 fc7a 	bl	8005422 <_Bfree>
 8004b2e:	4649      	mov	r1, r9
 8004b30:	4640      	mov	r0, r8
 8004b32:	f000 fc76 	bl	8005422 <_Bfree>
 8004b36:	e622      	b.n	800477e <_strtod_l+0x656>
 8004b38:	f1ba 0f00 	cmp.w	sl, #0
 8004b3c:	d118      	bne.n	8004b70 <_strtod_l+0xa48>
 8004b3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8004b42:	b9e3      	cbnz	r3, 8004b7e <_strtod_l+0xa56>
 8004b44:	2200      	movs	r2, #0
 8004b46:	4b42      	ldr	r3, [pc, #264]	; (8004c50 <_strtod_l+0xb28>)
 8004b48:	4630      	mov	r0, r6
 8004b4a:	4639      	mov	r1, r7
 8004b4c:	f7fb ff32 	bl	80009b4 <__aeabi_dcmplt>
 8004b50:	b9c8      	cbnz	r0, 8004b86 <_strtod_l+0xa5e>
 8004b52:	2200      	movs	r2, #0
 8004b54:	4b41      	ldr	r3, [pc, #260]	; (8004c5c <_strtod_l+0xb34>)
 8004b56:	4630      	mov	r0, r6
 8004b58:	4639      	mov	r1, r7
 8004b5a:	f7fb fcb9 	bl	80004d0 <__aeabi_dmul>
 8004b5e:	4604      	mov	r4, r0
 8004b60:	460d      	mov	r5, r1
 8004b62:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004b66:	9416      	str	r4, [sp, #88]	; 0x58
 8004b68:	9317      	str	r3, [sp, #92]	; 0x5c
 8004b6a:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8004b6e:	e7a2      	b.n	8004ab6 <_strtod_l+0x98e>
 8004b70:	f1ba 0f01 	cmp.w	sl, #1
 8004b74:	d103      	bne.n	8004b7e <_strtod_l+0xa56>
 8004b76:	f1bb 0f00 	cmp.w	fp, #0
 8004b7a:	f43f ad9c 	beq.w	80046b6 <_strtod_l+0x58e>
 8004b7e:	2600      	movs	r6, #0
 8004b80:	4f37      	ldr	r7, [pc, #220]	; (8004c60 <_strtod_l+0xb38>)
 8004b82:	2400      	movs	r4, #0
 8004b84:	e796      	b.n	8004ab4 <_strtod_l+0x98c>
 8004b86:	9c08      	ldr	r4, [sp, #32]
 8004b88:	4d34      	ldr	r5, [pc, #208]	; (8004c5c <_strtod_l+0xb34>)
 8004b8a:	e7ea      	b.n	8004b62 <_strtod_l+0xa3a>
 8004b8c:	4b33      	ldr	r3, [pc, #204]	; (8004c5c <_strtod_l+0xb34>)
 8004b8e:	2200      	movs	r2, #0
 8004b90:	4630      	mov	r0, r6
 8004b92:	4639      	mov	r1, r7
 8004b94:	f7fb fc9c 	bl	80004d0 <__aeabi_dmul>
 8004b98:	9b08      	ldr	r3, [sp, #32]
 8004b9a:	4604      	mov	r4, r0
 8004b9c:	460d      	mov	r5, r1
 8004b9e:	b933      	cbnz	r3, 8004bae <_strtod_l+0xa86>
 8004ba0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ba4:	9010      	str	r0, [sp, #64]	; 0x40
 8004ba6:	9311      	str	r3, [sp, #68]	; 0x44
 8004ba8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004bac:	e783      	b.n	8004ab6 <_strtod_l+0x98e>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004bb6:	e7f7      	b.n	8004ba8 <_strtod_l+0xa80>
 8004bb8:	f101 7b54 	add.w	fp, r1, #55574528	; 0x3500000
 8004bbc:	9b05      	ldr	r3, [sp, #20]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1a9      	bne.n	8004b16 <_strtod_l+0x9ee>
 8004bc2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004bc6:	0d1b      	lsrs	r3, r3, #20
 8004bc8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004bca:	051b      	lsls	r3, r3, #20
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	465e      	mov	r6, fp
 8004bd0:	d1a1      	bne.n	8004b16 <_strtod_l+0x9ee>
 8004bd2:	4629      	mov	r1, r5
 8004bd4:	4620      	mov	r0, r4
 8004bd6:	f7fb ff2b 	bl	8000a30 <__aeabi_d2iz>
 8004bda:	f7fb fc13 	bl	8000404 <__aeabi_i2d>
 8004bde:	460b      	mov	r3, r1
 8004be0:	4602      	mov	r2, r0
 8004be2:	4629      	mov	r1, r5
 8004be4:	4620      	mov	r0, r4
 8004be6:	f7fb fabf 	bl	8000168 <__aeabi_dsub>
 8004bea:	9b08      	ldr	r3, [sp, #32]
 8004bec:	4604      	mov	r4, r0
 8004bee:	460d      	mov	r5, r1
 8004bf0:	b933      	cbnz	r3, 8004c00 <_strtod_l+0xad8>
 8004bf2:	f1ba 0f00 	cmp.w	sl, #0
 8004bf6:	d103      	bne.n	8004c00 <_strtod_l+0xad8>
 8004bf8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8004bfc:	2e00      	cmp	r6, #0
 8004bfe:	d06c      	beq.n	8004cda <_strtod_l+0xbb2>
 8004c00:	a30b      	add	r3, pc, #44	; (adr r3, 8004c30 <_strtod_l+0xb08>)
 8004c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c06:	4620      	mov	r0, r4
 8004c08:	4629      	mov	r1, r5
 8004c0a:	f7fb fed3 	bl	80009b4 <__aeabi_dcmplt>
 8004c0e:	2800      	cmp	r0, #0
 8004c10:	f47f ace8 	bne.w	80045e4 <_strtod_l+0x4bc>
 8004c14:	a308      	add	r3, pc, #32	; (adr r3, 8004c38 <_strtod_l+0xb10>)
 8004c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1a:	4620      	mov	r0, r4
 8004c1c:	4629      	mov	r1, r5
 8004c1e:	f7fb fee7 	bl	80009f0 <__aeabi_dcmpgt>
 8004c22:	2800      	cmp	r0, #0
 8004c24:	f43f af77 	beq.w	8004b16 <_strtod_l+0x9ee>
 8004c28:	e4dc      	b.n	80045e4 <_strtod_l+0x4bc>
 8004c2a:	bf00      	nop
 8004c2c:	f3af 8000 	nop.w
 8004c30:	94a03595 	.word	0x94a03595
 8004c34:	3fdfffff 	.word	0x3fdfffff
 8004c38:	35afe535 	.word	0x35afe535
 8004c3c:	3fe00000 	.word	0x3fe00000
 8004c40:	000fffff 	.word	0x000fffff
 8004c44:	7ff00000 	.word	0x7ff00000
 8004c48:	7fefffff 	.word	0x7fefffff
 8004c4c:	39500000 	.word	0x39500000
 8004c50:	3ff00000 	.word	0x3ff00000
 8004c54:	7fe00000 	.word	0x7fe00000
 8004c58:	7c9fffff 	.word	0x7c9fffff
 8004c5c:	3fe00000 	.word	0x3fe00000
 8004c60:	bff00000 	.word	0xbff00000
 8004c64:	9b05      	ldr	r3, [sp, #20]
 8004c66:	b313      	cbz	r3, 8004cae <_strtod_l+0xb86>
 8004c68:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004c6a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004c6e:	d81e      	bhi.n	8004cae <_strtod_l+0xb86>
 8004c70:	a325      	add	r3, pc, #148	; (adr r3, 8004d08 <_strtod_l+0xbe0>)
 8004c72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c76:	4620      	mov	r0, r4
 8004c78:	4629      	mov	r1, r5
 8004c7a:	f7fb fea5 	bl	80009c8 <__aeabi_dcmple>
 8004c7e:	b190      	cbz	r0, 8004ca6 <_strtod_l+0xb7e>
 8004c80:	4629      	mov	r1, r5
 8004c82:	4620      	mov	r0, r4
 8004c84:	f7fb fefc 	bl	8000a80 <__aeabi_d2uiz>
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	bf08      	it	eq
 8004c8c:	2001      	moveq	r0, #1
 8004c8e:	f7fb fba9 	bl	80003e4 <__aeabi_ui2d>
 8004c92:	9b08      	ldr	r3, [sp, #32]
 8004c94:	4604      	mov	r4, r0
 8004c96:	460d      	mov	r5, r1
 8004c98:	b9d3      	cbnz	r3, 8004cd0 <_strtod_l+0xba8>
 8004c9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c9e:	9012      	str	r0, [sp, #72]	; 0x48
 8004ca0:	9313      	str	r3, [sp, #76]	; 0x4c
 8004ca2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004ca6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004ca8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004cac:	1a9f      	subs	r7, r3, r2
 8004cae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004cb2:	f000 fe41 	bl	8005938 <__ulp>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	460b      	mov	r3, r1
 8004cba:	4630      	mov	r0, r6
 8004cbc:	4639      	mov	r1, r7
 8004cbe:	f7fb fc07 	bl	80004d0 <__aeabi_dmul>
 8004cc2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004cc6:	f7fb fa51 	bl	800016c <__adddf3>
 8004cca:	4682      	mov	sl, r0
 8004ccc:	468b      	mov	fp, r1
 8004cce:	e775      	b.n	8004bbc <_strtod_l+0xa94>
 8004cd0:	4602      	mov	r2, r0
 8004cd2:	460b      	mov	r3, r1
 8004cd4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004cd8:	e7e3      	b.n	8004ca2 <_strtod_l+0xb7a>
 8004cda:	a30d      	add	r3, pc, #52	; (adr r3, 8004d10 <_strtod_l+0xbe8>)
 8004cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce0:	f7fb fe68 	bl	80009b4 <__aeabi_dcmplt>
 8004ce4:	e79d      	b.n	8004c22 <_strtod_l+0xafa>
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8004cea:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004cec:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004cee:	6013      	str	r3, [r2, #0]
 8004cf0:	f7ff ba5e 	b.w	80041b0 <_strtod_l+0x88>
 8004cf4:	2b65      	cmp	r3, #101	; 0x65
 8004cf6:	f04f 0200 	mov.w	r2, #0
 8004cfa:	f43f abae 	beq.w	800445a <_strtod_l+0x332>
 8004cfe:	4615      	mov	r5, r2
 8004d00:	2101      	movs	r1, #1
 8004d02:	f7ff bacd 	b.w	80042a0 <_strtod_l+0x178>
 8004d06:	bf00      	nop
 8004d08:	ffc00000 	.word	0xffc00000
 8004d0c:	41dfffff 	.word	0x41dfffff
 8004d10:	94a03595 	.word	0x94a03595
 8004d14:	3fcfffff 	.word	0x3fcfffff

08004d18 <strtod>:
 8004d18:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <strtod+0x1c>)
 8004d1a:	b410      	push	{r4}
 8004d1c:	681c      	ldr	r4, [r3, #0]
 8004d1e:	4a06      	ldr	r2, [pc, #24]	; (8004d38 <strtod+0x20>)
 8004d20:	6a23      	ldr	r3, [r4, #32]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	bf08      	it	eq
 8004d26:	4613      	moveq	r3, r2
 8004d28:	460a      	mov	r2, r1
 8004d2a:	4601      	mov	r1, r0
 8004d2c:	4620      	mov	r0, r4
 8004d2e:	bc10      	pop	{r4}
 8004d30:	f7ff b9fa 	b.w	8004128 <_strtod_l>
 8004d34:	20000018 	.word	0x20000018
 8004d38:	2000007c 	.word	0x2000007c

08004d3c <rshift>:
 8004d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d3e:	6906      	ldr	r6, [r0, #16]
 8004d40:	114b      	asrs	r3, r1, #5
 8004d42:	42b3      	cmp	r3, r6
 8004d44:	f100 0514 	add.w	r5, r0, #20
 8004d48:	da2b      	bge.n	8004da2 <rshift+0x66>
 8004d4a:	f011 011f 	ands.w	r1, r1, #31
 8004d4e:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8004d52:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8004d56:	d108      	bne.n	8004d6a <rshift+0x2e>
 8004d58:	4629      	mov	r1, r5
 8004d5a:	42b2      	cmp	r2, r6
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	d210      	bcs.n	8004d82 <rshift+0x46>
 8004d60:	f852 3b04 	ldr.w	r3, [r2], #4
 8004d64:	f841 3b04 	str.w	r3, [r1], #4
 8004d68:	e7f7      	b.n	8004d5a <rshift+0x1e>
 8004d6a:	f855 4023 	ldr.w	r4, [r5, r3, lsl #2]
 8004d6e:	462b      	mov	r3, r5
 8004d70:	f1c1 0e20 	rsb	lr, r1, #32
 8004d74:	3204      	adds	r2, #4
 8004d76:	40cc      	lsrs	r4, r1
 8004d78:	42b2      	cmp	r2, r6
 8004d7a:	d308      	bcc.n	8004d8e <rshift+0x52>
 8004d7c:	601c      	str	r4, [r3, #0]
 8004d7e:	b104      	cbz	r4, 8004d82 <rshift+0x46>
 8004d80:	3304      	adds	r3, #4
 8004d82:	1b5b      	subs	r3, r3, r5
 8004d84:	109b      	asrs	r3, r3, #2
 8004d86:	6103      	str	r3, [r0, #16]
 8004d88:	b903      	cbnz	r3, 8004d8c <rshift+0x50>
 8004d8a:	6143      	str	r3, [r0, #20]
 8004d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d8e:	6817      	ldr	r7, [r2, #0]
 8004d90:	fa07 f70e 	lsl.w	r7, r7, lr
 8004d94:	433c      	orrs	r4, r7
 8004d96:	f843 4b04 	str.w	r4, [r3], #4
 8004d9a:	f852 4b04 	ldr.w	r4, [r2], #4
 8004d9e:	40cc      	lsrs	r4, r1
 8004da0:	e7ea      	b.n	8004d78 <rshift+0x3c>
 8004da2:	462b      	mov	r3, r5
 8004da4:	e7ed      	b.n	8004d82 <rshift+0x46>

08004da6 <__hexdig_fun>:
 8004da6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8004daa:	2b09      	cmp	r3, #9
 8004dac:	d802      	bhi.n	8004db4 <__hexdig_fun+0xe>
 8004dae:	3820      	subs	r0, #32
 8004db0:	b2c0      	uxtb	r0, r0
 8004db2:	4770      	bx	lr
 8004db4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8004db8:	2b05      	cmp	r3, #5
 8004dba:	d801      	bhi.n	8004dc0 <__hexdig_fun+0x1a>
 8004dbc:	3847      	subs	r0, #71	; 0x47
 8004dbe:	e7f7      	b.n	8004db0 <__hexdig_fun+0xa>
 8004dc0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8004dc4:	2b05      	cmp	r3, #5
 8004dc6:	d801      	bhi.n	8004dcc <__hexdig_fun+0x26>
 8004dc8:	3827      	subs	r0, #39	; 0x27
 8004dca:	e7f1      	b.n	8004db0 <__hexdig_fun+0xa>
 8004dcc:	2000      	movs	r0, #0
 8004dce:	4770      	bx	lr

08004dd0 <__gethex>:
 8004dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd4:	b08b      	sub	sp, #44	; 0x2c
 8004dd6:	9002      	str	r0, [sp, #8]
 8004dd8:	9816      	ldr	r0, [sp, #88]	; 0x58
 8004dda:	468a      	mov	sl, r1
 8004ddc:	4690      	mov	r8, r2
 8004dde:	9306      	str	r3, [sp, #24]
 8004de0:	f000 faca 	bl	8005378 <__localeconv_l>
 8004de4:	6803      	ldr	r3, [r0, #0]
 8004de6:	f04f 0b00 	mov.w	fp, #0
 8004dea:	4618      	mov	r0, r3
 8004dec:	9303      	str	r3, [sp, #12]
 8004dee:	f7fb f9af 	bl	8000150 <strlen>
 8004df2:	9b03      	ldr	r3, [sp, #12]
 8004df4:	9001      	str	r0, [sp, #4]
 8004df6:	4403      	add	r3, r0
 8004df8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8004dfc:	9307      	str	r3, [sp, #28]
 8004dfe:	f8da 3000 	ldr.w	r3, [sl]
 8004e02:	3302      	adds	r3, #2
 8004e04:	461f      	mov	r7, r3
 8004e06:	f813 0b01 	ldrb.w	r0, [r3], #1
 8004e0a:	2830      	cmp	r0, #48	; 0x30
 8004e0c:	d06c      	beq.n	8004ee8 <__gethex+0x118>
 8004e0e:	f7ff ffca 	bl	8004da6 <__hexdig_fun>
 8004e12:	4604      	mov	r4, r0
 8004e14:	2800      	cmp	r0, #0
 8004e16:	d16a      	bne.n	8004eee <__gethex+0x11e>
 8004e18:	9a01      	ldr	r2, [sp, #4]
 8004e1a:	9903      	ldr	r1, [sp, #12]
 8004e1c:	4638      	mov	r0, r7
 8004e1e:	f000 fec1 	bl	8005ba4 <strncmp>
 8004e22:	2800      	cmp	r0, #0
 8004e24:	d166      	bne.n	8004ef4 <__gethex+0x124>
 8004e26:	9b01      	ldr	r3, [sp, #4]
 8004e28:	5cf8      	ldrb	r0, [r7, r3]
 8004e2a:	18fe      	adds	r6, r7, r3
 8004e2c:	f7ff ffbb 	bl	8004da6 <__hexdig_fun>
 8004e30:	2800      	cmp	r0, #0
 8004e32:	d062      	beq.n	8004efa <__gethex+0x12a>
 8004e34:	4633      	mov	r3, r6
 8004e36:	7818      	ldrb	r0, [r3, #0]
 8004e38:	461f      	mov	r7, r3
 8004e3a:	2830      	cmp	r0, #48	; 0x30
 8004e3c:	f103 0301 	add.w	r3, r3, #1
 8004e40:	d0f9      	beq.n	8004e36 <__gethex+0x66>
 8004e42:	f7ff ffb0 	bl	8004da6 <__hexdig_fun>
 8004e46:	fab0 f580 	clz	r5, r0
 8004e4a:	4634      	mov	r4, r6
 8004e4c:	f04f 0b01 	mov.w	fp, #1
 8004e50:	096d      	lsrs	r5, r5, #5
 8004e52:	463a      	mov	r2, r7
 8004e54:	4616      	mov	r6, r2
 8004e56:	7830      	ldrb	r0, [r6, #0]
 8004e58:	3201      	adds	r2, #1
 8004e5a:	f7ff ffa4 	bl	8004da6 <__hexdig_fun>
 8004e5e:	2800      	cmp	r0, #0
 8004e60:	d1f8      	bne.n	8004e54 <__gethex+0x84>
 8004e62:	9a01      	ldr	r2, [sp, #4]
 8004e64:	9903      	ldr	r1, [sp, #12]
 8004e66:	4630      	mov	r0, r6
 8004e68:	f000 fe9c 	bl	8005ba4 <strncmp>
 8004e6c:	b950      	cbnz	r0, 8004e84 <__gethex+0xb4>
 8004e6e:	b954      	cbnz	r4, 8004e86 <__gethex+0xb6>
 8004e70:	9b01      	ldr	r3, [sp, #4]
 8004e72:	18f4      	adds	r4, r6, r3
 8004e74:	4622      	mov	r2, r4
 8004e76:	4616      	mov	r6, r2
 8004e78:	7830      	ldrb	r0, [r6, #0]
 8004e7a:	3201      	adds	r2, #1
 8004e7c:	f7ff ff93 	bl	8004da6 <__hexdig_fun>
 8004e80:	2800      	cmp	r0, #0
 8004e82:	d1f8      	bne.n	8004e76 <__gethex+0xa6>
 8004e84:	b10c      	cbz	r4, 8004e8a <__gethex+0xba>
 8004e86:	1ba4      	subs	r4, r4, r6
 8004e88:	00a4      	lsls	r4, r4, #2
 8004e8a:	7833      	ldrb	r3, [r6, #0]
 8004e8c:	2b50      	cmp	r3, #80	; 0x50
 8004e8e:	d001      	beq.n	8004e94 <__gethex+0xc4>
 8004e90:	2b70      	cmp	r3, #112	; 0x70
 8004e92:	d140      	bne.n	8004f16 <__gethex+0x146>
 8004e94:	7873      	ldrb	r3, [r6, #1]
 8004e96:	2b2b      	cmp	r3, #43	; 0x2b
 8004e98:	d035      	beq.n	8004f06 <__gethex+0x136>
 8004e9a:	2b2d      	cmp	r3, #45	; 0x2d
 8004e9c:	d02f      	beq.n	8004efe <__gethex+0x12e>
 8004e9e:	f04f 0900 	mov.w	r9, #0
 8004ea2:	1c71      	adds	r1, r6, #1
 8004ea4:	7808      	ldrb	r0, [r1, #0]
 8004ea6:	f7ff ff7e 	bl	8004da6 <__hexdig_fun>
 8004eaa:	1e43      	subs	r3, r0, #1
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	2b18      	cmp	r3, #24
 8004eb0:	d831      	bhi.n	8004f16 <__gethex+0x146>
 8004eb2:	f1a0 0210 	sub.w	r2, r0, #16
 8004eb6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8004eba:	f7ff ff74 	bl	8004da6 <__hexdig_fun>
 8004ebe:	1e43      	subs	r3, r0, #1
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b18      	cmp	r3, #24
 8004ec4:	d922      	bls.n	8004f0c <__gethex+0x13c>
 8004ec6:	f1b9 0f00 	cmp.w	r9, #0
 8004eca:	d000      	beq.n	8004ece <__gethex+0xfe>
 8004ecc:	4252      	negs	r2, r2
 8004ece:	4414      	add	r4, r2
 8004ed0:	f8ca 1000 	str.w	r1, [sl]
 8004ed4:	b30d      	cbz	r5, 8004f1a <__gethex+0x14a>
 8004ed6:	f1bb 0f00 	cmp.w	fp, #0
 8004eda:	bf14      	ite	ne
 8004edc:	2700      	movne	r7, #0
 8004ede:	2706      	moveq	r7, #6
 8004ee0:	4638      	mov	r0, r7
 8004ee2:	b00b      	add	sp, #44	; 0x2c
 8004ee4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ee8:	f10b 0b01 	add.w	fp, fp, #1
 8004eec:	e78a      	b.n	8004e04 <__gethex+0x34>
 8004eee:	2500      	movs	r5, #0
 8004ef0:	462c      	mov	r4, r5
 8004ef2:	e7ae      	b.n	8004e52 <__gethex+0x82>
 8004ef4:	463e      	mov	r6, r7
 8004ef6:	2501      	movs	r5, #1
 8004ef8:	e7c7      	b.n	8004e8a <__gethex+0xba>
 8004efa:	4604      	mov	r4, r0
 8004efc:	e7fb      	b.n	8004ef6 <__gethex+0x126>
 8004efe:	f04f 0901 	mov.w	r9, #1
 8004f02:	1cb1      	adds	r1, r6, #2
 8004f04:	e7ce      	b.n	8004ea4 <__gethex+0xd4>
 8004f06:	f04f 0900 	mov.w	r9, #0
 8004f0a:	e7fa      	b.n	8004f02 <__gethex+0x132>
 8004f0c:	230a      	movs	r3, #10
 8004f0e:	fb03 0202 	mla	r2, r3, r2, r0
 8004f12:	3a10      	subs	r2, #16
 8004f14:	e7cf      	b.n	8004eb6 <__gethex+0xe6>
 8004f16:	4631      	mov	r1, r6
 8004f18:	e7da      	b.n	8004ed0 <__gethex+0x100>
 8004f1a:	4629      	mov	r1, r5
 8004f1c:	1bf3      	subs	r3, r6, r7
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	2b07      	cmp	r3, #7
 8004f22:	dc49      	bgt.n	8004fb8 <__gethex+0x1e8>
 8004f24:	9802      	ldr	r0, [sp, #8]
 8004f26:	f000 fa48 	bl	80053ba <_Balloc>
 8004f2a:	f04f 0b00 	mov.w	fp, #0
 8004f2e:	4605      	mov	r5, r0
 8004f30:	46da      	mov	sl, fp
 8004f32:	9b01      	ldr	r3, [sp, #4]
 8004f34:	f100 0914 	add.w	r9, r0, #20
 8004f38:	f1c3 0301 	rsb	r3, r3, #1
 8004f3c:	f8cd 9010 	str.w	r9, [sp, #16]
 8004f40:	9308      	str	r3, [sp, #32]
 8004f42:	42b7      	cmp	r7, r6
 8004f44:	d33b      	bcc.n	8004fbe <__gethex+0x1ee>
 8004f46:	9804      	ldr	r0, [sp, #16]
 8004f48:	f840 ab04 	str.w	sl, [r0], #4
 8004f4c:	eba0 0009 	sub.w	r0, r0, r9
 8004f50:	1080      	asrs	r0, r0, #2
 8004f52:	6128      	str	r0, [r5, #16]
 8004f54:	0147      	lsls	r7, r0, #5
 8004f56:	4650      	mov	r0, sl
 8004f58:	f000 faf3 	bl	8005542 <__hi0bits>
 8004f5c:	f8d8 6000 	ldr.w	r6, [r8]
 8004f60:	1a3f      	subs	r7, r7, r0
 8004f62:	42b7      	cmp	r7, r6
 8004f64:	dd64      	ble.n	8005030 <__gethex+0x260>
 8004f66:	1bbf      	subs	r7, r7, r6
 8004f68:	4639      	mov	r1, r7
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	f000 fdeb 	bl	8005b46 <__any_on>
 8004f70:	4682      	mov	sl, r0
 8004f72:	b178      	cbz	r0, 8004f94 <__gethex+0x1c4>
 8004f74:	f04f 0a01 	mov.w	sl, #1
 8004f78:	1e7b      	subs	r3, r7, #1
 8004f7a:	1159      	asrs	r1, r3, #5
 8004f7c:	f003 021f 	and.w	r2, r3, #31
 8004f80:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8004f84:	fa0a f202 	lsl.w	r2, sl, r2
 8004f88:	420a      	tst	r2, r1
 8004f8a:	d003      	beq.n	8004f94 <__gethex+0x1c4>
 8004f8c:	4553      	cmp	r3, sl
 8004f8e:	dc46      	bgt.n	800501e <__gethex+0x24e>
 8004f90:	f04f 0a02 	mov.w	sl, #2
 8004f94:	4639      	mov	r1, r7
 8004f96:	4628      	mov	r0, r5
 8004f98:	f7ff fed0 	bl	8004d3c <rshift>
 8004f9c:	443c      	add	r4, r7
 8004f9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8004fa2:	429c      	cmp	r4, r3
 8004fa4:	dd52      	ble.n	800504c <__gethex+0x27c>
 8004fa6:	4629      	mov	r1, r5
 8004fa8:	9802      	ldr	r0, [sp, #8]
 8004faa:	f000 fa3a 	bl	8005422 <_Bfree>
 8004fae:	2300      	movs	r3, #0
 8004fb0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004fb2:	27a3      	movs	r7, #163	; 0xa3
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	e793      	b.n	8004ee0 <__gethex+0x110>
 8004fb8:	3101      	adds	r1, #1
 8004fba:	105b      	asrs	r3, r3, #1
 8004fbc:	e7b0      	b.n	8004f20 <__gethex+0x150>
 8004fbe:	1e73      	subs	r3, r6, #1
 8004fc0:	9305      	str	r3, [sp, #20]
 8004fc2:	9a07      	ldr	r2, [sp, #28]
 8004fc4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d018      	beq.n	8004ffe <__gethex+0x22e>
 8004fcc:	f1bb 0f20 	cmp.w	fp, #32
 8004fd0:	d107      	bne.n	8004fe2 <__gethex+0x212>
 8004fd2:	9b04      	ldr	r3, [sp, #16]
 8004fd4:	f8c3 a000 	str.w	sl, [r3]
 8004fd8:	f04f 0a00 	mov.w	sl, #0
 8004fdc:	46d3      	mov	fp, sl
 8004fde:	3304      	adds	r3, #4
 8004fe0:	9304      	str	r3, [sp, #16]
 8004fe2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8004fe6:	f7ff fede 	bl	8004da6 <__hexdig_fun>
 8004fea:	f000 000f 	and.w	r0, r0, #15
 8004fee:	fa00 f00b 	lsl.w	r0, r0, fp
 8004ff2:	ea4a 0a00 	orr.w	sl, sl, r0
 8004ff6:	f10b 0b04 	add.w	fp, fp, #4
 8004ffa:	9b05      	ldr	r3, [sp, #20]
 8004ffc:	e00d      	b.n	800501a <__gethex+0x24a>
 8004ffe:	9b05      	ldr	r3, [sp, #20]
 8005000:	9a08      	ldr	r2, [sp, #32]
 8005002:	4413      	add	r3, r2
 8005004:	429f      	cmp	r7, r3
 8005006:	d8e1      	bhi.n	8004fcc <__gethex+0x1fc>
 8005008:	4618      	mov	r0, r3
 800500a:	9a01      	ldr	r2, [sp, #4]
 800500c:	9903      	ldr	r1, [sp, #12]
 800500e:	9309      	str	r3, [sp, #36]	; 0x24
 8005010:	f000 fdc8 	bl	8005ba4 <strncmp>
 8005014:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005016:	2800      	cmp	r0, #0
 8005018:	d1d8      	bne.n	8004fcc <__gethex+0x1fc>
 800501a:	461e      	mov	r6, r3
 800501c:	e791      	b.n	8004f42 <__gethex+0x172>
 800501e:	1eb9      	subs	r1, r7, #2
 8005020:	4628      	mov	r0, r5
 8005022:	f000 fd90 	bl	8005b46 <__any_on>
 8005026:	2800      	cmp	r0, #0
 8005028:	d0b2      	beq.n	8004f90 <__gethex+0x1c0>
 800502a:	f04f 0a03 	mov.w	sl, #3
 800502e:	e7b1      	b.n	8004f94 <__gethex+0x1c4>
 8005030:	da09      	bge.n	8005046 <__gethex+0x276>
 8005032:	1bf7      	subs	r7, r6, r7
 8005034:	4629      	mov	r1, r5
 8005036:	463a      	mov	r2, r7
 8005038:	9802      	ldr	r0, [sp, #8]
 800503a:	f000 fbb3 	bl	80057a4 <__lshift>
 800503e:	4605      	mov	r5, r0
 8005040:	1be4      	subs	r4, r4, r7
 8005042:	f100 0914 	add.w	r9, r0, #20
 8005046:	f04f 0a00 	mov.w	sl, #0
 800504a:	e7a8      	b.n	8004f9e <__gethex+0x1ce>
 800504c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005050:	4284      	cmp	r4, r0
 8005052:	da6b      	bge.n	800512c <__gethex+0x35c>
 8005054:	1b04      	subs	r4, r0, r4
 8005056:	42a6      	cmp	r6, r4
 8005058:	dc2e      	bgt.n	80050b8 <__gethex+0x2e8>
 800505a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800505e:	2b02      	cmp	r3, #2
 8005060:	d022      	beq.n	80050a8 <__gethex+0x2d8>
 8005062:	2b03      	cmp	r3, #3
 8005064:	d024      	beq.n	80050b0 <__gethex+0x2e0>
 8005066:	2b01      	cmp	r3, #1
 8005068:	d115      	bne.n	8005096 <__gethex+0x2c6>
 800506a:	42a6      	cmp	r6, r4
 800506c:	d113      	bne.n	8005096 <__gethex+0x2c6>
 800506e:	2e01      	cmp	r6, #1
 8005070:	dc0b      	bgt.n	800508a <__gethex+0x2ba>
 8005072:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005076:	9a06      	ldr	r2, [sp, #24]
 8005078:	2762      	movs	r7, #98	; 0x62
 800507a:	6013      	str	r3, [r2, #0]
 800507c:	2301      	movs	r3, #1
 800507e:	612b      	str	r3, [r5, #16]
 8005080:	f8c9 3000 	str.w	r3, [r9]
 8005084:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005086:	601d      	str	r5, [r3, #0]
 8005088:	e72a      	b.n	8004ee0 <__gethex+0x110>
 800508a:	1e71      	subs	r1, r6, #1
 800508c:	4628      	mov	r0, r5
 800508e:	f000 fd5a 	bl	8005b46 <__any_on>
 8005092:	2800      	cmp	r0, #0
 8005094:	d1ed      	bne.n	8005072 <__gethex+0x2a2>
 8005096:	4629      	mov	r1, r5
 8005098:	9802      	ldr	r0, [sp, #8]
 800509a:	f000 f9c2 	bl	8005422 <_Bfree>
 800509e:	2300      	movs	r3, #0
 80050a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80050a2:	2750      	movs	r7, #80	; 0x50
 80050a4:	6013      	str	r3, [r2, #0]
 80050a6:	e71b      	b.n	8004ee0 <__gethex+0x110>
 80050a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0e1      	beq.n	8005072 <__gethex+0x2a2>
 80050ae:	e7f2      	b.n	8005096 <__gethex+0x2c6>
 80050b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1dd      	bne.n	8005072 <__gethex+0x2a2>
 80050b6:	e7ee      	b.n	8005096 <__gethex+0x2c6>
 80050b8:	1e67      	subs	r7, r4, #1
 80050ba:	f1ba 0f00 	cmp.w	sl, #0
 80050be:	d132      	bne.n	8005126 <__gethex+0x356>
 80050c0:	b127      	cbz	r7, 80050cc <__gethex+0x2fc>
 80050c2:	4639      	mov	r1, r7
 80050c4:	4628      	mov	r0, r5
 80050c6:	f000 fd3e 	bl	8005b46 <__any_on>
 80050ca:	4682      	mov	sl, r0
 80050cc:	2301      	movs	r3, #1
 80050ce:	117a      	asrs	r2, r7, #5
 80050d0:	f007 071f 	and.w	r7, r7, #31
 80050d4:	fa03 f707 	lsl.w	r7, r3, r7
 80050d8:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 80050dc:	4621      	mov	r1, r4
 80050de:	421f      	tst	r7, r3
 80050e0:	f04f 0702 	mov.w	r7, #2
 80050e4:	4628      	mov	r0, r5
 80050e6:	bf18      	it	ne
 80050e8:	f04a 0a02 	orrne.w	sl, sl, #2
 80050ec:	1b36      	subs	r6, r6, r4
 80050ee:	f7ff fe25 	bl	8004d3c <rshift>
 80050f2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80050f6:	f1ba 0f00 	cmp.w	sl, #0
 80050fa:	d045      	beq.n	8005188 <__gethex+0x3b8>
 80050fc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005100:	2b02      	cmp	r3, #2
 8005102:	d015      	beq.n	8005130 <__gethex+0x360>
 8005104:	2b03      	cmp	r3, #3
 8005106:	d017      	beq.n	8005138 <__gethex+0x368>
 8005108:	2b01      	cmp	r3, #1
 800510a:	d109      	bne.n	8005120 <__gethex+0x350>
 800510c:	f01a 0f02 	tst.w	sl, #2
 8005110:	d006      	beq.n	8005120 <__gethex+0x350>
 8005112:	f8d9 3000 	ldr.w	r3, [r9]
 8005116:	ea4a 0a03 	orr.w	sl, sl, r3
 800511a:	f01a 0f01 	tst.w	sl, #1
 800511e:	d10e      	bne.n	800513e <__gethex+0x36e>
 8005120:	f047 0710 	orr.w	r7, r7, #16
 8005124:	e030      	b.n	8005188 <__gethex+0x3b8>
 8005126:	f04f 0a01 	mov.w	sl, #1
 800512a:	e7cf      	b.n	80050cc <__gethex+0x2fc>
 800512c:	2701      	movs	r7, #1
 800512e:	e7e2      	b.n	80050f6 <__gethex+0x326>
 8005130:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005132:	f1c3 0301 	rsb	r3, r3, #1
 8005136:	9315      	str	r3, [sp, #84]	; 0x54
 8005138:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0f0      	beq.n	8005120 <__gethex+0x350>
 800513e:	2000      	movs	r0, #0
 8005140:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8005144:	f105 0314 	add.w	r3, r5, #20
 8005148:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800514c:	eb03 010a 	add.w	r1, r3, sl
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	f1b2 3fff 	cmp.w	r2, #4294967295
 8005156:	d01c      	beq.n	8005192 <__gethex+0x3c2>
 8005158:	3201      	adds	r2, #1
 800515a:	601a      	str	r2, [r3, #0]
 800515c:	2f02      	cmp	r7, #2
 800515e:	f105 0314 	add.w	r3, r5, #20
 8005162:	d138      	bne.n	80051d6 <__gethex+0x406>
 8005164:	f8d8 2000 	ldr.w	r2, [r8]
 8005168:	3a01      	subs	r2, #1
 800516a:	4296      	cmp	r6, r2
 800516c:	d10a      	bne.n	8005184 <__gethex+0x3b4>
 800516e:	2201      	movs	r2, #1
 8005170:	1171      	asrs	r1, r6, #5
 8005172:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005176:	f006 061f 	and.w	r6, r6, #31
 800517a:	fa02 f606 	lsl.w	r6, r2, r6
 800517e:	421e      	tst	r6, r3
 8005180:	bf18      	it	ne
 8005182:	4617      	movne	r7, r2
 8005184:	f047 0720 	orr.w	r7, r7, #32
 8005188:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800518a:	601d      	str	r5, [r3, #0]
 800518c:	9b06      	ldr	r3, [sp, #24]
 800518e:	601c      	str	r4, [r3, #0]
 8005190:	e6a6      	b.n	8004ee0 <__gethex+0x110>
 8005192:	f843 0b04 	str.w	r0, [r3], #4
 8005196:	4299      	cmp	r1, r3
 8005198:	d8da      	bhi.n	8005150 <__gethex+0x380>
 800519a:	68ab      	ldr	r3, [r5, #8]
 800519c:	4599      	cmp	r9, r3
 800519e:	db12      	blt.n	80051c6 <__gethex+0x3f6>
 80051a0:	6869      	ldr	r1, [r5, #4]
 80051a2:	9802      	ldr	r0, [sp, #8]
 80051a4:	3101      	adds	r1, #1
 80051a6:	f000 f908 	bl	80053ba <_Balloc>
 80051aa:	4683      	mov	fp, r0
 80051ac:	692a      	ldr	r2, [r5, #16]
 80051ae:	f105 010c 	add.w	r1, r5, #12
 80051b2:	3202      	adds	r2, #2
 80051b4:	0092      	lsls	r2, r2, #2
 80051b6:	300c      	adds	r0, #12
 80051b8:	f000 f8f2 	bl	80053a0 <memcpy>
 80051bc:	4629      	mov	r1, r5
 80051be:	9802      	ldr	r0, [sp, #8]
 80051c0:	f000 f92f 	bl	8005422 <_Bfree>
 80051c4:	465d      	mov	r5, fp
 80051c6:	692b      	ldr	r3, [r5, #16]
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	612a      	str	r2, [r5, #16]
 80051cc:	2201      	movs	r2, #1
 80051ce:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80051d2:	615a      	str	r2, [r3, #20]
 80051d4:	e7c2      	b.n	800515c <__gethex+0x38c>
 80051d6:	692a      	ldr	r2, [r5, #16]
 80051d8:	4591      	cmp	r9, r2
 80051da:	da0b      	bge.n	80051f4 <__gethex+0x424>
 80051dc:	2101      	movs	r1, #1
 80051de:	4628      	mov	r0, r5
 80051e0:	f7ff fdac 	bl	8004d3c <rshift>
 80051e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80051e8:	3401      	adds	r4, #1
 80051ea:	429c      	cmp	r4, r3
 80051ec:	f73f aedb 	bgt.w	8004fa6 <__gethex+0x1d6>
 80051f0:	2701      	movs	r7, #1
 80051f2:	e7c7      	b.n	8005184 <__gethex+0x3b4>
 80051f4:	f016 061f 	ands.w	r6, r6, #31
 80051f8:	d0fa      	beq.n	80051f0 <__gethex+0x420>
 80051fa:	449a      	add	sl, r3
 80051fc:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8005200:	f000 f99f 	bl	8005542 <__hi0bits>
 8005204:	f1c6 0620 	rsb	r6, r6, #32
 8005208:	42b0      	cmp	r0, r6
 800520a:	dbe7      	blt.n	80051dc <__gethex+0x40c>
 800520c:	e7f0      	b.n	80051f0 <__gethex+0x420>

0800520e <L_shift>:
 800520e:	f1c2 0208 	rsb	r2, r2, #8
 8005212:	0092      	lsls	r2, r2, #2
 8005214:	b570      	push	{r4, r5, r6, lr}
 8005216:	f1c2 0620 	rsb	r6, r2, #32
 800521a:	6843      	ldr	r3, [r0, #4]
 800521c:	6804      	ldr	r4, [r0, #0]
 800521e:	fa03 f506 	lsl.w	r5, r3, r6
 8005222:	432c      	orrs	r4, r5
 8005224:	40d3      	lsrs	r3, r2
 8005226:	6004      	str	r4, [r0, #0]
 8005228:	f840 3f04 	str.w	r3, [r0, #4]!
 800522c:	4288      	cmp	r0, r1
 800522e:	d3f4      	bcc.n	800521a <L_shift+0xc>
 8005230:	bd70      	pop	{r4, r5, r6, pc}

08005232 <__match>:
 8005232:	b530      	push	{r4, r5, lr}
 8005234:	6803      	ldr	r3, [r0, #0]
 8005236:	f811 4b01 	ldrb.w	r4, [r1], #1
 800523a:	3301      	adds	r3, #1
 800523c:	b914      	cbnz	r4, 8005244 <__match+0x12>
 800523e:	6003      	str	r3, [r0, #0]
 8005240:	2001      	movs	r0, #1
 8005242:	bd30      	pop	{r4, r5, pc}
 8005244:	781a      	ldrb	r2, [r3, #0]
 8005246:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800524a:	2d19      	cmp	r5, #25
 800524c:	bf98      	it	ls
 800524e:	3220      	addls	r2, #32
 8005250:	42a2      	cmp	r2, r4
 8005252:	d0f0      	beq.n	8005236 <__match+0x4>
 8005254:	2000      	movs	r0, #0
 8005256:	bd30      	pop	{r4, r5, pc}

08005258 <__hexnan>:
 8005258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525c:	2500      	movs	r5, #0
 800525e:	680b      	ldr	r3, [r1, #0]
 8005260:	4682      	mov	sl, r0
 8005262:	115f      	asrs	r7, r3, #5
 8005264:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8005268:	f013 031f 	ands.w	r3, r3, #31
 800526c:	bf18      	it	ne
 800526e:	3704      	addne	r7, #4
 8005270:	1f3e      	subs	r6, r7, #4
 8005272:	4690      	mov	r8, r2
 8005274:	46b1      	mov	r9, r6
 8005276:	4634      	mov	r4, r6
 8005278:	46ab      	mov	fp, r5
 800527a:	b087      	sub	sp, #28
 800527c:	6801      	ldr	r1, [r0, #0]
 800527e:	9302      	str	r3, [sp, #8]
 8005280:	f847 5c04 	str.w	r5, [r7, #-4]
 8005284:	9501      	str	r5, [sp, #4]
 8005286:	784a      	ldrb	r2, [r1, #1]
 8005288:	1c4b      	adds	r3, r1, #1
 800528a:	9303      	str	r3, [sp, #12]
 800528c:	b342      	cbz	r2, 80052e0 <__hexnan+0x88>
 800528e:	4610      	mov	r0, r2
 8005290:	9105      	str	r1, [sp, #20]
 8005292:	9204      	str	r2, [sp, #16]
 8005294:	f7ff fd87 	bl	8004da6 <__hexdig_fun>
 8005298:	2800      	cmp	r0, #0
 800529a:	d143      	bne.n	8005324 <__hexnan+0xcc>
 800529c:	9a04      	ldr	r2, [sp, #16]
 800529e:	9905      	ldr	r1, [sp, #20]
 80052a0:	2a20      	cmp	r2, #32
 80052a2:	d818      	bhi.n	80052d6 <__hexnan+0x7e>
 80052a4:	9b01      	ldr	r3, [sp, #4]
 80052a6:	459b      	cmp	fp, r3
 80052a8:	dd13      	ble.n	80052d2 <__hexnan+0x7a>
 80052aa:	454c      	cmp	r4, r9
 80052ac:	d206      	bcs.n	80052bc <__hexnan+0x64>
 80052ae:	2d07      	cmp	r5, #7
 80052b0:	dc04      	bgt.n	80052bc <__hexnan+0x64>
 80052b2:	462a      	mov	r2, r5
 80052b4:	4649      	mov	r1, r9
 80052b6:	4620      	mov	r0, r4
 80052b8:	f7ff ffa9 	bl	800520e <L_shift>
 80052bc:	4544      	cmp	r4, r8
 80052be:	d944      	bls.n	800534a <__hexnan+0xf2>
 80052c0:	2300      	movs	r3, #0
 80052c2:	f1a4 0904 	sub.w	r9, r4, #4
 80052c6:	f844 3c04 	str.w	r3, [r4, #-4]
 80052ca:	461d      	mov	r5, r3
 80052cc:	464c      	mov	r4, r9
 80052ce:	f8cd b004 	str.w	fp, [sp, #4]
 80052d2:	9903      	ldr	r1, [sp, #12]
 80052d4:	e7d7      	b.n	8005286 <__hexnan+0x2e>
 80052d6:	2a29      	cmp	r2, #41	; 0x29
 80052d8:	d14a      	bne.n	8005370 <__hexnan+0x118>
 80052da:	3102      	adds	r1, #2
 80052dc:	f8ca 1000 	str.w	r1, [sl]
 80052e0:	f1bb 0f00 	cmp.w	fp, #0
 80052e4:	d044      	beq.n	8005370 <__hexnan+0x118>
 80052e6:	454c      	cmp	r4, r9
 80052e8:	d206      	bcs.n	80052f8 <__hexnan+0xa0>
 80052ea:	2d07      	cmp	r5, #7
 80052ec:	dc04      	bgt.n	80052f8 <__hexnan+0xa0>
 80052ee:	462a      	mov	r2, r5
 80052f0:	4649      	mov	r1, r9
 80052f2:	4620      	mov	r0, r4
 80052f4:	f7ff ff8b 	bl	800520e <L_shift>
 80052f8:	4544      	cmp	r4, r8
 80052fa:	d928      	bls.n	800534e <__hexnan+0xf6>
 80052fc:	4643      	mov	r3, r8
 80052fe:	f854 2b04 	ldr.w	r2, [r4], #4
 8005302:	42a6      	cmp	r6, r4
 8005304:	f843 2b04 	str.w	r2, [r3], #4
 8005308:	d2f9      	bcs.n	80052fe <__hexnan+0xa6>
 800530a:	2200      	movs	r2, #0
 800530c:	f843 2b04 	str.w	r2, [r3], #4
 8005310:	429e      	cmp	r6, r3
 8005312:	d2fb      	bcs.n	800530c <__hexnan+0xb4>
 8005314:	6833      	ldr	r3, [r6, #0]
 8005316:	b91b      	cbnz	r3, 8005320 <__hexnan+0xc8>
 8005318:	4546      	cmp	r6, r8
 800531a:	d127      	bne.n	800536c <__hexnan+0x114>
 800531c:	2301      	movs	r3, #1
 800531e:	6033      	str	r3, [r6, #0]
 8005320:	2005      	movs	r0, #5
 8005322:	e026      	b.n	8005372 <__hexnan+0x11a>
 8005324:	3501      	adds	r5, #1
 8005326:	2d08      	cmp	r5, #8
 8005328:	f10b 0b01 	add.w	fp, fp, #1
 800532c:	dd06      	ble.n	800533c <__hexnan+0xe4>
 800532e:	4544      	cmp	r4, r8
 8005330:	d9cf      	bls.n	80052d2 <__hexnan+0x7a>
 8005332:	2300      	movs	r3, #0
 8005334:	2501      	movs	r5, #1
 8005336:	f844 3c04 	str.w	r3, [r4, #-4]
 800533a:	3c04      	subs	r4, #4
 800533c:	6822      	ldr	r2, [r4, #0]
 800533e:	f000 000f 	and.w	r0, r0, #15
 8005342:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8005346:	6020      	str	r0, [r4, #0]
 8005348:	e7c3      	b.n	80052d2 <__hexnan+0x7a>
 800534a:	2508      	movs	r5, #8
 800534c:	e7c1      	b.n	80052d2 <__hexnan+0x7a>
 800534e:	9b02      	ldr	r3, [sp, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0df      	beq.n	8005314 <__hexnan+0xbc>
 8005354:	f04f 32ff 	mov.w	r2, #4294967295
 8005358:	f1c3 0320 	rsb	r3, r3, #32
 800535c:	fa22 f303 	lsr.w	r3, r2, r3
 8005360:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8005364:	401a      	ands	r2, r3
 8005366:	f847 2c04 	str.w	r2, [r7, #-4]
 800536a:	e7d3      	b.n	8005314 <__hexnan+0xbc>
 800536c:	3e04      	subs	r6, #4
 800536e:	e7d1      	b.n	8005314 <__hexnan+0xbc>
 8005370:	2004      	movs	r0, #4
 8005372:	b007      	add	sp, #28
 8005374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005378 <__localeconv_l>:
 8005378:	30f0      	adds	r0, #240	; 0xf0
 800537a:	4770      	bx	lr

0800537c <__ascii_mbtowc>:
 800537c:	b082      	sub	sp, #8
 800537e:	b901      	cbnz	r1, 8005382 <__ascii_mbtowc+0x6>
 8005380:	a901      	add	r1, sp, #4
 8005382:	b142      	cbz	r2, 8005396 <__ascii_mbtowc+0x1a>
 8005384:	b14b      	cbz	r3, 800539a <__ascii_mbtowc+0x1e>
 8005386:	7813      	ldrb	r3, [r2, #0]
 8005388:	600b      	str	r3, [r1, #0]
 800538a:	7812      	ldrb	r2, [r2, #0]
 800538c:	1c10      	adds	r0, r2, #0
 800538e:	bf18      	it	ne
 8005390:	2001      	movne	r0, #1
 8005392:	b002      	add	sp, #8
 8005394:	4770      	bx	lr
 8005396:	4610      	mov	r0, r2
 8005398:	e7fb      	b.n	8005392 <__ascii_mbtowc+0x16>
 800539a:	f06f 0001 	mvn.w	r0, #1
 800539e:	e7f8      	b.n	8005392 <__ascii_mbtowc+0x16>

080053a0 <memcpy>:
 80053a0:	b510      	push	{r4, lr}
 80053a2:	1e43      	subs	r3, r0, #1
 80053a4:	440a      	add	r2, r1
 80053a6:	4291      	cmp	r1, r2
 80053a8:	d100      	bne.n	80053ac <memcpy+0xc>
 80053aa:	bd10      	pop	{r4, pc}
 80053ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053b4:	e7f7      	b.n	80053a6 <memcpy+0x6>

080053b6 <__malloc_lock>:
 80053b6:	4770      	bx	lr

080053b8 <__malloc_unlock>:
 80053b8:	4770      	bx	lr

080053ba <_Balloc>:
 80053ba:	b570      	push	{r4, r5, r6, lr}
 80053bc:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80053be:	4604      	mov	r4, r0
 80053c0:	460e      	mov	r6, r1
 80053c2:	b93d      	cbnz	r5, 80053d4 <_Balloc+0x1a>
 80053c4:	2010      	movs	r0, #16
 80053c6:	f7fe fdc3 	bl	8003f50 <malloc>
 80053ca:	6260      	str	r0, [r4, #36]	; 0x24
 80053cc:	6045      	str	r5, [r0, #4]
 80053ce:	6085      	str	r5, [r0, #8]
 80053d0:	6005      	str	r5, [r0, #0]
 80053d2:	60c5      	str	r5, [r0, #12]
 80053d4:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80053d6:	68eb      	ldr	r3, [r5, #12]
 80053d8:	b183      	cbz	r3, 80053fc <_Balloc+0x42>
 80053da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053dc:	68db      	ldr	r3, [r3, #12]
 80053de:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80053e2:	b9b8      	cbnz	r0, 8005414 <_Balloc+0x5a>
 80053e4:	2101      	movs	r1, #1
 80053e6:	fa01 f506 	lsl.w	r5, r1, r6
 80053ea:	1d6a      	adds	r2, r5, #5
 80053ec:	0092      	lsls	r2, r2, #2
 80053ee:	4620      	mov	r0, r4
 80053f0:	f000 fbca 	bl	8005b88 <_calloc_r>
 80053f4:	b160      	cbz	r0, 8005410 <_Balloc+0x56>
 80053f6:	6046      	str	r6, [r0, #4]
 80053f8:	6085      	str	r5, [r0, #8]
 80053fa:	e00e      	b.n	800541a <_Balloc+0x60>
 80053fc:	2221      	movs	r2, #33	; 0x21
 80053fe:	2104      	movs	r1, #4
 8005400:	4620      	mov	r0, r4
 8005402:	f000 fbc1 	bl	8005b88 <_calloc_r>
 8005406:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005408:	60e8      	str	r0, [r5, #12]
 800540a:	68db      	ldr	r3, [r3, #12]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1e4      	bne.n	80053da <_Balloc+0x20>
 8005410:	2000      	movs	r0, #0
 8005412:	bd70      	pop	{r4, r5, r6, pc}
 8005414:	6802      	ldr	r2, [r0, #0]
 8005416:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800541a:	2300      	movs	r3, #0
 800541c:	6103      	str	r3, [r0, #16]
 800541e:	60c3      	str	r3, [r0, #12]
 8005420:	bd70      	pop	{r4, r5, r6, pc}

08005422 <_Bfree>:
 8005422:	b570      	push	{r4, r5, r6, lr}
 8005424:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005426:	4606      	mov	r6, r0
 8005428:	460d      	mov	r5, r1
 800542a:	b93c      	cbnz	r4, 800543c <_Bfree+0x1a>
 800542c:	2010      	movs	r0, #16
 800542e:	f7fe fd8f 	bl	8003f50 <malloc>
 8005432:	6270      	str	r0, [r6, #36]	; 0x24
 8005434:	6044      	str	r4, [r0, #4]
 8005436:	6084      	str	r4, [r0, #8]
 8005438:	6004      	str	r4, [r0, #0]
 800543a:	60c4      	str	r4, [r0, #12]
 800543c:	b13d      	cbz	r5, 800544e <_Bfree+0x2c>
 800543e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8005440:	686a      	ldr	r2, [r5, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005448:	6029      	str	r1, [r5, #0]
 800544a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800544e:	bd70      	pop	{r4, r5, r6, pc}

08005450 <__multadd>:
 8005450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005454:	461f      	mov	r7, r3
 8005456:	4606      	mov	r6, r0
 8005458:	460c      	mov	r4, r1
 800545a:	2300      	movs	r3, #0
 800545c:	690d      	ldr	r5, [r1, #16]
 800545e:	f101 0e14 	add.w	lr, r1, #20
 8005462:	f8de 0000 	ldr.w	r0, [lr]
 8005466:	3301      	adds	r3, #1
 8005468:	b281      	uxth	r1, r0
 800546a:	fb02 7101 	mla	r1, r2, r1, r7
 800546e:	0c00      	lsrs	r0, r0, #16
 8005470:	0c0f      	lsrs	r7, r1, #16
 8005472:	fb02 7000 	mla	r0, r2, r0, r7
 8005476:	b289      	uxth	r1, r1
 8005478:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800547c:	429d      	cmp	r5, r3
 800547e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8005482:	f84e 1b04 	str.w	r1, [lr], #4
 8005486:	dcec      	bgt.n	8005462 <__multadd+0x12>
 8005488:	b1d7      	cbz	r7, 80054c0 <__multadd+0x70>
 800548a:	68a3      	ldr	r3, [r4, #8]
 800548c:	429d      	cmp	r5, r3
 800548e:	db12      	blt.n	80054b6 <__multadd+0x66>
 8005490:	6861      	ldr	r1, [r4, #4]
 8005492:	4630      	mov	r0, r6
 8005494:	3101      	adds	r1, #1
 8005496:	f7ff ff90 	bl	80053ba <_Balloc>
 800549a:	4680      	mov	r8, r0
 800549c:	6922      	ldr	r2, [r4, #16]
 800549e:	f104 010c 	add.w	r1, r4, #12
 80054a2:	3202      	adds	r2, #2
 80054a4:	0092      	lsls	r2, r2, #2
 80054a6:	300c      	adds	r0, #12
 80054a8:	f7ff ff7a 	bl	80053a0 <memcpy>
 80054ac:	4621      	mov	r1, r4
 80054ae:	4630      	mov	r0, r6
 80054b0:	f7ff ffb7 	bl	8005422 <_Bfree>
 80054b4:	4644      	mov	r4, r8
 80054b6:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80054ba:	3501      	adds	r5, #1
 80054bc:	615f      	str	r7, [r3, #20]
 80054be:	6125      	str	r5, [r4, #16]
 80054c0:	4620      	mov	r0, r4
 80054c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080054c6 <__s2b>:
 80054c6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054ca:	4615      	mov	r5, r2
 80054cc:	2209      	movs	r2, #9
 80054ce:	461f      	mov	r7, r3
 80054d0:	3308      	adds	r3, #8
 80054d2:	460c      	mov	r4, r1
 80054d4:	fb93 f3f2 	sdiv	r3, r3, r2
 80054d8:	4606      	mov	r6, r0
 80054da:	2201      	movs	r2, #1
 80054dc:	2100      	movs	r1, #0
 80054de:	429a      	cmp	r2, r3
 80054e0:	db20      	blt.n	8005524 <__s2b+0x5e>
 80054e2:	4630      	mov	r0, r6
 80054e4:	f7ff ff69 	bl	80053ba <_Balloc>
 80054e8:	9b08      	ldr	r3, [sp, #32]
 80054ea:	2d09      	cmp	r5, #9
 80054ec:	6143      	str	r3, [r0, #20]
 80054ee:	f04f 0301 	mov.w	r3, #1
 80054f2:	6103      	str	r3, [r0, #16]
 80054f4:	dd19      	ble.n	800552a <__s2b+0x64>
 80054f6:	f104 0909 	add.w	r9, r4, #9
 80054fa:	46c8      	mov	r8, r9
 80054fc:	442c      	add	r4, r5
 80054fe:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005502:	4601      	mov	r1, r0
 8005504:	3b30      	subs	r3, #48	; 0x30
 8005506:	220a      	movs	r2, #10
 8005508:	4630      	mov	r0, r6
 800550a:	f7ff ffa1 	bl	8005450 <__multadd>
 800550e:	45a0      	cmp	r8, r4
 8005510:	d1f5      	bne.n	80054fe <__s2b+0x38>
 8005512:	f1a5 0408 	sub.w	r4, r5, #8
 8005516:	444c      	add	r4, r9
 8005518:	1b2d      	subs	r5, r5, r4
 800551a:	1963      	adds	r3, r4, r5
 800551c:	42bb      	cmp	r3, r7
 800551e:	db07      	blt.n	8005530 <__s2b+0x6a>
 8005520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005524:	0052      	lsls	r2, r2, #1
 8005526:	3101      	adds	r1, #1
 8005528:	e7d9      	b.n	80054de <__s2b+0x18>
 800552a:	340a      	adds	r4, #10
 800552c:	2509      	movs	r5, #9
 800552e:	e7f3      	b.n	8005518 <__s2b+0x52>
 8005530:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005534:	4601      	mov	r1, r0
 8005536:	3b30      	subs	r3, #48	; 0x30
 8005538:	220a      	movs	r2, #10
 800553a:	4630      	mov	r0, r6
 800553c:	f7ff ff88 	bl	8005450 <__multadd>
 8005540:	e7eb      	b.n	800551a <__s2b+0x54>

08005542 <__hi0bits>:
 8005542:	0c02      	lsrs	r2, r0, #16
 8005544:	0412      	lsls	r2, r2, #16
 8005546:	4603      	mov	r3, r0
 8005548:	b9b2      	cbnz	r2, 8005578 <__hi0bits+0x36>
 800554a:	0403      	lsls	r3, r0, #16
 800554c:	2010      	movs	r0, #16
 800554e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005552:	bf04      	itt	eq
 8005554:	021b      	lsleq	r3, r3, #8
 8005556:	3008      	addeq	r0, #8
 8005558:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800555c:	bf04      	itt	eq
 800555e:	011b      	lsleq	r3, r3, #4
 8005560:	3004      	addeq	r0, #4
 8005562:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005566:	bf04      	itt	eq
 8005568:	009b      	lsleq	r3, r3, #2
 800556a:	3002      	addeq	r0, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	db06      	blt.n	800557e <__hi0bits+0x3c>
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	d503      	bpl.n	800557c <__hi0bits+0x3a>
 8005574:	3001      	adds	r0, #1
 8005576:	4770      	bx	lr
 8005578:	2000      	movs	r0, #0
 800557a:	e7e8      	b.n	800554e <__hi0bits+0xc>
 800557c:	2020      	movs	r0, #32
 800557e:	4770      	bx	lr

08005580 <__lo0bits>:
 8005580:	6803      	ldr	r3, [r0, #0]
 8005582:	4601      	mov	r1, r0
 8005584:	f013 0207 	ands.w	r2, r3, #7
 8005588:	d00b      	beq.n	80055a2 <__lo0bits+0x22>
 800558a:	07da      	lsls	r2, r3, #31
 800558c:	d423      	bmi.n	80055d6 <__lo0bits+0x56>
 800558e:	0798      	lsls	r0, r3, #30
 8005590:	bf49      	itett	mi
 8005592:	085b      	lsrmi	r3, r3, #1
 8005594:	089b      	lsrpl	r3, r3, #2
 8005596:	2001      	movmi	r0, #1
 8005598:	600b      	strmi	r3, [r1, #0]
 800559a:	bf5c      	itt	pl
 800559c:	600b      	strpl	r3, [r1, #0]
 800559e:	2002      	movpl	r0, #2
 80055a0:	4770      	bx	lr
 80055a2:	b298      	uxth	r0, r3
 80055a4:	b9a8      	cbnz	r0, 80055d2 <__lo0bits+0x52>
 80055a6:	2010      	movs	r0, #16
 80055a8:	0c1b      	lsrs	r3, r3, #16
 80055aa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80055ae:	bf04      	itt	eq
 80055b0:	0a1b      	lsreq	r3, r3, #8
 80055b2:	3008      	addeq	r0, #8
 80055b4:	071a      	lsls	r2, r3, #28
 80055b6:	bf04      	itt	eq
 80055b8:	091b      	lsreq	r3, r3, #4
 80055ba:	3004      	addeq	r0, #4
 80055bc:	079a      	lsls	r2, r3, #30
 80055be:	bf04      	itt	eq
 80055c0:	089b      	lsreq	r3, r3, #2
 80055c2:	3002      	addeq	r0, #2
 80055c4:	07da      	lsls	r2, r3, #31
 80055c6:	d402      	bmi.n	80055ce <__lo0bits+0x4e>
 80055c8:	085b      	lsrs	r3, r3, #1
 80055ca:	d006      	beq.n	80055da <__lo0bits+0x5a>
 80055cc:	3001      	adds	r0, #1
 80055ce:	600b      	str	r3, [r1, #0]
 80055d0:	4770      	bx	lr
 80055d2:	4610      	mov	r0, r2
 80055d4:	e7e9      	b.n	80055aa <__lo0bits+0x2a>
 80055d6:	2000      	movs	r0, #0
 80055d8:	4770      	bx	lr
 80055da:	2020      	movs	r0, #32
 80055dc:	4770      	bx	lr

080055de <__i2b>:
 80055de:	b510      	push	{r4, lr}
 80055e0:	460c      	mov	r4, r1
 80055e2:	2101      	movs	r1, #1
 80055e4:	f7ff fee9 	bl	80053ba <_Balloc>
 80055e8:	2201      	movs	r2, #1
 80055ea:	6144      	str	r4, [r0, #20]
 80055ec:	6102      	str	r2, [r0, #16]
 80055ee:	bd10      	pop	{r4, pc}

080055f0 <__multiply>:
 80055f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055f4:	4614      	mov	r4, r2
 80055f6:	690a      	ldr	r2, [r1, #16]
 80055f8:	6923      	ldr	r3, [r4, #16]
 80055fa:	4689      	mov	r9, r1
 80055fc:	429a      	cmp	r2, r3
 80055fe:	bfbe      	ittt	lt
 8005600:	460b      	movlt	r3, r1
 8005602:	46a1      	movlt	r9, r4
 8005604:	461c      	movlt	r4, r3
 8005606:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800560a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800560e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8005612:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005616:	eb07 060a 	add.w	r6, r7, sl
 800561a:	429e      	cmp	r6, r3
 800561c:	bfc8      	it	gt
 800561e:	3101      	addgt	r1, #1
 8005620:	f7ff fecb 	bl	80053ba <_Balloc>
 8005624:	f100 0514 	add.w	r5, r0, #20
 8005628:	462b      	mov	r3, r5
 800562a:	2200      	movs	r2, #0
 800562c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005630:	4543      	cmp	r3, r8
 8005632:	d316      	bcc.n	8005662 <__multiply+0x72>
 8005634:	f104 0214 	add.w	r2, r4, #20
 8005638:	f109 0114 	add.w	r1, r9, #20
 800563c:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8005640:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8005644:	9301      	str	r3, [sp, #4]
 8005646:	9c01      	ldr	r4, [sp, #4]
 8005648:	4613      	mov	r3, r2
 800564a:	4294      	cmp	r4, r2
 800564c:	d80c      	bhi.n	8005668 <__multiply+0x78>
 800564e:	2e00      	cmp	r6, #0
 8005650:	dd03      	ble.n	800565a <__multiply+0x6a>
 8005652:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005656:	2b00      	cmp	r3, #0
 8005658:	d054      	beq.n	8005704 <__multiply+0x114>
 800565a:	6106      	str	r6, [r0, #16]
 800565c:	b003      	add	sp, #12
 800565e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005662:	f843 2b04 	str.w	r2, [r3], #4
 8005666:	e7e3      	b.n	8005630 <__multiply+0x40>
 8005668:	f8b3 a000 	ldrh.w	sl, [r3]
 800566c:	3204      	adds	r2, #4
 800566e:	f1ba 0f00 	cmp.w	sl, #0
 8005672:	d020      	beq.n	80056b6 <__multiply+0xc6>
 8005674:	46ae      	mov	lr, r5
 8005676:	4689      	mov	r9, r1
 8005678:	f04f 0c00 	mov.w	ip, #0
 800567c:	f859 4b04 	ldr.w	r4, [r9], #4
 8005680:	f8be b000 	ldrh.w	fp, [lr]
 8005684:	b2a3      	uxth	r3, r4
 8005686:	fb0a b303 	mla	r3, sl, r3, fp
 800568a:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 800568e:	f8de 4000 	ldr.w	r4, [lr]
 8005692:	4463      	add	r3, ip
 8005694:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8005698:	fb0a c40b 	mla	r4, sl, fp, ip
 800569c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80056a6:	454f      	cmp	r7, r9
 80056a8:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 80056ac:	f84e 3b04 	str.w	r3, [lr], #4
 80056b0:	d8e4      	bhi.n	800567c <__multiply+0x8c>
 80056b2:	f8ce c000 	str.w	ip, [lr]
 80056b6:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 80056ba:	f1b9 0f00 	cmp.w	r9, #0
 80056be:	d01f      	beq.n	8005700 <__multiply+0x110>
 80056c0:	46ae      	mov	lr, r5
 80056c2:	468c      	mov	ip, r1
 80056c4:	f04f 0a00 	mov.w	sl, #0
 80056c8:	682b      	ldr	r3, [r5, #0]
 80056ca:	f8bc 4000 	ldrh.w	r4, [ip]
 80056ce:	f8be b002 	ldrh.w	fp, [lr, #2]
 80056d2:	b29b      	uxth	r3, r3
 80056d4:	fb09 b404 	mla	r4, r9, r4, fp
 80056d8:	44a2      	add	sl, r4
 80056da:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80056de:	f84e 3b04 	str.w	r3, [lr], #4
 80056e2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80056e6:	f8be 4000 	ldrh.w	r4, [lr]
 80056ea:	0c1b      	lsrs	r3, r3, #16
 80056ec:	fb09 4303 	mla	r3, r9, r3, r4
 80056f0:	4567      	cmp	r7, ip
 80056f2:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80056f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80056fa:	d8e6      	bhi.n	80056ca <__multiply+0xda>
 80056fc:	f8ce 3000 	str.w	r3, [lr]
 8005700:	3504      	adds	r5, #4
 8005702:	e7a0      	b.n	8005646 <__multiply+0x56>
 8005704:	3e01      	subs	r6, #1
 8005706:	e7a2      	b.n	800564e <__multiply+0x5e>

08005708 <__pow5mult>:
 8005708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800570c:	4615      	mov	r5, r2
 800570e:	f012 0203 	ands.w	r2, r2, #3
 8005712:	4606      	mov	r6, r0
 8005714:	460f      	mov	r7, r1
 8005716:	d007      	beq.n	8005728 <__pow5mult+0x20>
 8005718:	4c21      	ldr	r4, [pc, #132]	; (80057a0 <__pow5mult+0x98>)
 800571a:	3a01      	subs	r2, #1
 800571c:	2300      	movs	r3, #0
 800571e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005722:	f7ff fe95 	bl	8005450 <__multadd>
 8005726:	4607      	mov	r7, r0
 8005728:	10ad      	asrs	r5, r5, #2
 800572a:	d035      	beq.n	8005798 <__pow5mult+0x90>
 800572c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800572e:	b93c      	cbnz	r4, 8005740 <__pow5mult+0x38>
 8005730:	2010      	movs	r0, #16
 8005732:	f7fe fc0d 	bl	8003f50 <malloc>
 8005736:	6270      	str	r0, [r6, #36]	; 0x24
 8005738:	6044      	str	r4, [r0, #4]
 800573a:	6084      	str	r4, [r0, #8]
 800573c:	6004      	str	r4, [r0, #0]
 800573e:	60c4      	str	r4, [r0, #12]
 8005740:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005744:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005748:	b94c      	cbnz	r4, 800575e <__pow5mult+0x56>
 800574a:	f240 2171 	movw	r1, #625	; 0x271
 800574e:	4630      	mov	r0, r6
 8005750:	f7ff ff45 	bl	80055de <__i2b>
 8005754:	2300      	movs	r3, #0
 8005756:	4604      	mov	r4, r0
 8005758:	f8c8 0008 	str.w	r0, [r8, #8]
 800575c:	6003      	str	r3, [r0, #0]
 800575e:	f04f 0800 	mov.w	r8, #0
 8005762:	07eb      	lsls	r3, r5, #31
 8005764:	d50a      	bpl.n	800577c <__pow5mult+0x74>
 8005766:	4639      	mov	r1, r7
 8005768:	4622      	mov	r2, r4
 800576a:	4630      	mov	r0, r6
 800576c:	f7ff ff40 	bl	80055f0 <__multiply>
 8005770:	4681      	mov	r9, r0
 8005772:	4639      	mov	r1, r7
 8005774:	4630      	mov	r0, r6
 8005776:	f7ff fe54 	bl	8005422 <_Bfree>
 800577a:	464f      	mov	r7, r9
 800577c:	106d      	asrs	r5, r5, #1
 800577e:	d00b      	beq.n	8005798 <__pow5mult+0x90>
 8005780:	6820      	ldr	r0, [r4, #0]
 8005782:	b938      	cbnz	r0, 8005794 <__pow5mult+0x8c>
 8005784:	4622      	mov	r2, r4
 8005786:	4621      	mov	r1, r4
 8005788:	4630      	mov	r0, r6
 800578a:	f7ff ff31 	bl	80055f0 <__multiply>
 800578e:	6020      	str	r0, [r4, #0]
 8005790:	f8c0 8000 	str.w	r8, [r0]
 8005794:	4604      	mov	r4, r0
 8005796:	e7e4      	b.n	8005762 <__pow5mult+0x5a>
 8005798:	4638      	mov	r0, r7
 800579a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800579e:	bf00      	nop
 80057a0:	080075d8 	.word	0x080075d8

080057a4 <__lshift>:
 80057a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057a8:	460c      	mov	r4, r1
 80057aa:	4607      	mov	r7, r0
 80057ac:	4616      	mov	r6, r2
 80057ae:	6923      	ldr	r3, [r4, #16]
 80057b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80057b4:	eb0a 0903 	add.w	r9, sl, r3
 80057b8:	6849      	ldr	r1, [r1, #4]
 80057ba:	68a3      	ldr	r3, [r4, #8]
 80057bc:	f109 0501 	add.w	r5, r9, #1
 80057c0:	42ab      	cmp	r3, r5
 80057c2:	db31      	blt.n	8005828 <__lshift+0x84>
 80057c4:	4638      	mov	r0, r7
 80057c6:	f7ff fdf8 	bl	80053ba <_Balloc>
 80057ca:	2200      	movs	r2, #0
 80057cc:	4680      	mov	r8, r0
 80057ce:	4611      	mov	r1, r2
 80057d0:	f100 0314 	add.w	r3, r0, #20
 80057d4:	4552      	cmp	r2, sl
 80057d6:	db2a      	blt.n	800582e <__lshift+0x8a>
 80057d8:	6920      	ldr	r0, [r4, #16]
 80057da:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80057de:	f104 0114 	add.w	r1, r4, #20
 80057e2:	f016 021f 	ands.w	r2, r6, #31
 80057e6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80057ea:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80057ee:	d022      	beq.n	8005836 <__lshift+0x92>
 80057f0:	2000      	movs	r0, #0
 80057f2:	f1c2 0c20 	rsb	ip, r2, #32
 80057f6:	680e      	ldr	r6, [r1, #0]
 80057f8:	4096      	lsls	r6, r2
 80057fa:	4330      	orrs	r0, r6
 80057fc:	f843 0b04 	str.w	r0, [r3], #4
 8005800:	f851 0b04 	ldr.w	r0, [r1], #4
 8005804:	458e      	cmp	lr, r1
 8005806:	fa20 f00c 	lsr.w	r0, r0, ip
 800580a:	d8f4      	bhi.n	80057f6 <__lshift+0x52>
 800580c:	6018      	str	r0, [r3, #0]
 800580e:	b108      	cbz	r0, 8005814 <__lshift+0x70>
 8005810:	f109 0502 	add.w	r5, r9, #2
 8005814:	3d01      	subs	r5, #1
 8005816:	4638      	mov	r0, r7
 8005818:	f8c8 5010 	str.w	r5, [r8, #16]
 800581c:	4621      	mov	r1, r4
 800581e:	f7ff fe00 	bl	8005422 <_Bfree>
 8005822:	4640      	mov	r0, r8
 8005824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005828:	3101      	adds	r1, #1
 800582a:	005b      	lsls	r3, r3, #1
 800582c:	e7c8      	b.n	80057c0 <__lshift+0x1c>
 800582e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005832:	3201      	adds	r2, #1
 8005834:	e7ce      	b.n	80057d4 <__lshift+0x30>
 8005836:	3b04      	subs	r3, #4
 8005838:	f851 2b04 	ldr.w	r2, [r1], #4
 800583c:	458e      	cmp	lr, r1
 800583e:	f843 2f04 	str.w	r2, [r3, #4]!
 8005842:	d8f9      	bhi.n	8005838 <__lshift+0x94>
 8005844:	e7e6      	b.n	8005814 <__lshift+0x70>

08005846 <__mcmp>:
 8005846:	6903      	ldr	r3, [r0, #16]
 8005848:	690a      	ldr	r2, [r1, #16]
 800584a:	b530      	push	{r4, r5, lr}
 800584c:	1a9b      	subs	r3, r3, r2
 800584e:	d10c      	bne.n	800586a <__mcmp+0x24>
 8005850:	0092      	lsls	r2, r2, #2
 8005852:	3014      	adds	r0, #20
 8005854:	3114      	adds	r1, #20
 8005856:	1884      	adds	r4, r0, r2
 8005858:	4411      	add	r1, r2
 800585a:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800585e:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005862:	4295      	cmp	r5, r2
 8005864:	d003      	beq.n	800586e <__mcmp+0x28>
 8005866:	d305      	bcc.n	8005874 <__mcmp+0x2e>
 8005868:	2301      	movs	r3, #1
 800586a:	4618      	mov	r0, r3
 800586c:	bd30      	pop	{r4, r5, pc}
 800586e:	42a0      	cmp	r0, r4
 8005870:	d3f3      	bcc.n	800585a <__mcmp+0x14>
 8005872:	e7fa      	b.n	800586a <__mcmp+0x24>
 8005874:	f04f 33ff 	mov.w	r3, #4294967295
 8005878:	e7f7      	b.n	800586a <__mcmp+0x24>

0800587a <__mdiff>:
 800587a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800587e:	460d      	mov	r5, r1
 8005880:	4607      	mov	r7, r0
 8005882:	4611      	mov	r1, r2
 8005884:	4628      	mov	r0, r5
 8005886:	4614      	mov	r4, r2
 8005888:	f7ff ffdd 	bl	8005846 <__mcmp>
 800588c:	1e06      	subs	r6, r0, #0
 800588e:	d108      	bne.n	80058a2 <__mdiff+0x28>
 8005890:	4631      	mov	r1, r6
 8005892:	4638      	mov	r0, r7
 8005894:	f7ff fd91 	bl	80053ba <_Balloc>
 8005898:	2301      	movs	r3, #1
 800589a:	6146      	str	r6, [r0, #20]
 800589c:	6103      	str	r3, [r0, #16]
 800589e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a2:	bfa4      	itt	ge
 80058a4:	4623      	movge	r3, r4
 80058a6:	462c      	movge	r4, r5
 80058a8:	4638      	mov	r0, r7
 80058aa:	6861      	ldr	r1, [r4, #4]
 80058ac:	bfa6      	itte	ge
 80058ae:	461d      	movge	r5, r3
 80058b0:	2600      	movge	r6, #0
 80058b2:	2601      	movlt	r6, #1
 80058b4:	f7ff fd81 	bl	80053ba <_Balloc>
 80058b8:	f04f 0c00 	mov.w	ip, #0
 80058bc:	60c6      	str	r6, [r0, #12]
 80058be:	692b      	ldr	r3, [r5, #16]
 80058c0:	6926      	ldr	r6, [r4, #16]
 80058c2:	f104 0214 	add.w	r2, r4, #20
 80058c6:	f105 0914 	add.w	r9, r5, #20
 80058ca:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80058ce:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80058d2:	f100 0114 	add.w	r1, r0, #20
 80058d6:	f852 ab04 	ldr.w	sl, [r2], #4
 80058da:	f859 5b04 	ldr.w	r5, [r9], #4
 80058de:	fa1f f38a 	uxth.w	r3, sl
 80058e2:	4463      	add	r3, ip
 80058e4:	b2ac      	uxth	r4, r5
 80058e6:	1b1b      	subs	r3, r3, r4
 80058e8:	0c2c      	lsrs	r4, r5, #16
 80058ea:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80058ee:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80058f8:	45c8      	cmp	r8, r9
 80058fa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80058fe:	4696      	mov	lr, r2
 8005900:	f841 4b04 	str.w	r4, [r1], #4
 8005904:	d8e7      	bhi.n	80058d6 <__mdiff+0x5c>
 8005906:	45be      	cmp	lr, r7
 8005908:	d305      	bcc.n	8005916 <__mdiff+0x9c>
 800590a:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800590e:	b18b      	cbz	r3, 8005934 <__mdiff+0xba>
 8005910:	6106      	str	r6, [r0, #16]
 8005912:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005916:	f85e 4b04 	ldr.w	r4, [lr], #4
 800591a:	b2a2      	uxth	r2, r4
 800591c:	4462      	add	r2, ip
 800591e:	1413      	asrs	r3, r2, #16
 8005920:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8005924:	b292      	uxth	r2, r2
 8005926:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800592a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800592e:	f841 2b04 	str.w	r2, [r1], #4
 8005932:	e7e8      	b.n	8005906 <__mdiff+0x8c>
 8005934:	3e01      	subs	r6, #1
 8005936:	e7e8      	b.n	800590a <__mdiff+0x90>

08005938 <__ulp>:
 8005938:	4b10      	ldr	r3, [pc, #64]	; (800597c <__ulp+0x44>)
 800593a:	400b      	ands	r3, r1
 800593c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8005940:	2b00      	cmp	r3, #0
 8005942:	dd02      	ble.n	800594a <__ulp+0x12>
 8005944:	2000      	movs	r0, #0
 8005946:	4619      	mov	r1, r3
 8005948:	4770      	bx	lr
 800594a:	425b      	negs	r3, r3
 800594c:	151b      	asrs	r3, r3, #20
 800594e:	2b13      	cmp	r3, #19
 8005950:	f04f 0000 	mov.w	r0, #0
 8005954:	f04f 0100 	mov.w	r1, #0
 8005958:	dc04      	bgt.n	8005964 <__ulp+0x2c>
 800595a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800595e:	fa42 f103 	asr.w	r1, r2, r3
 8005962:	4770      	bx	lr
 8005964:	2201      	movs	r2, #1
 8005966:	3b14      	subs	r3, #20
 8005968:	2b1e      	cmp	r3, #30
 800596a:	bfce      	itee	gt
 800596c:	4613      	movgt	r3, r2
 800596e:	f1c3 031f 	rsble	r3, r3, #31
 8005972:	fa02 f303 	lslle.w	r3, r2, r3
 8005976:	4618      	mov	r0, r3
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	7ff00000 	.word	0x7ff00000

08005980 <__b2d>:
 8005980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005984:	6907      	ldr	r7, [r0, #16]
 8005986:	f100 0914 	add.w	r9, r0, #20
 800598a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800598e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8005992:	f1a7 0804 	sub.w	r8, r7, #4
 8005996:	4630      	mov	r0, r6
 8005998:	f7ff fdd3 	bl	8005542 <__hi0bits>
 800599c:	f1c0 0320 	rsb	r3, r0, #32
 80059a0:	280a      	cmp	r0, #10
 80059a2:	600b      	str	r3, [r1, #0]
 80059a4:	491e      	ldr	r1, [pc, #120]	; (8005a20 <__b2d+0xa0>)
 80059a6:	dc17      	bgt.n	80059d8 <__b2d+0x58>
 80059a8:	45c1      	cmp	r9, r8
 80059aa:	bf28      	it	cs
 80059ac:	2200      	movcs	r2, #0
 80059ae:	f1c0 0e0b 	rsb	lr, r0, #11
 80059b2:	fa26 f30e 	lsr.w	r3, r6, lr
 80059b6:	bf38      	it	cc
 80059b8:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80059bc:	ea43 0501 	orr.w	r5, r3, r1
 80059c0:	f100 0315 	add.w	r3, r0, #21
 80059c4:	fa06 f303 	lsl.w	r3, r6, r3
 80059c8:	fa22 f20e 	lsr.w	r2, r2, lr
 80059cc:	ea43 0402 	orr.w	r4, r3, r2
 80059d0:	4620      	mov	r0, r4
 80059d2:	4629      	mov	r1, r5
 80059d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059d8:	45c1      	cmp	r9, r8
 80059da:	bf3a      	itte	cc
 80059dc:	f1a7 0808 	subcc.w	r8, r7, #8
 80059e0:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 80059e4:	2200      	movcs	r2, #0
 80059e6:	f1b0 030b 	subs.w	r3, r0, #11
 80059ea:	d015      	beq.n	8005a18 <__b2d+0x98>
 80059ec:	409e      	lsls	r6, r3
 80059ee:	f1c3 0720 	rsb	r7, r3, #32
 80059f2:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 80059f6:	fa22 f107 	lsr.w	r1, r2, r7
 80059fa:	45c8      	cmp	r8, r9
 80059fc:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 8005a00:	ea46 0501 	orr.w	r5, r6, r1
 8005a04:	bf94      	ite	ls
 8005a06:	2100      	movls	r1, #0
 8005a08:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8005a0c:	fa02 f003 	lsl.w	r0, r2, r3
 8005a10:	40f9      	lsrs	r1, r7
 8005a12:	ea40 0401 	orr.w	r4, r0, r1
 8005a16:	e7db      	b.n	80059d0 <__b2d+0x50>
 8005a18:	ea46 0501 	orr.w	r5, r6, r1
 8005a1c:	4614      	mov	r4, r2
 8005a1e:	e7d7      	b.n	80059d0 <__b2d+0x50>
 8005a20:	3ff00000 	.word	0x3ff00000

08005a24 <__d2b>:
 8005a24:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005a28:	461c      	mov	r4, r3
 8005a2a:	2101      	movs	r1, #1
 8005a2c:	4690      	mov	r8, r2
 8005a2e:	9e08      	ldr	r6, [sp, #32]
 8005a30:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005a32:	f7ff fcc2 	bl	80053ba <_Balloc>
 8005a36:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8005a3a:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005a3e:	4607      	mov	r7, r0
 8005a40:	bb34      	cbnz	r4, 8005a90 <__d2b+0x6c>
 8005a42:	9201      	str	r2, [sp, #4]
 8005a44:	f1b8 0f00 	cmp.w	r8, #0
 8005a48:	d027      	beq.n	8005a9a <__d2b+0x76>
 8005a4a:	a802      	add	r0, sp, #8
 8005a4c:	f840 8d08 	str.w	r8, [r0, #-8]!
 8005a50:	f7ff fd96 	bl	8005580 <__lo0bits>
 8005a54:	9900      	ldr	r1, [sp, #0]
 8005a56:	b1f0      	cbz	r0, 8005a96 <__d2b+0x72>
 8005a58:	9a01      	ldr	r2, [sp, #4]
 8005a5a:	f1c0 0320 	rsb	r3, r0, #32
 8005a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a62:	430b      	orrs	r3, r1
 8005a64:	40c2      	lsrs	r2, r0
 8005a66:	617b      	str	r3, [r7, #20]
 8005a68:	9201      	str	r2, [sp, #4]
 8005a6a:	9b01      	ldr	r3, [sp, #4]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	bf14      	ite	ne
 8005a70:	2102      	movne	r1, #2
 8005a72:	2101      	moveq	r1, #1
 8005a74:	61bb      	str	r3, [r7, #24]
 8005a76:	6139      	str	r1, [r7, #16]
 8005a78:	b1c4      	cbz	r4, 8005aac <__d2b+0x88>
 8005a7a:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005a7e:	4404      	add	r4, r0
 8005a80:	6034      	str	r4, [r6, #0]
 8005a82:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005a86:	6028      	str	r0, [r5, #0]
 8005a88:	4638      	mov	r0, r7
 8005a8a:	b002      	add	sp, #8
 8005a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a90:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005a94:	e7d5      	b.n	8005a42 <__d2b+0x1e>
 8005a96:	6179      	str	r1, [r7, #20]
 8005a98:	e7e7      	b.n	8005a6a <__d2b+0x46>
 8005a9a:	a801      	add	r0, sp, #4
 8005a9c:	f7ff fd70 	bl	8005580 <__lo0bits>
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	9b01      	ldr	r3, [sp, #4]
 8005aa4:	6139      	str	r1, [r7, #16]
 8005aa6:	617b      	str	r3, [r7, #20]
 8005aa8:	3020      	adds	r0, #32
 8005aaa:	e7e5      	b.n	8005a78 <__d2b+0x54>
 8005aac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005ab0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8005ab4:	6030      	str	r0, [r6, #0]
 8005ab6:	6918      	ldr	r0, [r3, #16]
 8005ab8:	f7ff fd43 	bl	8005542 <__hi0bits>
 8005abc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8005ac0:	e7e1      	b.n	8005a86 <__d2b+0x62>

08005ac2 <__ratio>:
 8005ac2:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8005ac6:	4688      	mov	r8, r1
 8005ac8:	4669      	mov	r1, sp
 8005aca:	4681      	mov	r9, r0
 8005acc:	f7ff ff58 	bl	8005980 <__b2d>
 8005ad0:	460d      	mov	r5, r1
 8005ad2:	4604      	mov	r4, r0
 8005ad4:	a901      	add	r1, sp, #4
 8005ad6:	4640      	mov	r0, r8
 8005ad8:	f7ff ff52 	bl	8005980 <__b2d>
 8005adc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005ae0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8005ae4:	9e00      	ldr	r6, [sp, #0]
 8005ae6:	1a9a      	subs	r2, r3, r2
 8005ae8:	9b01      	ldr	r3, [sp, #4]
 8005aea:	1af3      	subs	r3, r6, r3
 8005aec:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	bfd6      	itet	le
 8005af4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8005af8:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 8005afc:	eb01 5103 	addle.w	r1, r1, r3, lsl #20
 8005b00:	4602      	mov	r2, r0
 8005b02:	460b      	mov	r3, r1
 8005b04:	4620      	mov	r0, r4
 8005b06:	4629      	mov	r1, r5
 8005b08:	f7fa fe0c 	bl	8000724 <__aeabi_ddiv>
 8005b0c:	b002      	add	sp, #8
 8005b0e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08005b12 <__copybits>:
 8005b12:	3901      	subs	r1, #1
 8005b14:	b510      	push	{r4, lr}
 8005b16:	1149      	asrs	r1, r1, #5
 8005b18:	6914      	ldr	r4, [r2, #16]
 8005b1a:	3101      	adds	r1, #1
 8005b1c:	f102 0314 	add.w	r3, r2, #20
 8005b20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8005b24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005b28:	42a3      	cmp	r3, r4
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	d303      	bcc.n	8005b36 <__copybits+0x24>
 8005b2e:	2300      	movs	r3, #0
 8005b30:	428a      	cmp	r2, r1
 8005b32:	d305      	bcc.n	8005b40 <__copybits+0x2e>
 8005b34:	bd10      	pop	{r4, pc}
 8005b36:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b3a:	f840 2b04 	str.w	r2, [r0], #4
 8005b3e:	e7f3      	b.n	8005b28 <__copybits+0x16>
 8005b40:	f842 3b04 	str.w	r3, [r2], #4
 8005b44:	e7f4      	b.n	8005b30 <__copybits+0x1e>

08005b46 <__any_on>:
 8005b46:	f100 0214 	add.w	r2, r0, #20
 8005b4a:	6900      	ldr	r0, [r0, #16]
 8005b4c:	114b      	asrs	r3, r1, #5
 8005b4e:	4298      	cmp	r0, r3
 8005b50:	b510      	push	{r4, lr}
 8005b52:	db11      	blt.n	8005b78 <__any_on+0x32>
 8005b54:	dd0a      	ble.n	8005b6c <__any_on+0x26>
 8005b56:	f011 011f 	ands.w	r1, r1, #31
 8005b5a:	d007      	beq.n	8005b6c <__any_on+0x26>
 8005b5c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8005b60:	fa24 f001 	lsr.w	r0, r4, r1
 8005b64:	fa00 f101 	lsl.w	r1, r0, r1
 8005b68:	428c      	cmp	r4, r1
 8005b6a:	d10b      	bne.n	8005b84 <__any_on+0x3e>
 8005b6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d803      	bhi.n	8005b7c <__any_on+0x36>
 8005b74:	2000      	movs	r0, #0
 8005b76:	bd10      	pop	{r4, pc}
 8005b78:	4603      	mov	r3, r0
 8005b7a:	e7f7      	b.n	8005b6c <__any_on+0x26>
 8005b7c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005b80:	2900      	cmp	r1, #0
 8005b82:	d0f5      	beq.n	8005b70 <__any_on+0x2a>
 8005b84:	2001      	movs	r0, #1
 8005b86:	bd10      	pop	{r4, pc}

08005b88 <_calloc_r>:
 8005b88:	b538      	push	{r3, r4, r5, lr}
 8005b8a:	fb02 f401 	mul.w	r4, r2, r1
 8005b8e:	4621      	mov	r1, r4
 8005b90:	f7fe fa3a 	bl	8004008 <_malloc_r>
 8005b94:	4605      	mov	r5, r0
 8005b96:	b118      	cbz	r0, 8005ba0 <_calloc_r+0x18>
 8005b98:	4622      	mov	r2, r4
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	f000 f821 	bl	8005be2 <memset>
 8005ba0:	4628      	mov	r0, r5
 8005ba2:	bd38      	pop	{r3, r4, r5, pc}

08005ba4 <strncmp>:
 8005ba4:	b510      	push	{r4, lr}
 8005ba6:	b16a      	cbz	r2, 8005bc4 <strncmp+0x20>
 8005ba8:	3901      	subs	r1, #1
 8005baa:	1884      	adds	r4, r0, r2
 8005bac:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005bb0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005bb4:	4293      	cmp	r3, r2
 8005bb6:	d103      	bne.n	8005bc0 <strncmp+0x1c>
 8005bb8:	42a0      	cmp	r0, r4
 8005bba:	d001      	beq.n	8005bc0 <strncmp+0x1c>
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d1f5      	bne.n	8005bac <strncmp+0x8>
 8005bc0:	1a98      	subs	r0, r3, r2
 8005bc2:	bd10      	pop	{r4, pc}
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	bd10      	pop	{r4, pc}

08005bc8 <__ascii_wctomb>:
 8005bc8:	b149      	cbz	r1, 8005bde <__ascii_wctomb+0x16>
 8005bca:	2aff      	cmp	r2, #255	; 0xff
 8005bcc:	bf8b      	itete	hi
 8005bce:	238a      	movhi	r3, #138	; 0x8a
 8005bd0:	700a      	strbls	r2, [r1, #0]
 8005bd2:	6003      	strhi	r3, [r0, #0]
 8005bd4:	2001      	movls	r0, #1
 8005bd6:	bf88      	it	hi
 8005bd8:	f04f 30ff 	movhi.w	r0, #4294967295
 8005bdc:	4770      	bx	lr
 8005bde:	4608      	mov	r0, r1
 8005be0:	4770      	bx	lr

08005be2 <memset>:
 8005be2:	4603      	mov	r3, r0
 8005be4:	4402      	add	r2, r0
 8005be6:	4293      	cmp	r3, r2
 8005be8:	d100      	bne.n	8005bec <memset+0xa>
 8005bea:	4770      	bx	lr
 8005bec:	f803 1b01 	strb.w	r1, [r3], #1
 8005bf0:	e7f9      	b.n	8005be6 <memset+0x4>
	...

08005bf4 <cos>:
 8005bf4:	b530      	push	{r4, r5, lr}
 8005bf6:	4a18      	ldr	r2, [pc, #96]	; (8005c58 <cos+0x64>)
 8005bf8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	b087      	sub	sp, #28
 8005c00:	dc04      	bgt.n	8005c0c <cos+0x18>
 8005c02:	2200      	movs	r2, #0
 8005c04:	2300      	movs	r3, #0
 8005c06:	f000 fc37 	bl	8006478 <__kernel_cos>
 8005c0a:	e006      	b.n	8005c1a <cos+0x26>
 8005c0c:	4a13      	ldr	r2, [pc, #76]	; (8005c5c <cos+0x68>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	dd05      	ble.n	8005c1e <cos+0x2a>
 8005c12:	4602      	mov	r2, r0
 8005c14:	460b      	mov	r3, r1
 8005c16:	f7fa faa7 	bl	8000168 <__aeabi_dsub>
 8005c1a:	b007      	add	sp, #28
 8005c1c:	bd30      	pop	{r4, r5, pc}
 8005c1e:	aa02      	add	r2, sp, #8
 8005c20:	f000 f98a 	bl	8005f38 <__ieee754_rem_pio2>
 8005c24:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c28:	f000 0403 	and.w	r4, r0, #3
 8005c2c:	2c01      	cmp	r4, #1
 8005c2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c32:	d008      	beq.n	8005c46 <cos+0x52>
 8005c34:	2c02      	cmp	r4, #2
 8005c36:	d00c      	beq.n	8005c52 <cos+0x5e>
 8005c38:	2c00      	cmp	r4, #0
 8005c3a:	d0e4      	beq.n	8005c06 <cos+0x12>
 8005c3c:	2401      	movs	r4, #1
 8005c3e:	9400      	str	r4, [sp, #0]
 8005c40:	f001 f84e 	bl	8006ce0 <__kernel_sin>
 8005c44:	e7e9      	b.n	8005c1a <cos+0x26>
 8005c46:	9400      	str	r4, [sp, #0]
 8005c48:	f001 f84a 	bl	8006ce0 <__kernel_sin>
 8005c4c:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005c50:	e7e3      	b.n	8005c1a <cos+0x26>
 8005c52:	f000 fc11 	bl	8006478 <__kernel_cos>
 8005c56:	e7f9      	b.n	8005c4c <cos+0x58>
 8005c58:	3fe921fb 	.word	0x3fe921fb
 8005c5c:	7fefffff 	.word	0x7fefffff

08005c60 <sin>:
 8005c60:	b530      	push	{r4, r5, lr}
 8005c62:	4a1a      	ldr	r2, [pc, #104]	; (8005ccc <sin+0x6c>)
 8005c64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	b087      	sub	sp, #28
 8005c6c:	dc06      	bgt.n	8005c7c <sin+0x1c>
 8005c6e:	2300      	movs	r3, #0
 8005c70:	2200      	movs	r2, #0
 8005c72:	9300      	str	r3, [sp, #0]
 8005c74:	2300      	movs	r3, #0
 8005c76:	f001 f833 	bl	8006ce0 <__kernel_sin>
 8005c7a:	e006      	b.n	8005c8a <sin+0x2a>
 8005c7c:	4a14      	ldr	r2, [pc, #80]	; (8005cd0 <sin+0x70>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	dd05      	ble.n	8005c8e <sin+0x2e>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	f7fa fa6f 	bl	8000168 <__aeabi_dsub>
 8005c8a:	b007      	add	sp, #28
 8005c8c:	bd30      	pop	{r4, r5, pc}
 8005c8e:	aa02      	add	r2, sp, #8
 8005c90:	f000 f952 	bl	8005f38 <__ieee754_rem_pio2>
 8005c94:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c98:	f000 0403 	and.w	r4, r0, #3
 8005c9c:	2c01      	cmp	r4, #1
 8005c9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ca2:	d005      	beq.n	8005cb0 <sin+0x50>
 8005ca4:	2c02      	cmp	r4, #2
 8005ca6:	d006      	beq.n	8005cb6 <sin+0x56>
 8005ca8:	b964      	cbnz	r4, 8005cc4 <sin+0x64>
 8005caa:	2401      	movs	r4, #1
 8005cac:	9400      	str	r4, [sp, #0]
 8005cae:	e7e2      	b.n	8005c76 <sin+0x16>
 8005cb0:	f000 fbe2 	bl	8006478 <__kernel_cos>
 8005cb4:	e7e9      	b.n	8005c8a <sin+0x2a>
 8005cb6:	2401      	movs	r4, #1
 8005cb8:	9400      	str	r4, [sp, #0]
 8005cba:	f001 f811 	bl	8006ce0 <__kernel_sin>
 8005cbe:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8005cc2:	e7e2      	b.n	8005c8a <sin+0x2a>
 8005cc4:	f000 fbd8 	bl	8006478 <__kernel_cos>
 8005cc8:	e7f9      	b.n	8005cbe <sin+0x5e>
 8005cca:	bf00      	nop
 8005ccc:	3fe921fb 	.word	0x3fe921fb
 8005cd0:	7fefffff 	.word	0x7fefffff

08005cd4 <atan2>:
 8005cd4:	f000 b854 	b.w	8005d80 <__ieee754_atan2>

08005cd8 <sqrt>:
 8005cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cdc:	b08b      	sub	sp, #44	; 0x2c
 8005cde:	4604      	mov	r4, r0
 8005ce0:	460d      	mov	r5, r1
 8005ce2:	f000 fb1d 	bl	8006320 <__ieee754_sqrt>
 8005ce6:	4b24      	ldr	r3, [pc, #144]	; (8005d78 <sqrt+0xa0>)
 8005ce8:	4680      	mov	r8, r0
 8005cea:	f993 a000 	ldrsb.w	sl, [r3]
 8005cee:	4689      	mov	r9, r1
 8005cf0:	f1ba 3fff 	cmp.w	sl, #4294967295
 8005cf4:	d02b      	beq.n	8005d4e <sqrt+0x76>
 8005cf6:	4622      	mov	r2, r4
 8005cf8:	462b      	mov	r3, r5
 8005cfa:	4620      	mov	r0, r4
 8005cfc:	4629      	mov	r1, r5
 8005cfe:	f7fa fe81 	bl	8000a04 <__aeabi_dcmpun>
 8005d02:	4683      	mov	fp, r0
 8005d04:	bb18      	cbnz	r0, 8005d4e <sqrt+0x76>
 8005d06:	2600      	movs	r6, #0
 8005d08:	2700      	movs	r7, #0
 8005d0a:	4632      	mov	r2, r6
 8005d0c:	463b      	mov	r3, r7
 8005d0e:	4620      	mov	r0, r4
 8005d10:	4629      	mov	r1, r5
 8005d12:	f7fa fe4f 	bl	80009b4 <__aeabi_dcmplt>
 8005d16:	b1d0      	cbz	r0, 8005d4e <sqrt+0x76>
 8005d18:	2301      	movs	r3, #1
 8005d1a:	9300      	str	r3, [sp, #0]
 8005d1c:	4b17      	ldr	r3, [pc, #92]	; (8005d7c <sqrt+0xa4>)
 8005d1e:	f8cd b020 	str.w	fp, [sp, #32]
 8005d22:	9301      	str	r3, [sp, #4]
 8005d24:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005d28:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8005d2c:	f1ba 0f00 	cmp.w	sl, #0
 8005d30:	d112      	bne.n	8005d58 <sqrt+0x80>
 8005d32:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005d36:	4668      	mov	r0, sp
 8005d38:	f001 faa6 	bl	8007288 <matherr>
 8005d3c:	b1b8      	cbz	r0, 8005d6e <sqrt+0x96>
 8005d3e:	9b08      	ldr	r3, [sp, #32]
 8005d40:	b11b      	cbz	r3, 8005d4a <sqrt+0x72>
 8005d42:	f001 fb1b 	bl	800737c <__errno>
 8005d46:	9b08      	ldr	r3, [sp, #32]
 8005d48:	6003      	str	r3, [r0, #0]
 8005d4a:	e9dd 8906 	ldrd	r8, r9, [sp, #24]
 8005d4e:	4640      	mov	r0, r8
 8005d50:	4649      	mov	r1, r9
 8005d52:	b00b      	add	sp, #44	; 0x2c
 8005d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d58:	4632      	mov	r2, r6
 8005d5a:	463b      	mov	r3, r7
 8005d5c:	4630      	mov	r0, r6
 8005d5e:	4639      	mov	r1, r7
 8005d60:	f7fa fce0 	bl	8000724 <__aeabi_ddiv>
 8005d64:	f1ba 0f02 	cmp.w	sl, #2
 8005d68:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005d6c:	d1e3      	bne.n	8005d36 <sqrt+0x5e>
 8005d6e:	f001 fb05 	bl	800737c <__errno>
 8005d72:	2321      	movs	r3, #33	; 0x21
 8005d74:	6003      	str	r3, [r0, #0]
 8005d76:	e7e2      	b.n	8005d3e <sqrt+0x66>
 8005d78:	200001e8 	.word	0x200001e8
 8005d7c:	080076e5 	.word	0x080076e5

08005d80 <__ieee754_atan2>:
 8005d80:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d84:	4256      	negs	r6, r2
 8005d86:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8005d8a:	4316      	orrs	r6, r2
 8005d8c:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8005f30 <__ieee754_atan2+0x1b0>
 8005d90:	ea4e 76d6 	orr.w	r6, lr, r6, lsr #31
 8005d94:	454e      	cmp	r6, r9
 8005d96:	4604      	mov	r4, r0
 8005d98:	460d      	mov	r5, r1
 8005d9a:	4688      	mov	r8, r1
 8005d9c:	d807      	bhi.n	8005dae <__ieee754_atan2+0x2e>
 8005d9e:	4246      	negs	r6, r0
 8005da0:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8005da4:	4306      	orrs	r6, r0
 8005da6:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 8005daa:	454e      	cmp	r6, r9
 8005dac:	d906      	bls.n	8005dbc <__ieee754_atan2+0x3c>
 8005dae:	4620      	mov	r0, r4
 8005db0:	4629      	mov	r1, r5
 8005db2:	f7fa f9db 	bl	800016c <__adddf3>
 8005db6:	4604      	mov	r4, r0
 8005db8:	460d      	mov	r5, r1
 8005dba:	e015      	b.n	8005de8 <__ieee754_atan2+0x68>
 8005dbc:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8005dc0:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8005dc4:	4316      	orrs	r6, r2
 8005dc6:	d103      	bne.n	8005dd0 <__ieee754_atan2+0x50>
 8005dc8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dcc:	f001 b840 	b.w	8006e50 <atan>
 8005dd0:	179e      	asrs	r6, r3, #30
 8005dd2:	f006 0602 	and.w	r6, r6, #2
 8005dd6:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8005dda:	ea50 0107 	orrs.w	r1, r0, r7
 8005dde:	d107      	bne.n	8005df0 <__ieee754_atan2+0x70>
 8005de0:	2e02      	cmp	r6, #2
 8005de2:	d030      	beq.n	8005e46 <__ieee754_atan2+0xc6>
 8005de4:	2e03      	cmp	r6, #3
 8005de6:	d032      	beq.n	8005e4e <__ieee754_atan2+0xce>
 8005de8:	4620      	mov	r0, r4
 8005dea:	4629      	mov	r1, r5
 8005dec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005df0:	ea52 010e 	orrs.w	r1, r2, lr
 8005df4:	d106      	bne.n	8005e04 <__ieee754_atan2+0x84>
 8005df6:	f1b8 0f00 	cmp.w	r8, #0
 8005dfa:	da71      	bge.n	8005ee0 <__ieee754_atan2+0x160>
 8005dfc:	a53a      	add	r5, pc, #232	; (adr r5, 8005ee8 <__ieee754_atan2+0x168>)
 8005dfe:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005e02:	e7f1      	b.n	8005de8 <__ieee754_atan2+0x68>
 8005e04:	45ce      	cmp	lr, r9
 8005e06:	d126      	bne.n	8005e56 <__ieee754_atan2+0xd6>
 8005e08:	4577      	cmp	r7, lr
 8005e0a:	d111      	bne.n	8005e30 <__ieee754_atan2+0xb0>
 8005e0c:	2e02      	cmp	r6, #2
 8005e0e:	d007      	beq.n	8005e20 <__ieee754_atan2+0xa0>
 8005e10:	2e03      	cmp	r6, #3
 8005e12:	d009      	beq.n	8005e28 <__ieee754_atan2+0xa8>
 8005e14:	2e01      	cmp	r6, #1
 8005e16:	d15d      	bne.n	8005ed4 <__ieee754_atan2+0x154>
 8005e18:	a535      	add	r5, pc, #212	; (adr r5, 8005ef0 <__ieee754_atan2+0x170>)
 8005e1a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005e1e:	e7e3      	b.n	8005de8 <__ieee754_atan2+0x68>
 8005e20:	a535      	add	r5, pc, #212	; (adr r5, 8005ef8 <__ieee754_atan2+0x178>)
 8005e22:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005e26:	e7df      	b.n	8005de8 <__ieee754_atan2+0x68>
 8005e28:	a535      	add	r5, pc, #212	; (adr r5, 8005f00 <__ieee754_atan2+0x180>)
 8005e2a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005e2e:	e7db      	b.n	8005de8 <__ieee754_atan2+0x68>
 8005e30:	2e02      	cmp	r6, #2
 8005e32:	d008      	beq.n	8005e46 <__ieee754_atan2+0xc6>
 8005e34:	2e03      	cmp	r6, #3
 8005e36:	d00a      	beq.n	8005e4e <__ieee754_atan2+0xce>
 8005e38:	2e01      	cmp	r6, #1
 8005e3a:	f04f 0400 	mov.w	r4, #0
 8005e3e:	d14d      	bne.n	8005edc <__ieee754_atan2+0x15c>
 8005e40:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8005e44:	e7d0      	b.n	8005de8 <__ieee754_atan2+0x68>
 8005e46:	a530      	add	r5, pc, #192	; (adr r5, 8005f08 <__ieee754_atan2+0x188>)
 8005e48:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005e4c:	e7cc      	b.n	8005de8 <__ieee754_atan2+0x68>
 8005e4e:	a530      	add	r5, pc, #192	; (adr r5, 8005f10 <__ieee754_atan2+0x190>)
 8005e50:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005e54:	e7c8      	b.n	8005de8 <__ieee754_atan2+0x68>
 8005e56:	454f      	cmp	r7, r9
 8005e58:	d0cd      	beq.n	8005df6 <__ieee754_atan2+0x76>
 8005e5a:	eba7 070e 	sub.w	r7, r7, lr
 8005e5e:	153f      	asrs	r7, r7, #20
 8005e60:	2f3c      	cmp	r7, #60	; 0x3c
 8005e62:	dc1e      	bgt.n	8005ea2 <__ieee754_atan2+0x122>
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	da01      	bge.n	8005e6c <__ieee754_atan2+0xec>
 8005e68:	373c      	adds	r7, #60	; 0x3c
 8005e6a:	db1e      	blt.n	8005eaa <__ieee754_atan2+0x12a>
 8005e6c:	4620      	mov	r0, r4
 8005e6e:	4629      	mov	r1, r5
 8005e70:	f7fa fc58 	bl	8000724 <__aeabi_ddiv>
 8005e74:	f001 f97e 	bl	8007174 <fabs>
 8005e78:	f000 ffea 	bl	8006e50 <atan>
 8005e7c:	4604      	mov	r4, r0
 8005e7e:	460d      	mov	r5, r1
 8005e80:	2e01      	cmp	r6, #1
 8005e82:	d015      	beq.n	8005eb0 <__ieee754_atan2+0x130>
 8005e84:	2e02      	cmp	r6, #2
 8005e86:	d016      	beq.n	8005eb6 <__ieee754_atan2+0x136>
 8005e88:	2e00      	cmp	r6, #0
 8005e8a:	d0ad      	beq.n	8005de8 <__ieee754_atan2+0x68>
 8005e8c:	a322      	add	r3, pc, #136	; (adr r3, 8005f18 <__ieee754_atan2+0x198>)
 8005e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e92:	4620      	mov	r0, r4
 8005e94:	4629      	mov	r1, r5
 8005e96:	f7fa f967 	bl	8000168 <__aeabi_dsub>
 8005e9a:	a31b      	add	r3, pc, #108	; (adr r3, 8005f08 <__ieee754_atan2+0x188>)
 8005e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ea0:	e015      	b.n	8005ece <__ieee754_atan2+0x14e>
 8005ea2:	a51f      	add	r5, pc, #124	; (adr r5, 8005f20 <__ieee754_atan2+0x1a0>)
 8005ea4:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005ea8:	e7ea      	b.n	8005e80 <__ieee754_atan2+0x100>
 8005eaa:	2400      	movs	r4, #0
 8005eac:	2500      	movs	r5, #0
 8005eae:	e7e7      	b.n	8005e80 <__ieee754_atan2+0x100>
 8005eb0:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8005eb4:	e798      	b.n	8005de8 <__ieee754_atan2+0x68>
 8005eb6:	a318      	add	r3, pc, #96	; (adr r3, 8005f18 <__ieee754_atan2+0x198>)
 8005eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	4629      	mov	r1, r5
 8005ec0:	f7fa f952 	bl	8000168 <__aeabi_dsub>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	460b      	mov	r3, r1
 8005ec8:	a10f      	add	r1, pc, #60	; (adr r1, 8005f08 <__ieee754_atan2+0x188>)
 8005eca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005ece:	f7fa f94b 	bl	8000168 <__aeabi_dsub>
 8005ed2:	e770      	b.n	8005db6 <__ieee754_atan2+0x36>
 8005ed4:	a514      	add	r5, pc, #80	; (adr r5, 8005f28 <__ieee754_atan2+0x1a8>)
 8005ed6:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005eda:	e785      	b.n	8005de8 <__ieee754_atan2+0x68>
 8005edc:	2500      	movs	r5, #0
 8005ede:	e783      	b.n	8005de8 <__ieee754_atan2+0x68>
 8005ee0:	a50f      	add	r5, pc, #60	; (adr r5, 8005f20 <__ieee754_atan2+0x1a0>)
 8005ee2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005ee6:	e77f      	b.n	8005de8 <__ieee754_atan2+0x68>
 8005ee8:	54442d18 	.word	0x54442d18
 8005eec:	bff921fb 	.word	0xbff921fb
 8005ef0:	54442d18 	.word	0x54442d18
 8005ef4:	bfe921fb 	.word	0xbfe921fb
 8005ef8:	7f3321d2 	.word	0x7f3321d2
 8005efc:	4002d97c 	.word	0x4002d97c
 8005f00:	7f3321d2 	.word	0x7f3321d2
 8005f04:	c002d97c 	.word	0xc002d97c
 8005f08:	54442d18 	.word	0x54442d18
 8005f0c:	400921fb 	.word	0x400921fb
 8005f10:	54442d18 	.word	0x54442d18
 8005f14:	c00921fb 	.word	0xc00921fb
 8005f18:	33145c07 	.word	0x33145c07
 8005f1c:	3ca1a626 	.word	0x3ca1a626
 8005f20:	54442d18 	.word	0x54442d18
 8005f24:	3ff921fb 	.word	0x3ff921fb
 8005f28:	54442d18 	.word	0x54442d18
 8005f2c:	3fe921fb 	.word	0x3fe921fb
 8005f30:	7ff00000 	.word	0x7ff00000
 8005f34:	00000000 	.word	0x00000000

08005f38 <__ieee754_rem_pio2>:
 8005f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f3c:	4614      	mov	r4, r2
 8005f3e:	4ac4      	ldr	r2, [pc, #784]	; (8006250 <__ieee754_rem_pio2+0x318>)
 8005f40:	f021 4a00 	bic.w	sl, r1, #2147483648	; 0x80000000
 8005f44:	4592      	cmp	sl, r2
 8005f46:	b08d      	sub	sp, #52	; 0x34
 8005f48:	468b      	mov	fp, r1
 8005f4a:	dc07      	bgt.n	8005f5c <__ieee754_rem_pio2+0x24>
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	2300      	movs	r3, #0
 8005f50:	e9c4 0100 	strd	r0, r1, [r4]
 8005f54:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005f58:	2500      	movs	r5, #0
 8005f5a:	e023      	b.n	8005fa4 <__ieee754_rem_pio2+0x6c>
 8005f5c:	4abd      	ldr	r2, [pc, #756]	; (8006254 <__ieee754_rem_pio2+0x31c>)
 8005f5e:	4592      	cmp	sl, r2
 8005f60:	dc71      	bgt.n	8006046 <__ieee754_rem_pio2+0x10e>
 8005f62:	a3ad      	add	r3, pc, #692	; (adr r3, 8006218 <__ieee754_rem_pio2+0x2e0>)
 8005f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f68:	2900      	cmp	r1, #0
 8005f6a:	4dbb      	ldr	r5, [pc, #748]	; (8006258 <__ieee754_rem_pio2+0x320>)
 8005f6c:	dd36      	ble.n	8005fdc <__ieee754_rem_pio2+0xa4>
 8005f6e:	f7fa f8fb 	bl	8000168 <__aeabi_dsub>
 8005f72:	45aa      	cmp	sl, r5
 8005f74:	4606      	mov	r6, r0
 8005f76:	460f      	mov	r7, r1
 8005f78:	d018      	beq.n	8005fac <__ieee754_rem_pio2+0x74>
 8005f7a:	a3a9      	add	r3, pc, #676	; (adr r3, 8006220 <__ieee754_rem_pio2+0x2e8>)
 8005f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f80:	f7fa f8f2 	bl	8000168 <__aeabi_dsub>
 8005f84:	4602      	mov	r2, r0
 8005f86:	460b      	mov	r3, r1
 8005f88:	4630      	mov	r0, r6
 8005f8a:	e9c4 2300 	strd	r2, r3, [r4]
 8005f8e:	4639      	mov	r1, r7
 8005f90:	f7fa f8ea 	bl	8000168 <__aeabi_dsub>
 8005f94:	a3a2      	add	r3, pc, #648	; (adr r3, 8006220 <__ieee754_rem_pio2+0x2e8>)
 8005f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9a:	f7fa f8e5 	bl	8000168 <__aeabi_dsub>
 8005f9e:	2501      	movs	r5, #1
 8005fa0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	b00d      	add	sp, #52	; 0x34
 8005fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fac:	a39e      	add	r3, pc, #632	; (adr r3, 8006228 <__ieee754_rem_pio2+0x2f0>)
 8005fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb2:	f7fa f8d9 	bl	8000168 <__aeabi_dsub>
 8005fb6:	a39e      	add	r3, pc, #632	; (adr r3, 8006230 <__ieee754_rem_pio2+0x2f8>)
 8005fb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbc:	4606      	mov	r6, r0
 8005fbe:	460f      	mov	r7, r1
 8005fc0:	f7fa f8d2 	bl	8000168 <__aeabi_dsub>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4630      	mov	r0, r6
 8005fca:	e9c4 2300 	strd	r2, r3, [r4]
 8005fce:	4639      	mov	r1, r7
 8005fd0:	f7fa f8ca 	bl	8000168 <__aeabi_dsub>
 8005fd4:	a396      	add	r3, pc, #600	; (adr r3, 8006230 <__ieee754_rem_pio2+0x2f8>)
 8005fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fda:	e7de      	b.n	8005f9a <__ieee754_rem_pio2+0x62>
 8005fdc:	f7fa f8c6 	bl	800016c <__adddf3>
 8005fe0:	45aa      	cmp	sl, r5
 8005fe2:	4606      	mov	r6, r0
 8005fe4:	460f      	mov	r7, r1
 8005fe6:	d016      	beq.n	8006016 <__ieee754_rem_pio2+0xde>
 8005fe8:	a38d      	add	r3, pc, #564	; (adr r3, 8006220 <__ieee754_rem_pio2+0x2e8>)
 8005fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fee:	f7fa f8bd 	bl	800016c <__adddf3>
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	4630      	mov	r0, r6
 8005ff8:	e9c4 2300 	strd	r2, r3, [r4]
 8005ffc:	4639      	mov	r1, r7
 8005ffe:	f7fa f8b3 	bl	8000168 <__aeabi_dsub>
 8006002:	a387      	add	r3, pc, #540	; (adr r3, 8006220 <__ieee754_rem_pio2+0x2e8>)
 8006004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006008:	f7fa f8b0 	bl	800016c <__adddf3>
 800600c:	f04f 35ff 	mov.w	r5, #4294967295
 8006010:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006014:	e7c6      	b.n	8005fa4 <__ieee754_rem_pio2+0x6c>
 8006016:	a384      	add	r3, pc, #528	; (adr r3, 8006228 <__ieee754_rem_pio2+0x2f0>)
 8006018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800601c:	f7fa f8a6 	bl	800016c <__adddf3>
 8006020:	a383      	add	r3, pc, #524	; (adr r3, 8006230 <__ieee754_rem_pio2+0x2f8>)
 8006022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006026:	4606      	mov	r6, r0
 8006028:	460f      	mov	r7, r1
 800602a:	f7fa f89f 	bl	800016c <__adddf3>
 800602e:	4602      	mov	r2, r0
 8006030:	460b      	mov	r3, r1
 8006032:	4630      	mov	r0, r6
 8006034:	e9c4 2300 	strd	r2, r3, [r4]
 8006038:	4639      	mov	r1, r7
 800603a:	f7fa f895 	bl	8000168 <__aeabi_dsub>
 800603e:	a37c      	add	r3, pc, #496	; (adr r3, 8006230 <__ieee754_rem_pio2+0x2f8>)
 8006040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006044:	e7e0      	b.n	8006008 <__ieee754_rem_pio2+0xd0>
 8006046:	4a85      	ldr	r2, [pc, #532]	; (800625c <__ieee754_rem_pio2+0x324>)
 8006048:	4592      	cmp	sl, r2
 800604a:	f300 80d6 	bgt.w	80061fa <__ieee754_rem_pio2+0x2c2>
 800604e:	f001 f891 	bl	8007174 <fabs>
 8006052:	a379      	add	r3, pc, #484	; (adr r3, 8006238 <__ieee754_rem_pio2+0x300>)
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	4606      	mov	r6, r0
 800605a:	460f      	mov	r7, r1
 800605c:	f7fa fa38 	bl	80004d0 <__aeabi_dmul>
 8006060:	2200      	movs	r2, #0
 8006062:	4b7f      	ldr	r3, [pc, #508]	; (8006260 <__ieee754_rem_pio2+0x328>)
 8006064:	f7fa f882 	bl	800016c <__adddf3>
 8006068:	f7fa fce2 	bl	8000a30 <__aeabi_d2iz>
 800606c:	4605      	mov	r5, r0
 800606e:	f7fa f9c9 	bl	8000404 <__aeabi_i2d>
 8006072:	a369      	add	r3, pc, #420	; (adr r3, 8006218 <__ieee754_rem_pio2+0x2e0>)
 8006074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006078:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800607c:	f7fa fa28 	bl	80004d0 <__aeabi_dmul>
 8006080:	4602      	mov	r2, r0
 8006082:	460b      	mov	r3, r1
 8006084:	4630      	mov	r0, r6
 8006086:	4639      	mov	r1, r7
 8006088:	f7fa f86e 	bl	8000168 <__aeabi_dsub>
 800608c:	a364      	add	r3, pc, #400	; (adr r3, 8006220 <__ieee754_rem_pio2+0x2e8>)
 800608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006092:	4606      	mov	r6, r0
 8006094:	460f      	mov	r7, r1
 8006096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800609a:	f7fa fa19 	bl	80004d0 <__aeabi_dmul>
 800609e:	2d1f      	cmp	r5, #31
 80060a0:	4680      	mov	r8, r0
 80060a2:	4689      	mov	r9, r1
 80060a4:	dc2e      	bgt.n	8006104 <__ieee754_rem_pio2+0x1cc>
 80060a6:	4b6f      	ldr	r3, [pc, #444]	; (8006264 <__ieee754_rem_pio2+0x32c>)
 80060a8:	1e6a      	subs	r2, r5, #1
 80060aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ae:	459a      	cmp	sl, r3
 80060b0:	d028      	beq.n	8006104 <__ieee754_rem_pio2+0x1cc>
 80060b2:	4642      	mov	r2, r8
 80060b4:	464b      	mov	r3, r9
 80060b6:	4630      	mov	r0, r6
 80060b8:	4639      	mov	r1, r7
 80060ba:	f7fa f855 	bl	8000168 <__aeabi_dsub>
 80060be:	e9c4 0100 	strd	r0, r1, [r4]
 80060c2:	6823      	ldr	r3, [r4, #0]
 80060c4:	f8d4 a004 	ldr.w	sl, [r4, #4]
 80060c8:	9302      	str	r3, [sp, #8]
 80060ca:	9a02      	ldr	r2, [sp, #8]
 80060cc:	4653      	mov	r3, sl
 80060ce:	4630      	mov	r0, r6
 80060d0:	4639      	mov	r1, r7
 80060d2:	f7fa f849 	bl	8000168 <__aeabi_dsub>
 80060d6:	4642      	mov	r2, r8
 80060d8:	464b      	mov	r3, r9
 80060da:	f7fa f845 	bl	8000168 <__aeabi_dsub>
 80060de:	4602      	mov	r2, r0
 80060e0:	460b      	mov	r3, r1
 80060e2:	f1bb 0f00 	cmp.w	fp, #0
 80060e6:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80060ea:	f6bf af5b 	bge.w	8005fa4 <__ieee754_rem_pio2+0x6c>
 80060ee:	9b02      	ldr	r3, [sp, #8]
 80060f0:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 80060f4:	6023      	str	r3, [r4, #0]
 80060f6:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 80060fa:	6063      	str	r3, [r4, #4]
 80060fc:	60a0      	str	r0, [r4, #8]
 80060fe:	60e1      	str	r1, [r4, #12]
 8006100:	426d      	negs	r5, r5
 8006102:	e74f      	b.n	8005fa4 <__ieee754_rem_pio2+0x6c>
 8006104:	4642      	mov	r2, r8
 8006106:	464b      	mov	r3, r9
 8006108:	4630      	mov	r0, r6
 800610a:	4639      	mov	r1, r7
 800610c:	f7fa f82c 	bl	8000168 <__aeabi_dsub>
 8006110:	460b      	mov	r3, r1
 8006112:	4602      	mov	r2, r0
 8006114:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8006118:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800611c:	ebaa 0101 	sub.w	r1, sl, r1
 8006120:	2910      	cmp	r1, #16
 8006122:	e9c4 2300 	strd	r2, r3, [r4]
 8006126:	ddcc      	ble.n	80060c2 <__ieee754_rem_pio2+0x18a>
 8006128:	a33f      	add	r3, pc, #252	; (adr r3, 8006228 <__ieee754_rem_pio2+0x2f0>)
 800612a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800612e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006132:	f7fa f9cd 	bl	80004d0 <__aeabi_dmul>
 8006136:	4680      	mov	r8, r0
 8006138:	4689      	mov	r9, r1
 800613a:	4602      	mov	r2, r0
 800613c:	460b      	mov	r3, r1
 800613e:	4630      	mov	r0, r6
 8006140:	4639      	mov	r1, r7
 8006142:	f7fa f811 	bl	8000168 <__aeabi_dsub>
 8006146:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	4630      	mov	r0, r6
 8006150:	4639      	mov	r1, r7
 8006152:	f7fa f809 	bl	8000168 <__aeabi_dsub>
 8006156:	4642      	mov	r2, r8
 8006158:	464b      	mov	r3, r9
 800615a:	f7fa f805 	bl	8000168 <__aeabi_dsub>
 800615e:	a334      	add	r3, pc, #208	; (adr r3, 8006230 <__ieee754_rem_pio2+0x2f8>)
 8006160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006164:	4606      	mov	r6, r0
 8006166:	460f      	mov	r7, r1
 8006168:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800616c:	f7fa f9b0 	bl	80004d0 <__aeabi_dmul>
 8006170:	4632      	mov	r2, r6
 8006172:	463b      	mov	r3, r7
 8006174:	f7f9 fff8 	bl	8000168 <__aeabi_dsub>
 8006178:	4602      	mov	r2, r0
 800617a:	460b      	mov	r3, r1
 800617c:	4680      	mov	r8, r0
 800617e:	4689      	mov	r9, r1
 8006180:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006184:	f7f9 fff0 	bl	8000168 <__aeabi_dsub>
 8006188:	460b      	mov	r3, r1
 800618a:	4602      	mov	r2, r0
 800618c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006190:	ebaa 0a01 	sub.w	sl, sl, r1
 8006194:	f1ba 0f31 	cmp.w	sl, #49	; 0x31
 8006198:	e9c4 2300 	strd	r2, r3, [r4]
 800619c:	dd2a      	ble.n	80061f4 <__ieee754_rem_pio2+0x2bc>
 800619e:	a328      	add	r3, pc, #160	; (adr r3, 8006240 <__ieee754_rem_pio2+0x308>)
 80061a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061a8:	f7fa f992 	bl	80004d0 <__aeabi_dmul>
 80061ac:	4680      	mov	r8, r0
 80061ae:	4689      	mov	r9, r1
 80061b0:	4602      	mov	r2, r0
 80061b2:	460b      	mov	r3, r1
 80061b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061b8:	f7f9 ffd6 	bl	8000168 <__aeabi_dsub>
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	4606      	mov	r6, r0
 80061c2:	460f      	mov	r7, r1
 80061c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061c8:	f7f9 ffce 	bl	8000168 <__aeabi_dsub>
 80061cc:	4642      	mov	r2, r8
 80061ce:	464b      	mov	r3, r9
 80061d0:	f7f9 ffca 	bl	8000168 <__aeabi_dsub>
 80061d4:	a31c      	add	r3, pc, #112	; (adr r3, 8006248 <__ieee754_rem_pio2+0x310>)
 80061d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061da:	4680      	mov	r8, r0
 80061dc:	4689      	mov	r9, r1
 80061de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80061e2:	f7fa f975 	bl	80004d0 <__aeabi_dmul>
 80061e6:	4642      	mov	r2, r8
 80061e8:	464b      	mov	r3, r9
 80061ea:	f7f9 ffbd 	bl	8000168 <__aeabi_dsub>
 80061ee:	4680      	mov	r8, r0
 80061f0:	4689      	mov	r9, r1
 80061f2:	e75e      	b.n	80060b2 <__ieee754_rem_pio2+0x17a>
 80061f4:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
 80061f8:	e763      	b.n	80060c2 <__ieee754_rem_pio2+0x18a>
 80061fa:	4a1b      	ldr	r2, [pc, #108]	; (8006268 <__ieee754_rem_pio2+0x330>)
 80061fc:	4592      	cmp	sl, r2
 80061fe:	dd35      	ble.n	800626c <__ieee754_rem_pio2+0x334>
 8006200:	4602      	mov	r2, r0
 8006202:	460b      	mov	r3, r1
 8006204:	f7f9 ffb0 	bl	8000168 <__aeabi_dsub>
 8006208:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800620c:	e9c4 0100 	strd	r0, r1, [r4]
 8006210:	e6a2      	b.n	8005f58 <__ieee754_rem_pio2+0x20>
 8006212:	bf00      	nop
 8006214:	f3af 8000 	nop.w
 8006218:	54400000 	.word	0x54400000
 800621c:	3ff921fb 	.word	0x3ff921fb
 8006220:	1a626331 	.word	0x1a626331
 8006224:	3dd0b461 	.word	0x3dd0b461
 8006228:	1a600000 	.word	0x1a600000
 800622c:	3dd0b461 	.word	0x3dd0b461
 8006230:	2e037073 	.word	0x2e037073
 8006234:	3ba3198a 	.word	0x3ba3198a
 8006238:	6dc9c883 	.word	0x6dc9c883
 800623c:	3fe45f30 	.word	0x3fe45f30
 8006240:	2e000000 	.word	0x2e000000
 8006244:	3ba3198a 	.word	0x3ba3198a
 8006248:	252049c1 	.word	0x252049c1
 800624c:	397b839a 	.word	0x397b839a
 8006250:	3fe921fb 	.word	0x3fe921fb
 8006254:	4002d97b 	.word	0x4002d97b
 8006258:	3ff921fb 	.word	0x3ff921fb
 800625c:	413921fb 	.word	0x413921fb
 8006260:	3fe00000 	.word	0x3fe00000
 8006264:	080076ec 	.word	0x080076ec
 8006268:	7fefffff 	.word	0x7fefffff
 800626c:	ea4f 552a 	mov.w	r5, sl, asr #20
 8006270:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8006274:	ebaa 5105 	sub.w	r1, sl, r5, lsl #20
 8006278:	460f      	mov	r7, r1
 800627a:	4606      	mov	r6, r0
 800627c:	f7fa fbd8 	bl	8000a30 <__aeabi_d2iz>
 8006280:	f7fa f8c0 	bl	8000404 <__aeabi_i2d>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	4630      	mov	r0, r6
 800628a:	4639      	mov	r1, r7
 800628c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006290:	f7f9 ff6a 	bl	8000168 <__aeabi_dsub>
 8006294:	2200      	movs	r2, #0
 8006296:	4b20      	ldr	r3, [pc, #128]	; (8006318 <__ieee754_rem_pio2+0x3e0>)
 8006298:	f7fa f91a 	bl	80004d0 <__aeabi_dmul>
 800629c:	460f      	mov	r7, r1
 800629e:	4606      	mov	r6, r0
 80062a0:	f7fa fbc6 	bl	8000a30 <__aeabi_d2iz>
 80062a4:	f7fa f8ae 	bl	8000404 <__aeabi_i2d>
 80062a8:	4602      	mov	r2, r0
 80062aa:	460b      	mov	r3, r1
 80062ac:	4630      	mov	r0, r6
 80062ae:	4639      	mov	r1, r7
 80062b0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80062b4:	f7f9 ff58 	bl	8000168 <__aeabi_dsub>
 80062b8:	2200      	movs	r2, #0
 80062ba:	4b17      	ldr	r3, [pc, #92]	; (8006318 <__ieee754_rem_pio2+0x3e0>)
 80062bc:	f7fa f908 	bl	80004d0 <__aeabi_dmul>
 80062c0:	f04f 0803 	mov.w	r8, #3
 80062c4:	2600      	movs	r6, #0
 80062c6:	2700      	movs	r7, #0
 80062c8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80062cc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80062d0:	4632      	mov	r2, r6
 80062d2:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80062d6:	463b      	mov	r3, r7
 80062d8:	f108 3aff 	add.w	sl, r8, #4294967295
 80062dc:	f7fa fb60 	bl	80009a0 <__aeabi_dcmpeq>
 80062e0:	b9b8      	cbnz	r0, 8006312 <__ieee754_rem_pio2+0x3da>
 80062e2:	4b0e      	ldr	r3, [pc, #56]	; (800631c <__ieee754_rem_pio2+0x3e4>)
 80062e4:	462a      	mov	r2, r5
 80062e6:	9301      	str	r3, [sp, #4]
 80062e8:	2302      	movs	r3, #2
 80062ea:	4621      	mov	r1, r4
 80062ec:	9300      	str	r3, [sp, #0]
 80062ee:	a806      	add	r0, sp, #24
 80062f0:	4643      	mov	r3, r8
 80062f2:	f000 f99f 	bl	8006634 <__kernel_rem_pio2>
 80062f6:	f1bb 0f00 	cmp.w	fp, #0
 80062fa:	4605      	mov	r5, r0
 80062fc:	f6bf ae52 	bge.w	8005fa4 <__ieee754_rem_pio2+0x6c>
 8006300:	6863      	ldr	r3, [r4, #4]
 8006302:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006306:	6063      	str	r3, [r4, #4]
 8006308:	68e3      	ldr	r3, [r4, #12]
 800630a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800630e:	60e3      	str	r3, [r4, #12]
 8006310:	e6f6      	b.n	8006100 <__ieee754_rem_pio2+0x1c8>
 8006312:	46d0      	mov	r8, sl
 8006314:	e7dc      	b.n	80062d0 <__ieee754_rem_pio2+0x398>
 8006316:	bf00      	nop
 8006318:	41700000 	.word	0x41700000
 800631c:	0800776c 	.word	0x0800776c

08006320 <__ieee754_sqrt>:
 8006320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006324:	f8df e14c 	ldr.w	lr, [pc, #332]	; 8006474 <__ieee754_sqrt+0x154>
 8006328:	4606      	mov	r6, r0
 800632a:	ea3e 0e01 	bics.w	lr, lr, r1
 800632e:	460d      	mov	r5, r1
 8006330:	4607      	mov	r7, r0
 8006332:	460a      	mov	r2, r1
 8006334:	460c      	mov	r4, r1
 8006336:	4603      	mov	r3, r0
 8006338:	d10f      	bne.n	800635a <__ieee754_sqrt+0x3a>
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	f7fa f8c7 	bl	80004d0 <__aeabi_dmul>
 8006342:	4602      	mov	r2, r0
 8006344:	460b      	mov	r3, r1
 8006346:	4630      	mov	r0, r6
 8006348:	4629      	mov	r1, r5
 800634a:	f7f9 ff0f 	bl	800016c <__adddf3>
 800634e:	4606      	mov	r6, r0
 8006350:	460d      	mov	r5, r1
 8006352:	4630      	mov	r0, r6
 8006354:	4629      	mov	r1, r5
 8006356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800635a:	2900      	cmp	r1, #0
 800635c:	dc0e      	bgt.n	800637c <__ieee754_sqrt+0x5c>
 800635e:	f021 4e00 	bic.w	lr, r1, #2147483648	; 0x80000000
 8006362:	ea5e 0707 	orrs.w	r7, lr, r7
 8006366:	d0f4      	beq.n	8006352 <__ieee754_sqrt+0x32>
 8006368:	b141      	cbz	r1, 800637c <__ieee754_sqrt+0x5c>
 800636a:	4602      	mov	r2, r0
 800636c:	460b      	mov	r3, r1
 800636e:	f7f9 fefb 	bl	8000168 <__aeabi_dsub>
 8006372:	4602      	mov	r2, r0
 8006374:	460b      	mov	r3, r1
 8006376:	f7fa f9d5 	bl	8000724 <__aeabi_ddiv>
 800637a:	e7e8      	b.n	800634e <__ieee754_sqrt+0x2e>
 800637c:	1512      	asrs	r2, r2, #20
 800637e:	d10c      	bne.n	800639a <__ieee754_sqrt+0x7a>
 8006380:	2c00      	cmp	r4, #0
 8006382:	d06e      	beq.n	8006462 <__ieee754_sqrt+0x142>
 8006384:	2100      	movs	r1, #0
 8006386:	02e6      	lsls	r6, r4, #11
 8006388:	d56f      	bpl.n	800646a <__ieee754_sqrt+0x14a>
 800638a:	1e48      	subs	r0, r1, #1
 800638c:	1a12      	subs	r2, r2, r0
 800638e:	f1c1 0020 	rsb	r0, r1, #32
 8006392:	fa23 f000 	lsr.w	r0, r3, r0
 8006396:	4304      	orrs	r4, r0
 8006398:	408b      	lsls	r3, r1
 800639a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800639e:	07d5      	lsls	r5, r2, #31
 80063a0:	f04f 0500 	mov.w	r5, #0
 80063a4:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80063a8:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
 80063ac:	bf42      	ittt	mi
 80063ae:	0064      	lslmi	r4, r4, #1
 80063b0:	eb04 74d3 	addmi.w	r4, r4, r3, lsr #31
 80063b4:	005b      	lslmi	r3, r3, #1
 80063b6:	eb04 71d3 	add.w	r1, r4, r3, lsr #31
 80063ba:	1050      	asrs	r0, r2, #1
 80063bc:	4421      	add	r1, r4
 80063be:	2216      	movs	r2, #22
 80063c0:	462c      	mov	r4, r5
 80063c2:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80063c6:	005b      	lsls	r3, r3, #1
 80063c8:	19a7      	adds	r7, r4, r6
 80063ca:	428f      	cmp	r7, r1
 80063cc:	bfde      	ittt	le
 80063ce:	1bc9      	suble	r1, r1, r7
 80063d0:	19bc      	addle	r4, r7, r6
 80063d2:	19ad      	addle	r5, r5, r6
 80063d4:	0049      	lsls	r1, r1, #1
 80063d6:	3a01      	subs	r2, #1
 80063d8:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 80063dc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80063e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80063e4:	d1f0      	bne.n	80063c8 <__ieee754_sqrt+0xa8>
 80063e6:	f04f 0e20 	mov.w	lr, #32
 80063ea:	4694      	mov	ip, r2
 80063ec:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80063f0:	42a1      	cmp	r1, r4
 80063f2:	eb06 070c 	add.w	r7, r6, ip
 80063f6:	dc02      	bgt.n	80063fe <__ieee754_sqrt+0xde>
 80063f8:	d112      	bne.n	8006420 <__ieee754_sqrt+0x100>
 80063fa:	429f      	cmp	r7, r3
 80063fc:	d810      	bhi.n	8006420 <__ieee754_sqrt+0x100>
 80063fe:	2f00      	cmp	r7, #0
 8006400:	eb07 0c06 	add.w	ip, r7, r6
 8006404:	da34      	bge.n	8006470 <__ieee754_sqrt+0x150>
 8006406:	f1bc 0f00 	cmp.w	ip, #0
 800640a:	db31      	blt.n	8006470 <__ieee754_sqrt+0x150>
 800640c:	f104 0801 	add.w	r8, r4, #1
 8006410:	1b09      	subs	r1, r1, r4
 8006412:	4644      	mov	r4, r8
 8006414:	429f      	cmp	r7, r3
 8006416:	bf88      	it	hi
 8006418:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800641c:	1bdb      	subs	r3, r3, r7
 800641e:	4432      	add	r2, r6
 8006420:	eb01 77d3 	add.w	r7, r1, r3, lsr #31
 8006424:	f1be 0e01 	subs.w	lr, lr, #1
 8006428:	4439      	add	r1, r7
 800642a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800642e:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006432:	d1dd      	bne.n	80063f0 <__ieee754_sqrt+0xd0>
 8006434:	430b      	orrs	r3, r1
 8006436:	d006      	beq.n	8006446 <__ieee754_sqrt+0x126>
 8006438:	1c54      	adds	r4, r2, #1
 800643a:	bf0b      	itete	eq
 800643c:	4672      	moveq	r2, lr
 800643e:	3201      	addne	r2, #1
 8006440:	3501      	addeq	r5, #1
 8006442:	f022 0201 	bicne.w	r2, r2, #1
 8006446:	106b      	asrs	r3, r5, #1
 8006448:	0852      	lsrs	r2, r2, #1
 800644a:	07e9      	lsls	r1, r5, #31
 800644c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006450:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006454:	bf48      	it	mi
 8006456:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800645a:	eb03 5500 	add.w	r5, r3, r0, lsl #20
 800645e:	4616      	mov	r6, r2
 8006460:	e777      	b.n	8006352 <__ieee754_sqrt+0x32>
 8006462:	0adc      	lsrs	r4, r3, #11
 8006464:	3a15      	subs	r2, #21
 8006466:	055b      	lsls	r3, r3, #21
 8006468:	e78a      	b.n	8006380 <__ieee754_sqrt+0x60>
 800646a:	0064      	lsls	r4, r4, #1
 800646c:	3101      	adds	r1, #1
 800646e:	e78a      	b.n	8006386 <__ieee754_sqrt+0x66>
 8006470:	46a0      	mov	r8, r4
 8006472:	e7cd      	b.n	8006410 <__ieee754_sqrt+0xf0>
 8006474:	7ff00000 	.word	0x7ff00000

08006478 <__kernel_cos>:
 8006478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800647c:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006480:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8006484:	b085      	sub	sp, #20
 8006486:	4605      	mov	r5, r0
 8006488:	460c      	mov	r4, r1
 800648a:	4692      	mov	sl, r2
 800648c:	469b      	mov	fp, r3
 800648e:	da04      	bge.n	800649a <__kernel_cos+0x22>
 8006490:	f7fa face 	bl	8000a30 <__aeabi_d2iz>
 8006494:	2800      	cmp	r0, #0
 8006496:	f000 80a8 	beq.w	80065ea <__kernel_cos+0x172>
 800649a:	462a      	mov	r2, r5
 800649c:	4623      	mov	r3, r4
 800649e:	4628      	mov	r0, r5
 80064a0:	4621      	mov	r1, r4
 80064a2:	f7fa f815 	bl	80004d0 <__aeabi_dmul>
 80064a6:	a352      	add	r3, pc, #328	; (adr r3, 80065f0 <__kernel_cos+0x178>)
 80064a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ac:	4680      	mov	r8, r0
 80064ae:	4689      	mov	r9, r1
 80064b0:	f7fa f80e 	bl	80004d0 <__aeabi_dmul>
 80064b4:	a350      	add	r3, pc, #320	; (adr r3, 80065f8 <__kernel_cos+0x180>)
 80064b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ba:	f7f9 fe57 	bl	800016c <__adddf3>
 80064be:	4642      	mov	r2, r8
 80064c0:	464b      	mov	r3, r9
 80064c2:	f7fa f805 	bl	80004d0 <__aeabi_dmul>
 80064c6:	a34e      	add	r3, pc, #312	; (adr r3, 8006600 <__kernel_cos+0x188>)
 80064c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064cc:	f7f9 fe4c 	bl	8000168 <__aeabi_dsub>
 80064d0:	4642      	mov	r2, r8
 80064d2:	464b      	mov	r3, r9
 80064d4:	f7f9 fffc 	bl	80004d0 <__aeabi_dmul>
 80064d8:	a34b      	add	r3, pc, #300	; (adr r3, 8006608 <__kernel_cos+0x190>)
 80064da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064de:	f7f9 fe45 	bl	800016c <__adddf3>
 80064e2:	4642      	mov	r2, r8
 80064e4:	464b      	mov	r3, r9
 80064e6:	f7f9 fff3 	bl	80004d0 <__aeabi_dmul>
 80064ea:	a349      	add	r3, pc, #292	; (adr r3, 8006610 <__kernel_cos+0x198>)
 80064ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064f0:	f7f9 fe3a 	bl	8000168 <__aeabi_dsub>
 80064f4:	4642      	mov	r2, r8
 80064f6:	464b      	mov	r3, r9
 80064f8:	f7f9 ffea 	bl	80004d0 <__aeabi_dmul>
 80064fc:	a346      	add	r3, pc, #280	; (adr r3, 8006618 <__kernel_cos+0x1a0>)
 80064fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006502:	f7f9 fe33 	bl	800016c <__adddf3>
 8006506:	464b      	mov	r3, r9
 8006508:	4642      	mov	r2, r8
 800650a:	f7f9 ffe1 	bl	80004d0 <__aeabi_dmul>
 800650e:	4b44      	ldr	r3, [pc, #272]	; (8006620 <__kernel_cos+0x1a8>)
 8006510:	e9cd 0100 	strd	r0, r1, [sp]
 8006514:	429f      	cmp	r7, r3
 8006516:	dc2a      	bgt.n	800656e <__kernel_cos+0xf6>
 8006518:	2200      	movs	r2, #0
 800651a:	4b42      	ldr	r3, [pc, #264]	; (8006624 <__kernel_cos+0x1ac>)
 800651c:	4640      	mov	r0, r8
 800651e:	4649      	mov	r1, r9
 8006520:	f7f9 ffd6 	bl	80004d0 <__aeabi_dmul>
 8006524:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006528:	4606      	mov	r6, r0
 800652a:	460f      	mov	r7, r1
 800652c:	4640      	mov	r0, r8
 800652e:	4649      	mov	r1, r9
 8006530:	f7f9 ffce 	bl	80004d0 <__aeabi_dmul>
 8006534:	4652      	mov	r2, sl
 8006536:	4680      	mov	r8, r0
 8006538:	4689      	mov	r9, r1
 800653a:	465b      	mov	r3, fp
 800653c:	4628      	mov	r0, r5
 800653e:	4621      	mov	r1, r4
 8006540:	f7f9 ffc6 	bl	80004d0 <__aeabi_dmul>
 8006544:	4602      	mov	r2, r0
 8006546:	460b      	mov	r3, r1
 8006548:	4640      	mov	r0, r8
 800654a:	4649      	mov	r1, r9
 800654c:	f7f9 fe0c 	bl	8000168 <__aeabi_dsub>
 8006550:	4602      	mov	r2, r0
 8006552:	460b      	mov	r3, r1
 8006554:	4630      	mov	r0, r6
 8006556:	4639      	mov	r1, r7
 8006558:	f7f9 fe06 	bl	8000168 <__aeabi_dsub>
 800655c:	4602      	mov	r2, r0
 800655e:	2000      	movs	r0, #0
 8006560:	460b      	mov	r3, r1
 8006562:	4931      	ldr	r1, [pc, #196]	; (8006628 <__kernel_cos+0x1b0>)
 8006564:	f7f9 fe00 	bl	8000168 <__aeabi_dsub>
 8006568:	b005      	add	sp, #20
 800656a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800656e:	4b2f      	ldr	r3, [pc, #188]	; (800662c <__kernel_cos+0x1b4>)
 8006570:	2000      	movs	r0, #0
 8006572:	429f      	cmp	r7, r3
 8006574:	bfdf      	itttt	le
 8006576:	2200      	movle	r2, #0
 8006578:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 800657c:	4616      	movle	r6, r2
 800657e:	461f      	movle	r7, r3
 8006580:	bfc4      	itt	gt
 8006582:	2600      	movgt	r6, #0
 8006584:	4f2a      	ldrgt	r7, [pc, #168]	; (8006630 <__kernel_cos+0x1b8>)
 8006586:	4632      	mov	r2, r6
 8006588:	463b      	mov	r3, r7
 800658a:	4927      	ldr	r1, [pc, #156]	; (8006628 <__kernel_cos+0x1b0>)
 800658c:	f7f9 fdec 	bl	8000168 <__aeabi_dsub>
 8006590:	2200      	movs	r2, #0
 8006592:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006596:	4b23      	ldr	r3, [pc, #140]	; (8006624 <__kernel_cos+0x1ac>)
 8006598:	4640      	mov	r0, r8
 800659a:	4649      	mov	r1, r9
 800659c:	f7f9 ff98 	bl	80004d0 <__aeabi_dmul>
 80065a0:	4632      	mov	r2, r6
 80065a2:	463b      	mov	r3, r7
 80065a4:	f7f9 fde0 	bl	8000168 <__aeabi_dsub>
 80065a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065ac:	4606      	mov	r6, r0
 80065ae:	460f      	mov	r7, r1
 80065b0:	4640      	mov	r0, r8
 80065b2:	4649      	mov	r1, r9
 80065b4:	f7f9 ff8c 	bl	80004d0 <__aeabi_dmul>
 80065b8:	4652      	mov	r2, sl
 80065ba:	4680      	mov	r8, r0
 80065bc:	4689      	mov	r9, r1
 80065be:	465b      	mov	r3, fp
 80065c0:	4628      	mov	r0, r5
 80065c2:	4621      	mov	r1, r4
 80065c4:	f7f9 ff84 	bl	80004d0 <__aeabi_dmul>
 80065c8:	4602      	mov	r2, r0
 80065ca:	460b      	mov	r3, r1
 80065cc:	4640      	mov	r0, r8
 80065ce:	4649      	mov	r1, r9
 80065d0:	f7f9 fdca 	bl	8000168 <__aeabi_dsub>
 80065d4:	4602      	mov	r2, r0
 80065d6:	460b      	mov	r3, r1
 80065d8:	4630      	mov	r0, r6
 80065da:	4639      	mov	r1, r7
 80065dc:	f7f9 fdc4 	bl	8000168 <__aeabi_dsub>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80065e8:	e7bc      	b.n	8006564 <__kernel_cos+0xec>
 80065ea:	2000      	movs	r0, #0
 80065ec:	490e      	ldr	r1, [pc, #56]	; (8006628 <__kernel_cos+0x1b0>)
 80065ee:	e7bb      	b.n	8006568 <__kernel_cos+0xf0>
 80065f0:	be8838d4 	.word	0xbe8838d4
 80065f4:	bda8fae9 	.word	0xbda8fae9
 80065f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80065fc:	3e21ee9e 	.word	0x3e21ee9e
 8006600:	809c52ad 	.word	0x809c52ad
 8006604:	3e927e4f 	.word	0x3e927e4f
 8006608:	19cb1590 	.word	0x19cb1590
 800660c:	3efa01a0 	.word	0x3efa01a0
 8006610:	16c15177 	.word	0x16c15177
 8006614:	3f56c16c 	.word	0x3f56c16c
 8006618:	5555554c 	.word	0x5555554c
 800661c:	3fa55555 	.word	0x3fa55555
 8006620:	3fd33332 	.word	0x3fd33332
 8006624:	3fe00000 	.word	0x3fe00000
 8006628:	3ff00000 	.word	0x3ff00000
 800662c:	3fe90000 	.word	0x3fe90000
 8006630:	3fd20000 	.word	0x3fd20000

08006634 <__kernel_rem_pio2>:
 8006634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006638:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800663c:	9306      	str	r3, [sp, #24]
 800663e:	9101      	str	r1, [sp, #4]
 8006640:	4bc0      	ldr	r3, [pc, #768]	; (8006944 <__kernel_rem_pio2+0x310>)
 8006642:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8006644:	1ed4      	subs	r4, r2, #3
 8006646:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800664a:	2500      	movs	r5, #0
 800664c:	9302      	str	r3, [sp, #8]
 800664e:	9b06      	ldr	r3, [sp, #24]
 8006650:	900a      	str	r0, [sp, #40]	; 0x28
 8006652:	3b01      	subs	r3, #1
 8006654:	9308      	str	r3, [sp, #32]
 8006656:	2318      	movs	r3, #24
 8006658:	fb94 f4f3 	sdiv	r4, r4, r3
 800665c:	f06f 0317 	mvn.w	r3, #23
 8006660:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8006664:	fb04 3303 	mla	r3, r4, r3, r3
 8006668:	eb03 0a02 	add.w	sl, r3, r2
 800666c:	9a08      	ldr	r2, [sp, #32]
 800666e:	9b02      	ldr	r3, [sp, #8]
 8006670:	1aa7      	subs	r7, r4, r2
 8006672:	eb03 0802 	add.w	r8, r3, r2
 8006676:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006678:	2200      	movs	r2, #0
 800667a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800667e:	2300      	movs	r3, #0
 8006680:	ae20      	add	r6, sp, #128	; 0x80
 8006682:	4545      	cmp	r5, r8
 8006684:	dd14      	ble.n	80066b0 <__kernel_rem_pio2+0x7c>
 8006686:	2600      	movs	r6, #0
 8006688:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800668c:	9b02      	ldr	r3, [sp, #8]
 800668e:	429e      	cmp	r6, r3
 8006690:	dc39      	bgt.n	8006706 <__kernel_rem_pio2+0xd2>
 8006692:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006694:	f04f 0800 	mov.w	r8, #0
 8006698:	3b08      	subs	r3, #8
 800669a:	9304      	str	r3, [sp, #16]
 800669c:	9b06      	ldr	r3, [sp, #24]
 800669e:	f04f 0900 	mov.w	r9, #0
 80066a2:	199d      	adds	r5, r3, r6
 80066a4:	ab22      	add	r3, sp, #136	; 0x88
 80066a6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80066aa:	9309      	str	r3, [sp, #36]	; 0x24
 80066ac:	2700      	movs	r7, #0
 80066ae:	e023      	b.n	80066f8 <__kernel_rem_pio2+0xc4>
 80066b0:	42ef      	cmn	r7, r5
 80066b2:	d40b      	bmi.n	80066cc <__kernel_rem_pio2+0x98>
 80066b4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80066b8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80066bc:	f7f9 fea2 	bl	8000404 <__aeabi_i2d>
 80066c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066c4:	e9e6 0102 	strd	r0, r1, [r6, #8]!
 80066c8:	3501      	adds	r5, #1
 80066ca:	e7da      	b.n	8006682 <__kernel_rem_pio2+0x4e>
 80066cc:	4610      	mov	r0, r2
 80066ce:	4619      	mov	r1, r3
 80066d0:	e7f8      	b.n	80066c4 <__kernel_rem_pio2+0x90>
 80066d2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066d4:	9d04      	ldr	r5, [sp, #16]
 80066d6:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80066da:	9109      	str	r1, [sp, #36]	; 0x24
 80066dc:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 80066e0:	9504      	str	r5, [sp, #16]
 80066e2:	f7f9 fef5 	bl	80004d0 <__aeabi_dmul>
 80066e6:	4602      	mov	r2, r0
 80066e8:	460b      	mov	r3, r1
 80066ea:	4640      	mov	r0, r8
 80066ec:	4649      	mov	r1, r9
 80066ee:	f7f9 fd3d 	bl	800016c <__adddf3>
 80066f2:	4680      	mov	r8, r0
 80066f4:	4689      	mov	r9, r1
 80066f6:	3701      	adds	r7, #1
 80066f8:	9b08      	ldr	r3, [sp, #32]
 80066fa:	429f      	cmp	r7, r3
 80066fc:	dde9      	ble.n	80066d2 <__kernel_rem_pio2+0x9e>
 80066fe:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8006702:	3601      	adds	r6, #1
 8006704:	e7c2      	b.n	800668c <__kernel_rem_pio2+0x58>
 8006706:	9b02      	ldr	r3, [sp, #8]
 8006708:	aa0e      	add	r2, sp, #56	; 0x38
 800670a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800670e:	930d      	str	r3, [sp, #52]	; 0x34
 8006710:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8006712:	9f02      	ldr	r7, [sp, #8]
 8006714:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006718:	930c      	str	r3, [sp, #48]	; 0x30
 800671a:	2600      	movs	r6, #0
 800671c:	ab9a      	add	r3, sp, #616	; 0x268
 800671e:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8006722:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006726:	f10b 3bff 	add.w	fp, fp, #4294967295
 800672a:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 800672e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006732:	9309      	str	r3, [sp, #36]	; 0x24
 8006734:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006736:	ab9a      	add	r3, sp, #616	; 0x268
 8006738:	4413      	add	r3, r2
 800673a:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 800673e:	1bbb      	subs	r3, r7, r6
 8006740:	2b00      	cmp	r3, #0
 8006742:	dc70      	bgt.n	8006826 <__kernel_rem_pio2+0x1f2>
 8006744:	4652      	mov	r2, sl
 8006746:	4640      	mov	r0, r8
 8006748:	4649      	mov	r1, r9
 800674a:	f000 fda1 	bl	8007290 <scalbn>
 800674e:	2200      	movs	r2, #0
 8006750:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8006754:	4604      	mov	r4, r0
 8006756:	460d      	mov	r5, r1
 8006758:	f7f9 feba 	bl	80004d0 <__aeabi_dmul>
 800675c:	f000 fd10 	bl	8007180 <floor>
 8006760:	2200      	movs	r2, #0
 8006762:	4b79      	ldr	r3, [pc, #484]	; (8006948 <__kernel_rem_pio2+0x314>)
 8006764:	f7f9 feb4 	bl	80004d0 <__aeabi_dmul>
 8006768:	4602      	mov	r2, r0
 800676a:	460b      	mov	r3, r1
 800676c:	4620      	mov	r0, r4
 800676e:	4629      	mov	r1, r5
 8006770:	f7f9 fcfa 	bl	8000168 <__aeabi_dsub>
 8006774:	460d      	mov	r5, r1
 8006776:	4604      	mov	r4, r0
 8006778:	f7fa f95a 	bl	8000a30 <__aeabi_d2iz>
 800677c:	9004      	str	r0, [sp, #16]
 800677e:	f7f9 fe41 	bl	8000404 <__aeabi_i2d>
 8006782:	4602      	mov	r2, r0
 8006784:	460b      	mov	r3, r1
 8006786:	4620      	mov	r0, r4
 8006788:	4629      	mov	r1, r5
 800678a:	f7f9 fced 	bl	8000168 <__aeabi_dsub>
 800678e:	f1ba 0f00 	cmp.w	sl, #0
 8006792:	4680      	mov	r8, r0
 8006794:	4689      	mov	r9, r1
 8006796:	dd6b      	ble.n	8006870 <__kernel_rem_pio2+0x23c>
 8006798:	1e7a      	subs	r2, r7, #1
 800679a:	ab0e      	add	r3, sp, #56	; 0x38
 800679c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80067a0:	f1ca 0118 	rsb	r1, sl, #24
 80067a4:	9c04      	ldr	r4, [sp, #16]
 80067a6:	fa40 f301 	asr.w	r3, r0, r1
 80067aa:	441c      	add	r4, r3
 80067ac:	408b      	lsls	r3, r1
 80067ae:	1ac0      	subs	r0, r0, r3
 80067b0:	ab0e      	add	r3, sp, #56	; 0x38
 80067b2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80067b6:	f1ca 0317 	rsb	r3, sl, #23
 80067ba:	9404      	str	r4, [sp, #16]
 80067bc:	fa40 fb03 	asr.w	fp, r0, r3
 80067c0:	f1bb 0f00 	cmp.w	fp, #0
 80067c4:	dd62      	ble.n	800688c <__kernel_rem_pio2+0x258>
 80067c6:	2200      	movs	r2, #0
 80067c8:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80067cc:	4614      	mov	r4, r2
 80067ce:	9b04      	ldr	r3, [sp, #16]
 80067d0:	3301      	adds	r3, #1
 80067d2:	9304      	str	r3, [sp, #16]
 80067d4:	4297      	cmp	r7, r2
 80067d6:	f300 8088 	bgt.w	80068ea <__kernel_rem_pio2+0x2b6>
 80067da:	f1ba 0f00 	cmp.w	sl, #0
 80067de:	dd07      	ble.n	80067f0 <__kernel_rem_pio2+0x1bc>
 80067e0:	f1ba 0f01 	cmp.w	sl, #1
 80067e4:	f000 8095 	beq.w	8006912 <__kernel_rem_pio2+0x2de>
 80067e8:	f1ba 0f02 	cmp.w	sl, #2
 80067ec:	f000 809b 	beq.w	8006926 <__kernel_rem_pio2+0x2f2>
 80067f0:	f1bb 0f02 	cmp.w	fp, #2
 80067f4:	d14a      	bne.n	800688c <__kernel_rem_pio2+0x258>
 80067f6:	4642      	mov	r2, r8
 80067f8:	464b      	mov	r3, r9
 80067fa:	2000      	movs	r0, #0
 80067fc:	4953      	ldr	r1, [pc, #332]	; (800694c <__kernel_rem_pio2+0x318>)
 80067fe:	f7f9 fcb3 	bl	8000168 <__aeabi_dsub>
 8006802:	4680      	mov	r8, r0
 8006804:	4689      	mov	r9, r1
 8006806:	2c00      	cmp	r4, #0
 8006808:	d040      	beq.n	800688c <__kernel_rem_pio2+0x258>
 800680a:	4652      	mov	r2, sl
 800680c:	2000      	movs	r0, #0
 800680e:	494f      	ldr	r1, [pc, #316]	; (800694c <__kernel_rem_pio2+0x318>)
 8006810:	f000 fd3e 	bl	8007290 <scalbn>
 8006814:	4602      	mov	r2, r0
 8006816:	460b      	mov	r3, r1
 8006818:	4640      	mov	r0, r8
 800681a:	4649      	mov	r1, r9
 800681c:	f7f9 fca4 	bl	8000168 <__aeabi_dsub>
 8006820:	4680      	mov	r8, r0
 8006822:	4689      	mov	r9, r1
 8006824:	e032      	b.n	800688c <__kernel_rem_pio2+0x258>
 8006826:	2200      	movs	r2, #0
 8006828:	4b49      	ldr	r3, [pc, #292]	; (8006950 <__kernel_rem_pio2+0x31c>)
 800682a:	4640      	mov	r0, r8
 800682c:	4649      	mov	r1, r9
 800682e:	f7f9 fe4f 	bl	80004d0 <__aeabi_dmul>
 8006832:	f7fa f8fd 	bl	8000a30 <__aeabi_d2iz>
 8006836:	f7f9 fde5 	bl	8000404 <__aeabi_i2d>
 800683a:	2200      	movs	r2, #0
 800683c:	4b45      	ldr	r3, [pc, #276]	; (8006954 <__kernel_rem_pio2+0x320>)
 800683e:	4604      	mov	r4, r0
 8006840:	460d      	mov	r5, r1
 8006842:	f7f9 fe45 	bl	80004d0 <__aeabi_dmul>
 8006846:	4602      	mov	r2, r0
 8006848:	460b      	mov	r3, r1
 800684a:	4640      	mov	r0, r8
 800684c:	4649      	mov	r1, r9
 800684e:	f7f9 fc8b 	bl	8000168 <__aeabi_dsub>
 8006852:	f7fa f8ed 	bl	8000a30 <__aeabi_d2iz>
 8006856:	ab0e      	add	r3, sp, #56	; 0x38
 8006858:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 800685c:	4629      	mov	r1, r5
 800685e:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006862:	4620      	mov	r0, r4
 8006864:	f7f9 fc82 	bl	800016c <__adddf3>
 8006868:	3601      	adds	r6, #1
 800686a:	4680      	mov	r8, r0
 800686c:	4689      	mov	r9, r1
 800686e:	e766      	b.n	800673e <__kernel_rem_pio2+0x10a>
 8006870:	d106      	bne.n	8006880 <__kernel_rem_pio2+0x24c>
 8006872:	1e7b      	subs	r3, r7, #1
 8006874:	aa0e      	add	r2, sp, #56	; 0x38
 8006876:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800687a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800687e:	e79f      	b.n	80067c0 <__kernel_rem_pio2+0x18c>
 8006880:	2200      	movs	r2, #0
 8006882:	4b35      	ldr	r3, [pc, #212]	; (8006958 <__kernel_rem_pio2+0x324>)
 8006884:	f7fa f8aa 	bl	80009dc <__aeabi_dcmpge>
 8006888:	bb60      	cbnz	r0, 80068e4 <__kernel_rem_pio2+0x2b0>
 800688a:	4683      	mov	fp, r0
 800688c:	2200      	movs	r2, #0
 800688e:	2300      	movs	r3, #0
 8006890:	4640      	mov	r0, r8
 8006892:	4649      	mov	r1, r9
 8006894:	f7fa f884 	bl	80009a0 <__aeabi_dcmpeq>
 8006898:	2800      	cmp	r0, #0
 800689a:	f000 80c4 	beq.w	8006a26 <__kernel_rem_pio2+0x3f2>
 800689e:	1e7c      	subs	r4, r7, #1
 80068a0:	4623      	mov	r3, r4
 80068a2:	2200      	movs	r2, #0
 80068a4:	9902      	ldr	r1, [sp, #8]
 80068a6:	428b      	cmp	r3, r1
 80068a8:	da44      	bge.n	8006934 <__kernel_rem_pio2+0x300>
 80068aa:	2a00      	cmp	r2, #0
 80068ac:	f040 8088 	bne.w	80069c0 <__kernel_rem_pio2+0x38c>
 80068b0:	2401      	movs	r4, #1
 80068b2:	f06f 0203 	mvn.w	r2, #3
 80068b6:	fb02 f304 	mul.w	r3, r2, r4
 80068ba:	990d      	ldr	r1, [sp, #52]	; 0x34
 80068bc:	58cb      	ldr	r3, [r1, r3]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d03e      	beq.n	8006940 <__kernel_rem_pio2+0x30c>
 80068c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c4:	aa9a      	add	r2, sp, #616	; 0x268
 80068c6:	4413      	add	r3, r2
 80068c8:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 80068cc:	9b06      	ldr	r3, [sp, #24]
 80068ce:	1c7e      	adds	r6, r7, #1
 80068d0:	19dd      	adds	r5, r3, r7
 80068d2:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80068d6:	f5a5 75f4 	sub.w	r5, r5, #488	; 0x1e8
 80068da:	443c      	add	r4, r7
 80068dc:	42a6      	cmp	r6, r4
 80068de:	dd3d      	ble.n	800695c <__kernel_rem_pio2+0x328>
 80068e0:	4627      	mov	r7, r4
 80068e2:	e71a      	b.n	800671a <__kernel_rem_pio2+0xe6>
 80068e4:	f04f 0b02 	mov.w	fp, #2
 80068e8:	e76d      	b.n	80067c6 <__kernel_rem_pio2+0x192>
 80068ea:	ab0e      	add	r3, sp, #56	; 0x38
 80068ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f0:	b94c      	cbnz	r4, 8006906 <__kernel_rem_pio2+0x2d2>
 80068f2:	b12b      	cbz	r3, 8006900 <__kernel_rem_pio2+0x2cc>
 80068f4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80068f8:	a80e      	add	r0, sp, #56	; 0x38
 80068fa:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 80068fe:	2301      	movs	r3, #1
 8006900:	3201      	adds	r2, #1
 8006902:	461c      	mov	r4, r3
 8006904:	e766      	b.n	80067d4 <__kernel_rem_pio2+0x1a0>
 8006906:	1acb      	subs	r3, r1, r3
 8006908:	a80e      	add	r0, sp, #56	; 0x38
 800690a:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800690e:	4623      	mov	r3, r4
 8006910:	e7f6      	b.n	8006900 <__kernel_rem_pio2+0x2cc>
 8006912:	1e7a      	subs	r2, r7, #1
 8006914:	ab0e      	add	r3, sp, #56	; 0x38
 8006916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800691a:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800691e:	a90e      	add	r1, sp, #56	; 0x38
 8006920:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8006924:	e764      	b.n	80067f0 <__kernel_rem_pio2+0x1bc>
 8006926:	1e7a      	subs	r2, r7, #1
 8006928:	ab0e      	add	r3, sp, #56	; 0x38
 800692a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800692e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8006932:	e7f4      	b.n	800691e <__kernel_rem_pio2+0x2ea>
 8006934:	a90e      	add	r1, sp, #56	; 0x38
 8006936:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800693a:	3b01      	subs	r3, #1
 800693c:	430a      	orrs	r2, r1
 800693e:	e7b1      	b.n	80068a4 <__kernel_rem_pio2+0x270>
 8006940:	3401      	adds	r4, #1
 8006942:	e7b8      	b.n	80068b6 <__kernel_rem_pio2+0x282>
 8006944:	080078b8 	.word	0x080078b8
 8006948:	40200000 	.word	0x40200000
 800694c:	3ff00000 	.word	0x3ff00000
 8006950:	3e700000 	.word	0x3e700000
 8006954:	41700000 	.word	0x41700000
 8006958:	3fe00000 	.word	0x3fe00000
 800695c:	f105 0308 	add.w	r3, r5, #8
 8006960:	930b      	str	r3, [sp, #44]	; 0x2c
 8006962:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006964:	2700      	movs	r7, #0
 8006966:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800696a:	f7f9 fd4b 	bl	8000404 <__aeabi_i2d>
 800696e:	f04f 0800 	mov.w	r8, #0
 8006972:	f04f 0900 	mov.w	r9, #0
 8006976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006978:	e9c5 0102 	strd	r0, r1, [r5, #8]
 800697c:	3b08      	subs	r3, #8
 800697e:	9304      	str	r3, [sp, #16]
 8006980:	f105 0310 	add.w	r3, r5, #16
 8006984:	9309      	str	r3, [sp, #36]	; 0x24
 8006986:	9b08      	ldr	r3, [sp, #32]
 8006988:	429f      	cmp	r7, r3
 800698a:	dd04      	ble.n	8006996 <__kernel_rem_pio2+0x362>
 800698c:	e9eb 8902 	strd	r8, r9, [fp, #8]!
 8006990:	3601      	adds	r6, #1
 8006992:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8006994:	e7a2      	b.n	80068dc <__kernel_rem_pio2+0x2a8>
 8006996:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006998:	9d04      	ldr	r5, [sp, #16]
 800699a:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 800699e:	9109      	str	r1, [sp, #36]	; 0x24
 80069a0:	e9f5 0102 	ldrd	r0, r1, [r5, #8]!
 80069a4:	9504      	str	r5, [sp, #16]
 80069a6:	f7f9 fd93 	bl	80004d0 <__aeabi_dmul>
 80069aa:	4602      	mov	r2, r0
 80069ac:	460b      	mov	r3, r1
 80069ae:	4640      	mov	r0, r8
 80069b0:	4649      	mov	r1, r9
 80069b2:	f7f9 fbdb 	bl	800016c <__adddf3>
 80069b6:	3701      	adds	r7, #1
 80069b8:	4680      	mov	r8, r0
 80069ba:	4689      	mov	r9, r1
 80069bc:	e7e3      	b.n	8006986 <__kernel_rem_pio2+0x352>
 80069be:	3c01      	subs	r4, #1
 80069c0:	ab0e      	add	r3, sp, #56	; 0x38
 80069c2:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80069c6:	f1aa 0a18 	sub.w	sl, sl, #24
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d0f7      	beq.n	80069be <__kernel_rem_pio2+0x38a>
 80069ce:	4652      	mov	r2, sl
 80069d0:	2000      	movs	r0, #0
 80069d2:	49b5      	ldr	r1, [pc, #724]	; (8006ca8 <__kernel_rem_pio2+0x674>)
 80069d4:	f000 fc5c 	bl	8007290 <scalbn>
 80069d8:	4625      	mov	r5, r4
 80069da:	4606      	mov	r6, r0
 80069dc:	460f      	mov	r7, r1
 80069de:	f04f 0900 	mov.w	r9, #0
 80069e2:	00e3      	lsls	r3, r4, #3
 80069e4:	aa9a      	add	r2, sp, #616	; 0x268
 80069e6:	eb02 0803 	add.w	r8, r2, r3
 80069ea:	f8df a2c4 	ldr.w	sl, [pc, #708]	; 8006cb0 <__kernel_rem_pio2+0x67c>
 80069ee:	9308      	str	r3, [sp, #32]
 80069f0:	f1a8 0898 	sub.w	r8, r8, #152	; 0x98
 80069f4:	2d00      	cmp	r5, #0
 80069f6:	da4c      	bge.n	8006a92 <__kernel_rem_pio2+0x45e>
 80069f8:	2500      	movs	r5, #0
 80069fa:	f104 5800 	add.w	r8, r4, #536870912	; 0x20000000
 80069fe:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8006a02:	f108 38ff 	add.w	r8, r8, #4294967295
 8006a06:	1b63      	subs	r3, r4, r5
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	db71      	blt.n	8006af0 <__kernel_rem_pio2+0x4bc>
 8006a0c:	ab72      	add	r3, sp, #456	; 0x1c8
 8006a0e:	eba8 0705 	sub.w	r7, r8, r5
 8006a12:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8006a16:	2200      	movs	r2, #0
 8006a18:	2300      	movs	r3, #0
 8006a1a:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8006cb4 <__kernel_rem_pio2+0x680>
 8006a1e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006a22:	2600      	movs	r6, #0
 8006a24:	e059      	b.n	8006ada <__kernel_rem_pio2+0x4a6>
 8006a26:	f1ca 0200 	rsb	r2, sl, #0
 8006a2a:	4640      	mov	r0, r8
 8006a2c:	4649      	mov	r1, r9
 8006a2e:	f000 fc2f 	bl	8007290 <scalbn>
 8006a32:	2200      	movs	r2, #0
 8006a34:	4b9d      	ldr	r3, [pc, #628]	; (8006cac <__kernel_rem_pio2+0x678>)
 8006a36:	4604      	mov	r4, r0
 8006a38:	460d      	mov	r5, r1
 8006a3a:	f7f9 ffcf 	bl	80009dc <__aeabi_dcmpge>
 8006a3e:	b1f8      	cbz	r0, 8006a80 <__kernel_rem_pio2+0x44c>
 8006a40:	2200      	movs	r2, #0
 8006a42:	4b9b      	ldr	r3, [pc, #620]	; (8006cb0 <__kernel_rem_pio2+0x67c>)
 8006a44:	4620      	mov	r0, r4
 8006a46:	4629      	mov	r1, r5
 8006a48:	f7f9 fd42 	bl	80004d0 <__aeabi_dmul>
 8006a4c:	f7f9 fff0 	bl	8000a30 <__aeabi_d2iz>
 8006a50:	4606      	mov	r6, r0
 8006a52:	f7f9 fcd7 	bl	8000404 <__aeabi_i2d>
 8006a56:	2200      	movs	r2, #0
 8006a58:	4b94      	ldr	r3, [pc, #592]	; (8006cac <__kernel_rem_pio2+0x678>)
 8006a5a:	f7f9 fd39 	bl	80004d0 <__aeabi_dmul>
 8006a5e:	460b      	mov	r3, r1
 8006a60:	4602      	mov	r2, r0
 8006a62:	4629      	mov	r1, r5
 8006a64:	4620      	mov	r0, r4
 8006a66:	f7f9 fb7f 	bl	8000168 <__aeabi_dsub>
 8006a6a:	f7f9 ffe1 	bl	8000a30 <__aeabi_d2iz>
 8006a6e:	1c7c      	adds	r4, r7, #1
 8006a70:	ab0e      	add	r3, sp, #56	; 0x38
 8006a72:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8006a76:	f10a 0a18 	add.w	sl, sl, #24
 8006a7a:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8006a7e:	e7a6      	b.n	80069ce <__kernel_rem_pio2+0x39a>
 8006a80:	4620      	mov	r0, r4
 8006a82:	4629      	mov	r1, r5
 8006a84:	f7f9 ffd4 	bl	8000a30 <__aeabi_d2iz>
 8006a88:	ab0e      	add	r3, sp, #56	; 0x38
 8006a8a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8006a8e:	463c      	mov	r4, r7
 8006a90:	e79d      	b.n	80069ce <__kernel_rem_pio2+0x39a>
 8006a92:	ab0e      	add	r3, sp, #56	; 0x38
 8006a94:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a98:	f7f9 fcb4 	bl	8000404 <__aeabi_i2d>
 8006a9c:	4632      	mov	r2, r6
 8006a9e:	463b      	mov	r3, r7
 8006aa0:	f7f9 fd16 	bl	80004d0 <__aeabi_dmul>
 8006aa4:	464a      	mov	r2, r9
 8006aa6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8006aaa:	4653      	mov	r3, sl
 8006aac:	4630      	mov	r0, r6
 8006aae:	4639      	mov	r1, r7
 8006ab0:	f7f9 fd0e 	bl	80004d0 <__aeabi_dmul>
 8006ab4:	3d01      	subs	r5, #1
 8006ab6:	4606      	mov	r6, r0
 8006ab8:	460f      	mov	r7, r1
 8006aba:	e79b      	b.n	80069f4 <__kernel_rem_pio2+0x3c0>
 8006abc:	e9f7 2302 	ldrd	r2, r3, [r7, #8]!
 8006ac0:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8006ac4:	f7f9 fd04 	bl	80004d0 <__aeabi_dmul>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	460b      	mov	r3, r1
 8006acc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006ad0:	f7f9 fb4c 	bl	800016c <__adddf3>
 8006ad4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006ad8:	3601      	adds	r6, #1
 8006ada:	9b02      	ldr	r3, [sp, #8]
 8006adc:	429e      	cmp	r6, r3
 8006ade:	dc01      	bgt.n	8006ae4 <__kernel_rem_pio2+0x4b0>
 8006ae0:	42ae      	cmp	r6, r5
 8006ae2:	ddeb      	ble.n	8006abc <__kernel_rem_pio2+0x488>
 8006ae4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006ae8:	3501      	adds	r5, #1
 8006aea:	e9ea 2302 	strd	r2, r3, [sl, #8]!
 8006aee:	e78a      	b.n	8006a06 <__kernel_rem_pio2+0x3d2>
 8006af0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006af2:	2b03      	cmp	r3, #3
 8006af4:	d86c      	bhi.n	8006bd0 <__kernel_rem_pio2+0x59c>
 8006af6:	e8df f003 	tbb	[pc, r3]
 8006afa:	2c58      	.short	0x2c58
 8006afc:	022c      	.short	0x022c
 8006afe:	9a08      	ldr	r2, [sp, #32]
 8006b00:	ab4a      	add	r3, sp, #296	; 0x128
 8006b02:	189d      	adds	r5, r3, r2
 8006b04:	46aa      	mov	sl, r5
 8006b06:	4626      	mov	r6, r4
 8006b08:	2e00      	cmp	r6, #0
 8006b0a:	f300 8088 	bgt.w	8006c1e <__kernel_rem_pio2+0x5ea>
 8006b0e:	46a2      	mov	sl, r4
 8006b10:	f1ba 0f01 	cmp.w	sl, #1
 8006b14:	f300 80a1 	bgt.w	8006c5a <__kernel_rem_pio2+0x626>
 8006b18:	2700      	movs	r7, #0
 8006b1a:	463e      	mov	r6, r7
 8006b1c:	9d08      	ldr	r5, [sp, #32]
 8006b1e:	ab4a      	add	r3, sp, #296	; 0x128
 8006b20:	3508      	adds	r5, #8
 8006b22:	441d      	add	r5, r3
 8006b24:	2c01      	cmp	r4, #1
 8006b26:	f300 80b5 	bgt.w	8006c94 <__kernel_rem_pio2+0x660>
 8006b2a:	f1bb 0f00 	cmp.w	fp, #0
 8006b2e:	f040 80c3 	bne.w	8006cb8 <__kernel_rem_pio2+0x684>
 8006b32:	9901      	ldr	r1, [sp, #4]
 8006b34:	ab4a      	add	r3, sp, #296	; 0x128
 8006b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b3a:	e9c1 2300 	strd	r2, r3, [r1]
 8006b3e:	ab4c      	add	r3, sp, #304	; 0x130
 8006b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b44:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8006b48:	463a      	mov	r2, r7
 8006b4a:	4633      	mov	r3, r6
 8006b4c:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8006b50:	e03e      	b.n	8006bd0 <__kernel_rem_pio2+0x59c>
 8006b52:	f04f 0e00 	mov.w	lr, #0
 8006b56:	4626      	mov	r6, r4
 8006b58:	4677      	mov	r7, lr
 8006b5a:	9d08      	ldr	r5, [sp, #32]
 8006b5c:	ab4a      	add	r3, sp, #296	; 0x128
 8006b5e:	3508      	adds	r5, #8
 8006b60:	441d      	add	r5, r3
 8006b62:	2e00      	cmp	r6, #0
 8006b64:	da45      	bge.n	8006bf2 <__kernel_rem_pio2+0x5be>
 8006b66:	f1bb 0f00 	cmp.w	fp, #0
 8006b6a:	d04c      	beq.n	8006c06 <__kernel_rem_pio2+0x5d2>
 8006b6c:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8006b70:	4672      	mov	r2, lr
 8006b72:	460b      	mov	r3, r1
 8006b74:	9901      	ldr	r1, [sp, #4]
 8006b76:	2601      	movs	r6, #1
 8006b78:	e9c1 2300 	strd	r2, r3, [r1]
 8006b7c:	a94a      	add	r1, sp, #296	; 0x128
 8006b7e:	4672      	mov	r2, lr
 8006b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b84:	463b      	mov	r3, r7
 8006b86:	f7f9 faef 	bl	8000168 <__aeabi_dsub>
 8006b8a:	4686      	mov	lr, r0
 8006b8c:	460f      	mov	r7, r1
 8006b8e:	ad4a      	add	r5, sp, #296	; 0x128
 8006b90:	42b4      	cmp	r4, r6
 8006b92:	da3a      	bge.n	8006c0a <__kernel_rem_pio2+0x5d6>
 8006b94:	f1bb 0f00 	cmp.w	fp, #0
 8006b98:	d001      	beq.n	8006b9e <__kernel_rem_pio2+0x56a>
 8006b9a:	f107 4700 	add.w	r7, r7, #2147483648	; 0x80000000
 8006b9e:	4672      	mov	r2, lr
 8006ba0:	463b      	mov	r3, r7
 8006ba2:	9901      	ldr	r1, [sp, #4]
 8006ba4:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8006ba8:	e012      	b.n	8006bd0 <__kernel_rem_pio2+0x59c>
 8006baa:	2700      	movs	r7, #0
 8006bac:	463d      	mov	r5, r7
 8006bae:	9b08      	ldr	r3, [sp, #32]
 8006bb0:	aa9a      	add	r2, sp, #616	; 0x268
 8006bb2:	4413      	add	r3, r2
 8006bb4:	f5a3 769c 	sub.w	r6, r3, #312	; 0x138
 8006bb8:	2c00      	cmp	r4, #0
 8006bba:	da10      	bge.n	8006bde <__kernel_rem_pio2+0x5aa>
 8006bbc:	f1bb 0f00 	cmp.w	fp, #0
 8006bc0:	d001      	beq.n	8006bc6 <__kernel_rem_pio2+0x592>
 8006bc2:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8006bc6:	463a      	mov	r2, r7
 8006bc8:	462b      	mov	r3, r5
 8006bca:	9901      	ldr	r1, [sp, #4]
 8006bcc:	e9c1 2300 	strd	r2, r3, [r1]
 8006bd0:	9b04      	ldr	r3, [sp, #16]
 8006bd2:	f003 0007 	and.w	r0, r3, #7
 8006bd6:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8006bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bde:	4638      	mov	r0, r7
 8006be0:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8006be4:	4629      	mov	r1, r5
 8006be6:	f7f9 fac1 	bl	800016c <__adddf3>
 8006bea:	3c01      	subs	r4, #1
 8006bec:	4607      	mov	r7, r0
 8006bee:	460d      	mov	r5, r1
 8006bf0:	e7e2      	b.n	8006bb8 <__kernel_rem_pio2+0x584>
 8006bf2:	4670      	mov	r0, lr
 8006bf4:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006bf8:	4639      	mov	r1, r7
 8006bfa:	f7f9 fab7 	bl	800016c <__adddf3>
 8006bfe:	3e01      	subs	r6, #1
 8006c00:	4686      	mov	lr, r0
 8006c02:	460f      	mov	r7, r1
 8006c04:	e7ad      	b.n	8006b62 <__kernel_rem_pio2+0x52e>
 8006c06:	4639      	mov	r1, r7
 8006c08:	e7b2      	b.n	8006b70 <__kernel_rem_pio2+0x53c>
 8006c0a:	4670      	mov	r0, lr
 8006c0c:	e9f5 2302 	ldrd	r2, r3, [r5, #8]!
 8006c10:	4639      	mov	r1, r7
 8006c12:	f7f9 faab 	bl	800016c <__adddf3>
 8006c16:	3601      	adds	r6, #1
 8006c18:	4686      	mov	lr, r0
 8006c1a:	460f      	mov	r7, r1
 8006c1c:	e7b8      	b.n	8006b90 <__kernel_rem_pio2+0x55c>
 8006c1e:	e9da 2300 	ldrd	r2, r3, [sl]
 8006c22:	e95a 8902 	ldrd	r8, r9, [sl, #-8]
 8006c26:	4640      	mov	r0, r8
 8006c28:	4649      	mov	r1, r9
 8006c2a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c2e:	f7f9 fa9d 	bl	800016c <__adddf3>
 8006c32:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8006c36:	4602      	mov	r2, r0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	4640      	mov	r0, r8
 8006c3c:	4649      	mov	r1, r9
 8006c3e:	f7f9 fa93 	bl	8000168 <__aeabi_dsub>
 8006c42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c46:	f7f9 fa91 	bl	800016c <__adddf3>
 8006c4a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006c4e:	e9ca 0100 	strd	r0, r1, [sl]
 8006c52:	3e01      	subs	r6, #1
 8006c54:	e96a 2302 	strd	r2, r3, [sl, #-8]!
 8006c58:	e756      	b.n	8006b08 <__kernel_rem_pio2+0x4d4>
 8006c5a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c5e:	e955 6702 	ldrd	r6, r7, [r5, #-8]
 8006c62:	4630      	mov	r0, r6
 8006c64:	4639      	mov	r1, r7
 8006c66:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c6a:	f7f9 fa7f 	bl	800016c <__adddf3>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	460b      	mov	r3, r1
 8006c72:	4680      	mov	r8, r0
 8006c74:	4689      	mov	r9, r1
 8006c76:	4630      	mov	r0, r6
 8006c78:	4639      	mov	r1, r7
 8006c7a:	f7f9 fa75 	bl	8000168 <__aeabi_dsub>
 8006c7e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c82:	f7f9 fa73 	bl	800016c <__adddf3>
 8006c86:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c8a:	e9c5 0100 	strd	r0, r1, [r5]
 8006c8e:	e965 8902 	strd	r8, r9, [r5, #-8]!
 8006c92:	e73d      	b.n	8006b10 <__kernel_rem_pio2+0x4dc>
 8006c94:	4638      	mov	r0, r7
 8006c96:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8006c9a:	4631      	mov	r1, r6
 8006c9c:	f7f9 fa66 	bl	800016c <__adddf3>
 8006ca0:	3c01      	subs	r4, #1
 8006ca2:	4607      	mov	r7, r0
 8006ca4:	460e      	mov	r6, r1
 8006ca6:	e73d      	b.n	8006b24 <__kernel_rem_pio2+0x4f0>
 8006ca8:	3ff00000 	.word	0x3ff00000
 8006cac:	41700000 	.word	0x41700000
 8006cb0:	3e700000 	.word	0x3e700000
 8006cb4:	08007870 	.word	0x08007870
 8006cb8:	9a01      	ldr	r2, [sp, #4]
 8006cba:	9b4a      	ldr	r3, [sp, #296]	; 0x128
 8006cbc:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
 8006cc0:	6013      	str	r3, [r2, #0]
 8006cc2:	9b4b      	ldr	r3, [sp, #300]	; 0x12c
 8006cc4:	6117      	str	r7, [r2, #16]
 8006cc6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006cca:	6053      	str	r3, [r2, #4]
 8006ccc:	9b4c      	ldr	r3, [sp, #304]	; 0x130
 8006cce:	6156      	str	r6, [r2, #20]
 8006cd0:	6093      	str	r3, [r2, #8]
 8006cd2:	9b4d      	ldr	r3, [sp, #308]	; 0x134
 8006cd4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8006cd8:	60d3      	str	r3, [r2, #12]
 8006cda:	e779      	b.n	8006bd0 <__kernel_rem_pio2+0x59c>
 8006cdc:	0000      	movs	r0, r0
	...

08006ce0 <__kernel_sin>:
 8006ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ce4:	b086      	sub	sp, #24
 8006ce6:	e9cd 2300 	strd	r2, r3, [sp]
 8006cea:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006cee:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8006cf2:	4682      	mov	sl, r0
 8006cf4:	460c      	mov	r4, r1
 8006cf6:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8006cf8:	da03      	bge.n	8006d02 <__kernel_sin+0x22>
 8006cfa:	f7f9 fe99 	bl	8000a30 <__aeabi_d2iz>
 8006cfe:	2800      	cmp	r0, #0
 8006d00:	d050      	beq.n	8006da4 <__kernel_sin+0xc4>
 8006d02:	4652      	mov	r2, sl
 8006d04:	4623      	mov	r3, r4
 8006d06:	4650      	mov	r0, sl
 8006d08:	4621      	mov	r1, r4
 8006d0a:	f7f9 fbe1 	bl	80004d0 <__aeabi_dmul>
 8006d0e:	4606      	mov	r6, r0
 8006d10:	460f      	mov	r7, r1
 8006d12:	4602      	mov	r2, r0
 8006d14:	460b      	mov	r3, r1
 8006d16:	4650      	mov	r0, sl
 8006d18:	4621      	mov	r1, r4
 8006d1a:	f7f9 fbd9 	bl	80004d0 <__aeabi_dmul>
 8006d1e:	a33e      	add	r3, pc, #248	; (adr r3, 8006e18 <__kernel_sin+0x138>)
 8006d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d24:	4680      	mov	r8, r0
 8006d26:	4689      	mov	r9, r1
 8006d28:	4630      	mov	r0, r6
 8006d2a:	4639      	mov	r1, r7
 8006d2c:	f7f9 fbd0 	bl	80004d0 <__aeabi_dmul>
 8006d30:	a33b      	add	r3, pc, #236	; (adr r3, 8006e20 <__kernel_sin+0x140>)
 8006d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d36:	f7f9 fa17 	bl	8000168 <__aeabi_dsub>
 8006d3a:	4632      	mov	r2, r6
 8006d3c:	463b      	mov	r3, r7
 8006d3e:	f7f9 fbc7 	bl	80004d0 <__aeabi_dmul>
 8006d42:	a339      	add	r3, pc, #228	; (adr r3, 8006e28 <__kernel_sin+0x148>)
 8006d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d48:	f7f9 fa10 	bl	800016c <__adddf3>
 8006d4c:	4632      	mov	r2, r6
 8006d4e:	463b      	mov	r3, r7
 8006d50:	f7f9 fbbe 	bl	80004d0 <__aeabi_dmul>
 8006d54:	a336      	add	r3, pc, #216	; (adr r3, 8006e30 <__kernel_sin+0x150>)
 8006d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d5a:	f7f9 fa05 	bl	8000168 <__aeabi_dsub>
 8006d5e:	4632      	mov	r2, r6
 8006d60:	463b      	mov	r3, r7
 8006d62:	f7f9 fbb5 	bl	80004d0 <__aeabi_dmul>
 8006d66:	a334      	add	r3, pc, #208	; (adr r3, 8006e38 <__kernel_sin+0x158>)
 8006d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d6c:	f7f9 f9fe 	bl	800016c <__adddf3>
 8006d70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d74:	b9dd      	cbnz	r5, 8006dae <__kernel_sin+0xce>
 8006d76:	4602      	mov	r2, r0
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4630      	mov	r0, r6
 8006d7c:	4639      	mov	r1, r7
 8006d7e:	f7f9 fba7 	bl	80004d0 <__aeabi_dmul>
 8006d82:	a32f      	add	r3, pc, #188	; (adr r3, 8006e40 <__kernel_sin+0x160>)
 8006d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d88:	f7f9 f9ee 	bl	8000168 <__aeabi_dsub>
 8006d8c:	4642      	mov	r2, r8
 8006d8e:	464b      	mov	r3, r9
 8006d90:	f7f9 fb9e 	bl	80004d0 <__aeabi_dmul>
 8006d94:	4602      	mov	r2, r0
 8006d96:	460b      	mov	r3, r1
 8006d98:	4650      	mov	r0, sl
 8006d9a:	4621      	mov	r1, r4
 8006d9c:	f7f9 f9e6 	bl	800016c <__adddf3>
 8006da0:	4682      	mov	sl, r0
 8006da2:	460c      	mov	r4, r1
 8006da4:	4650      	mov	r0, sl
 8006da6:	4621      	mov	r1, r4
 8006da8:	b006      	add	sp, #24
 8006daa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dae:	2200      	movs	r2, #0
 8006db0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006db4:	4b24      	ldr	r3, [pc, #144]	; (8006e48 <__kernel_sin+0x168>)
 8006db6:	f7f9 fb8b 	bl	80004d0 <__aeabi_dmul>
 8006dba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006dbe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006dc2:	4640      	mov	r0, r8
 8006dc4:	4649      	mov	r1, r9
 8006dc6:	f7f9 fb83 	bl	80004d0 <__aeabi_dmul>
 8006dca:	4602      	mov	r2, r0
 8006dcc:	460b      	mov	r3, r1
 8006dce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006dd2:	f7f9 f9c9 	bl	8000168 <__aeabi_dsub>
 8006dd6:	4632      	mov	r2, r6
 8006dd8:	463b      	mov	r3, r7
 8006dda:	f7f9 fb79 	bl	80004d0 <__aeabi_dmul>
 8006dde:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006de2:	f7f9 f9c1 	bl	8000168 <__aeabi_dsub>
 8006de6:	a316      	add	r3, pc, #88	; (adr r3, 8006e40 <__kernel_sin+0x160>)
 8006de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dec:	4606      	mov	r6, r0
 8006dee:	460f      	mov	r7, r1
 8006df0:	4640      	mov	r0, r8
 8006df2:	4649      	mov	r1, r9
 8006df4:	f7f9 fb6c 	bl	80004d0 <__aeabi_dmul>
 8006df8:	4602      	mov	r2, r0
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	4630      	mov	r0, r6
 8006dfe:	4639      	mov	r1, r7
 8006e00:	f7f9 f9b4 	bl	800016c <__adddf3>
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	4650      	mov	r0, sl
 8006e0a:	4621      	mov	r1, r4
 8006e0c:	f7f9 f9ac 	bl	8000168 <__aeabi_dsub>
 8006e10:	e7c6      	b.n	8006da0 <__kernel_sin+0xc0>
 8006e12:	bf00      	nop
 8006e14:	f3af 8000 	nop.w
 8006e18:	5acfd57c 	.word	0x5acfd57c
 8006e1c:	3de5d93a 	.word	0x3de5d93a
 8006e20:	8a2b9ceb 	.word	0x8a2b9ceb
 8006e24:	3e5ae5e6 	.word	0x3e5ae5e6
 8006e28:	57b1fe7d 	.word	0x57b1fe7d
 8006e2c:	3ec71de3 	.word	0x3ec71de3
 8006e30:	19c161d5 	.word	0x19c161d5
 8006e34:	3f2a01a0 	.word	0x3f2a01a0
 8006e38:	1110f8a6 	.word	0x1110f8a6
 8006e3c:	3f811111 	.word	0x3f811111
 8006e40:	55555549 	.word	0x55555549
 8006e44:	3fc55555 	.word	0x3fc55555
 8006e48:	3fe00000 	.word	0x3fe00000
 8006e4c:	00000000 	.word	0x00000000

08006e50 <atan>:
 8006e50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e54:	4bba      	ldr	r3, [pc, #744]	; (8007140 <atan+0x2f0>)
 8006e56:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006e5a:	429e      	cmp	r6, r3
 8006e5c:	4604      	mov	r4, r0
 8006e5e:	460d      	mov	r5, r1
 8006e60:	468b      	mov	fp, r1
 8006e62:	dd17      	ble.n	8006e94 <atan+0x44>
 8006e64:	4ab7      	ldr	r2, [pc, #732]	; (8007144 <atan+0x2f4>)
 8006e66:	4296      	cmp	r6, r2
 8006e68:	dc01      	bgt.n	8006e6e <atan+0x1e>
 8006e6a:	d109      	bne.n	8006e80 <atan+0x30>
 8006e6c:	b140      	cbz	r0, 8006e80 <atan+0x30>
 8006e6e:	4622      	mov	r2, r4
 8006e70:	462b      	mov	r3, r5
 8006e72:	4620      	mov	r0, r4
 8006e74:	4629      	mov	r1, r5
 8006e76:	f7f9 f979 	bl	800016c <__adddf3>
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	460d      	mov	r5, r1
 8006e7e:	e005      	b.n	8006e8c <atan+0x3c>
 8006e80:	f1bb 0f00 	cmp.w	fp, #0
 8006e84:	4cb0      	ldr	r4, [pc, #704]	; (8007148 <atan+0x2f8>)
 8006e86:	f300 8129 	bgt.w	80070dc <atan+0x28c>
 8006e8a:	4db0      	ldr	r5, [pc, #704]	; (800714c <atan+0x2fc>)
 8006e8c:	4620      	mov	r0, r4
 8006e8e:	4629      	mov	r1, r5
 8006e90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e94:	4bae      	ldr	r3, [pc, #696]	; (8007150 <atan+0x300>)
 8006e96:	429e      	cmp	r6, r3
 8006e98:	dc11      	bgt.n	8006ebe <atan+0x6e>
 8006e9a:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006e9e:	429e      	cmp	r6, r3
 8006ea0:	dc0a      	bgt.n	8006eb8 <atan+0x68>
 8006ea2:	a38f      	add	r3, pc, #572	; (adr r3, 80070e0 <atan+0x290>)
 8006ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea8:	f7f9 f960 	bl	800016c <__adddf3>
 8006eac:	2200      	movs	r2, #0
 8006eae:	4ba9      	ldr	r3, [pc, #676]	; (8007154 <atan+0x304>)
 8006eb0:	f7f9 fd9e 	bl	80009f0 <__aeabi_dcmpgt>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	d1e9      	bne.n	8006e8c <atan+0x3c>
 8006eb8:	f04f 3aff 	mov.w	sl, #4294967295
 8006ebc:	e027      	b.n	8006f0e <atan+0xbe>
 8006ebe:	f000 f959 	bl	8007174 <fabs>
 8006ec2:	4ba5      	ldr	r3, [pc, #660]	; (8007158 <atan+0x308>)
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	429e      	cmp	r6, r3
 8006ec8:	460d      	mov	r5, r1
 8006eca:	f300 80b8 	bgt.w	800703e <atan+0x1ee>
 8006ece:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006ed2:	429e      	cmp	r6, r3
 8006ed4:	f300 809c 	bgt.w	8007010 <atan+0x1c0>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	460b      	mov	r3, r1
 8006edc:	f7f9 f946 	bl	800016c <__adddf3>
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	4b9c      	ldr	r3, [pc, #624]	; (8007154 <atan+0x304>)
 8006ee4:	f7f9 f940 	bl	8000168 <__aeabi_dsub>
 8006ee8:	2200      	movs	r2, #0
 8006eea:	4606      	mov	r6, r0
 8006eec:	460f      	mov	r7, r1
 8006eee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006ef2:	4620      	mov	r0, r4
 8006ef4:	4629      	mov	r1, r5
 8006ef6:	f7f9 f939 	bl	800016c <__adddf3>
 8006efa:	4602      	mov	r2, r0
 8006efc:	460b      	mov	r3, r1
 8006efe:	4630      	mov	r0, r6
 8006f00:	4639      	mov	r1, r7
 8006f02:	f7f9 fc0f 	bl	8000724 <__aeabi_ddiv>
 8006f06:	f04f 0a00 	mov.w	sl, #0
 8006f0a:	4604      	mov	r4, r0
 8006f0c:	460d      	mov	r5, r1
 8006f0e:	4622      	mov	r2, r4
 8006f10:	462b      	mov	r3, r5
 8006f12:	4620      	mov	r0, r4
 8006f14:	4629      	mov	r1, r5
 8006f16:	f7f9 fadb 	bl	80004d0 <__aeabi_dmul>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	4680      	mov	r8, r0
 8006f20:	4689      	mov	r9, r1
 8006f22:	f7f9 fad5 	bl	80004d0 <__aeabi_dmul>
 8006f26:	a370      	add	r3, pc, #448	; (adr r3, 80070e8 <atan+0x298>)
 8006f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f2c:	4606      	mov	r6, r0
 8006f2e:	460f      	mov	r7, r1
 8006f30:	f7f9 face 	bl	80004d0 <__aeabi_dmul>
 8006f34:	a36e      	add	r3, pc, #440	; (adr r3, 80070f0 <atan+0x2a0>)
 8006f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3a:	f7f9 f917 	bl	800016c <__adddf3>
 8006f3e:	4632      	mov	r2, r6
 8006f40:	463b      	mov	r3, r7
 8006f42:	f7f9 fac5 	bl	80004d0 <__aeabi_dmul>
 8006f46:	a36c      	add	r3, pc, #432	; (adr r3, 80070f8 <atan+0x2a8>)
 8006f48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4c:	f7f9 f90e 	bl	800016c <__adddf3>
 8006f50:	4632      	mov	r2, r6
 8006f52:	463b      	mov	r3, r7
 8006f54:	f7f9 fabc 	bl	80004d0 <__aeabi_dmul>
 8006f58:	a369      	add	r3, pc, #420	; (adr r3, 8007100 <atan+0x2b0>)
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	f7f9 f905 	bl	800016c <__adddf3>
 8006f62:	4632      	mov	r2, r6
 8006f64:	463b      	mov	r3, r7
 8006f66:	f7f9 fab3 	bl	80004d0 <__aeabi_dmul>
 8006f6a:	a367      	add	r3, pc, #412	; (adr r3, 8007108 <atan+0x2b8>)
 8006f6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f70:	f7f9 f8fc 	bl	800016c <__adddf3>
 8006f74:	4632      	mov	r2, r6
 8006f76:	463b      	mov	r3, r7
 8006f78:	f7f9 faaa 	bl	80004d0 <__aeabi_dmul>
 8006f7c:	a364      	add	r3, pc, #400	; (adr r3, 8007110 <atan+0x2c0>)
 8006f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f82:	f7f9 f8f3 	bl	800016c <__adddf3>
 8006f86:	4642      	mov	r2, r8
 8006f88:	464b      	mov	r3, r9
 8006f8a:	f7f9 faa1 	bl	80004d0 <__aeabi_dmul>
 8006f8e:	a362      	add	r3, pc, #392	; (adr r3, 8007118 <atan+0x2c8>)
 8006f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f94:	4680      	mov	r8, r0
 8006f96:	4689      	mov	r9, r1
 8006f98:	4630      	mov	r0, r6
 8006f9a:	4639      	mov	r1, r7
 8006f9c:	f7f9 fa98 	bl	80004d0 <__aeabi_dmul>
 8006fa0:	a35f      	add	r3, pc, #380	; (adr r3, 8007120 <atan+0x2d0>)
 8006fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa6:	f7f9 f8df 	bl	8000168 <__aeabi_dsub>
 8006faa:	4632      	mov	r2, r6
 8006fac:	463b      	mov	r3, r7
 8006fae:	f7f9 fa8f 	bl	80004d0 <__aeabi_dmul>
 8006fb2:	a35d      	add	r3, pc, #372	; (adr r3, 8007128 <atan+0x2d8>)
 8006fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb8:	f7f9 f8d6 	bl	8000168 <__aeabi_dsub>
 8006fbc:	4632      	mov	r2, r6
 8006fbe:	463b      	mov	r3, r7
 8006fc0:	f7f9 fa86 	bl	80004d0 <__aeabi_dmul>
 8006fc4:	a35a      	add	r3, pc, #360	; (adr r3, 8007130 <atan+0x2e0>)
 8006fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fca:	f7f9 f8cd 	bl	8000168 <__aeabi_dsub>
 8006fce:	4632      	mov	r2, r6
 8006fd0:	463b      	mov	r3, r7
 8006fd2:	f7f9 fa7d 	bl	80004d0 <__aeabi_dmul>
 8006fd6:	a358      	add	r3, pc, #352	; (adr r3, 8007138 <atan+0x2e8>)
 8006fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fdc:	f7f9 f8c4 	bl	8000168 <__aeabi_dsub>
 8006fe0:	4632      	mov	r2, r6
 8006fe2:	463b      	mov	r3, r7
 8006fe4:	f7f9 fa74 	bl	80004d0 <__aeabi_dmul>
 8006fe8:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006fec:	4602      	mov	r2, r0
 8006fee:	460b      	mov	r3, r1
 8006ff0:	d14e      	bne.n	8007090 <atan+0x240>
 8006ff2:	4640      	mov	r0, r8
 8006ff4:	4649      	mov	r1, r9
 8006ff6:	f7f9 f8b9 	bl	800016c <__adddf3>
 8006ffa:	4622      	mov	r2, r4
 8006ffc:	462b      	mov	r3, r5
 8006ffe:	f7f9 fa67 	bl	80004d0 <__aeabi_dmul>
 8007002:	4602      	mov	r2, r0
 8007004:	460b      	mov	r3, r1
 8007006:	4620      	mov	r0, r4
 8007008:	4629      	mov	r1, r5
 800700a:	f7f9 f8ad 	bl	8000168 <__aeabi_dsub>
 800700e:	e734      	b.n	8006e7a <atan+0x2a>
 8007010:	2200      	movs	r2, #0
 8007012:	4b50      	ldr	r3, [pc, #320]	; (8007154 <atan+0x304>)
 8007014:	f7f9 f8a8 	bl	8000168 <__aeabi_dsub>
 8007018:	2200      	movs	r2, #0
 800701a:	4606      	mov	r6, r0
 800701c:	460f      	mov	r7, r1
 800701e:	4b4d      	ldr	r3, [pc, #308]	; (8007154 <atan+0x304>)
 8007020:	4620      	mov	r0, r4
 8007022:	4629      	mov	r1, r5
 8007024:	f7f9 f8a2 	bl	800016c <__adddf3>
 8007028:	4602      	mov	r2, r0
 800702a:	460b      	mov	r3, r1
 800702c:	4630      	mov	r0, r6
 800702e:	4639      	mov	r1, r7
 8007030:	f7f9 fb78 	bl	8000724 <__aeabi_ddiv>
 8007034:	f04f 0a01 	mov.w	sl, #1
 8007038:	4604      	mov	r4, r0
 800703a:	460d      	mov	r5, r1
 800703c:	e767      	b.n	8006f0e <atan+0xbe>
 800703e:	4b47      	ldr	r3, [pc, #284]	; (800715c <atan+0x30c>)
 8007040:	429e      	cmp	r6, r3
 8007042:	dc1a      	bgt.n	800707a <atan+0x22a>
 8007044:	2200      	movs	r2, #0
 8007046:	4b46      	ldr	r3, [pc, #280]	; (8007160 <atan+0x310>)
 8007048:	f7f9 f88e 	bl	8000168 <__aeabi_dsub>
 800704c:	2200      	movs	r2, #0
 800704e:	4606      	mov	r6, r0
 8007050:	460f      	mov	r7, r1
 8007052:	4b43      	ldr	r3, [pc, #268]	; (8007160 <atan+0x310>)
 8007054:	4620      	mov	r0, r4
 8007056:	4629      	mov	r1, r5
 8007058:	f7f9 fa3a 	bl	80004d0 <__aeabi_dmul>
 800705c:	2200      	movs	r2, #0
 800705e:	4b3d      	ldr	r3, [pc, #244]	; (8007154 <atan+0x304>)
 8007060:	f7f9 f884 	bl	800016c <__adddf3>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	4630      	mov	r0, r6
 800706a:	4639      	mov	r1, r7
 800706c:	f7f9 fb5a 	bl	8000724 <__aeabi_ddiv>
 8007070:	f04f 0a02 	mov.w	sl, #2
 8007074:	4604      	mov	r4, r0
 8007076:	460d      	mov	r5, r1
 8007078:	e749      	b.n	8006f0e <atan+0xbe>
 800707a:	4602      	mov	r2, r0
 800707c:	460b      	mov	r3, r1
 800707e:	2000      	movs	r0, #0
 8007080:	4938      	ldr	r1, [pc, #224]	; (8007164 <atan+0x314>)
 8007082:	f7f9 fb4f 	bl	8000724 <__aeabi_ddiv>
 8007086:	f04f 0a03 	mov.w	sl, #3
 800708a:	4604      	mov	r4, r0
 800708c:	460d      	mov	r5, r1
 800708e:	e73e      	b.n	8006f0e <atan+0xbe>
 8007090:	4640      	mov	r0, r8
 8007092:	4649      	mov	r1, r9
 8007094:	f7f9 f86a 	bl	800016c <__adddf3>
 8007098:	4622      	mov	r2, r4
 800709a:	462b      	mov	r3, r5
 800709c:	f7f9 fa18 	bl	80004d0 <__aeabi_dmul>
 80070a0:	4e31      	ldr	r6, [pc, #196]	; (8007168 <atan+0x318>)
 80070a2:	4b32      	ldr	r3, [pc, #200]	; (800716c <atan+0x31c>)
 80070a4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80070a8:	4456      	add	r6, sl
 80070aa:	449a      	add	sl, r3
 80070ac:	e9da 2300 	ldrd	r2, r3, [sl]
 80070b0:	f7f9 f85a 	bl	8000168 <__aeabi_dsub>
 80070b4:	4622      	mov	r2, r4
 80070b6:	462b      	mov	r3, r5
 80070b8:	f7f9 f856 	bl	8000168 <__aeabi_dsub>
 80070bc:	4602      	mov	r2, r0
 80070be:	460b      	mov	r3, r1
 80070c0:	e9d6 0100 	ldrd	r0, r1, [r6]
 80070c4:	f7f9 f850 	bl	8000168 <__aeabi_dsub>
 80070c8:	f1bb 0f00 	cmp.w	fp, #0
 80070cc:	4604      	mov	r4, r0
 80070ce:	460d      	mov	r5, r1
 80070d0:	f6bf aedc 	bge.w	8006e8c <atan+0x3c>
 80070d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070d8:	461d      	mov	r5, r3
 80070da:	e6d7      	b.n	8006e8c <atan+0x3c>
 80070dc:	4d24      	ldr	r5, [pc, #144]	; (8007170 <atan+0x320>)
 80070de:	e6d5      	b.n	8006e8c <atan+0x3c>
 80070e0:	8800759c 	.word	0x8800759c
 80070e4:	7e37e43c 	.word	0x7e37e43c
 80070e8:	e322da11 	.word	0xe322da11
 80070ec:	3f90ad3a 	.word	0x3f90ad3a
 80070f0:	24760deb 	.word	0x24760deb
 80070f4:	3fa97b4b 	.word	0x3fa97b4b
 80070f8:	a0d03d51 	.word	0xa0d03d51
 80070fc:	3fb10d66 	.word	0x3fb10d66
 8007100:	c54c206e 	.word	0xc54c206e
 8007104:	3fb745cd 	.word	0x3fb745cd
 8007108:	920083ff 	.word	0x920083ff
 800710c:	3fc24924 	.word	0x3fc24924
 8007110:	5555550d 	.word	0x5555550d
 8007114:	3fd55555 	.word	0x3fd55555
 8007118:	2c6a6c2f 	.word	0x2c6a6c2f
 800711c:	bfa2b444 	.word	0xbfa2b444
 8007120:	52defd9a 	.word	0x52defd9a
 8007124:	3fadde2d 	.word	0x3fadde2d
 8007128:	af749a6d 	.word	0xaf749a6d
 800712c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007130:	fe231671 	.word	0xfe231671
 8007134:	3fbc71c6 	.word	0x3fbc71c6
 8007138:	9998ebc4 	.word	0x9998ebc4
 800713c:	3fc99999 	.word	0x3fc99999
 8007140:	440fffff 	.word	0x440fffff
 8007144:	7ff00000 	.word	0x7ff00000
 8007148:	54442d18 	.word	0x54442d18
 800714c:	bff921fb 	.word	0xbff921fb
 8007150:	3fdbffff 	.word	0x3fdbffff
 8007154:	3ff00000 	.word	0x3ff00000
 8007158:	3ff2ffff 	.word	0x3ff2ffff
 800715c:	40037fff 	.word	0x40037fff
 8007160:	3ff80000 	.word	0x3ff80000
 8007164:	bff00000 	.word	0xbff00000
 8007168:	080078c8 	.word	0x080078c8
 800716c:	080078e8 	.word	0x080078e8
 8007170:	3ff921fb 	.word	0x3ff921fb

08007174 <fabs>:
 8007174:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007178:	4770      	bx	lr
 800717a:	0000      	movs	r0, r0
 800717c:	0000      	movs	r0, r0
	...

08007180 <floor>:
 8007180:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007184:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8007188:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 800718c:	2e13      	cmp	r6, #19
 800718e:	4607      	mov	r7, r0
 8007190:	460b      	mov	r3, r1
 8007192:	460c      	mov	r4, r1
 8007194:	4605      	mov	r5, r0
 8007196:	dc35      	bgt.n	8007204 <floor+0x84>
 8007198:	2e00      	cmp	r6, #0
 800719a:	da16      	bge.n	80071ca <floor+0x4a>
 800719c:	a336      	add	r3, pc, #216	; (adr r3, 8007278 <floor+0xf8>)
 800719e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071a2:	f7f8 ffe3 	bl	800016c <__adddf3>
 80071a6:	2200      	movs	r2, #0
 80071a8:	2300      	movs	r3, #0
 80071aa:	f7f9 fc21 	bl	80009f0 <__aeabi_dcmpgt>
 80071ae:	b148      	cbz	r0, 80071c4 <floor+0x44>
 80071b0:	2c00      	cmp	r4, #0
 80071b2:	da5c      	bge.n	800726e <floor+0xee>
 80071b4:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80071b8:	433b      	orrs	r3, r7
 80071ba:	4b31      	ldr	r3, [pc, #196]	; (8007280 <floor+0x100>)
 80071bc:	f04f 0500 	mov.w	r5, #0
 80071c0:	bf18      	it	ne
 80071c2:	461c      	movne	r4, r3
 80071c4:	4623      	mov	r3, r4
 80071c6:	462f      	mov	r7, r5
 80071c8:	e027      	b.n	800721a <floor+0x9a>
 80071ca:	4a2e      	ldr	r2, [pc, #184]	; (8007284 <floor+0x104>)
 80071cc:	fa42 f806 	asr.w	r8, r2, r6
 80071d0:	ea01 0208 	and.w	r2, r1, r8
 80071d4:	4302      	orrs	r2, r0
 80071d6:	d020      	beq.n	800721a <floor+0x9a>
 80071d8:	a327      	add	r3, pc, #156	; (adr r3, 8007278 <floor+0xf8>)
 80071da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071de:	f7f8 ffc5 	bl	800016c <__adddf3>
 80071e2:	2200      	movs	r2, #0
 80071e4:	2300      	movs	r3, #0
 80071e6:	f7f9 fc03 	bl	80009f0 <__aeabi_dcmpgt>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	d0ea      	beq.n	80071c4 <floor+0x44>
 80071ee:	2c00      	cmp	r4, #0
 80071f0:	bfbe      	ittt	lt
 80071f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80071f6:	fa43 f606 	asrlt.w	r6, r3, r6
 80071fa:	19a4      	addlt	r4, r4, r6
 80071fc:	ea24 0408 	bic.w	r4, r4, r8
 8007200:	2500      	movs	r5, #0
 8007202:	e7df      	b.n	80071c4 <floor+0x44>
 8007204:	2e33      	cmp	r6, #51	; 0x33
 8007206:	dd0c      	ble.n	8007222 <floor+0xa2>
 8007208:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800720c:	d105      	bne.n	800721a <floor+0x9a>
 800720e:	460b      	mov	r3, r1
 8007210:	4602      	mov	r2, r0
 8007212:	f7f8 ffab 	bl	800016c <__adddf3>
 8007216:	4607      	mov	r7, r0
 8007218:	460b      	mov	r3, r1
 800721a:	4638      	mov	r0, r7
 800721c:	4619      	mov	r1, r3
 800721e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007222:	f04f 32ff 	mov.w	r2, #4294967295
 8007226:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 800722a:	fa22 f808 	lsr.w	r8, r2, r8
 800722e:	ea10 0f08 	tst.w	r0, r8
 8007232:	d0f2      	beq.n	800721a <floor+0x9a>
 8007234:	a310      	add	r3, pc, #64	; (adr r3, 8007278 <floor+0xf8>)
 8007236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723a:	f7f8 ff97 	bl	800016c <__adddf3>
 800723e:	2200      	movs	r2, #0
 8007240:	2300      	movs	r3, #0
 8007242:	f7f9 fbd5 	bl	80009f0 <__aeabi_dcmpgt>
 8007246:	2800      	cmp	r0, #0
 8007248:	d0bc      	beq.n	80071c4 <floor+0x44>
 800724a:	2c00      	cmp	r4, #0
 800724c:	da02      	bge.n	8007254 <floor+0xd4>
 800724e:	2e14      	cmp	r6, #20
 8007250:	d103      	bne.n	800725a <floor+0xda>
 8007252:	3401      	adds	r4, #1
 8007254:	ea25 0508 	bic.w	r5, r5, r8
 8007258:	e7b4      	b.n	80071c4 <floor+0x44>
 800725a:	2301      	movs	r3, #1
 800725c:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007260:	fa03 f606 	lsl.w	r6, r3, r6
 8007264:	4435      	add	r5, r6
 8007266:	42af      	cmp	r7, r5
 8007268:	bf88      	it	hi
 800726a:	18e4      	addhi	r4, r4, r3
 800726c:	e7f2      	b.n	8007254 <floor+0xd4>
 800726e:	2500      	movs	r5, #0
 8007270:	462c      	mov	r4, r5
 8007272:	e7a7      	b.n	80071c4 <floor+0x44>
 8007274:	f3af 8000 	nop.w
 8007278:	8800759c 	.word	0x8800759c
 800727c:	7e37e43c 	.word	0x7e37e43c
 8007280:	bff00000 	.word	0xbff00000
 8007284:	000fffff 	.word	0x000fffff

08007288 <matherr>:
 8007288:	2000      	movs	r0, #0
 800728a:	4770      	bx	lr
 800728c:	0000      	movs	r0, r0
	...

08007290 <scalbn>:
 8007290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007292:	4616      	mov	r6, r2
 8007294:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007298:	4604      	mov	r4, r0
 800729a:	460d      	mov	r5, r1
 800729c:	460b      	mov	r3, r1
 800729e:	b98a      	cbnz	r2, 80072c4 <scalbn+0x34>
 80072a0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80072a4:	4303      	orrs	r3, r0
 80072a6:	d035      	beq.n	8007314 <scalbn+0x84>
 80072a8:	2200      	movs	r2, #0
 80072aa:	4b2d      	ldr	r3, [pc, #180]	; (8007360 <scalbn+0xd0>)
 80072ac:	f7f9 f910 	bl	80004d0 <__aeabi_dmul>
 80072b0:	4a2c      	ldr	r2, [pc, #176]	; (8007364 <scalbn+0xd4>)
 80072b2:	4604      	mov	r4, r0
 80072b4:	4296      	cmp	r6, r2
 80072b6:	460d      	mov	r5, r1
 80072b8:	460b      	mov	r3, r1
 80072ba:	da0e      	bge.n	80072da <scalbn+0x4a>
 80072bc:	a324      	add	r3, pc, #144	; (adr r3, 8007350 <scalbn+0xc0>)
 80072be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c2:	e01c      	b.n	80072fe <scalbn+0x6e>
 80072c4:	f240 77ff 	movw	r7, #2047	; 0x7ff
 80072c8:	42ba      	cmp	r2, r7
 80072ca:	d109      	bne.n	80072e0 <scalbn+0x50>
 80072cc:	4602      	mov	r2, r0
 80072ce:	460b      	mov	r3, r1
 80072d0:	f7f8 ff4c 	bl	800016c <__adddf3>
 80072d4:	4604      	mov	r4, r0
 80072d6:	460d      	mov	r5, r1
 80072d8:	e01c      	b.n	8007314 <scalbn+0x84>
 80072da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80072de:	3a36      	subs	r2, #54	; 0x36
 80072e0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80072e4:	4432      	add	r2, r6
 80072e6:	428a      	cmp	r2, r1
 80072e8:	dd0c      	ble.n	8007304 <scalbn+0x74>
 80072ea:	4622      	mov	r2, r4
 80072ec:	462b      	mov	r3, r5
 80072ee:	a11a      	add	r1, pc, #104	; (adr r1, 8007358 <scalbn+0xc8>)
 80072f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072f4:	f000 f83a 	bl	800736c <copysign>
 80072f8:	a317      	add	r3, pc, #92	; (adr r3, 8007358 <scalbn+0xc8>)
 80072fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fe:	f7f9 f8e7 	bl	80004d0 <__aeabi_dmul>
 8007302:	e7e7      	b.n	80072d4 <scalbn+0x44>
 8007304:	2a00      	cmp	r2, #0
 8007306:	dd08      	ble.n	800731a <scalbn+0x8a>
 8007308:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800730c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007310:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007314:	4620      	mov	r0, r4
 8007316:	4629      	mov	r1, r5
 8007318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800731a:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800731e:	da0b      	bge.n	8007338 <scalbn+0xa8>
 8007320:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007324:	429e      	cmp	r6, r3
 8007326:	4622      	mov	r2, r4
 8007328:	462b      	mov	r3, r5
 800732a:	dce0      	bgt.n	80072ee <scalbn+0x5e>
 800732c:	a108      	add	r1, pc, #32	; (adr r1, 8007350 <scalbn+0xc0>)
 800732e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007332:	f000 f81b 	bl	800736c <copysign>
 8007336:	e7c1      	b.n	80072bc <scalbn+0x2c>
 8007338:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800733c:	3236      	adds	r2, #54	; 0x36
 800733e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007342:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007346:	4620      	mov	r0, r4
 8007348:	4629      	mov	r1, r5
 800734a:	2200      	movs	r2, #0
 800734c:	4b06      	ldr	r3, [pc, #24]	; (8007368 <scalbn+0xd8>)
 800734e:	e7d6      	b.n	80072fe <scalbn+0x6e>
 8007350:	c2f8f359 	.word	0xc2f8f359
 8007354:	01a56e1f 	.word	0x01a56e1f
 8007358:	8800759c 	.word	0x8800759c
 800735c:	7e37e43c 	.word	0x7e37e43c
 8007360:	43500000 	.word	0x43500000
 8007364:	ffff3cb0 	.word	0xffff3cb0
 8007368:	3c900000 	.word	0x3c900000

0800736c <copysign>:
 800736c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007370:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007374:	ea42 0103 	orr.w	r1, r2, r3
 8007378:	4770      	bx	lr
	...

0800737c <__errno>:
 800737c:	4b01      	ldr	r3, [pc, #4]	; (8007384 <__errno+0x8>)
 800737e:	6818      	ldr	r0, [r3, #0]
 8007380:	4770      	bx	lr
 8007382:	bf00      	nop
 8007384:	20000018 	.word	0x20000018

08007388 <_sbrk>:
 8007388:	4b04      	ldr	r3, [pc, #16]	; (800739c <_sbrk+0x14>)
 800738a:	4602      	mov	r2, r0
 800738c:	6819      	ldr	r1, [r3, #0]
 800738e:	b909      	cbnz	r1, 8007394 <_sbrk+0xc>
 8007390:	4903      	ldr	r1, [pc, #12]	; (80073a0 <_sbrk+0x18>)
 8007392:	6019      	str	r1, [r3, #0]
 8007394:	6818      	ldr	r0, [r3, #0]
 8007396:	4402      	add	r2, r0
 8007398:	601a      	str	r2, [r3, #0]
 800739a:	4770      	bx	lr
 800739c:	20000254 	.word	0x20000254
 80073a0:	20000298 	.word	0x20000298

080073a4 <_init>:
 80073a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a6:	bf00      	nop
 80073a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073aa:	bc08      	pop	{r3}
 80073ac:	469e      	mov	lr, r3
 80073ae:	4770      	bx	lr

080073b0 <_fini>:
 80073b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b2:	bf00      	nop
 80073b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073b6:	bc08      	pop	{r3}
 80073b8:	469e      	mov	lr, r3
 80073ba:	4770      	bx	lr
