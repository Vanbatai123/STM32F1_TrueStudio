
F1_TOTAL_v1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001074  08001074  00011074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000008  08001084  08001084  00011084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800108c  0800108c  0001108c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000080  20000000  08001090  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000030  20000080  08001110  00020080  2**2
                  ALLOC
  7 ._user_heap_stack 00000100  200000b0  08001110  000200b0  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
  9 .debug_info   000062ab  00000000  00000000  000200a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001337  00000000  00000000  00026354  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000004d0  00000000  00000000  00027690  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000438  00000000  00000000  00027b60  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000225c  00000000  00000000  00027f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00001f14  00000000  00000000  0002a1f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0002c108  2**0
                  CONTENTS, READONLY
 16 .debug_frame  000013f0  00000000  00000000  0002c184  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .stabstr      0000003f  00000000  00000000  0002d574  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000080 	.word	0x20000080
 8000128:	00000000 	.word	0x00000000
 800012c:	0800105c 	.word	0x0800105c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000084 	.word	0x20000084
 8000148:	0800105c 	.word	0x0800105c

0800014c <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that
  *         contains the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800014c:	b480      	push	{r7}
 800014e:	b089      	sub	sp, #36	; 0x24
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
  uint32_t currentmode = 0x00, currentpin = 0x00, pinpos = 0x00, pos = 0x00;
 8000156:	2300      	movs	r3, #0
 8000158:	61fb      	str	r3, [r7, #28]
 800015a:	2300      	movs	r3, #0
 800015c:	613b      	str	r3, [r7, #16]
 800015e:	2300      	movs	r3, #0
 8000160:	61bb      	str	r3, [r7, #24]
 8000162:	2300      	movs	r3, #0
 8000164:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg = 0x00, pinmask = 0x00;
 8000166:	2300      	movs	r3, #0
 8000168:	617b      	str	r3, [r7, #20]
 800016a:	2300      	movs	r3, #0
 800016c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PIN(GPIO_InitStruct->GPIO_Pin));  
  
/*---------------------------- GPIO Mode Configuration -----------------------*/
  currentmode = ((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x0F);
 800016e:	683b      	ldr	r3, [r7, #0]
 8000170:	78db      	ldrb	r3, [r3, #3]
 8000172:	f003 030f 	and.w	r3, r3, #15
 8000176:	61fb      	str	r3, [r7, #28]
  if ((((uint32_t)GPIO_InitStruct->GPIO_Mode) & ((uint32_t)0x10)) != 0x00)
 8000178:	683b      	ldr	r3, [r7, #0]
 800017a:	78db      	ldrb	r3, [r3, #3]
 800017c:	f003 0310 	and.w	r3, r3, #16
 8000180:	2b00      	cmp	r3, #0
 8000182:	d005      	beq.n	8000190 <GPIO_Init+0x44>
  { 
    /* Check the parameters */
    assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));
    /* Output mode */
    currentmode |= (uint32_t)GPIO_InitStruct->GPIO_Speed;
 8000184:	683b      	ldr	r3, [r7, #0]
 8000186:	789b      	ldrb	r3, [r3, #2]
 8000188:	461a      	mov	r2, r3
 800018a:	69fb      	ldr	r3, [r7, #28]
 800018c:	4313      	orrs	r3, r2
 800018e:	61fb      	str	r3, [r7, #28]
  }
/*---------------------------- GPIO CRL Configuration ------------------------*/
  /* Configure the eight low port pins */
  if (((uint32_t)GPIO_InitStruct->GPIO_Pin & ((uint32_t)0x00FF)) != 0x00)
 8000190:	683b      	ldr	r3, [r7, #0]
 8000192:	881b      	ldrh	r3, [r3, #0]
 8000194:	b2db      	uxtb	r3, r3
 8000196:	2b00      	cmp	r3, #0
 8000198:	d044      	beq.n	8000224 <GPIO_Init+0xd8>
  {
    tmpreg = GPIOx->CRL;
 800019a:	687b      	ldr	r3, [r7, #4]
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80001a0:	2300      	movs	r3, #0
 80001a2:	61bb      	str	r3, [r7, #24]
 80001a4:	e038      	b.n	8000218 <GPIO_Init+0xcc>
    {
      pos = ((uint32_t)0x01) << pinpos;
 80001a6:	2201      	movs	r2, #1
 80001a8:	69bb      	ldr	r3, [r7, #24]
 80001aa:	fa02 f303 	lsl.w	r3, r2, r3
 80001ae:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80001b0:	683b      	ldr	r3, [r7, #0]
 80001b2:	881b      	ldrh	r3, [r3, #0]
 80001b4:	461a      	mov	r2, r3
 80001b6:	68fb      	ldr	r3, [r7, #12]
 80001b8:	4013      	ands	r3, r2
 80001ba:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 80001bc:	693a      	ldr	r2, [r7, #16]
 80001be:	68fb      	ldr	r3, [r7, #12]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d126      	bne.n	8000212 <GPIO_Init+0xc6>
      {
        pos = pinpos << 2;
 80001c4:	69bb      	ldr	r3, [r7, #24]
 80001c6:	009b      	lsls	r3, r3, #2
 80001c8:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding low control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 80001ca:	220f      	movs	r2, #15
 80001cc:	68fb      	ldr	r3, [r7, #12]
 80001ce:	fa02 f303 	lsl.w	r3, r2, r3
 80001d2:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 80001d4:	68bb      	ldr	r3, [r7, #8]
 80001d6:	43db      	mvns	r3, r3
 80001d8:	697a      	ldr	r2, [r7, #20]
 80001da:	4013      	ands	r3, r2
 80001dc:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 80001de:	69fa      	ldr	r2, [r7, #28]
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	fa02 f303 	lsl.w	r3, r2, r3
 80001e6:	697a      	ldr	r2, [r7, #20]
 80001e8:	4313      	orrs	r3, r2
 80001ea:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 80001ec:	683b      	ldr	r3, [r7, #0]
 80001ee:	78db      	ldrb	r3, [r3, #3]
 80001f0:	2b28      	cmp	r3, #40	; 0x28
 80001f2:	d105      	bne.n	8000200 <GPIO_Init+0xb4>
        {
          GPIOx->BRR = (((uint32_t)0x01) << pinpos);
 80001f4:	2201      	movs	r2, #1
 80001f6:	69bb      	ldr	r3, [r7, #24]
 80001f8:	409a      	lsls	r2, r3
 80001fa:	687b      	ldr	r3, [r7, #4]
 80001fc:	615a      	str	r2, [r3, #20]
 80001fe:	e008      	b.n	8000212 <GPIO_Init+0xc6>
        }
        else
        {
          /* Set the corresponding ODR bit */
          if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000200:	683b      	ldr	r3, [r7, #0]
 8000202:	78db      	ldrb	r3, [r3, #3]
 8000204:	2b48      	cmp	r3, #72	; 0x48
 8000206:	d104      	bne.n	8000212 <GPIO_Init+0xc6>
          {
            GPIOx->BSRR = (((uint32_t)0x01) << pinpos);
 8000208:	2201      	movs	r2, #1
 800020a:	69bb      	ldr	r3, [r7, #24]
 800020c:	409a      	lsls	r2, r3
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000212:	69bb      	ldr	r3, [r7, #24]
 8000214:	3301      	adds	r3, #1
 8000216:	61bb      	str	r3, [r7, #24]
 8000218:	69bb      	ldr	r3, [r7, #24]
 800021a:	2b07      	cmp	r3, #7
 800021c:	d9c3      	bls.n	80001a6 <GPIO_Init+0x5a>
          }
        }
      }
    }
    GPIOx->CRL = tmpreg;
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	697a      	ldr	r2, [r7, #20]
 8000222:	601a      	str	r2, [r3, #0]
  }
/*---------------------------- GPIO CRH Configuration ------------------------*/
  /* Configure the eight high port pins */
  if (GPIO_InitStruct->GPIO_Pin > 0x00FF)
 8000224:	683b      	ldr	r3, [r7, #0]
 8000226:	881b      	ldrh	r3, [r3, #0]
 8000228:	2bff      	cmp	r3, #255	; 0xff
 800022a:	d946      	bls.n	80002ba <GPIO_Init+0x16e>
  {
    tmpreg = GPIOx->CRH;
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	685b      	ldr	r3, [r3, #4]
 8000230:	617b      	str	r3, [r7, #20]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 8000232:	2300      	movs	r3, #0
 8000234:	61bb      	str	r3, [r7, #24]
 8000236:	e03a      	b.n	80002ae <GPIO_Init+0x162>
    {
      pos = (((uint32_t)0x01) << (pinpos + 0x08));
 8000238:	69bb      	ldr	r3, [r7, #24]
 800023a:	3308      	adds	r3, #8
 800023c:	2201      	movs	r2, #1
 800023e:	fa02 f303 	lsl.w	r3, r2, r3
 8000242:	60fb      	str	r3, [r7, #12]
      /* Get the port pins position */
      currentpin = ((GPIO_InitStruct->GPIO_Pin) & pos);
 8000244:	683b      	ldr	r3, [r7, #0]
 8000246:	881b      	ldrh	r3, [r3, #0]
 8000248:	461a      	mov	r2, r3
 800024a:	68fb      	ldr	r3, [r7, #12]
 800024c:	4013      	ands	r3, r2
 800024e:	613b      	str	r3, [r7, #16]
      if (currentpin == pos)
 8000250:	693a      	ldr	r2, [r7, #16]
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	429a      	cmp	r2, r3
 8000256:	d127      	bne.n	80002a8 <GPIO_Init+0x15c>
      {
        pos = pinpos << 2;
 8000258:	69bb      	ldr	r3, [r7, #24]
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	60fb      	str	r3, [r7, #12]
        /* Clear the corresponding high control register bits */
        pinmask = ((uint32_t)0x0F) << pos;
 800025e:	220f      	movs	r2, #15
 8000260:	68fb      	ldr	r3, [r7, #12]
 8000262:	fa02 f303 	lsl.w	r3, r2, r3
 8000266:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~pinmask;
 8000268:	68bb      	ldr	r3, [r7, #8]
 800026a:	43db      	mvns	r3, r3
 800026c:	697a      	ldr	r2, [r7, #20]
 800026e:	4013      	ands	r3, r2
 8000270:	617b      	str	r3, [r7, #20]
        /* Write the mode configuration in the corresponding bits */
        tmpreg |= (currentmode << pos);
 8000272:	69fa      	ldr	r2, [r7, #28]
 8000274:	68fb      	ldr	r3, [r7, #12]
 8000276:	fa02 f303 	lsl.w	r3, r2, r3
 800027a:	697a      	ldr	r2, [r7, #20]
 800027c:	4313      	orrs	r3, r2
 800027e:	617b      	str	r3, [r7, #20]
        /* Reset the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPD)
 8000280:	683b      	ldr	r3, [r7, #0]
 8000282:	78db      	ldrb	r3, [r3, #3]
 8000284:	2b28      	cmp	r3, #40	; 0x28
 8000286:	d105      	bne.n	8000294 <GPIO_Init+0x148>
        {
          GPIOx->BRR = (((uint32_t)0x01) << (pinpos + 0x08));
 8000288:	69bb      	ldr	r3, [r7, #24]
 800028a:	3308      	adds	r3, #8
 800028c:	2201      	movs	r2, #1
 800028e:	409a      	lsls	r2, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	615a      	str	r2, [r3, #20]
        }
        /* Set the corresponding ODR bit */
        if (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_IPU)
 8000294:	683b      	ldr	r3, [r7, #0]
 8000296:	78db      	ldrb	r3, [r3, #3]
 8000298:	2b48      	cmp	r3, #72	; 0x48
 800029a:	d105      	bne.n	80002a8 <GPIO_Init+0x15c>
        {
          GPIOx->BSRR = (((uint32_t)0x01) << (pinpos + 0x08));
 800029c:	69bb      	ldr	r3, [r7, #24]
 800029e:	3308      	adds	r3, #8
 80002a0:	2201      	movs	r2, #1
 80002a2:	409a      	lsls	r2, r3
 80002a4:	687b      	ldr	r3, [r7, #4]
 80002a6:	611a      	str	r2, [r3, #16]
    for (pinpos = 0x00; pinpos < 0x08; pinpos++)
 80002a8:	69bb      	ldr	r3, [r7, #24]
 80002aa:	3301      	adds	r3, #1
 80002ac:	61bb      	str	r3, [r7, #24]
 80002ae:	69bb      	ldr	r3, [r7, #24]
 80002b0:	2b07      	cmp	r3, #7
 80002b2:	d9c1      	bls.n	8000238 <GPIO_Init+0xec>
        }
      }
    }
    GPIOx->CRH = tmpreg;
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	697a      	ldr	r2, [r7, #20]
 80002b8:	605a      	str	r2, [r3, #4]
  }
}
 80002ba:	bf00      	nop
 80002bc:	3724      	adds	r7, #36	; 0x24
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr

080002c4 <I2C_Init>:
  * @param  I2C_InitStruct: pointer to a I2C_InitTypeDef structure that
  *   contains the configuration information for the specified I2C peripheral.
  * @retval None
  */
void I2C_Init(I2C_TypeDef* I2Cx, I2C_InitTypeDef* I2C_InitStruct)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b08a      	sub	sp, #40	; 0x28
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0, freqrange = 0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80002d2:	2300      	movs	r3, #0
 80002d4:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t result = 0x04;
 80002d6:	2304      	movs	r3, #4
 80002d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  uint32_t pclk1 = 8000000;
 80002da:	4b57      	ldr	r3, [pc, #348]	; (8000438 <I2C_Init+0x174>)
 80002dc:	61fb      	str	r3, [r7, #28]
  assert_param(IS_I2C_ACK_STATE(I2C_InitStruct->I2C_Ack));
  assert_param(IS_I2C_ACKNOWLEDGE_ADDRESS(I2C_InitStruct->I2C_AcknowledgedAddress));

/*---------------------------- I2Cx CR2 Configuration ------------------------*/
  /* Get the I2Cx CR2 value */
  tmpreg = I2Cx->CR2;
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	889b      	ldrh	r3, [r3, #4]
 80002e2:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear frequency FREQ[5:0] bits */
  tmpreg &= CR2_FREQ_Reset;
 80002e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80002e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80002ea:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Get pclk1 frequency value */
  RCC_GetClocksFreq(&rcc_clocks);
 80002ec:	f107 0308 	add.w	r3, r7, #8
 80002f0:	4618      	mov	r0, r3
 80002f2:	f000 f9bf 	bl	8000674 <RCC_GetClocksFreq>
  pclk1 = rcc_clocks.PCLK1_Frequency;
 80002f6:	693b      	ldr	r3, [r7, #16]
 80002f8:	61fb      	str	r3, [r7, #28]
  /* Set frequency bits depending on pclk1 value */
  freqrange = (uint16_t)(pclk1 / 1000000);
 80002fa:	69fb      	ldr	r3, [r7, #28]
 80002fc:	4a4f      	ldr	r2, [pc, #316]	; (800043c <I2C_Init+0x178>)
 80002fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000302:	0c9b      	lsrs	r3, r3, #18
 8000304:	847b      	strh	r3, [r7, #34]	; 0x22
  tmpreg |= freqrange;
 8000306:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000308:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800030a:	4313      	orrs	r3, r2
 800030c:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR2 */
  I2Cx->CR2 = tmpreg;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000312:	809a      	strh	r2, [r3, #4]

/*---------------------------- I2Cx CCR Configuration ------------------------*/
  /* Disable the selected I2C peripheral to configure TRISE */
  I2Cx->CR1 &= CR1_PE_Reset;
 8000314:	687b      	ldr	r3, [r7, #4]
 8000316:	881b      	ldrh	r3, [r3, #0]
 8000318:	b29b      	uxth	r3, r3
 800031a:	f023 0301 	bic.w	r3, r3, #1
 800031e:	b29a      	uxth	r2, r3
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	801a      	strh	r2, [r3, #0]
  /* Reset tmpreg value */
  /* Clear F/S, DUTY and CCR[11:0] bits */
  tmpreg = 0;
 8000324:	2300      	movs	r3, #0
 8000326:	84fb      	strh	r3, [r7, #38]	; 0x26

  /* Configure speed in standard mode */
  if (I2C_InitStruct->I2C_ClockSpeed <= 100000)
 8000328:	683b      	ldr	r3, [r7, #0]
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	4a44      	ldr	r2, [pc, #272]	; (8000440 <I2C_Init+0x17c>)
 800032e:	4293      	cmp	r3, r2
 8000330:	d815      	bhi.n	800035e <I2C_Init+0x9a>
  {
    /* Standard mode speed calculate */
    result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed << 1));
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	005b      	lsls	r3, r3, #1
 8000338:	69fa      	ldr	r2, [r7, #28]
 800033a:	fbb2 f3f3 	udiv	r3, r2, r3
 800033e:	84bb      	strh	r3, [r7, #36]	; 0x24
    /* Test if CCR value is under 0x4*/
    if (result < 0x04)
 8000340:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000342:	2b03      	cmp	r3, #3
 8000344:	d801      	bhi.n	800034a <I2C_Init+0x86>
    {
      /* Set minimum allowed value */
      result = 0x04;  
 8000346:	2304      	movs	r3, #4
 8000348:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value for standard mode */
    tmpreg |= result;	  
 800034a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800034c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800034e:	4313      	orrs	r3, r2
 8000350:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for standard mode */
    I2Cx->TRISE = freqrange + 1; 
 8000352:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000354:	3301      	adds	r3, #1
 8000356:	b29a      	uxth	r2, r3
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	841a      	strh	r2, [r3, #32]
 800035c:	e040      	b.n	80003e0 <I2C_Init+0x11c>
  }
  /* Configure speed in fast mode */
  else /*(I2C_InitStruct->I2C_ClockSpeed <= 400000)*/
  {
    if (I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_2)
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	88db      	ldrh	r3, [r3, #6]
 8000362:	f64b 72ff 	movw	r2, #49151	; 0xbfff
 8000366:	4293      	cmp	r3, r2
 8000368:	d109      	bne.n	800037e <I2C_Init+0xba>
    {
      /* Fast mode speed calculate: Tlow/Thigh = 2 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 3));
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	681a      	ldr	r2, [r3, #0]
 800036e:	4613      	mov	r3, r2
 8000370:	005b      	lsls	r3, r3, #1
 8000372:	4413      	add	r3, r2
 8000374:	69fa      	ldr	r2, [r7, #28]
 8000376:	fbb2 f3f3 	udiv	r3, r2, r3
 800037a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800037c:	e00e      	b.n	800039c <I2C_Init+0xd8>
    }
    else /*I2C_InitStruct->I2C_DutyCycle == I2C_DutyCycle_16_9*/
    {
      /* Fast mode speed calculate: Tlow/Thigh = 16/9 */
      result = (uint16_t)(pclk1 / (I2C_InitStruct->I2C_ClockSpeed * 25));
 800037e:	683b      	ldr	r3, [r7, #0]
 8000380:	681a      	ldr	r2, [r3, #0]
 8000382:	4613      	mov	r3, r2
 8000384:	009b      	lsls	r3, r3, #2
 8000386:	4413      	add	r3, r2
 8000388:	009a      	lsls	r2, r3, #2
 800038a:	4413      	add	r3, r2
 800038c:	69fa      	ldr	r2, [r7, #28]
 800038e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000392:	84bb      	strh	r3, [r7, #36]	; 0x24
      /* Set DUTY bit */
      result |= I2C_DutyCycle_16_9;
 8000394:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000396:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800039a:	84bb      	strh	r3, [r7, #36]	; 0x24
    }

    /* Test if CCR value is under 0x1*/
    if ((result & CCR_CCR_Set) == 0)
 800039c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800039e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d103      	bne.n	80003ae <I2C_Init+0xea>
    {
      /* Set minimum allowed value */
      result |= (uint16_t)0x0001;  
 80003a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    /* Set speed value and set F/S bit for fast mode */
    tmpreg |= (uint16_t)(result | CCR_FS_Set);
 80003ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80003b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80003b2:	4313      	orrs	r3, r2
 80003b4:	b29b      	uxth	r3, r3
 80003b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80003ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80003be:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* Set Maximum Rise Time for fast mode */
    I2Cx->TRISE = (uint16_t)(((freqrange * (uint16_t)300) / (uint16_t)1000) + (uint16_t)1);  
 80003c0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80003c2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80003c6:	fb02 f303 	mul.w	r3, r2, r3
 80003ca:	4a1e      	ldr	r2, [pc, #120]	; (8000444 <I2C_Init+0x180>)
 80003cc:	fb82 1203 	smull	r1, r2, r2, r3
 80003d0:	1192      	asrs	r2, r2, #6
 80003d2:	17db      	asrs	r3, r3, #31
 80003d4:	1ad3      	subs	r3, r2, r3
 80003d6:	b29b      	uxth	r3, r3
 80003d8:	3301      	adds	r3, #1
 80003da:	b29a      	uxth	r2, r3
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	841a      	strh	r2, [r3, #32]
  }

  /* Write to I2Cx CCR */
  I2Cx->CCR = tmpreg;
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80003e4:	839a      	strh	r2, [r3, #28]
  /* Enable the selected I2C peripheral */
  I2Cx->CR1 |= CR1_PE_Set;
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	881b      	ldrh	r3, [r3, #0]
 80003ea:	b29b      	uxth	r3, r3
 80003ec:	f043 0301 	orr.w	r3, r3, #1
 80003f0:	b29a      	uxth	r2, r3
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx CR1 Configuration ------------------------*/
  /* Get the I2Cx CR1 value */
  tmpreg = I2Cx->CR1;
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	881b      	ldrh	r3, [r3, #0]
 80003fa:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Clear ACK, SMBTYPE and  SMBUS bits */
  tmpreg &= CR1_CLEAR_Mask;
 80003fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80003fe:	f423 6381 	bic.w	r3, r3, #1032	; 0x408
 8000402:	f023 0302 	bic.w	r3, r3, #2
 8000406:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Configure I2Cx: mode and acknowledgement */
  /* Set SMBTYPE and SMBUS bits according to I2C_Mode value */
  /* Set ACK bit according to I2C_Ack value */
  tmpreg |= (uint16_t)((uint32_t)I2C_InitStruct->I2C_Mode | I2C_InitStruct->I2C_Ack);
 8000408:	683b      	ldr	r3, [r7, #0]
 800040a:	889a      	ldrh	r2, [r3, #4]
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	895b      	ldrh	r3, [r3, #10]
 8000410:	4313      	orrs	r3, r2
 8000412:	b29a      	uxth	r2, r3
 8000414:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000416:	4313      	orrs	r3, r2
 8000418:	84fb      	strh	r3, [r7, #38]	; 0x26
  /* Write to I2Cx CR1 */
  I2Cx->CR1 = tmpreg;
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800041e:	801a      	strh	r2, [r3, #0]

/*---------------------------- I2Cx OAR1 Configuration -----------------------*/
  /* Set I2Cx Own Address1 and acknowledged address */
  I2Cx->OAR1 = (I2C_InitStruct->I2C_AcknowledgedAddress | I2C_InitStruct->I2C_OwnAddress1);
 8000420:	683b      	ldr	r3, [r7, #0]
 8000422:	899a      	ldrh	r2, [r3, #12]
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	891b      	ldrh	r3, [r3, #8]
 8000428:	4313      	orrs	r3, r2
 800042a:	b29a      	uxth	r2, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	811a      	strh	r2, [r3, #8]
}
 8000430:	bf00      	nop
 8000432:	3728      	adds	r7, #40	; 0x28
 8000434:	46bd      	mov	sp, r7
 8000436:	bd80      	pop	{r7, pc}
 8000438:	007a1200 	.word	0x007a1200
 800043c:	431bde83 	.word	0x431bde83
 8000440:	000186a0 	.word	0x000186a0
 8000444:	10624dd3 	.word	0x10624dd3

08000448 <I2C_Cmd>:
  * @param  NewState: new state of the I2Cx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void I2C_Cmd(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000448:	b480      	push	{r7}
 800044a:	b083      	sub	sp, #12
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
 8000450:	460b      	mov	r3, r1
 8000452:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000454:	78fb      	ldrb	r3, [r7, #3]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d008      	beq.n	800046c <I2C_Cmd+0x24>
  {
    /* Enable the selected I2C peripheral */
    I2Cx->CR1 |= CR1_PE_Set;
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	881b      	ldrh	r3, [r3, #0]
 800045e:	b29b      	uxth	r3, r3
 8000460:	f043 0301 	orr.w	r3, r3, #1
 8000464:	b29a      	uxth	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected I2C peripheral */
    I2Cx->CR1 &= CR1_PE_Reset;
  }
}
 800046a:	e007      	b.n	800047c <I2C_Cmd+0x34>
    I2Cx->CR1 &= CR1_PE_Reset;
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	881b      	ldrh	r3, [r3, #0]
 8000470:	b29b      	uxth	r3, r3
 8000472:	f023 0301 	bic.w	r3, r3, #1
 8000476:	b29a      	uxth	r2, r3
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	801a      	strh	r2, [r3, #0]
}
 800047c:	bf00      	nop
 800047e:	370c      	adds	r7, #12
 8000480:	46bd      	mov	sp, r7
 8000482:	bc80      	pop	{r7}
 8000484:	4770      	bx	lr

08000486 <I2C_GenerateSTART>:
  * @param  NewState: new state of the I2C START condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTART(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000486:	b480      	push	{r7}
 8000488:	b083      	sub	sp, #12
 800048a:	af00      	add	r7, sp, #0
 800048c:	6078      	str	r0, [r7, #4]
 800048e:	460b      	mov	r3, r1
 8000490:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000492:	78fb      	ldrb	r3, [r7, #3]
 8000494:	2b00      	cmp	r3, #0
 8000496:	d008      	beq.n	80004aa <I2C_GenerateSTART+0x24>
  {
    /* Generate a START condition */
    I2Cx->CR1 |= CR1_START_Set;
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	881b      	ldrh	r3, [r3, #0]
 800049c:	b29b      	uxth	r3, r3
 800049e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004a2:	b29a      	uxth	r2, r3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the START condition generation */
    I2Cx->CR1 &= CR1_START_Reset;
  }
}
 80004a8:	e007      	b.n	80004ba <I2C_GenerateSTART+0x34>
    I2Cx->CR1 &= CR1_START_Reset;
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	881b      	ldrh	r3, [r3, #0]
 80004ae:	b29b      	uxth	r3, r3
 80004b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004b4:	b29a      	uxth	r2, r3
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	801a      	strh	r2, [r3, #0]
}
 80004ba:	bf00      	nop
 80004bc:	370c      	adds	r7, #12
 80004be:	46bd      	mov	sp, r7
 80004c0:	bc80      	pop	{r7}
 80004c2:	4770      	bx	lr

080004c4 <I2C_GenerateSTOP>:
  * @param  NewState: new state of the I2C STOP condition generation.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_GenerateSTOP(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
 80004cc:	460b      	mov	r3, r1
 80004ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80004d0:	78fb      	ldrb	r3, [r7, #3]
 80004d2:	2b00      	cmp	r3, #0
 80004d4:	d008      	beq.n	80004e8 <I2C_GenerateSTOP+0x24>
  {
    /* Generate a STOP condition */
    I2Cx->CR1 |= CR1_STOP_Set;
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	881b      	ldrh	r3, [r3, #0]
 80004da:	b29b      	uxth	r3, r3
 80004dc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e0:	b29a      	uxth	r2, r3
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the STOP condition generation */
    I2Cx->CR1 &= CR1_STOP_Reset;
  }
}
 80004e6:	e007      	b.n	80004f8 <I2C_GenerateSTOP+0x34>
    I2Cx->CR1 &= CR1_STOP_Reset;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	881b      	ldrh	r3, [r3, #0]
 80004ec:	b29b      	uxth	r3, r3
 80004ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80004f2:	b29a      	uxth	r2, r3
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	801a      	strh	r2, [r3, #0]
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bc80      	pop	{r7}
 8000500:	4770      	bx	lr

08000502 <I2C_AcknowledgeConfig>:
  * @param  NewState: new state of the I2C Acknowledgement.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void I2C_AcknowledgeConfig(I2C_TypeDef* I2Cx, FunctionalState NewState)
{
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
 800050a:	460b      	mov	r3, r1
 800050c:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800050e:	78fb      	ldrb	r3, [r7, #3]
 8000510:	2b00      	cmp	r3, #0
 8000512:	d008      	beq.n	8000526 <I2C_AcknowledgeConfig+0x24>
  {
    /* Enable the acknowledgement */
    I2Cx->CR1 |= CR1_ACK_Set;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	881b      	ldrh	r3, [r3, #0]
 8000518:	b29b      	uxth	r3, r3
 800051a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800051e:	b29a      	uxth	r2, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the acknowledgement */
    I2Cx->CR1 &= CR1_ACK_Reset;
  }
}
 8000524:	e007      	b.n	8000536 <I2C_AcknowledgeConfig+0x34>
    I2Cx->CR1 &= CR1_ACK_Reset;
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	881b      	ldrh	r3, [r3, #0]
 800052a:	b29b      	uxth	r3, r3
 800052c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000530:	b29a      	uxth	r2, r3
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	801a      	strh	r2, [r3, #0]
}
 8000536:	bf00      	nop
 8000538:	370c      	adds	r7, #12
 800053a:	46bd      	mov	sp, r7
 800053c:	bc80      	pop	{r7}
 800053e:	4770      	bx	lr

08000540 <I2C_SendData>:
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @param  Data: Byte to be transmitted..
  * @retval None
  */
void I2C_SendData(I2C_TypeDef* I2Cx, uint8_t Data)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	460b      	mov	r3, r1
 800054a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Write in the DR register the data to be sent */
  I2Cx->DR = Data;
 800054c:	78fb      	ldrb	r3, [r7, #3]
 800054e:	b29a      	uxth	r2, r3
 8000550:	687b      	ldr	r3, [r7, #4]
 8000552:	821a      	strh	r2, [r3, #16]
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr

0800055e <I2C_ReceiveData>:
  * @brief  Returns the most recent received data by the I2Cx peripheral.
  * @param  I2Cx: where x can be 1 or 2 to select the I2C peripheral.
  * @retval The value of the received data.
  */
uint8_t I2C_ReceiveData(I2C_TypeDef* I2Cx)
{
 800055e:	b480      	push	{r7}
 8000560:	b083      	sub	sp, #12
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  /* Return the data in the DR register */
  return (uint8_t)I2Cx->DR;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	8a1b      	ldrh	r3, [r3, #16]
 800056a:	b29b      	uxth	r3, r3
 800056c:	b2db      	uxtb	r3, r3
}
 800056e:	4618      	mov	r0, r3
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	bc80      	pop	{r7}
 8000576:	4770      	bx	lr

08000578 <I2C_Send7bitAddress>:
  *     @arg I2C_Direction_Transmitter: Transmitter mode
  *     @arg I2C_Direction_Receiver: Receiver mode
  * @retval None.
  */
void I2C_Send7bitAddress(I2C_TypeDef* I2Cx, uint8_t Address, uint8_t I2C_Direction)
{
 8000578:	b480      	push	{r7}
 800057a:	b083      	sub	sp, #12
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
 8000580:	460b      	mov	r3, r1
 8000582:	70fb      	strb	r3, [r7, #3]
 8000584:	4613      	mov	r3, r2
 8000586:	70bb      	strb	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_DIRECTION(I2C_Direction));
  /* Test on the direction to set/reset the read/write bit */
  if (I2C_Direction != I2C_Direction_Transmitter)
 8000588:	78bb      	ldrb	r3, [r7, #2]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d004      	beq.n	8000598 <I2C_Send7bitAddress+0x20>
  {
    /* Set the address bit0 for read */
    Address |= OAR1_ADD0_Set;
 800058e:	78fb      	ldrb	r3, [r7, #3]
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	70fb      	strb	r3, [r7, #3]
 8000596:	e003      	b.n	80005a0 <I2C_Send7bitAddress+0x28>
  }
  else
  {
    /* Reset the address bit0 for write */
    Address &= OAR1_ADD0_Reset;
 8000598:	78fb      	ldrb	r3, [r7, #3]
 800059a:	f023 0301 	bic.w	r3, r3, #1
 800059e:	70fb      	strb	r3, [r7, #3]
  }
  /* Send the address */
  I2Cx->DR = Address;
 80005a0:	78fb      	ldrb	r3, [r7, #3]
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	821a      	strh	r2, [r3, #16]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bc80      	pop	{r7}
 80005b0:	4770      	bx	lr

080005b2 <I2C_CheckEvent>:
  * @retval An ErrorStatus enumeration value:
  * - SUCCESS: Last event is equal to the I2C_EVENT
  * - ERROR: Last event is different from the I2C_EVENT
  */
ErrorStatus I2C_CheckEvent(I2C_TypeDef* I2Cx, uint32_t I2C_EVENT)
{
 80005b2:	b480      	push	{r7}
 80005b4:	b087      	sub	sp, #28
 80005b6:	af00      	add	r7, sp, #0
 80005b8:	6078      	str	r0, [r7, #4]
 80005ba:	6039      	str	r1, [r7, #0]
  uint32_t lastevent = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	613b      	str	r3, [r7, #16]
  uint32_t flag1 = 0, flag2 = 0;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	2300      	movs	r3, #0
 80005c6:	60bb      	str	r3, [r7, #8]
  ErrorStatus status = ERROR;
 80005c8:	2300      	movs	r3, #0
 80005ca:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_EVENT(I2C_EVENT));

  /* Read the I2Cx status register */
  flag1 = I2Cx->SR1;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	8a9b      	ldrh	r3, [r3, #20]
 80005d0:	b29b      	uxth	r3, r3
 80005d2:	60fb      	str	r3, [r7, #12]
  flag2 = I2Cx->SR2;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	8b1b      	ldrh	r3, [r3, #24]
 80005d8:	b29b      	uxth	r3, r3
 80005da:	60bb      	str	r3, [r7, #8]
  flag2 = flag2 << 16;
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	041b      	lsls	r3, r3, #16
 80005e0:	60bb      	str	r3, [r7, #8]

  /* Get the last event value from I2C status register */
  lastevent = (flag1 | flag2) & FLAG_Mask;
 80005e2:	68fa      	ldr	r2, [r7, #12]
 80005e4:	68bb      	ldr	r3, [r7, #8]
 80005e6:	4313      	orrs	r3, r2
 80005e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80005ec:	613b      	str	r3, [r7, #16]

  /* Check whether the last event contains the I2C_EVENT */
  if ((lastevent & I2C_EVENT) == I2C_EVENT)
 80005ee:	693a      	ldr	r2, [r7, #16]
 80005f0:	683b      	ldr	r3, [r7, #0]
 80005f2:	401a      	ands	r2, r3
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d102      	bne.n	8000600 <I2C_CheckEvent+0x4e>
  {
    /* SUCCESS: last event is equal to I2C_EVENT */
    status = SUCCESS;
 80005fa:	2301      	movs	r3, #1
 80005fc:	75fb      	strb	r3, [r7, #23]
 80005fe:	e001      	b.n	8000604 <I2C_CheckEvent+0x52>
  }
  else
  {
    /* ERROR: last event is different from I2C_EVENT */
    status = ERROR;
 8000600:	2300      	movs	r3, #0
 8000602:	75fb      	strb	r3, [r7, #23]
  }
  /* Return status */
  return status;
 8000604:	7dfb      	ldrb	r3, [r7, #23]
}
 8000606:	4618      	mov	r0, r3
 8000608:	371c      	adds	r7, #28
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <I2C_GetFlagStatus>:
  *   Address matched flag (Slave mode)"ENDA"
  *     @arg I2C_FLAG_SB: Start bit flag (Master mode)
  * @retval The new state of I2C_FLAG (SET or RESET).
  */
FlagStatus I2C_GetFlagStatus(I2C_TypeDef* I2Cx, uint32_t I2C_FLAG)
{
 8000610:	b480      	push	{r7}
 8000612:	b087      	sub	sp, #28
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
 8000618:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 800061a:	2300      	movs	r3, #0
 800061c:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t i2creg = 0, i2cxbase = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
 8000622:	2300      	movs	r3, #0
 8000624:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_PERIPH(I2Cx));
  assert_param(IS_I2C_GET_FLAG(I2C_FLAG));

  /* Get the I2Cx peripheral base address */
  i2cxbase = (uint32_t)I2Cx;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	60fb      	str	r3, [r7, #12]
  
  /* Read flag register index */
  i2creg = I2C_FLAG >> 28;
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	0f1b      	lsrs	r3, r3, #28
 800062e:	613b      	str	r3, [r7, #16]
  
  /* Get bit[23:0] of the flag */
  I2C_FLAG &= FLAG_Mask;
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000636:	603b      	str	r3, [r7, #0]
  
  if(i2creg != 0)
 8000638:	693b      	ldr	r3, [r7, #16]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d003      	beq.n	8000646 <I2C_GetFlagStatus+0x36>
  {
    /* Get the I2Cx SR1 register address */
    i2cxbase += 0x14;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	3314      	adds	r3, #20
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	e005      	b.n	8000652 <I2C_GetFlagStatus+0x42>
  }
  else
  {
    /* Flag in I2Cx SR2 Register */
    I2C_FLAG = (uint32_t)(I2C_FLAG >> 16);
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	0c1b      	lsrs	r3, r3, #16
 800064a:	603b      	str	r3, [r7, #0]
    /* Get the I2Cx SR2 register address */
    i2cxbase += 0x18;
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	3318      	adds	r3, #24
 8000650:	60fb      	str	r3, [r7, #12]
  }
  
  if(((*(__IO uint32_t *)i2cxbase) & I2C_FLAG) != (uint32_t)RESET)
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	4013      	ands	r3, r2
 800065a:	2b00      	cmp	r3, #0
 800065c:	d002      	beq.n	8000664 <I2C_GetFlagStatus+0x54>
  {
    /* I2C_FLAG is set */
    bitstatus = SET;
 800065e:	2301      	movs	r3, #1
 8000660:	75fb      	strb	r3, [r7, #23]
 8000662:	e001      	b.n	8000668 <I2C_GetFlagStatus+0x58>
  }
  else
  {
    /* I2C_FLAG is reset */
    bitstatus = RESET;
 8000664:	2300      	movs	r3, #0
 8000666:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return the I2C_FLAG status */
  return  bitstatus;
 8000668:	7dfb      	ldrb	r3, [r7, #23]
}
 800066a:	4618      	mov	r0, r3
 800066c:	371c      	adds	r7, #28
 800066e:	46bd      	mov	sp, r7
 8000670:	bc80      	pop	{r7}
 8000672:	4770      	bx	lr

08000674 <RCC_GetClocksFreq>:
  * @note   The result of this function could be not correct when using 
  *         fractional value for HSE crystal.  
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000674:	b480      	push	{r7}
 8000676:	b087      	sub	sp, #28
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, presc = 0;
 800067c:	2300      	movs	r3, #0
 800067e:	617b      	str	r3, [r7, #20]
 8000680:	2300      	movs	r3, #0
 8000682:	613b      	str	r3, [r7, #16]
 8000684:	2300      	movs	r3, #0
 8000686:	60fb      	str	r3, [r7, #12]
 8000688:	2300      	movs	r3, #0
 800068a:	60bb      	str	r3, [r7, #8]
#if defined (STM32F10X_LD_VL) || defined (STM32F10X_MD_VL) || defined (STM32F10X_HD_VL)
  uint32_t prediv1factor = 0;
#endif
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & CFGR_SWS_Mask;
 800068c:	4b4c      	ldr	r3, [pc, #304]	; (80007c0 <RCC_GetClocksFreq+0x14c>)
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	f003 030c 	and.w	r3, r3, #12
 8000694:	617b      	str	r3, [r7, #20]
  
  switch (tmp)
 8000696:	697b      	ldr	r3, [r7, #20]
 8000698:	2b04      	cmp	r3, #4
 800069a:	d007      	beq.n	80006ac <RCC_GetClocksFreq+0x38>
 800069c:	2b08      	cmp	r3, #8
 800069e:	d009      	beq.n	80006b4 <RCC_GetClocksFreq+0x40>
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d133      	bne.n	800070c <RCC_GetClocksFreq+0x98>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	4a47      	ldr	r2, [pc, #284]	; (80007c4 <RCC_GetClocksFreq+0x150>)
 80006a8:	601a      	str	r2, [r3, #0]
      break;
 80006aa:	e033      	b.n	8000714 <RCC_GetClocksFreq+0xa0>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	4a45      	ldr	r2, [pc, #276]	; (80007c4 <RCC_GetClocksFreq+0x150>)
 80006b0:	601a      	str	r2, [r3, #0]
      break;
 80006b2:	e02f      	b.n	8000714 <RCC_GetClocksFreq+0xa0>
    case 0x08:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & CFGR_PLLMull_Mask;
 80006b4:	4b42      	ldr	r3, [pc, #264]	; (80007c0 <RCC_GetClocksFreq+0x14c>)
 80006b6:	685b      	ldr	r3, [r3, #4]
 80006b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80006bc:	613b      	str	r3, [r7, #16]
      pllsource = RCC->CFGR & CFGR_PLLSRC_Mask;
 80006be:	4b40      	ldr	r3, [pc, #256]	; (80007c0 <RCC_GetClocksFreq+0x14c>)
 80006c0:	685b      	ldr	r3, [r3, #4]
 80006c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006c6:	60fb      	str	r3, [r7, #12]
      
#ifndef STM32F10X_CL      
      pllmull = ( pllmull >> 18) + 2;
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	0c9b      	lsrs	r3, r3, #18
 80006cc:	3302      	adds	r3, #2
 80006ce:	613b      	str	r3, [r7, #16]
      
      if (pllsource == 0x00)
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d106      	bne.n	80006e4 <RCC_GetClocksFreq+0x70>
      {/* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	4a3b      	ldr	r2, [pc, #236]	; (80007c8 <RCC_GetClocksFreq+0x154>)
 80006da:	fb02 f203 	mul.w	r2, r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	601a      	str	r2, [r3, #0]
          pll2mull = ((RCC->CFGR2 & CFGR2_PLL2MUL) >> 8 ) + 2; 
          RCC_Clocks->SYSCLK_Frequency = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F10X_CL */ 
      break;
 80006e2:	e017      	b.n	8000714 <RCC_GetClocksFreq+0xa0>
        if ((RCC->CFGR & CFGR_PLLXTPRE_Mask) != (uint32_t)RESET)
 80006e4:	4b36      	ldr	r3, [pc, #216]	; (80007c0 <RCC_GetClocksFreq+0x14c>)
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d006      	beq.n	80006fe <RCC_GetClocksFreq+0x8a>
          RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE >> 1) * pllmull;
 80006f0:	693b      	ldr	r3, [r7, #16]
 80006f2:	4a35      	ldr	r2, [pc, #212]	; (80007c8 <RCC_GetClocksFreq+0x154>)
 80006f4:	fb02 f203 	mul.w	r2, r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	601a      	str	r2, [r3, #0]
      break;
 80006fc:	e00a      	b.n	8000714 <RCC_GetClocksFreq+0xa0>
          RCC_Clocks->SYSCLK_Frequency = HSE_VALUE * pllmull;
 80006fe:	693b      	ldr	r3, [r7, #16]
 8000700:	4a30      	ldr	r2, [pc, #192]	; (80007c4 <RCC_GetClocksFreq+0x150>)
 8000702:	fb02 f203 	mul.w	r2, r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	601a      	str	r2, [r3, #0]
      break;
 800070a:	e003      	b.n	8000714 <RCC_GetClocksFreq+0xa0>

    default:
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	4a2d      	ldr	r2, [pc, #180]	; (80007c4 <RCC_GetClocksFreq+0x150>)
 8000710:	601a      	str	r2, [r3, #0]
      break;
 8000712:	bf00      	nop
  }

  /* Compute HCLK, PCLK1, PCLK2 and ADCCLK clocks frequencies ----------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & CFGR_HPRE_Set_Mask;
 8000714:	4b2a      	ldr	r3, [pc, #168]	; (80007c0 <RCC_GetClocksFreq+0x14c>)
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800071c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 4;
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	091b      	lsrs	r3, r3, #4
 8000722:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000724:	4a29      	ldr	r2, [pc, #164]	; (80007cc <RCC_GetClocksFreq+0x158>)
 8000726:	697b      	ldr	r3, [r7, #20]
 8000728:	4413      	add	r3, r2
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	60bb      	str	r3, [r7, #8]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	40da      	lsrs	r2, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	605a      	str	r2, [r3, #4]
  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE1_Set_Mask;
 800073c:	4b20      	ldr	r3, [pc, #128]	; (80007c0 <RCC_GetClocksFreq+0x14c>)
 800073e:	685b      	ldr	r3, [r3, #4]
 8000740:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000744:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 8;
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	0a1b      	lsrs	r3, r3, #8
 800074a:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 800074c:	4a1f      	ldr	r2, [pc, #124]	; (80007cc <RCC_GetClocksFreq+0x158>)
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	4413      	add	r3, r2
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	b2db      	uxtb	r3, r3
 8000756:	60bb      	str	r3, [r7, #8]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	685a      	ldr	r2, [r3, #4]
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	40da      	lsrs	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	609a      	str	r2, [r3, #8]
  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & CFGR_PPRE2_Set_Mask;
 8000764:	4b16      	ldr	r3, [pc, #88]	; (80007c0 <RCC_GetClocksFreq+0x14c>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800076c:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 11;
 800076e:	697b      	ldr	r3, [r7, #20]
 8000770:	0adb      	lsrs	r3, r3, #11
 8000772:	617b      	str	r3, [r7, #20]
  presc = APBAHBPrescTable[tmp];
 8000774:	4a15      	ldr	r2, [pc, #84]	; (80007cc <RCC_GetClocksFreq+0x158>)
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	4413      	add	r3, r2
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	60bb      	str	r3, [r7, #8]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	685a      	ldr	r2, [r3, #4]
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	40da      	lsrs	r2, r3
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	60da      	str	r2, [r3, #12]
  /* Get ADCCLK prescaler */
  tmp = RCC->CFGR & CFGR_ADCPRE_Set_Mask;
 800078c:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <RCC_GetClocksFreq+0x14c>)
 800078e:	685b      	ldr	r3, [r3, #4]
 8000790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000794:	617b      	str	r3, [r7, #20]
  tmp = tmp >> 14;
 8000796:	697b      	ldr	r3, [r7, #20]
 8000798:	0b9b      	lsrs	r3, r3, #14
 800079a:	617b      	str	r3, [r7, #20]
  presc = ADCPrescTable[tmp];
 800079c:	4a0c      	ldr	r2, [pc, #48]	; (80007d0 <RCC_GetClocksFreq+0x15c>)
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	4413      	add	r3, r2
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	60bb      	str	r3, [r7, #8]
  /* ADCCLK clock frequency */
  RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK2_Frequency / presc;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	68da      	ldr	r2, [r3, #12]
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	fbb2 f2f3 	udiv	r2, r2, r3
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	611a      	str	r2, [r3, #16]
}
 80007b6:	bf00      	nop
 80007b8:	371c      	adds	r7, #28
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr
 80007c0:	40021000 	.word	0x40021000
 80007c4:	007a1200 	.word	0x007a1200
 80007c8:	003d0900 	.word	0x003d0900
 80007cc:	20000004 	.word	0x20000004
 80007d0:	20000014 	.word	0x20000014

080007d4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80007e0:	78fb      	ldrb	r3, [r7, #3]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d006      	beq.n	80007f4 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80007e6:	4909      	ldr	r1, [pc, #36]	; (800080c <RCC_APB2PeriphClockCmd+0x38>)
 80007e8:	4b08      	ldr	r3, [pc, #32]	; (800080c <RCC_APB2PeriphClockCmd+0x38>)
 80007ea:	699a      	ldr	r2, [r3, #24]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4313      	orrs	r3, r2
 80007f0:	618b      	str	r3, [r1, #24]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 80007f2:	e006      	b.n	8000802 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 80007f4:	4905      	ldr	r1, [pc, #20]	; (800080c <RCC_APB2PeriphClockCmd+0x38>)
 80007f6:	4b05      	ldr	r3, [pc, #20]	; (800080c <RCC_APB2PeriphClockCmd+0x38>)
 80007f8:	699a      	ldr	r2, [r3, #24]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	43db      	mvns	r3, r3
 80007fe:	4013      	ands	r3, r2
 8000800:	618b      	str	r3, [r1, #24]
}
 8000802:	bf00      	nop
 8000804:	370c      	adds	r7, #12
 8000806:	46bd      	mov	sp, r7
 8000808:	bc80      	pop	{r7}
 800080a:	4770      	bx	lr
 800080c:	40021000 	.word	0x40021000

08000810 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	460b      	mov	r3, r1
 800081a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800081c:	78fb      	ldrb	r3, [r7, #3]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d006      	beq.n	8000830 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000822:	4909      	ldr	r1, [pc, #36]	; (8000848 <RCC_APB1PeriphClockCmd+0x38>)
 8000824:	4b08      	ldr	r3, [pc, #32]	; (8000848 <RCC_APB1PeriphClockCmd+0x38>)
 8000826:	69da      	ldr	r2, [r3, #28]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	4313      	orrs	r3, r2
 800082c:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800082e:	e006      	b.n	800083e <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000830:	4905      	ldr	r1, [pc, #20]	; (8000848 <RCC_APB1PeriphClockCmd+0x38>)
 8000832:	4b05      	ldr	r3, [pc, #20]	; (8000848 <RCC_APB1PeriphClockCmd+0x38>)
 8000834:	69da      	ldr	r2, [r3, #28]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	43db      	mvns	r3, r3
 800083a:	4013      	ands	r3, r2
 800083c:	61cb      	str	r3, [r1, #28]
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr
 8000848:	40021000 	.word	0x40021000

0800084c <digitalToggle>:

/*
 * pin toggle function
 */
void digitalToggle(GPIO_TypeDef* gpio, uint16_t pin)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	807b      	strh	r3, [r7, #2]
	gpio->ODR ^= pin;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	68da      	ldr	r2, [r3, #12]
 800085c:	887b      	ldrh	r3, [r7, #2]
 800085e:	405a      	eors	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	60da      	str	r2, [r3, #12]
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
	...

08000870 <_ZN7TwoWireC1Ev>:
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);



TwoWire::TwoWire()
 8000870:	b480      	push	{r7}
 8000872:	b083      	sub	sp, #12
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	4a04      	ldr	r2, [pc, #16]	; (800088c <_ZN7TwoWireC1Ev+0x1c>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated constructor stub

}
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	4618      	mov	r0, r3
 8000882:	370c      	adds	r7, #12
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	0800107c 	.word	0x0800107c

08000890 <_ZN7TwoWireD1Ev>:

TwoWire::~TwoWire()
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 8000898:	4a04      	ldr	r2, [pc, #16]	; (80008ac <_ZN7TwoWireD1Ev+0x1c>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4618      	mov	r0, r3
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	0800107c 	.word	0x0800107c

080008b0 <_ZN7TwoWireD0Ev>:
TwoWire::~TwoWire()
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
}
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff ffe9 	bl	8000890 <_ZN7TwoWireD1Ev>
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f000 fb3c 	bl	8000f3c <_ZdlPv>
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	4618      	mov	r0, r3
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
	...

080008d0 <_ZN7TwoWire5beginEi>:
{
	twi_onSlaveReceive = function;
}

void TwoWire::begin(int address)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b088      	sub	sp, #32
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
	GPIO_InitTypeDef  GPIO_InitStructure;
	I2C_InitTypeDef  I2C_InitStructure;

	// enable GPIO and I2C1 clock
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_I2C1, ENABLE);
 80008da:	2101      	movs	r1, #1
 80008dc:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80008e0:	f7ff ff96 	bl	8000810 <RCC_APB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB,ENABLE);
 80008e4:	2101      	movs	r1, #1
 80008e6:	2008      	movs	r0, #8
 80008e8:	f7ff ff74 	bl	80007d4 <RCC_APB2PeriphClockCmd>
	// set pin I2C at AF mode
	//GPIO_PinAFConfig(GPIOB,GPIO_PinSource6, GPIO_A);
	//GPIO_PinAFConfig(GPIOB,GPIO_PinSource7, GPIO_AF_I2C1);

	  /* Configure I2C1 pins: SCL and SDA */
	  GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_6 | GPIO_Pin_7;
 80008ec:	23c0      	movs	r3, #192	; 0xc0
 80008ee:	83bb      	strh	r3, [r7, #28]
	  GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 80008f0:	2303      	movs	r3, #3
 80008f2:	77bb      	strb	r3, [r7, #30]
	  GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 80008f4:	2318      	movs	r3, #24
 80008f6:	77fb      	strb	r3, [r7, #31]
	  GPIO_Init(GPIOB, &GPIO_InitStructure);
 80008f8:	f107 031c 	add.w	r3, r7, #28
 80008fc:	4619      	mov	r1, r3
 80008fe:	4811      	ldr	r0, [pc, #68]	; (8000944 <_ZN7TwoWire5beginEi+0x74>)
 8000900:	f7ff fc24 	bl	800014c <GPIO_Init>

	  I2C_Cmd(I2C1, ENABLE);
 8000904:	2101      	movs	r1, #1
 8000906:	4810      	ldr	r0, [pc, #64]	; (8000948 <_ZN7TwoWire5beginEi+0x78>)
 8000908:	f7ff fd9e 	bl	8000448 <I2C_Cmd>
	  /* I2C1 configuration ------------------------------------------------------*/
	  I2C_InitStructure.I2C_Mode = I2C_Mode_I2C;
 800090c:	2300      	movs	r3, #0
 800090e:	823b      	strh	r3, [r7, #16]
	  I2C_InitStructure.I2C_DutyCycle = I2C_DutyCycle_2;
 8000910:	f64b 73ff 	movw	r3, #49151	; 0xbfff
 8000914:	827b      	strh	r3, [r7, #18]
	  I2C_InitStructure.I2C_OwnAddress1 = address;
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	b29b      	uxth	r3, r3
 800091a:	82bb      	strh	r3, [r7, #20]
	  I2C_InitStructure.I2C_Ack = I2C_Ack_Enable;
 800091c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000920:	82fb      	strh	r3, [r7, #22]
	  I2C_InitStructure.I2C_AcknowledgedAddress = I2C_AcknowledgedAddress_7bit;
 8000922:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000926:	833b      	strh	r3, [r7, #24]
	  I2C_InitStructure.I2C_ClockSpeed = 30000;
 8000928:	f247 5330 	movw	r3, #30000	; 0x7530
 800092c:	60fb      	str	r3, [r7, #12]
	  I2C_Init(I2C1, &I2C_InitStructure);
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	4619      	mov	r1, r3
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <_ZN7TwoWire5beginEi+0x78>)
 8000936:	f7ff fcc5 	bl	80002c4 <I2C_Init>

}
 800093a:	bf00      	nop
 800093c:	3720      	adds	r7, #32
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40010c00 	.word	0x40010c00
 8000948:	40005400 	.word	0x40005400

0800094c <_ZN7TwoWire17beginTransmissionEi>:
{
	//TWBR = ((F_CPU / clock) - 16) / 2;
}

void TwoWire::beginTransmission(int address)
{/*
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
		return;
	}; //addresssend error, escape anyway
	*/

    // Wait until I2Cx is not busy anymore
    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));
 8000956:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 800095a:	481b      	ldr	r0, [pc, #108]	; (80009c8 <_ZN7TwoWire17beginTransmissionEi+0x7c>)
 800095c:	f7ff fe58 	bl	8000610 <I2C_GetFlagStatus>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	bf14      	ite	ne
 8000966:	2301      	movne	r3, #1
 8000968:	2300      	moveq	r3, #0
 800096a:	b2db      	uxtb	r3, r3
 800096c:	2b00      	cmp	r3, #0
 800096e:	d000      	beq.n	8000972 <_ZN7TwoWire17beginTransmissionEi+0x26>
 8000970:	e7f1      	b.n	8000956 <_ZN7TwoWire17beginTransmissionEi+0xa>
    // Generate start condition
    I2C_GenerateSTART(I2C1, ENABLE);
 8000972:	2101      	movs	r1, #1
 8000974:	4814      	ldr	r0, [pc, #80]	; (80009c8 <_ZN7TwoWire17beginTransmissionEi+0x7c>)
 8000976:	f7ff fd86 	bl	8000486 <I2C_GenerateSTART>
    // Wait for I2C EV5.
    // It means that the start condition has been correctly released
    // on the I2C bus (the bus is free, no other devices is communicating))
    while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
 800097a:	4914      	ldr	r1, [pc, #80]	; (80009cc <_ZN7TwoWire17beginTransmissionEi+0x80>)
 800097c:	4812      	ldr	r0, [pc, #72]	; (80009c8 <_ZN7TwoWire17beginTransmissionEi+0x7c>)
 800097e:	f7ff fe18 	bl	80005b2 <I2C_CheckEvent>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	bf0c      	ite	eq
 8000988:	2301      	moveq	r3, #1
 800098a:	2300      	movne	r3, #0
 800098c:	b2db      	uxtb	r3, r3
 800098e:	2b00      	cmp	r3, #0
 8000990:	d000      	beq.n	8000994 <_ZN7TwoWire17beginTransmissionEi+0x48>
 8000992:	e7f2      	b.n	800097a <_ZN7TwoWire17beginTransmissionEi+0x2e>


    // Send slave address
    I2C_Send7bitAddress(I2C1, address<<1, I2C_Direction_Transmitter);
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	b2db      	uxtb	r3, r3
 800099c:	2200      	movs	r2, #0
 800099e:	4619      	mov	r1, r3
 80009a0:	4809      	ldr	r0, [pc, #36]	; (80009c8 <_ZN7TwoWire17beginTransmissionEi+0x7c>)
 80009a2:	f7ff fde9 	bl	8000578 <I2C_Send7bitAddress>

    // Wait for I2C EV6
    // It means that a slave acknowledges his address
    while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_TRANSMITTER_MODE_SELECTED));
 80009a6:	490a      	ldr	r1, [pc, #40]	; (80009d0 <_ZN7TwoWire17beginTransmissionEi+0x84>)
 80009a8:	4807      	ldr	r0, [pc, #28]	; (80009c8 <_ZN7TwoWire17beginTransmissionEi+0x7c>)
 80009aa:	f7ff fe02 	bl	80005b2 <I2C_CheckEvent>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	bf0c      	ite	eq
 80009b4:	2301      	moveq	r3, #1
 80009b6:	2300      	movne	r3, #0
 80009b8:	b2db      	uxtb	r3, r3
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d000      	beq.n	80009c0 <_ZN7TwoWire17beginTransmissionEi+0x74>
 80009be:	e7f2      	b.n	80009a6 <_ZN7TwoWire17beginTransmissionEi+0x5a>
}
 80009c0:	bf00      	nop
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40005400 	.word	0x40005400
 80009cc:	00030001 	.word	0x00030001
 80009d0:	00070082 	.word	0x00070082

080009d4 <_ZN7TwoWire15endTransmissionEh>:

uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
 80009dc:	460b      	mov	r3, r1
 80009de:	70fb      	strb	r3, [r7, #3]
	txBufferIndex = 0;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <_ZN7TwoWire15endTransmissionEh+0x4c>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	701a      	strb	r2, [r3, #0]
	txBufferLength = 0;
 80009e6:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <_ZN7TwoWire15endTransmissionEh+0x50>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	701a      	strb	r2, [r3, #0]
	transmitting = 0;
 80009ec:	4b0e      	ldr	r3, [pc, #56]	; (8000a28 <_ZN7TwoWire15endTransmissionEh+0x54>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]

    // Generate I2C stop condition
    I2C_GenerateSTOP(I2C1, ENABLE);
 80009f2:	2101      	movs	r1, #1
 80009f4:	480d      	ldr	r0, [pc, #52]	; (8000a2c <_ZN7TwoWire15endTransmissionEh+0x58>)
 80009f6:	f7ff fd65 	bl	80004c4 <I2C_GenerateSTOP>
    // Wait until I2C stop condition is finished
    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF))
 80009fa:	490d      	ldr	r1, [pc, #52]	; (8000a30 <_ZN7TwoWire15endTransmissionEh+0x5c>)
 80009fc:	480b      	ldr	r0, [pc, #44]	; (8000a2c <_ZN7TwoWire15endTransmissionEh+0x58>)
 80009fe:	f7ff fe07 	bl	8000610 <I2C_GetFlagStatus>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	bf14      	ite	ne
 8000a08:	2301      	movne	r3, #1
 8000a0a:	2300      	moveq	r3, #0
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d000      	beq.n	8000a14 <_ZN7TwoWire15endTransmissionEh+0x40>
 8000a12:	e7f2      	b.n	80009fa <_ZN7TwoWire15endTransmissionEh+0x26>
    {

    }

	return 0;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000009c 	.word	0x2000009c
 8000a24:	2000009d 	.word	0x2000009d
 8000a28:	2000009e 	.word	0x2000009e
 8000a2c:	40005400 	.word	0x40005400
 8000a30:	10000010 	.word	0x10000010

08000a34 <_ZN7TwoWire15endTransmissionEv>:

uint8_t TwoWire::endTransmission(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
	return endTransmission(true);
 8000a3c:	2101      	movs	r1, #1
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f7ff ffc8 	bl	80009d4 <_ZN7TwoWire15endTransmissionEh>
 8000a44:	4603      	mov	r3, r0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3708      	adds	r7, #8
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
	...

08000a50 <_ZN7TwoWire11requestFromEii>:

uint8_t TwoWire::requestFrom(int address, int quantity)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
	// Wait until I2Cx is not busy anymore
	while (I2C_GetFlagStatus(I2C1, I2C_FLAG_BUSY));
 8000a5c:	f44f 3100 	mov.w	r1, #131072	; 0x20000
 8000a60:	482f      	ldr	r0, [pc, #188]	; (8000b20 <_ZN7TwoWire11requestFromEii+0xd0>)
 8000a62:	f7ff fdd5 	bl	8000610 <I2C_GetFlagStatus>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	bf14      	ite	ne
 8000a6c:	2301      	movne	r3, #1
 8000a6e:	2300      	moveq	r3, #0
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d000      	beq.n	8000a78 <_ZN7TwoWire11requestFromEii+0x28>
 8000a76:	e7f1      	b.n	8000a5c <_ZN7TwoWire11requestFromEii+0xc>
	// Generate start condition
	I2C_GenerateSTART(I2C1, ENABLE);
 8000a78:	2101      	movs	r1, #1
 8000a7a:	4829      	ldr	r0, [pc, #164]	; (8000b20 <_ZN7TwoWire11requestFromEii+0xd0>)
 8000a7c:	f7ff fd03 	bl	8000486 <I2C_GenerateSTART>
	// Wait for I2C EV5.
	// It means that the start condition has been correctly released
	// on the I2C bus (the bus is free, no other devices is communicating))
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_MODE_SELECT));
 8000a80:	4928      	ldr	r1, [pc, #160]	; (8000b24 <_ZN7TwoWire11requestFromEii+0xd4>)
 8000a82:	4827      	ldr	r0, [pc, #156]	; (8000b20 <_ZN7TwoWire11requestFromEii+0xd0>)
 8000a84:	f7ff fd95 	bl	80005b2 <I2C_CheckEvent>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	bf0c      	ite	eq
 8000a8e:	2301      	moveq	r3, #1
 8000a90:	2300      	movne	r3, #0
 8000a92:	b2db      	uxtb	r3, r3
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d000      	beq.n	8000a9a <_ZN7TwoWire11requestFromEii+0x4a>
 8000a98:	e7f2      	b.n	8000a80 <_ZN7TwoWire11requestFromEii+0x30>


	// Send slave address
	I2C_Send7bitAddress(I2C1, address<<1, I2C_Direction_Receiver);
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	b2db      	uxtb	r3, r3
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	481e      	ldr	r0, [pc, #120]	; (8000b20 <_ZN7TwoWire11requestFromEii+0xd0>)
 8000aa8:	f7ff fd66 	bl	8000578 <I2C_Send7bitAddress>

	// Wait for I2C EV6
	// It means that a slave acknowledges his address
	while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_RECEIVER_MODE_SELECTED));
 8000aac:	491e      	ldr	r1, [pc, #120]	; (8000b28 <_ZN7TwoWire11requestFromEii+0xd8>)
 8000aae:	481c      	ldr	r0, [pc, #112]	; (8000b20 <_ZN7TwoWire11requestFromEii+0xd0>)
 8000ab0:	f7ff fd7f 	bl	80005b2 <I2C_CheckEvent>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	bf0c      	ite	eq
 8000aba:	2301      	moveq	r3, #1
 8000abc:	2300      	movne	r3, #0
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d000      	beq.n	8000ac6 <_ZN7TwoWire11requestFromEii+0x76>
 8000ac4:	e7f2      	b.n	8000aac <_ZN7TwoWire11requestFromEii+0x5c>


    // Disable ACK of received data
    I2C_AcknowledgeConfig(I2C1, DISABLE);
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4815      	ldr	r0, [pc, #84]	; (8000b20 <_ZN7TwoWire11requestFromEii+0xd0>)
 8000aca:	f7ff fd1a 	bl	8000502 <I2C_AcknowledgeConfig>
    // Wait for I2C EV7
    // It means that the data has been received in I2C data register
    while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_RECEIVED));
 8000ace:	4917      	ldr	r1, [pc, #92]	; (8000b2c <_ZN7TwoWire11requestFromEii+0xdc>)
 8000ad0:	4813      	ldr	r0, [pc, #76]	; (8000b20 <_ZN7TwoWire11requestFromEii+0xd0>)
 8000ad2:	f7ff fd6e 	bl	80005b2 <I2C_CheckEvent>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	bf0c      	ite	eq
 8000adc:	2301      	moveq	r3, #1
 8000ade:	2300      	movne	r3, #0
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d000      	beq.n	8000ae8 <_ZN7TwoWire11requestFromEii+0x98>
 8000ae6:	e7f2      	b.n	8000ace <_ZN7TwoWire11requestFromEii+0x7e>

    // Read and return data byte from I2C data register
    int dataReturn = I2C_ReceiveData(I2C1);
 8000ae8:	480d      	ldr	r0, [pc, #52]	; (8000b20 <_ZN7TwoWire11requestFromEii+0xd0>)
 8000aea:	f7ff fd38 	bl	800055e <I2C_ReceiveData>
 8000aee:	4603      	mov	r3, r0
 8000af0:	617b      	str	r3, [r7, #20]

    // Generate I2C stop condition
    I2C_GenerateSTOP(I2C1, ENABLE);
 8000af2:	2101      	movs	r1, #1
 8000af4:	480a      	ldr	r0, [pc, #40]	; (8000b20 <_ZN7TwoWire11requestFromEii+0xd0>)
 8000af6:	f7ff fce5 	bl	80004c4 <I2C_GenerateSTOP>
    // Wait until I2C stop condition is finished
    while (I2C_GetFlagStatus(I2C1, I2C_FLAG_STOPF)){}
 8000afa:	490d      	ldr	r1, [pc, #52]	; (8000b30 <_ZN7TwoWire11requestFromEii+0xe0>)
 8000afc:	4808      	ldr	r0, [pc, #32]	; (8000b20 <_ZN7TwoWire11requestFromEii+0xd0>)
 8000afe:	f7ff fd87 	bl	8000610 <I2C_GetFlagStatus>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	bf14      	ite	ne
 8000b08:	2301      	movne	r3, #1
 8000b0a:	2300      	moveq	r3, #0
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d000      	beq.n	8000b14 <_ZN7TwoWire11requestFromEii+0xc4>
 8000b12:	e7f2      	b.n	8000afa <_ZN7TwoWire11requestFromEii+0xaa>
	return dataReturn;
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	b2db      	uxtb	r3, r3
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40005400 	.word	0x40005400
 8000b24:	00030001 	.word	0x00030001
 8000b28:	00030002 	.word	0x00030002
 8000b2c:	00030040 	.word	0x00030040
 8000b30:	10000010 	.word	0x10000010

08000b34 <_ZN7TwoWire5writeEh>:
	return value;*/
	return 1;
}

size_t TwoWire::write(uint8_t val)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	70fb      	strb	r3, [r7, #3]
		return (TWSR&0xF8);
	} //data send error, escape anyway
*/

    // Send data byte
    I2C_SendData(I2C1, val);
 8000b40:	78fb      	ldrb	r3, [r7, #3]
 8000b42:	4619      	mov	r1, r3
 8000b44:	480a      	ldr	r0, [pc, #40]	; (8000b70 <_ZN7TwoWire5writeEh+0x3c>)
 8000b46:	f7ff fcfb 	bl	8000540 <I2C_SendData>
    // Wait for I2C EV8_2.
    // It means that the data has been physically shifted out and
    // output on the bus)
    while (!I2C_CheckEvent(I2C1, I2C_EVENT_MASTER_BYTE_TRANSMITTED))
 8000b4a:	490a      	ldr	r1, [pc, #40]	; (8000b74 <_ZN7TwoWire5writeEh+0x40>)
 8000b4c:	4808      	ldr	r0, [pc, #32]	; (8000b70 <_ZN7TwoWire5writeEh+0x3c>)
 8000b4e:	f7ff fd30 	bl	80005b2 <I2C_CheckEvent>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	bf0c      	ite	eq
 8000b58:	2301      	moveq	r3, #1
 8000b5a:	2300      	movne	r3, #0
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d000      	beq.n	8000b64 <_ZN7TwoWire5writeEh+0x30>
 8000b62:	e7f2      	b.n	8000b4a <_ZN7TwoWire5writeEh+0x16>
    {

    }

	return 0;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40005400 	.word	0x40005400
 8000b74:	00070084 	.word	0x00070084

08000b78 <_Z41__static_initialization_and_destruction_0ii>:
			write(data[i]);
		}
	}*/
	return quantity;
}
TwoWire Wire = TwoWire();
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	2b01      	cmp	r3, #1
 8000b86:	d10c      	bne.n	8000ba2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d107      	bne.n	8000ba2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8000b92:	4806      	ldr	r0, [pc, #24]	; (8000bac <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000b94:	f7ff fe6c 	bl	8000870 <_ZN7TwoWireC1Ev>
 8000b98:	4a05      	ldr	r2, [pc, #20]	; (8000bb0 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 8000b9a:	4906      	ldr	r1, [pc, #24]	; (8000bb4 <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8000b9c:	4803      	ldr	r0, [pc, #12]	; (8000bac <_Z41__static_initialization_and_destruction_0ii+0x34>)
 8000b9e:	f000 f9cf 	bl	8000f40 <__aeabi_atexit>
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	200000a0 	.word	0x200000a0
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	08000891 	.word	0x08000891

08000bb8 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f7ff ffd9 	bl	8000b78 <_Z41__static_initialization_and_destruction_0ii>
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <NVIC_SetPriority>:

    \param [in]      IRQn  Number of the interrupt for set priority
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	4603      	mov	r3, r0
 8000bd0:	6039      	str	r1, [r7, #0]
 8000bd2:	71fb      	strb	r3, [r7, #7]
  if(IRQn < 0) {
 8000bd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	da0b      	bge.n	8000bf4 <NVIC_SetPriority+0x2c>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
 8000bdc:	490d      	ldr	r1, [pc, #52]	; (8000c14 <NVIC_SetPriority+0x4c>)
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	f003 030f 	and.w	r3, r3, #15
 8000be4:	3b04      	subs	r3, #4
 8000be6:	683a      	ldr	r2, [r7, #0]
 8000be8:	b2d2      	uxtb	r2, r2
 8000bea:	0112      	lsls	r2, r2, #4
 8000bec:	b2d2      	uxtb	r2, r2
 8000bee:	440b      	add	r3, r1
 8000bf0:	761a      	strb	r2, [r3, #24]
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
}
 8000bf2:	e009      	b.n	8000c08 <NVIC_SetPriority+0x40>
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
 8000bf4:	4908      	ldr	r1, [pc, #32]	; (8000c18 <NVIC_SetPriority+0x50>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	683a      	ldr	r2, [r7, #0]
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	0112      	lsls	r2, r2, #4
 8000c00:	b2d2      	uxtb	r2, r2
 8000c02:	440b      	add	r3, r1
 8000c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000c08:	bf00      	nop
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bc80      	pop	{r7}
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	e000ed00 	.word	0xe000ed00
 8000c18:	e000e100 	.word	0xe000e100

08000c1c <SysTick_Config>:
    \param [in]  ticks  Number of ticks between two interrupts
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c2a:	d301      	bcc.n	8000c30 <SysTick_Config+0x14>
 8000c2c:	2301      	movs	r3, #1
 8000c2e:	e011      	b.n	8000c54 <SysTick_Config+0x38>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 8000c30:	4a0a      	ldr	r2, [pc, #40]	; (8000c5c <SysTick_Config+0x40>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000c38:	3b01      	subs	r3, #1
 8000c3a:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
 8000c3c:	210f      	movs	r1, #15
 8000c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8000c42:	f7ff ffc1 	bl	8000bc8 <NVIC_SetPriority>
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8000c46:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <SysTick_Config+0x40>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4c:	4b03      	ldr	r3, [pc, #12]	; (8000c5c <SysTick_Config+0x40>)
 8000c4e:	2207      	movs	r2, #7
 8000c50:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                    /* Enable SysTick IRQ and SysTick Timer */
  return (0);                                                  /* Function successful */
 8000c52:	2300      	movs	r3, #0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	e000e010 	.word	0xe000e010

08000c60 <TimingDelay_Decrement>:
#include "include.h"

uint32_t TimingDelay;

void TimingDelay_Decrement(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
	if (TimingDelay != 0x00)
 8000c64:	4b06      	ldr	r3, [pc, #24]	; (8000c80 <TimingDelay_Decrement+0x20>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d004      	beq.n	8000c76 <TimingDelay_Decrement+0x16>
	{
		TimingDelay--;
 8000c6c:	4b04      	ldr	r3, [pc, #16]	; (8000c80 <TimingDelay_Decrement+0x20>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	4a03      	ldr	r2, [pc, #12]	; (8000c80 <TimingDelay_Decrement+0x20>)
 8000c74:	6013      	str	r3, [r2, #0]
	}
}
 8000c76:	bf00      	nop
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	200000ac 	.word	0x200000ac

08000c84 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	TimingDelay_Decrement();
 8000c88:	f7ff ffea 	bl	8000c60 <TimingDelay_Decrement>
}
 8000c8c:	bf00      	nop
 8000c8e:	bd80      	pop	{r7, pc}

08000c90 <delay>:

void delay(__IO uint32_t ms)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	if (SysTick_Config(SystemCoreClock / 1000))
 8000c98:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <delay+0x3c>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a0c      	ldr	r2, [pc, #48]	; (8000cd0 <delay+0x40>)
 8000c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca2:	099b      	lsrs	r3, r3, #6
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ffb9 	bl	8000c1c <SysTick_Config>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d000      	beq.n	8000cb2 <delay+0x22>
	{
		while (1);
 8000cb0:	e7fe      	b.n	8000cb0 <delay+0x20>
	}

	TimingDelay = ms;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a07      	ldr	r2, [pc, #28]	; (8000cd4 <delay+0x44>)
 8000cb6:	6013      	str	r3, [r2, #0]
	while (TimingDelay != 0);
 8000cb8:	bf00      	nop
 8000cba:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <delay+0x44>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d1fb      	bne.n	8000cba <delay+0x2a>
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	20000018 	.word	0x20000018
 8000cd0:	10624dd3 	.word	0x10624dd3
 8000cd4:	200000ac 	.word	0x200000ac

08000cd8 <main>:
**
**===========================================================================
*/
uint8_t dataa = 0;
int main(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	Wire.begin(0x12);
 8000cdc:	2112      	movs	r1, #18
 8000cde:	4810      	ldr	r0, [pc, #64]	; (8000d20 <main+0x48>)
 8000ce0:	f7ff fdf6 	bl	80008d0 <_ZN7TwoWire5beginEi>
	while(1)
	{
		Wire.beginTransmission(0x68);
 8000ce4:	2168      	movs	r1, #104	; 0x68
 8000ce6:	480e      	ldr	r0, [pc, #56]	; (8000d20 <main+0x48>)
 8000ce8:	f7ff fe30 	bl	800094c <_ZN7TwoWire17beginTransmissionEi>
		Wire.write(0x00);
 8000cec:	2100      	movs	r1, #0
 8000cee:	480c      	ldr	r0, [pc, #48]	; (8000d20 <main+0x48>)
 8000cf0:	f7ff ff20 	bl	8000b34 <_ZN7TwoWire5writeEh>
		Wire.endTransmission();
 8000cf4:	480a      	ldr	r0, [pc, #40]	; (8000d20 <main+0x48>)
 8000cf6:	f7ff fe9d 	bl	8000a34 <_ZN7TwoWire15endTransmissionEv>
		dataa = Wire.requestFrom(0x68, 1);
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	2168      	movs	r1, #104	; 0x68
 8000cfe:	4808      	ldr	r0, [pc, #32]	; (8000d20 <main+0x48>)
 8000d00:	f7ff fea6 	bl	8000a50 <_ZN7TwoWire11requestFromEii>
 8000d04:	4603      	mov	r3, r0
 8000d06:	461a      	mov	r2, r3
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <main+0x4c>)
 8000d0a:	701a      	strb	r2, [r3, #0]
		digitalToggle(GC,P13);
 8000d0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d10:	4805      	ldr	r0, [pc, #20]	; (8000d28 <main+0x50>)
 8000d12:	f7ff fd9b 	bl	800084c <digitalToggle>
		delay(1000);
 8000d16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d1a:	f7ff ffb9 	bl	8000c90 <delay>
		Wire.beginTransmission(0x68);
 8000d1e:	e7e1      	b.n	8000ce4 <main+0xc>
 8000d20:	200000a0 	.word	0x200000a0
 8000d24:	200000a4 	.word	0x200000a4
 8000d28:	40011000 	.word	0x40011000

08000d2c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d30:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d32:	e003      	b.n	8000d3c <LoopCopyDataInit>

08000d34 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d34:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <LoopFillZerobss+0x18>)
	ldr	r3, [r3, r1]
 8000d36:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d38:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d3a:	3104      	adds	r1, #4

08000d3c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d3c:	480b      	ldr	r0, [pc, #44]	; (8000d6c <LoopFillZerobss+0x1c>)
	ldr	r3, =_edata
 8000d3e:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <LoopFillZerobss+0x20>)
	adds	r2, r0, r1
 8000d40:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d42:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d44:	d3f6      	bcc.n	8000d34 <CopyDataInit>
	ldr	r2, =_sbss
 8000d46:	4a0b      	ldr	r2, [pc, #44]	; (8000d74 <LoopFillZerobss+0x24>)
	b	LoopFillZerobss
 8000d48:	e002      	b.n	8000d50 <LoopFillZerobss>

08000d4a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d4a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d4c:	f842 3b04 	str.w	r3, [r2], #4

08000d50 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <LoopFillZerobss+0x28>)
	cmp	r2, r3
 8000d52:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d54:	d3f9      	bcc.n	8000d4a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d56:	f000 f837 	bl	8000dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5a:	f000 f905 	bl	8000f68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d5e:	f7ff ffbb 	bl	8000cd8 <main>
	bx	lr
 8000d62:	4770      	bx	lr
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d64:	20005000 	.word	0x20005000
	ldr	r3, =_sidata
 8000d68:	08001090 	.word	0x08001090
	ldr	r0, =_sdata
 8000d6c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d70:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 8000d74:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 8000d78:	200000b0 	.word	0x200000b0

08000d7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC1_2_IRQHandler>

08000d7e <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr

08000d8a <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <HardFault_Handler+0x4>

08000d90 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <MemManage_Handler+0x4>

08000d96 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <BusFault_Handler+0x4>

08000d9c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <UsageFault_Handler+0x4>

08000da2 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr

08000dae <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bc80      	pop	{r7}
 8000db8:	4770      	bx	lr

08000dba <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bc80      	pop	{r7}
 8000dc4:	4770      	bx	lr
	...

08000dc8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000dcc:	4a15      	ldr	r2, [pc, #84]	; (8000e24 <SystemInit+0x5c>)
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <SystemInit+0x5c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f043 0301 	orr.w	r3, r3, #1
 8000dd6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#ifndef STM32F10X_CL
  RCC->CFGR &= (uint32_t)0xF8FF0000;
 8000dd8:	4912      	ldr	r1, [pc, #72]	; (8000e24 <SystemInit+0x5c>)
 8000dda:	4b12      	ldr	r3, [pc, #72]	; (8000e24 <SystemInit+0x5c>)
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	4b12      	ldr	r3, [pc, #72]	; (8000e28 <SystemInit+0x60>)
 8000de0:	4013      	ands	r3, r2
 8000de2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= (uint32_t)0xF0FF0000;
#endif /* STM32F10X_CL */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000de4:	4a0f      	ldr	r2, [pc, #60]	; (8000e24 <SystemInit+0x5c>)
 8000de6:	4b0f      	ldr	r3, [pc, #60]	; (8000e24 <SystemInit+0x5c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000df4:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <SystemInit+0x5c>)
 8000df6:	4b0b      	ldr	r3, [pc, #44]	; (8000e24 <SystemInit+0x5c>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dfe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= (uint32_t)0xFF80FFFF;
 8000e00:	4a08      	ldr	r2, [pc, #32]	; (8000e24 <SystemInit+0x5c>)
 8000e02:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <SystemInit+0x5c>)
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000e0a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000;
 8000e0c:	4b05      	ldr	r3, [pc, #20]	; (8000e24 <SystemInit+0x5c>)
 8000e0e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000e12:	609a      	str	r2, [r3, #8]
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers */
  /* Configure the Flash Latency cycles and enable prefetch buffer */
  SetSysClock();
 8000e14:	f000 f80c 	bl	8000e30 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <SystemInit+0x64>)
 8000e1a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e1e:	609a      	str	r2, [r3, #8]
#endif 
}
 8000e20:	bf00      	nop
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40021000 	.word	0x40021000
 8000e28:	f8ff0000 	.word	0xf8ff0000
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <SetSysClock>:
  * @brief  Configures the System clock frequency, HCLK, PCLK2 and PCLK1 prescalers.
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
#elif defined SYSCLK_FREQ_48MHz
  SetSysClockTo48();
#elif defined SYSCLK_FREQ_56MHz
  SetSysClockTo56();  
#elif defined SYSCLK_FREQ_72MHz
  SetSysClockTo72();
 8000e34:	f000 f802 	bl	8000e3c <SetSysClockTo72>
#endif
 
 /* If none of the define above is enabled, the HSI is used as System clock
    source (default after reset) */ 
}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <SetSysClockTo72>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
static void SetSysClockTo72(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	607b      	str	r3, [r7, #4]
 8000e46:	2300      	movs	r3, #0
 8000e48:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/    
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8000e4a:	4a3a      	ldr	r2, [pc, #232]	; (8000f34 <SetSysClockTo72+0xf8>)
 8000e4c:	4b39      	ldr	r3, [pc, #228]	; (8000f34 <SetSysClockTo72+0xf8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e54:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000e56:	4b37      	ldr	r3, [pc, #220]	; (8000f34 <SetSysClockTo72+0xf8>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e5e:	603b      	str	r3, [r7, #0]
    StartUpCounter++;  
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3301      	adds	r3, #1
 8000e64:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d103      	bne.n	8000e74 <SetSysClockTo72+0x38>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000e72:	d1f0      	bne.n	8000e56 <SetSysClockTo72+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000e74:	4b2f      	ldr	r3, [pc, #188]	; (8000f34 <SetSysClockTo72+0xf8>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d002      	beq.n	8000e86 <SetSysClockTo72+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000e80:	2301      	movs	r3, #1
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	e001      	b.n	8000e8a <SetSysClockTo72+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000e86:	2300      	movs	r3, #0
 8000e88:	603b      	str	r3, [r7, #0]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d14b      	bne.n	8000f28 <SetSysClockTo72+0xec>
  {
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTBE;
 8000e90:	4a29      	ldr	r2, [pc, #164]	; (8000f38 <SetSysClockTo72+0xfc>)
 8000e92:	4b29      	ldr	r3, [pc, #164]	; (8000f38 <SetSysClockTo72+0xfc>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	f043 0310 	orr.w	r3, r3, #16
 8000e9a:	6013      	str	r3, [r2, #0]

    /* Flash 2 wait state */
    FLASH->ACR &= (uint32_t)((uint32_t)~FLASH_ACR_LATENCY);
 8000e9c:	4a26      	ldr	r2, [pc, #152]	; (8000f38 <SetSysClockTo72+0xfc>)
 8000e9e:	4b26      	ldr	r3, [pc, #152]	; (8000f38 <SetSysClockTo72+0xfc>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f023 0303 	bic.w	r3, r3, #3
 8000ea6:	6013      	str	r3, [r2, #0]
    FLASH->ACR |= (uint32_t)FLASH_ACR_LATENCY_2;    
 8000ea8:	4a23      	ldr	r2, [pc, #140]	; (8000f38 <SetSysClockTo72+0xfc>)
 8000eaa:	4b23      	ldr	r3, [pc, #140]	; (8000f38 <SetSysClockTo72+0xfc>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f043 0302 	orr.w	r3, r3, #2
 8000eb2:	6013      	str	r3, [r2, #0]

 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000eb4:	4a1f      	ldr	r2, [pc, #124]	; (8000f34 <SetSysClockTo72+0xf8>)
 8000eb6:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <SetSysClockTo72+0xf8>)
 8000eb8:	685b      	ldr	r3, [r3, #4]
 8000eba:	6053      	str	r3, [r2, #4]
      
    /* PCLK2 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000ebc:	4a1d      	ldr	r2, [pc, #116]	; (8000f34 <SetSysClockTo72+0xf8>)
 8000ebe:	4b1d      	ldr	r3, [pc, #116]	; (8000f34 <SetSysClockTo72+0xf8>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	6053      	str	r3, [r2, #4]
    
    /* PCLK1 = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV2;
 8000ec4:	4a1b      	ldr	r2, [pc, #108]	; (8000f34 <SetSysClockTo72+0xf8>)
 8000ec6:	4b1b      	ldr	r3, [pc, #108]	; (8000f34 <SetSysClockTo72+0xf8>)
 8000ec8:	685b      	ldr	r3, [r3, #4]
 8000eca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ece:	6053      	str	r3, [r2, #4]
    RCC->CFGR &= (uint32_t)~(RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLSRC | RCC_CFGR_PLLMULL);
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLSRC_PREDIV1 | 
                            RCC_CFGR_PLLMULL9); 
#else    
    /*  PLL configuration: PLLCLK = HSE * 9 = 72 MHz */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE |
 8000ed0:	4a18      	ldr	r2, [pc, #96]	; (8000f34 <SetSysClockTo72+0xf8>)
 8000ed2:	4b18      	ldr	r3, [pc, #96]	; (8000f34 <SetSysClockTo72+0xf8>)
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f423 137c 	bic.w	r3, r3, #4128768	; 0x3f0000
 8000eda:	6053      	str	r3, [r2, #4]
                                        RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMULL9);
 8000edc:	4a15      	ldr	r2, [pc, #84]	; (8000f34 <SetSysClockTo72+0xf8>)
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <SetSysClockTo72+0xf8>)
 8000ee0:	685b      	ldr	r3, [r3, #4]
 8000ee2:	f443 13e8 	orr.w	r3, r3, #1900544	; 0x1d0000
 8000ee6:	6053      	str	r3, [r2, #4]
#endif /* STM32F10X_CL */

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8000ee8:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <SetSysClockTo72+0xf8>)
 8000eea:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <SetSysClockTo72+0xf8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ef2:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8000ef4:	bf00      	nop
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <SetSysClockTo72+0xf8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d0f9      	beq.n	8000ef6 <SetSysClockTo72+0xba>
    {
    }
    
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8000f02:	4a0c      	ldr	r2, [pc, #48]	; (8000f34 <SetSysClockTo72+0xf8>)
 8000f04:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <SetSysClockTo72+0xf8>)
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f023 0303 	bic.w	r3, r3, #3
 8000f0c:	6053      	str	r3, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8000f0e:	4a09      	ldr	r2, [pc, #36]	; (8000f34 <SetSysClockTo72+0xf8>)
 8000f10:	4b08      	ldr	r3, [pc, #32]	; (8000f34 <SetSysClockTo72+0xf8>)
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	f043 0302 	orr.w	r3, r3, #2
 8000f18:	6053      	str	r3, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)0x08)
 8000f1a:	bf00      	nop
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <SetSysClockTo72+0xf8>)
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f003 030c 	and.w	r3, r3, #12
 8000f24:	2b08      	cmp	r3, #8
 8000f26:	d1f9      	bne.n	8000f1c <SetSysClockTo72+0xe0>
  }
  else
  { /* If HSE fails to start-up, the application will have wrong clock 
         configuration. User can add here some code to deal with this error */
  }
}
 8000f28:	bf00      	nop
 8000f2a:	370c      	adds	r7, #12
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bc80      	pop	{r7}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40022000 	.word	0x40022000

08000f3c <_ZdlPv>:
 8000f3c:	f000 b838 	b.w	8000fb0 <free>

08000f40 <__aeabi_atexit>:
 8000f40:	460b      	mov	r3, r1
 8000f42:	4601      	mov	r1, r0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f000 b801 	b.w	8000f4c <__cxa_atexit>
	...

08000f4c <__cxa_atexit>:
 8000f4c:	b510      	push	{r4, lr}
 8000f4e:	4c05      	ldr	r4, [pc, #20]	; (8000f64 <__cxa_atexit+0x18>)
 8000f50:	4613      	mov	r3, r2
 8000f52:	b12c      	cbz	r4, 8000f60 <__cxa_atexit+0x14>
 8000f54:	460a      	mov	r2, r1
 8000f56:	4601      	mov	r1, r0
 8000f58:	2002      	movs	r0, #2
 8000f5a:	f3af 8000 	nop.w
 8000f5e:	bd10      	pop	{r4, pc}
 8000f60:	4620      	mov	r0, r4
 8000f62:	bd10      	pop	{r4, pc}
 8000f64:	00000000 	.word	0x00000000

08000f68 <__libc_init_array>:
 8000f68:	b570      	push	{r4, r5, r6, lr}
 8000f6a:	2500      	movs	r5, #0
 8000f6c:	4e0c      	ldr	r6, [pc, #48]	; (8000fa0 <__libc_init_array+0x38>)
 8000f6e:	4c0d      	ldr	r4, [pc, #52]	; (8000fa4 <__libc_init_array+0x3c>)
 8000f70:	1ba4      	subs	r4, r4, r6
 8000f72:	10a4      	asrs	r4, r4, #2
 8000f74:	42a5      	cmp	r5, r4
 8000f76:	d109      	bne.n	8000f8c <__libc_init_array+0x24>
 8000f78:	f000 f870 	bl	800105c <_init>
 8000f7c:	2500      	movs	r5, #0
 8000f7e:	4e0a      	ldr	r6, [pc, #40]	; (8000fa8 <__libc_init_array+0x40>)
 8000f80:	4c0a      	ldr	r4, [pc, #40]	; (8000fac <__libc_init_array+0x44>)
 8000f82:	1ba4      	subs	r4, r4, r6
 8000f84:	10a4      	asrs	r4, r4, #2
 8000f86:	42a5      	cmp	r5, r4
 8000f88:	d105      	bne.n	8000f96 <__libc_init_array+0x2e>
 8000f8a:	bd70      	pop	{r4, r5, r6, pc}
 8000f8c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f90:	4798      	blx	r3
 8000f92:	3501      	adds	r5, #1
 8000f94:	e7ee      	b.n	8000f74 <__libc_init_array+0xc>
 8000f96:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000f9a:	4798      	blx	r3
 8000f9c:	3501      	adds	r5, #1
 8000f9e:	e7f2      	b.n	8000f86 <__libc_init_array+0x1e>
 8000fa0:	08001084 	.word	0x08001084
 8000fa4:	08001084 	.word	0x08001084
 8000fa8:	08001084 	.word	0x08001084
 8000fac:	0800108c 	.word	0x0800108c

08000fb0 <free>:
 8000fb0:	4b02      	ldr	r3, [pc, #8]	; (8000fbc <free+0xc>)
 8000fb2:	4601      	mov	r1, r0
 8000fb4:	6818      	ldr	r0, [r3, #0]
 8000fb6:	f000 b803 	b.w	8000fc0 <_free_r>
 8000fba:	bf00      	nop
 8000fbc:	2000001c 	.word	0x2000001c

08000fc0 <_free_r>:
 8000fc0:	b538      	push	{r3, r4, r5, lr}
 8000fc2:	4605      	mov	r5, r0
 8000fc4:	2900      	cmp	r1, #0
 8000fc6:	d043      	beq.n	8001050 <_free_r+0x90>
 8000fc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000fcc:	1f0c      	subs	r4, r1, #4
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	bfb8      	it	lt
 8000fd2:	18e4      	addlt	r4, r4, r3
 8000fd4:	f000 f840 	bl	8001058 <__malloc_lock>
 8000fd8:	4a1e      	ldr	r2, [pc, #120]	; (8001054 <_free_r+0x94>)
 8000fda:	6813      	ldr	r3, [r2, #0]
 8000fdc:	4610      	mov	r0, r2
 8000fde:	b933      	cbnz	r3, 8000fee <_free_r+0x2e>
 8000fe0:	6063      	str	r3, [r4, #4]
 8000fe2:	6014      	str	r4, [r2, #0]
 8000fe4:	4628      	mov	r0, r5
 8000fe6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000fea:	f000 b836 	b.w	800105a <__malloc_unlock>
 8000fee:	42a3      	cmp	r3, r4
 8000ff0:	d90b      	bls.n	800100a <_free_r+0x4a>
 8000ff2:	6821      	ldr	r1, [r4, #0]
 8000ff4:	1862      	adds	r2, r4, r1
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	bf01      	itttt	eq
 8000ffa:	681a      	ldreq	r2, [r3, #0]
 8000ffc:	685b      	ldreq	r3, [r3, #4]
 8000ffe:	1852      	addeq	r2, r2, r1
 8001000:	6022      	streq	r2, [r4, #0]
 8001002:	6063      	str	r3, [r4, #4]
 8001004:	6004      	str	r4, [r0, #0]
 8001006:	e7ed      	b.n	8000fe4 <_free_r+0x24>
 8001008:	4613      	mov	r3, r2
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	b10a      	cbz	r2, 8001012 <_free_r+0x52>
 800100e:	42a2      	cmp	r2, r4
 8001010:	d9fa      	bls.n	8001008 <_free_r+0x48>
 8001012:	6819      	ldr	r1, [r3, #0]
 8001014:	1858      	adds	r0, r3, r1
 8001016:	42a0      	cmp	r0, r4
 8001018:	d10b      	bne.n	8001032 <_free_r+0x72>
 800101a:	6820      	ldr	r0, [r4, #0]
 800101c:	4401      	add	r1, r0
 800101e:	1858      	adds	r0, r3, r1
 8001020:	4282      	cmp	r2, r0
 8001022:	6019      	str	r1, [r3, #0]
 8001024:	d1de      	bne.n	8000fe4 <_free_r+0x24>
 8001026:	6810      	ldr	r0, [r2, #0]
 8001028:	6852      	ldr	r2, [r2, #4]
 800102a:	4401      	add	r1, r0
 800102c:	6019      	str	r1, [r3, #0]
 800102e:	605a      	str	r2, [r3, #4]
 8001030:	e7d8      	b.n	8000fe4 <_free_r+0x24>
 8001032:	d902      	bls.n	800103a <_free_r+0x7a>
 8001034:	230c      	movs	r3, #12
 8001036:	602b      	str	r3, [r5, #0]
 8001038:	e7d4      	b.n	8000fe4 <_free_r+0x24>
 800103a:	6820      	ldr	r0, [r4, #0]
 800103c:	1821      	adds	r1, r4, r0
 800103e:	428a      	cmp	r2, r1
 8001040:	bf01      	itttt	eq
 8001042:	6811      	ldreq	r1, [r2, #0]
 8001044:	6852      	ldreq	r2, [r2, #4]
 8001046:	1809      	addeq	r1, r1, r0
 8001048:	6021      	streq	r1, [r4, #0]
 800104a:	6062      	str	r2, [r4, #4]
 800104c:	605c      	str	r4, [r3, #4]
 800104e:	e7c9      	b.n	8000fe4 <_free_r+0x24>
 8001050:	bd38      	pop	{r3, r4, r5, pc}
 8001052:	bf00      	nop
 8001054:	200000a8 	.word	0x200000a8

08001058 <__malloc_lock>:
 8001058:	4770      	bx	lr

0800105a <__malloc_unlock>:
 800105a:	4770      	bx	lr

0800105c <_init>:
 800105c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800105e:	bf00      	nop
 8001060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001062:	bc08      	pop	{r3}
 8001064:	469e      	mov	lr, r3
 8001066:	4770      	bx	lr

08001068 <_fini>:
 8001068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800106a:	bf00      	nop
 800106c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800106e:	bc08      	pop	{r3}
 8001070:	469e      	mov	lr, r3
 8001072:	4770      	bx	lr
